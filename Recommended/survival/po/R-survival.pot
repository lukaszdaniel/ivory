msgid ""
msgstr ""
"Project-Id-Version: survival 2.44-1.1\n"
"POT-Creation-Date: 2019-04-08 21:35\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"



#: R/print.aareg.S: 0
#. R/print.aareg.S: gettextf("%d out of %d unique event times used", summ$n[2], x$n[3], domain = "R-survival")

msgid "%d out of %d unique event times used"
msgstr ""


#: R/survreg.R: 0
#. R/survreg.R: gettextf("%s distribution has a fixed scale, user specified value ignored", sQuote(dlist$name))

msgid "%s distribution has a fixed scale, user specified value ignored"
msgstr ""


#: R/survreg.R: 0
#. R/survreg.R: gettextf("%s distribution has no optional parameters", sQuote(dlist$name))

msgid "%s distribution has no optional parameters"
msgstr ""


#: R/dsurvreg.S: 0
#: R/survreg.R: 0
#. R/dsurvreg.S: gettextf("%s distribution was not found", sQuote(distribution))
#. R/dsurvreg.S: gettextf("%s distribution was not found", sQuote(distribution))
#. R/dsurvreg.S: gettextf("%s distribution was not found", sQuote(distribution))
#. R/survreg.R: gettextf("%s distribution was not found", sQuote(dist))

msgid "%s distribution was not found"
msgstr ""


#: R/anova.survreg.S: 0
#. R/anova.survreg.S: gettextf("%s distribution with %s link", sQuote(family.obj[1]), sQuote(family.obj[2]))

msgid "%s distribution with %s link"
msgstr ""


#: R/summary.ratetable.R: 0
#. R/summary.ratetable.R: gettextf("%s has levels of: %s", dimid[i], paste(att$dimnames[[i]], collapse = " "),     domain = "R-survival")
#. R/summary.ratetable.R: gettextf("%s has levels of: %s", dimid[i], paste(att$dimnames[[i]], collapse = " "),     domain = "R-survival")

msgid "%s has levels of: %s"
msgstr ""


#: R/summary.ratetable.R: 0
#. R/summary.ratetable.R: gettextf("%s ranges from %s to %s; with %d categories\n", dimid[i], format(min(att$cutpoints[[i]])),     format(max(att$cutpoints[[i]])), att$dim[i], domain = "R-survival")
#. R/summary.ratetable.R: gettextf("%s ranges from %s to %s; with %d categories", dimid[i], format(as.Date(min(att$cutpoints[[i]]),     origin = "1960/01/01")), format(as.Date(max(att$cutpoints[[i]]), origin = "1960/01/01")),     att$dim[i], domain = "R-survival")
#. R/summary.ratetable.R: gettextf("%s ranges from %s to %s; with %d categories\n", dimid[i], format(min(att$cutpoints[[i]])),     format(max(att$cutpoints[[i]])), att$dim[i], domain = "R-survival")

msgid "%s ranges from %s to %s; with %d categories"
msgstr ""


#: R/summary.ratetable.R: 0
#. R/summary.ratetable.R: gettextf("%s ranges from %s to %s; with %d categories linearly interpolated in %d steps per division\n",     dimid[i], format(min(att$cutpoints[[i]])), format(max(att$cutpoints[[i]])), att$dim[i],     att$factor[i], domain = "R-survival")

msgid "%s ranges from %s to %s; with %d categories linearly interpolated in %d steps per division"
msgstr ""


#: R/coxpenal.fit.R: 0
#: R/survpenal.fit.S: 0
#. R/coxpenal.fit.R: gettextf("%s was not matched", (cargs[[i]])[is.na(temp)])
#. R/survpenal.fit.S: gettextf("%s was not matched", sQuote(cargs[[i]][is.na(temp)]))

msgid "%s was not matched"
msgstr ""


#: R/tcut.S: 0
#. R/tcut.S: gettextf("%s+ thru %s", format(breaks[-length(breaks)]), format(breaks[-1]))

msgid "%s+ thru %s"
msgstr ""


#: R/Surv.R: 0
#: R/coxph.wtest.S: 0
#: R/coxph.wtest.S: 0
#: R/coxph.wtest.S: 0
#: R/frailty.brent.S: 0
#: R/neardate.R: 0
#: R/neardate.R: 0
#. R/Surv.R: gettextf("'%s' and '%s' arguments are of different lengths", "time", "event")
#. R/Surv.R: gettextf("'%s' and '%s' arguments are of different lengths", "time", "time2")
#. R/Surv.R: gettextf("'%s' and '%s' arguments are of different lengths", "time", "event")
#. R/Surv.R: gettextf("'%s' and '%s' arguments are of different lengths", "time", "time2")
#. R/coxph.wtest.S: gettextf("'%s' and '%s' arguments are of different lengths", "var", "b")
#. R/coxph.wtest.S: gettextf("'%s' and '%s' arguments are of different lengths", "var", "b")
#. R/coxph.wtest.S: gettextf("'%s' and '%s' arguments are of different lengths", "var", "b")
#. R/frailty.brent.S: gettextf("'%s' and '%s' arguments are of different lengths", "x", "y")
#. R/neardate.R: gettextf("'%s' and '%s' arguments are of different lengths", "id1", "y1")
#. R/neardate.R: gettextf("'%s' and '%s' arguments are of different lengths", "id2", "y2")

msgid "'%s' and '%s' arguments are of different lengths"
msgstr ""


#: R/tmerge.R: 0
#. R/tmerge.R: gettextf("'%s' and '%s' arguments must be the same length", "tstop", "id")
#. R/tmerge.R: gettextf("'%s' and '%s' arguments must be the same length", "tstart", "id")

msgid "'%s' and '%s' arguments must be the same length"
msgstr ""


#: R/cch.R: 0
#. R/cch.R: gettextf("'%s' argument ignored for method (%s)", "robust", method)
#. R/cch.R: gettextf("'%s' argument ignored for method (%s)", "stratum", method)

msgid "'%s' argument ignored for method (%s)"
msgstr ""


#: R/aareg.S: 0
#: R/aeqSurv.R: 0
#: R/anova.coxph.R: 0
#: R/anova.coxph.penal.R: 0
#: R/attrassign.R: 0
#: R/basehaz.R: 0
#: R/cox.zph.S: 0
#: R/coxph.rvar.S: 0
#: R/finegray.R: 0
#: R/is.ratetable.R: 0
#: R/lines.aareg.S: 0
#: R/plot.aareg.S: 0
#: R/predict.coxph.R: 0
#: R/print.aareg.S: 0
#: R/print.coxph.penal.S: 0
#: R/print.survdiff.S: 0
#: R/print.survexp.S: 0
#: R/print.survreg.penal.S: 0
#: R/pspline.R: 0
#: R/quantile.survfit.R: 0
#: R/summary.aareg.S: 0
#: R/summary.ratetable.R: 0
#: R/summary.survexp.R: 0
#: R/survfit.R: 0
#: R/survfit.R: 0
#: R/survfitKM.R: 0
#: R/survfitTurnbull.S: 0
#. R/aareg.S: gettextf("'%s' argument is not an object of class %s", "x", dQuote("aareg"))
#. R/aeqSurv.R: gettextf("'%s' argument is not an object of class %s", "x", dQuote("Surv"))
#. R/anova.coxph.R: gettextf("'%s' argument is not an object of class %s", "object", dQuote("coxph"))
#. R/anova.coxph.penal.R: gettextf("'%s' argument is not an object of class %s", "object", dQuote("coxph"))
#. R/attrassign.R: gettextf("'%s' argument is not an object of class %s", "tt", dQuote("terms"))
#. R/basehaz.R: gettextf("'%s' argument is not an object of class %s", "fit", dQuote("coxph"))
#. R/cox.zph.S: gettextf("'%s' argument is not an object of class %s", "fit", dQuote("coxph"))
#. R/coxph.rvar.S: gettextf("'%s' argument is not an object of class %s", "fit", dQuote("coxph"))
#. R/finegray.R: gettextf("'%s' argument is not an object of class %s", "formula", dQuote("Surv"))
#. R/is.ratetable.R: gettextf("'%s' argument is not an object of class %s", "x", dQuote("ratetable"))
#. R/lines.aareg.S: gettextf("'%s' argument is not an object of class %s", "x", dQuote("aareg"))
#. R/plot.aareg.S: gettextf("'%s' argument is not an object of class %s", "x", dQuote("aareg"))
#. R/predict.coxph.R: gettextf("'%s' argument is not an object of class %s", "object", dQuote("coxph"))
#. R/print.aareg.S: gettextf("'%s' argument is not an object of class %s", "x", dQuote("aareg"))
#. R/print.coxph.penal.S: gettextf("'%s' argument is not an object of class %s", "x", dQuote("coxph.penal"))
#. R/print.survdiff.S: gettextf("'%s' argument is not an object of class %s", "x", dQuote("survdiff"))
#. R/print.survexp.S: gettextf("'%s' argument is not an object of class %s", "x", dQuote("survexp"))
#. R/print.survreg.penal.S: gettextf("'%s' argument is not an object of class %s", "x", dQuote("servreg.penal"))
#. R/pspline.R: gettextf("'%s' argument is not an object of class %s", "x", dQuote("pspline"))
#. R/quantile.survfit.R: gettextf("'%s' argument is not an object of class %s", "x", dQuote("survfit"))
#. R/summary.aareg.S: gettextf("'%s' argument is not an object of class %s", "object", dQuote("aareg"))
#. R/summary.ratetable.R: gettextf("'%s' argument is not an object of class %s", "object", dQuote("ratetable"))
#. R/summary.survexp.R: gettextf("'%s' argument is not an object of class %s", "object", dQuote("survexp"))
#. R/survfit.R: gettextf("'%s' argument is not an object of class %s", "formula", dQuote("Surv"))
#. R/survfit.R: gettextf("'%s' argument is not an object of class %s", "y", dQuote("Surv"))
#. R/survfitKM.R: gettextf("'%s' argument is not an object of class %s", "y", dQuote("Surv"))
#. R/survfitTurnbull.S: gettextf("'%s' argument is not an object of class %s", "y", dQuote("Surv"))

msgid "'%s' argument is not an object of class %s"
msgstr ""


#: R/tmerge.R: 0
#. R/tmerge.R: gettextf("'%s' argument is not the same length as '%s' argument", argname[ii], "id")
#. R/tmerge.R: gettextf("'%s' argument is not the same length as '%s' argument", argname[ii], "id")

msgid "'%s' argument is not the same length as '%s' argument"
msgstr ""


#: R/coxpenal.fit.R: 0
#. R/coxpenal.fit.R: gettextf("'%s' argument is of length 0", "x")

msgid "'%s' argument is of length 0"
msgstr ""


#: R/residuals.survreg.R: 0
#: R/survfitCI.R: 0
#. R/residuals.survreg.R: gettextf("'%s' argument is of the wrong length", "collapse")
#. R/survfitCI.R: gettextf("'%s' argument is of the wrong length", "istate")

msgid "'%s' argument is of the wrong length"
msgstr ""


#: R/Surv.R: 0
#: R/clogit.R: 0
#: R/finegray.R: 0
#: R/neardate.R: 0
#: R/neardate.R: 0
#: R/neardate.R: 0
#: R/neardate.R: 0
#: R/pyears.R: 0
#: R/survSplit.R: 0
#: R/survfit.R: 0
#: R/survobrien.S: 0
#: R/survreg.R: 0
#: R/tmerge.R: 0
#: R/yates.R: 0
#: R/yates.R: 0
#: R/yates.R: 0
#. R/Surv.R: gettextf("'%s' argument is required", "time")
#. R/clogit.R: gettextf("'%s' argument is required", "formula")
#. R/finegray.R: gettextf("'%s' argument is required", "formula")
#. R/neardate.R: gettextf("'%s' argument is required", "id1")
#. R/neardate.R: gettextf("'%s' argument is required", "id2")
#. R/neardate.R: gettextf("'%s' argument is required", "y1")
#. R/neardate.R: gettextf("'%s' argument is required", "y2")
#. R/pyears.R: gettextf("'%s' argument is required", "formula")
#. R/survSplit.R: gettextf("'%s' argument is required", "data")
#. R/survfit.R: gettextf("'%s' argument is required", "formula")
#. R/survobrien.S: gettextf("'%s' argument is required", "formula")
#. R/survreg.R: gettextf("'%s' argument is required", "formula")
#. R/tmerge.R: gettextf("'%s' argument is required", "id")
#. R/yates.R: gettextf("'%s' argument is required", "fit")
#. R/yates.R: gettextf("'%s' argument is required", "term")
#. R/yates.R: gettextf("'%s' argument is required", "fit")

msgid "'%s' argument is required"
msgstr ""


#: R/tmerge.R: 0
#. R/tmerge.R: gettextf("'%s' argument must be NULL or a variable name", "tstartname")

msgid "'%s' argument must be NULL or a variable name"
msgstr ""


#: R/coxph.control.S: 0
#: R/tmerge.R: 0
#. R/coxph.control.S: gettextf("'%s' argument must be TRUE or FALSE", "timefix")
#. R/tmerge.R: gettextf("'%s' argument must be TRUE or FALSE", "na.rm")

msgid "'%s' argument must be TRUE or FALSE"
msgstr ""


#: R/survSplit.R: 0
#. R/survSplit.R: gettextf("'%s' argument must be a character string", "episode")

msgid "'%s' argument must be a character string"
msgstr ""


#: R/survfit.coxph.R: 0
#: R/tmerge.R: 0
#. R/survfit.coxph.R: gettextf("'%s' argument must be a data frame", "newdata")
#. R/survfit.coxph.R: gettextf("'%s' argument must be a data frame", "newdata")
#. R/tmerge.R: gettextf("'%s' argument must be a data frame", "data1")

msgid "'%s' argument must be a data frame"
msgstr ""


#: R/survfitTurnbull.S: 0
#. R/survfitTurnbull.S: gettextf("'%s' argument must be a factor", "x")

msgid "'%s' argument must be a factor"
msgstr ""


#: R/anova.coxphlist.S: 0
#. R/anova.coxphlist.S: gettextf("'%s' argument must be a list", "object")

msgid "'%s' argument must be a list"
msgstr ""


#: R/tmerge.R: 0
#. R/tmerge.R: gettextf("'%s' argument must be a number >= 0", "delay")

msgid "'%s' argument must be a number >= 0"
msgstr ""


#: R/print.pyears.R: 0
#. R/print.pyears.R: gettextf("'%s' argument must be a value > 0", "scale")

msgid "'%s' argument must be a value > 0"
msgstr ""


#: R/survSplit.R: 0
#: R/tmerge.R: 0
#: R/tmerge.R: 0
#. R/survSplit.R: gettextf("'%s' argument must be a variable name", "start")
#. R/survSplit.R: gettextf("'%s' argument must be a variable name", "id")
#. R/tmerge.R: gettextf("'%s' argument must be a variable name", "idname")
#. R/tmerge.R: gettextf("'%s' argument must be a variable name", "tstopname")

msgid "'%s' argument must be a variable name"
msgstr ""


#: R/survSplit.R: 0
#. R/survSplit.R: gettextf("'%s' argument must be a variable name in the data set", "event")
#. R/survSplit.R: gettextf("'%s' argument must be a variable name in the data set", "end")

msgid "'%s' argument must be a variable name in the data set"
msgstr ""


#: R/Surv.R: 0
#: R/survfitms.R: 0
#. R/Surv.R: gettextf("'%s' argument must be numeric", "time")
#. R/Surv.R: gettextf("'%s' argument must be numeric", "time")
#. R/Surv.R: gettextf("'%s' argument must be numeric", "time")
#. R/Surv.R: gettextf("'%s' argument must be numeric", "time2")
#. R/Surv.R: gettextf("'%s' argument must be numeric", "time2")
#. R/survfitms.R: gettextf("'%s' argument must be numeric", "times")

msgid "'%s' argument must be numeric"
msgstr ""


#: R/coxph.R: 0
#: R/model.matrix.coxph.R: 0
#: R/model.matrix.coxph.R: 0
#. R/coxph.R: gettextf("'%s' argument must contain a function or list of functions", "tt")
#. R/coxph.R: gettextf("'%s' argument must contain a function or list of functions", "tt")
#. R/model.matrix.coxph.R: gettextf("'%s' argument must contain a function or list of functions", "tt")
#. R/model.matrix.coxph.R: gettextf("'%s' argument must contain a function or list of functions", "tt")

msgid "'%s' argument must contain a function or list of functions"
msgstr ""


#: R/match.ratetable.R: 0
#. R/match.ratetable.R: gettextf("'%s' argument needed by the ratetable was not found in the data", dimid[is.na(ord)])

msgid "'%s' argument needed by the ratetable was not found in the data"
msgstr ""


#: R/is.ratetable.R: 0
#. R/is.ratetable.R: gettextf("'%s' component is not a list", "dimnames")
#. R/is.ratetable.R: gettextf("'%s' component is not a list", "cutpoints")

msgid "'%s' component is not a list"
msgstr ""


#: R/frailty.gamma.S: 0
#: R/frailty.gaussian.S: 0
#: R/frailty.t.S: 0
#. R/frailty.gamma.S: gettextf("'%s' option is set but '%s' argument is specified", "method != df", "df")
#. R/frailty.gamma.S: gettextf("'%s' option is set but '%s' argument is specified", "method != fixed",     "theta")
#. R/frailty.gaussian.S: gettextf("'%s' option is set but '%s' argument is specified", "method != fixed",     "theta")
#. R/frailty.t.S: gettextf("'%s' option is set but '%s' argument is specified", "method != fixed",     "theta")

msgid "'%s' option is set but '%s' argument is specified"
msgstr ""


#: R/frailty.gamma.S: 0
#: R/frailty.gaussian.S: 0
#: R/frailty.gaussian.S: 0
#: R/frailty.t.S: 0
#: R/frailty.t.S: 0
#. R/frailty.gamma.S: gettextf("'%s' option is set but no '%s' argument", "method = df", "df")
#. R/frailty.gamma.S: gettextf("'%s' option is set but no '%s' argument", "method = fixed", "theta")
#. R/frailty.gaussian.S: gettextf("'%s' option is set but no '%s' argument", "method = df", "df")
#. R/frailty.gaussian.S: gettextf("'%s' option is set but no '%s' argument", "method = fixed", "theta")
#. R/frailty.t.S: gettextf("'%s' option is set but no '%s' argument", "method = df", "df")
#. R/frailty.t.S: gettextf("'%s' option is set but no '%s' argument", "method = fixed", "theta")

msgid "'%s' option is set but no '%s' argument"
msgstr ""


#: R/survSplit.R: 0
#. R/survSplit.R: gettextf("'%s' or '%s' and '%s arguments are required", "formula", "end", "event")
#. R/survSplit.R: gettextf("'%s' or '%s' and '%s arguments are required", "formula", "end", "event")

msgid "'%s' or '%s' and '%s arguments are required"
msgstr ""


#: R/residuals.coxph.S: 0
#. R/residuals.coxph.S: gettextf("'%s' residuals are not available for the exact method", otype)

msgid "'%s' residuals are not available for the exact method"
msgstr ""


#: R/residuals.coxph.null.S: 0
#. R/residuals.coxph.null.S: gettextf("'%s' residuals are not defined for a null model", type)

msgid "'%s' residuals are not defined for a null model"
msgstr ""


#: R/aeqSurv.R: 0
#. R/aeqSurv.R: stop("'aeqSurv()' exception; an interval has effective length 0")

msgid "'aeqSurv()' exception; an interval has effective length 0"
msgstr ""


#: R/tcut.S: 0
#. R/tcut.S: stop("'breaks' argument must specify at least one interval")

msgid "'breaks' argument must specify at least one interval"
msgstr ""


#: R/cch.R: 0
#. R/cch.R: stop("'cohort.size' and 'stratum' levels lengths do not match")

msgid "'cohort.size' and 'stratum' levels lengths do not match"
msgstr ""


#: R/pspline.R: 0
#. R/pspline.R: stop("'combine' argument must be an increasing vector of positive integers")

msgid "'combine' argument must be an increasing vector of positive integers"
msgstr ""


#: R/survSplit.R: 0
#. R/survSplit.R: stop("'cut' argument must be a vector of finite numbers")

msgid "'cut' argument must be a vector of finite numbers"
msgstr ""


#: R/tmerge.R: 0
#. R/tmerge.R: stop("'data1' does not match its own 'tname' attribute")

msgid "'data1' does not match its own 'tname' attribute"
msgstr ""


#: R/tmerge.R: 0
#. R/tmerge.R: stop("'data1', 'data2', and 'id' arguments are required")

msgid "'data1', 'data2', and 'id' arguments are required"
msgstr ""


#: R/survregDtest.S: 0
#. R/survregDtest.S: gettext("'dtrans()' component must be a 1-1 function")

msgid "'dtrans()' component must be a 1-1 function"
msgstr ""


#: R/finegray.R: 0
#. R/finegray.R: stop("'etype' argument has a state that is not in the data")

msgid "'etype' argument has a state that is not in the data"
msgstr ""


#: R/survfit.R: 0
#. R/survfit.R: stop("'etype' argument incompatable with survival type")

msgid "'etype' argument incompatable with survival type"
msgstr ""


#: R/survdiff.S: 0
#. R/survdiff.S: stop("'formula' argument is not a formula")

msgid "'formula' argument is not a formula"
msgstr ""


#: R/tmerge.R: 0
#. R/tmerge.R: stop("'id' has values not in data1")

msgid "'id' has values not in data1"
msgstr ""


#: R/survfit.coxph.R: 0
#. R/survfit.coxph.R: stop("'id=NULL' is an invalid argument")

msgid "'id=NULL' is an invalid argument"
msgstr ""


#: R/survfit.coxph.R: 0
#. R/survfit.coxph.R: stop("'individual=TRUE' is only valid for counting process data")

msgid "'individual=TRUE' is only valid for counting process data"
msgstr ""


#: R/survfitCI.R: 0
#. R/survfitCI.R: stop("'istate' argument should be a vector of positive integers or a factor")

msgid "'istate' argument should be a vector of positive integers or a factor"
msgstr ""


#: R/coxph.R: 0
#. R/coxph.R: stop("'model=TRUE' not supported for models with tt terms")

msgid "'model=TRUE' not supported for models with tt terms"
msgstr ""


#: R/pspline.R: 0
#. R/pspline.R: gettextf("'nterm' argument is too small for df=%s", df)

msgid "'nterm' argument is too small for df=%s"
msgstr ""


#: R/anova.coxphlist.S: 0
#. R/anova.coxphlist.S: stop("'object' argument must be a list of objects of class \"coxph\"")

msgid "'object' argument must be a list of objects of class \"coxph\""
msgstr ""


#: R/coxpenal.fit.R: 0
#: R/survcallback.S: 0
#: R/survpenal.fit.S: 0
#. R/coxpenal.fit.R: stop("'pcols' and 'assign' arguments disagree")
#. R/survcallback.S: stop("'pcols' and 'assign' arguments disagree")
#. R/survpenal.fit.S: stop("'pcols' and 'assign' arguments disagree")

msgid "'pcols' and 'assign' arguments disagree"
msgstr ""


#: R/cch.R: 0
#. R/cch.R: warning("'robust' argument is not implemented for stratified analysis")

msgid "'robust' argument is not implemented for stratified analysis"
msgstr ""


#: R/survexp.R: 0
#. R/survexp.R: warning("'se.fit' value ignored")

msgid "'se.fit' value ignored"
msgstr ""


#: R/survfitCI.R: 0
#. R/survfitCI.R: stop("'start.time' has removed all observations")

msgid "'start.time' has removed all observations"
msgstr ""


#: R/survfitms.R: 0
#. R/survfitms.R: stop("'summary.survfit()' function can only be used for objects of class \"survfit\"")

msgid "'summary.survfit()' function can only be used for objects of class \"survfit\""
msgstr ""


#: R/survfitms.R: 0
#. R/survfitms.R: stop("'summary.survfitms()' can only be used for objects of class \"survfitms\"")

msgid "'summary.survfitms()' can only be used for objects of class \"survfitms\""
msgstr ""


#: R/survfitTurnbull.S: 0
#. R/survfitTurnbull.S: stop("'survfitTurnbull()' is not appropriate for counting process data")

msgid "'survfitTurnbull()' is not appropriate for counting process data"
msgstr ""


#: R/Surv.R: 0
#. R/Surv.R: stop("'time' (start time) and 'event' arguments are of different lengths")

msgid "'time' (start time) and 'event' arguments are of different lengths"
msgstr ""


#: R/Surv.R: 0
#. R/Surv.R: stop("'time' and 'time2' arguments (start and stop time) are of different lengths")

msgid "'time' and 'time2' arguments (start and stop time) are of different lengths"
msgstr ""


#: R/Surv.R: 0
#. R/Surv.R: gettextf("'time' argument (start time) must be numeric", "time")

msgid "'time' argument (start time) must be numeric"
msgstr ""


#: R/Surv.R: 0
#. R/Surv.R: gettextf("'time2' argument (stop time) must be numeric", "time2")

msgid "'time2' argument (stop time) must be numeric"
msgstr ""


#: R/coxph.control.S: 0
#. R/coxph.control.S: stop("'toler.inf' argument must be >0")

msgid "'toler.inf' argument must be >0"
msgstr ""


#: R/survregDtest.S: 0
#. R/survregDtest.S: gettext("'trans' and 'itrans' components must be inverses of each other")

msgid "'trans' and 'itrans' components must be inverses of each other"
msgstr ""


#: R/survobrien.S: 0
#. R/survobrien.S: stop("'transform' function must be 1 to 1")

msgid "'transform' function must be 1 to 1"
msgstr ""


#: R/tmerge.R: 0
#. R/tmerge.R: stop("'tstart' and 'tstop' arguments only apply to the first call")

msgid "'tstart' and 'tstop' arguments only apply to the first call"
msgstr ""


#: R/tmerge.R: 0
#. R/tmerge.R: stop("'tstart' must be < 'tstop'")
#. R/tmerge.R: stop("'tstart' must be < 'tstop'")
#. R/tmerge.R: stop("'tstart' must be < 'tstop'")

msgid "'tstart' must be < 'tstop'"
msgstr ""


#: R/is.ratetable.R: 0
#. R/is.ratetable.R: gettext("'type' attribute must be 1, 2, 3, or 4")

msgid "'type' attribute must be 1, 2, 3, or 4"
msgstr ""


#: R/coxph.wtest.S: 0
#. R/coxph.wtest.S: stop("'var' argument is not a square matrix")

msgid "'var' argument is not a square matrix"
msgstr ""


#: R/agexact.fit.R: 0
#: R/coxexact.fit.R: 0
#: R/survexp.fit.R: 0
#: R/survpenal.fit.S: 0
#: R/survreg.fit.R: 0
#. R/agexact.fit.R: stop("'x' argument is not a matrix")
#. R/coxexact.fit.R: stop("'x' argument is not a matrix")
#. R/survexp.fit.R: stop("'x' argument is not a matrix")
#. R/survpenal.fit.S: stop("'x' argument is not a matrix")
#. R/survreg.fit.R: stop("'x' argument is not a matrix")

msgid "'x' argument is not a matrix"
msgstr ""


#: R/survexp.fit.R: 0
#. R/survexp.fit.R: stop("'x' matrix does not match the rate table")

msgid "'x' matrix does not match the rate table"
msgstr ""


#: R/neardate.R: 0
#. R/neardate.R: stop("'y1' and 'y2' arguments must be sortable")

msgid "'y1' and 'y2' arguments must be sortable"
msgstr ""


#: R/survSplit.R: 0
#. R/survSplit.R: stop("'zero' parameter must be less than any observed times")

msgid "'zero' parameter must be less than any observed times"
msgstr ""


#: R/print.summary.survreg.S: 0
#. R/print.summary.survreg.S: gettext("(Loglikelihood assumes independent observations)", domain = "R-survival")

msgid "(Loglikelihood assumes independent observations)"
msgstr ""


#: R/print.summary.coxph.S: 0
#. R/print.summary.coxph.S: gettext("  (Note: the likelihood ratio and score tests assume independence of\n     observations within a cluster, the Wald and robust score tests do not).",     domain = "R-survival")

msgid "(Note: the likelihood ratio and score tests assume independence of\n     observations within a cluster, the Wald and robust score tests do not)."
msgstr ""


#: R/finegray.R: 0
#. R/finegray.R: stop("(start, stop] data requires a subject id")

msgid "(start, stop] data requires a subject id"
msgstr ""


#: R/print.survfit.S: 0
#. R/print.survfit.S: gettextf("    * restricted mean with upper limit = %s", format(temp$end.time[1]),     domain = "R-survival")

msgid "* restricted mean with upper limit = %s"
msgstr ""


#: R/print.survfit.S: 0
#. R/print.survfit.S: gettext("   * restricted mean with variable upper limit\n", domain = "R-survival")

msgid "* restricted mean with variable upper limit"
msgstr ""


#: R/survfitms.R: 0
#. R/survfitms.R: gettextf("   *mean time in state, restricted (max time = %s)\n", format(etime, ...),     domain = "R-survival")

msgid "*mean time in state, restricted (max time = %s)"
msgstr ""


#: R/survfitms.R: 0
#. R/survfitms.R: gettextf("   *mean time in state, restricted (per curve cutoff)\n", domain = "R-survival")

msgid "*mean time in state, restricted (per curve cutoff)"
msgstr ""


#: R/coxph.fit.R: 0
#: R/parsecovar.R: 0
#. R/coxph.fit.R: paste((1:nvar)[infs], collapse = ",")
#. R/parsecovar.R: paste(ff[is.na(index)], collapse = ", ")

msgid ","
msgstr ""


#: R/coxph.fit.R: 0
#. R/coxph.fit.R: paste("Loglik converged before variable ", paste((1:nvar)[infs], collapse = ","),     "; coefficient may be infinite. ")

msgid "; coefficient may be infinite."
msgstr ""


#: R/coxph.R: 0
#. R/coxph.R: stop("A formula argument is required")

msgid "A formula argument is required"
msgstr ""


#: R/match.ratetable.R: 0
#. R/match.ratetable.R: stop("A ratetable argument appears twice in the data")

msgid "A ratetable argument appears twice in the data"
msgstr ""


#: R/aareg.S: 0
#. R/aareg.S: gettextf("Aalen model doesn't support \"%s\" survival data", type)

msgid "Aalen model doesn't support \"%s\" survival data"
msgstr ""


#: R/ratetableold.R: 0
#. R/ratetableold.R: gettextf("Aguments do not all have the same length (arg %d)", i)

msgid "Aguments do not all have the same length (arg %d)"
msgstr ""


#: R/anova.coxph.R: 0
#: R/anova.coxphlist.S: 0
#: R/anova.survreg.S: 0
#: R/anova.survreglist.S: 0
#. R/anova.coxph.R: gettext("Analysis of Deviance Table")
#. R/anova.coxphlist.S: gettext("Analysis of Deviance Table")
#. R/anova.survreg.S: gettext("Analysis of Deviance Table")
#. R/anova.survreglist.S: gettext("Analysis of Deviance Table")

msgid "Analysis of Deviance Table"
msgstr ""


#: R/anova.coxph.penal.R: 0
#. R/anova.coxph.penal.R: gettextf("Analysis of Deviance Table\n Cox model: response is %s\nTerms added sequentially (first to last)\n",     paste(deparse(object$terms[[2]]), sep = "", collapse = ""), domain = "R-survival")

msgid "Analysis of Deviance Table\n Cox model: response is %s\nTerms added sequentially (first to last)"
msgstr ""


#: R/coxph.R: 0
#. R/coxph.R: gettextf("Argument %s not matched", names(extraArgs)[indx == 0L])

msgid "Argument %s not matched"
msgstr ""


#: R/plot.cox.zph.S: 0
#. R/plot.cox.zph.S: gettextf("Beta(t) for %s", dimnames(yy)[[2]])

msgid "Beta(t) for %s"
msgstr ""


#: R/cch.R: 0
#: R/print.aareg.S: 0
#: R/print.coxph.S: 0
#: R/print.coxph.null.S: 0
#: R/print.coxph.penal.S: 0
#: R/print.pyears.R: 0
#: R/print.summary.coxph.S: 0
#: R/print.summary.coxph.penal.S: 0
#: R/print.summary.survexp.R: 0
#: R/print.summary.survfit.S: 0
#: R/print.summary.survfitms.S: 0
#: R/print.summary.survreg.S: 0
#: R/print.summary.survreg.S: 0
#: R/print.survdiff.S: 0
#: R/print.survexp.S: 0
#: R/print.survfit.S: 0
#: R/print.survreg.S: 0
#: R/print.survreg.penal.S: 0
#: R/survConcordance.R: 0
#: R/survfitms.R: 0
#. R/cch.R: gettext("Call: ", domain = "R-survival")
#. R/cch.R: gettext("Call: ", domain = "R-survival")
#. R/print.aareg.S: gettext("Call:", domain = "R-survival")
#. R/print.coxph.S: gettext("Call:", domain = "R-survival")
#. R/print.coxph.null.S: gettext("Call: ", domain = "R-survival")
#. R/print.coxph.penal.S: gettext("Call:", domain = "R-survival")
#. R/print.pyears.R: gettext("Call:", domain = "R-survival")
#. R/print.summary.coxph.S: gettext("Call:", domain = "R-survival")
#. R/print.summary.coxph.penal.S: gettext("Call:", domain = "R-survival")
#. R/print.summary.survexp.R: gettext("Call: ", domain = "R-survival")
#. R/print.summary.survfit.S: gettext("Call: ", domain = "R-survival")
#. R/print.summary.survfitms.S: gettext("Call: ", domain = "R-survival")
#. R/print.summary.survreg.S: gettext("Call:", domain = "R-survival")
#. R/print.summary.survreg.S: gettext("Call:", domain = "R-survival")
#. R/print.survdiff.S: gettext("Call:", domain = "R-survival")
#. R/print.survexp.S: gettext("Call:", domain = "R-survival")
#. R/print.survfit.S: gettext("Call: ", domain = "R-survival")
#. R/print.survreg.S: gettext("Call:", domain = "R-survival")
#. R/print.survreg.penal.S: gettext("Call:", domain = "R-survival")
#. R/survConcordance.R: gettext("Call:", domain = "R-survival")
#. R/survfitms.R: gettext("Call:", domain = "R-survival")

msgid "Call:"
msgstr ""


#: R/pyears.R: 0
#: R/survexp.R: 0
#. R/pyears.R: stop("Can have only 1 'ratetable()' call in a formula")
#. R/survexp.R: stop("Can have only 1 'ratetable()' call in a formula")

msgid "Can have only 1 'ratetable()' call in a formula"
msgstr ""


#: R/agreg.fit.R: 0
#. R/agreg.fit.R: stop("Can't fit a Cox model with 0 failures")

msgid "Can't fit a Cox model with 0 failures"
msgstr ""


#: R/survexp.R: 0
#. R/survexp.R: stop("Can't use tcut variables in expected survival")

msgid "Can't use tcut variables in expected survival"
msgstr ""


#: R/pyears.R: 0
#. R/pyears.R: stop("Cannot deal with models that contain an offset")

msgid "Cannot deal with models that contain an offset"
msgstr ""


#: R/survfit.coxph.R: 0
#. R/survfit.coxph.R: gettextf("Cannot handle \"%s\" type survival data", type)

msgid "Cannot handle \"%s\" type survival data"
msgstr ""


#: R/survfitCI.R: 0
#. R/survfitCI.R: stop("Cannot have duplicate id values with (time, status) data")

msgid "Cannot have duplicate id values with (time, status) data"
msgstr ""


#: R/cch.R: 0
#. R/cch.R: gettextf("Case-cohort analysis, x$method, %s with subcohort of %s from cohort of %s",     x$method, x$subcohort.size, x$cohort.size, domain = "R-survival")
#. R/cch.R: gettextf("Case-cohort analysis, x$method, %s with subcohort of %s from cohort of %s",     x$method, x$subcohort.size, x$cohort.size, domain = "R-survival")

msgid "Case-cohort analysis, x$method, %s with subcohort of %s from cohort of %s"
msgstr ""


#: R/print.summary.survreg.S: 0
#: R/print.survdiff.S: 0
#: R/print.survreg.S: 0
#. R/print.summary.survreg.S: gettextf("Chisq= %s on %d degrees of freedom, p= %s", format(round(x$chi, 2)), round(df,     1), format(signif(pchisq(x$chi, df, lower.tail = FALSE), 2)), domain = "R-survival")
#. R/print.survdiff.S: gettext("Chisq= %s on %d degrees of freedom, p= %s", domain = "R-survival")
#. R/print.survreg.S: gettextf("Chisq= %s on %d degrees of freedom, p= %s", format(round(chi, 2)), round(df,     1), format.pval(pchisq(chi, df, lower.tail = FALSE), digits = pdig), domain = "R-survival")

msgid "Chisq= %s on %d degrees of freedom, p= %s"
msgstr ""


#: R/print.aareg.S: 0
#: R/summary.aareg.S: 0
#. R/print.aareg.S: gettext("Chisq= %s on %d df, p=%s; test weights= %s", domain = "R-survival")
#. R/summary.aareg.S: gettextf("Chisq= %s on %d df, p=%s; test weights= %s", format(round(chi, 2)), df,     format.pval(pchisq(chi, df, lower.tail = FALSE), digits = pdig), x$test, domain = "R-survival")

msgid "Chisq= %s on %d df, p=%s; test weights= %s"
msgstr ""


#: R/concordance.R: 0
#: R/coxph.R: 0
#. R/concordance.R: stop("Cluster can not be used in an interaction")
#. R/coxph.R: stop("Cluster can not be used in an interaction")

msgid "Cluster can not be used in an interaction"
msgstr ""


#: R/cch.R: 0
#: R/print.survreg.S: 0
#. R/cch.R: gettext("Coefficients:", domain = "R-survival")
#. R/cch.R: gettext("Coefficients:", domain = "R-survival")
#. R/print.survreg.S: gettext("Coefficients:", domain = "R-survival")

msgid "Coefficients:"
msgstr ""


#: R/predict.coxph.R: 0
#. R/predict.coxph.R: stop("Collapse vector is of the wrong length")

msgid "Collapse vector is of the wrong length"
msgstr ""


#: R/predict.coxph.penal.S: 0
#. R/predict.coxph.penal.S: stop("Collapse vector is the wrong length")

msgid "Collapse vector is the wrong length"
msgstr ""


#: R/print.summary.coxph.S: 0
#: R/print.summary.coxph.penal.S: 0
#: R/survConcordance.R: 0
#. R/print.summary.coxph.S: gettextf("Concordance = %s (se = %s)", format(round(x$concordance[1], 3)), format(round(x$concordance[2],     3)), domain = "R-survival")
#. R/print.summary.coxph.penal.S: gettextf("Concordance = %s (se = %s)", format(round(x$concordance[1], 3)), format(round(x$concordance[2],     3)), domain = "R-survival")
#. R/survConcordance.R: gettextf("Concordance = %s (se = %s)", format(x$concordance), format(x$std.err),     domain = "R-survival")

msgid "Concordance = %s (se = %s)"
msgstr ""


#: R/print.summary.survreg.S: 0
#. R/print.summary.survreg.S: gettext("Correlation of Coefficients:", domain = "R-survival")

msgid "Correlation of Coefficients:"
msgstr ""


#: R/survfit.coxph.R: 0
#. R/survfit.coxph.R: stop("Could not reconstruct the y vector")
#. R/survfit.coxph.R: stop("Could not reconstruct the y vector")

msgid "Could not reconstruct the y vector"
msgstr ""


#: R/coxph.R: 0
#. R/coxph.R: gettextf("Cox model doesn't support \"%s\" survival data", type)

msgid "Cox model doesn't support \"%s\" survival data"
msgstr ""


#: R/anova.coxph.R: 0
#: R/anova.coxphlist.S: 0
#. R/anova.coxph.R: gettextf("Cox model: response is %s", deparse(object$terms[[2]]), domain = "R-survival")
#. R/anova.coxphlist.S: gettextf("Cox model: response is %s", responses[1])

msgid "Cox model: response is %s"
msgstr ""


#: R/print.coxph.S: 0
#: R/print.coxph.penal.S: 0
#. R/print.coxph.S: gettext(" Coxph failed. ", domain = "R-survival")
#. R/print.coxph.penal.S: gettext(" Coxph failed. ", domain = "R-survival")

msgid "Coxph failed."
msgstr ""


#: R/print.summary.coxph.S: 0
#: R/print.summary.coxph.penal.S: 0
#. R/print.summary.coxph.S: gettext(" Coxreg failed. ", domain = "R-survival")
#. R/print.summary.coxph.penal.S: gettext(" Coxreg failed. ", domain = "R-survival")

msgid "Coxreg failed."
msgstr ""


#: R/predict.coxph.R: 0
#. R/predict.coxph.R: stop("Data is not the same size as it was in the original fit")

msgid "Data is not the same size as it was in the original fit"
msgstr ""


#: R/print.coxph.penal.S: 0
#: R/print.summary.coxph.penal.S: 0
#: R/print.survreg.penal.S: 0
#. R/print.coxph.penal.S: gettextf("Degrees of freedom for terms= %s", paste(format(round(x$df, 1)), collapse = " "),     domain = "R-survival")
#. R/print.summary.coxph.penal.S: gettextf("Degrees of freedom for terms= %s", paste(format(round(x$df, 1)), collapse = " "),     domain = "R-survival")
#. R/print.survreg.penal.S: gettextf("Degrees of freedom for terms= %s", paste(format(round(x$df, 1)), collapse = " "),     domain = "R-survival")

msgid "Degrees of freedom for terms= %s"
msgstr ""


#: R/print.survdiff.S: 0
#. R/print.survdiff.S: gettext("Expected")
#. R/print.survdiff.S: gettext("Expected")

msgid "Expected"
msgstr ""


#: R/cch.R: 0
#. R/cch.R: gettextf("Exposure-stratified case-cohort analysis, %s method.", x$method, domain = "R-survival")
#. R/cch.R: gettextf("Exposure-stratified case-cohort analysis, %s method.", x$method, domain = "R-survival")

msgid "Exposure-stratified case-cohort analysis, %s method."
msgstr ""


#: R/survfit.coxph.R: 0
#. R/survfit.coxph.R: stop("Failed to reconstruct the original data set")

msgid "Failed to reconstruct the original data set"
msgstr ""


#: R/finegray.R: 0
#. R/finegray.R: stop("Fine-Gray model requires a multi-state survival")

msgid "Fine-Gray model requires a multi-state survival"
msgstr ""


#: R/pyears.R: 0
#. R/pyears.R: stop("Follow-up time must appear in the formula")

msgid "Follow-up time must appear in the formula"
msgstr ""


#: R/survexp.R: 0
#. R/survexp.R: stop("Illegal response value")

msgid "Illegal response value"
msgstr ""


#: R/survfit.coxph.R: 0
#. R/survfit.coxph.R: stop("Individual survival but no variables")

msgid "Individual survival but no variables"
msgstr ""


#: R/survfit.R: 0
#. R/survfit.R: stop("Interaction terms are not valid for this function")

msgid "Interaction terms are not valid for this function"
msgstr ""


#: R/cipoisson.R: 0
#. R/cipoisson.R: stop("Invalid method")

msgid "Invalid method"
msgstr ""


#: R/survConcordance.fit.R: 0
#. R/survConcordance.fit.R: stop("Invalid survival type for concordance")

msgid "Invalid survival type for concordance"
msgstr ""


#: R/survexp.R: 0
#. R/survexp.R: stop("Invalid time point requested")

msgid "Invalid time point requested"
msgstr ""


#: R/plot.cox.zph.S: 0
#. R/plot.cox.zph.S: stop("Invalid variable requested")

msgid "Invalid variable requested"
msgstr ""


#: R/survfitTurnbull.S: 0
#. R/survfitTurnbull.S: gettextf("Iteration = %d", iter, domain = "R-survival")

msgid "Iteration = %d"
msgstr ""


#: R/print.coxph.penal.S: 0
#: R/print.summary.coxph.penal.S: 0
#: R/print.survreg.penal.S: 0
#. R/print.coxph.penal.S: gettextf("Iterations: %d outer, %d Newton-Raphson", x$iter[1], x$iter[2], domain = "R-survival")
#. R/print.summary.coxph.penal.S: gettextf("Iterations: %d outer, %d Newton-Raphson", x$iter[1], x$iter[2], domain = "R-survival")
#. R/print.survreg.penal.S: gettextf("Iterations: %d outer, %d Newton-Raphson", x$iter[1], x$iter[2], domain = "R-survival")

msgid "Iterations: %d outer, %d Newton-Raphson"
msgstr ""


#: R/print.coxph.S: 0
#: R/print.summary.coxph.S: 0
#: R/print.summary.coxph.penal.S: 0
#: R/print.survreg.penal.S: 0
#. R/print.coxph.S: gettextf("Likelihood ratio test = %s on %s df, p=%s", format(round(logtest, 2)),     df, format.pval(pchisq(logtest, df, lower.tail = FALSE), digits = digits), domain = "R-survival")
#. R/print.summary.coxph.S: gettextf("Likelihood ratio test = %s on %s df, p=%s", format(round(x$logtest["test"],     2)), x$logtest["df"], format.pval(x$waldtest["pvalue"], digits = pdig), domain = "R-survival")
#. R/print.summary.coxph.penal.S: gettextf("Likelihood ratio test = %s on %s df, p=%s", format(round(logtest, 2)),     df, format.pval(pchisq(logtest, df, lower.tail = FALSE), digits = pdig), domain = "R-survival")
#. R/print.survreg.penal.S: gettextf("Likelihood ratio test = %s on %s df, p=%s", format(round(logtest, 2)),     round(df, 1), format.pval(pchisq(logtest, df, lower.tail = FALSE), digits = pdig),     domain = "R-survival")

msgid "Likelihood ratio test = %s on %s df, p=%s"
msgstr ""


#: R/print.coxph.penal.S: 0
#. R/print.coxph.penal.S: gettextf("Likelihood ratio test = %s on %s df, p=%s\nn=%d\n", format(round(logtest,     2)), format(round(df, 2)), format.pval(pchisq(logtest, df, lower.tail = FALSE),     digits = pdig), x$n, domain = "R-survival")
#. R/print.coxph.penal.S: gettextf("Likelihood ratio test = %s on %s df, p=%s\nn=%d\n", format(round(logtest,     2)), format(round(df, 2)), format.pval(pchisq(logtest, df, lower.tail = FALSE),     digits = pdig), x$n, domain = "R-survival")

msgid "Likelihood ratio test = %s on %s df, p=%s\nn=%d"
msgstr ""


#: R/print.coxph.penal.S: 0
#. R/print.coxph.penal.S: gettextf("Likelihood ratio test = %s on %s df, p=%s\nn=%d, number of events=%d\n",     format(round(logtest, 2)), format(round(df, 2)), format.pval(pchisq(logtest,         df, lower.tail = FALSE), digits = pdig), x$n, x$nevent, domain = "R-survival")
#. R/print.coxph.penal.S: gettextf("Likelihood ratio test = %s on %s df, p=%s\nn=%d, number of events=%d\n",     format(round(logtest, 2)), format(round(df, 2)), format.pval(pchisq(logtest,         df, lower.tail = FALSE), digits = pdig), x$n, x$nevent, domain = "R-survival")

msgid "Likelihood ratio test = %s on %s df, p=%s\nn=%d, number of events=%d"
msgstr ""


#: R/coxph.fit.R: 0
#. R/coxph.fit.R: paste("Loglik converged before variable ", paste((1:nvar)[infs], collapse = ","),     "; coefficient may be infinite. ")

msgid "Loglik converged before variable"
msgstr ""


#: R/agexact.fit.R: 0
#: R/agreg.fit.R: 0
#: R/coxexact.fit.R: 0
#. R/agexact.fit.R: gettextf("Loglik converged before variable %s; beta may be infinite.", paste((seq_len(nvar))[infs],     collapse = ", "), domain = "R-survival")
#. R/agreg.fit.R: gettextf("Loglik converged before variable %s; beta may be infinite.", paste(seq_len(nvar)[infs],     collapse = ", "))
#. R/coxexact.fit.R: gettextf("Loglik converged before variable %s; beta may be infinite.", paste(seq_len(nvar)[infs],     collapse = ", "), domain = "R-survival")

msgid "Loglik converged before variable %s; beta may be infinite."
msgstr ""


#: R/print.summary.survreg.S: 0
#: R/print.survreg.S: 0
#. R/print.summary.survreg.S: gettextf("Loglik(model)= %s   Loglik(intercept only)= %s", format(round(x$loglik[2],     1)), format(round(x$loglik[1], 1)), domain = "R-survival")
#. R/print.survreg.S: gettextf("Loglik(model)= %s   Loglik(intercept only)= %s", format(round(x$loglik[2],     1)), format(round(x$loglik[1], 1)), domain = "R-survival")

msgid "Loglik(model)= %s   Loglik(intercept only)= %s"
msgstr ""


#: R/anova.coxphlist.S: 0
#. R/anova.coxphlist.S: gettextf(" Model %s:", format(seq_len(nmodels)))

msgid "Model %s:"
msgstr ""


#: R/survfit.coxph.R: 0
#. R/survfit.coxph.R: stop("Models with strata by covariate interaction terms require newdata")

msgid "Models with strata by covariate interaction terms require newdata"
msgstr ""


#: R/pyears.R: 0
#: R/survexp.R: 0
#. R/pyears.R: stop("Negative follow up time")
#. R/survexp.R: stop("Negative follow up time")

msgid "Negative follow up time"
msgstr ""


#: R/pyears.R: 0
#. R/pyears.R: stop("Negative survival time")

msgid "Negative survival time"
msgstr ""


#: R/predict.coxph.R: 0
#. R/predict.coxph.R: stop("New data has a different survival type than the model")

msgid "New data has a different survival type than the model"
msgstr ""


#: R/predict.coxph.R: 0
#. R/predict.coxph.R: stop("New data has a strata not found in the original model")

msgid "New data has a strata not found in the original model"
msgstr ""


#: R/survfit.coxph.R: 0
#. R/survfit.coxph.R: stop("New data set has strata levels not found in the original")

msgid "New data set has strata levels not found in the original"
msgstr ""


#: R/survfit.coxph.R: 0
#. R/survfit.coxph.R: stop("Newdata cannot be used when a model has frailty terms")

msgid "Newdata cannot be used when a model has frailty terms"
msgstr ""


#: R/concordance.R: 0
#. R/concordance.R: stop("No (non-missing) observations")

msgid "No (non-missing) observations"
msgstr ""


#: R/pyears.R: 0
#. R/pyears.R: stop("No rate table specified")

msgid "No rate table specified"
msgstr ""


#: R/summary.survreg.S: 0
#. R/summary.survreg.S: gettext("   No summary provided\n")

msgid "No summary provided"
msgstr ""


#: R/neardate.R: 0
#. R/neardate.R: stop("No valid entries in data set 2")
#. R/neardate.R: stop("No valid entries in data set 2")

msgid "No valid entries in data set 2"
msgstr ""


#: R/print.coxph.null.S: 0
#: R/print.summary.coxph.S: 0
#. R/print.coxph.null.S: gettext("Null model", domain = "R-survival")
#. R/print.summary.coxph.S: gettext("Null model", domain = "R-survival")

msgid "Null model"
msgstr ""


#: R/print.summary.survreg.S: 0
#. R/print.summary.survreg.S: gettext("Number of Newton-Raphson Iterations: ", domain = "R-survival")

msgid "Number of Newton-Raphson Iterations:"
msgstr ""


#: R/print.survdiff.S: 0
#. R/print.survdiff.S: gettext("Observed")
#. R/print.survdiff.S: gettext("Observed")

msgid "Observed"
msgstr ""


#: R/survfit.R: 0
#. R/survfit.R: warning("Offset term ignored")

msgid "Offset term ignored"
msgstr ""


#: R/concordance.R: 0
#: R/survConcordance.R: 0
#. R/concordance.R: stop("Offset terms not allowed")
#. R/survConcordance.R: stop("Offset terms not allowed")

msgid "Offset terms not allowed"
msgstr ""


#: R/concordance.R: 0
#: R/survConcordance.R: 0
#. R/concordance.R: stop("Only one predictor variable allowed")
#. R/survConcordance.R: stop("Only one predictor variable allowed")

msgid "Only one predictor variable allowed"
msgstr ""


#: R/pyears.R: 0
#. R/pyears.R: stop("Only right-censored and counting process survival types are supported")

msgid "Only right-censored and counting process survival types are supported"
msgstr ""


#: R/print.coxph.penal.S: 0
#. R/print.coxph.penal.S: stop("Penalized print function can't be used for a null model")

msgid "Penalized print function can't be used for a null model"
msgstr ""


#: R/coxph.R: 0
#. R/coxph.R: stop("Penalty terms cannot be in an interaction")

msgid "Penalty terms cannot be in an interaction"
msgstr ""


#: R/predict.survreg.penal.S: 0
#. R/predict.survreg.penal.S: stop("Predictions are not available for sparse models")

msgid "Predictions are not available for sparse models"
msgstr ""


#: R/pyears.R: 0
#. R/pyears.R: stop("Pyears cannot have interaction terms")

msgid "Pyears cannot have interaction terms"
msgstr ""


#: R/agexact.fit.R: 0
#: R/agreg.fit.R: 0
#: R/coxexact.fit.R: 0
#: R/coxph.fit.R: 0
#: R/survreg.fit.R: 0
#. R/agexact.fit.R: warning("Ran out of iterations and did not converge")
#. R/agreg.fit.R: warning("Ran out of iterations and did not converge")
#. R/coxexact.fit.R: warning("Ran out of iterations and did not converge")
#. R/coxph.fit.R: warning("Ran out of iterations and did not converge")
#. R/survreg.fit.R: warning("Ran out of iterations and did not converge")

msgid "Ran out of iterations and did not converge"
msgstr ""


#: R/residuals.survreg.penal.R: 0
#. R/residuals.survreg.penal.R: stop("Residuals are not available for sparse models")

msgid "Residuals are not available for sparse models"
msgstr ""


#: R/coxph.R: 0
#. R/coxph.R: stop("Response must be a survival object")

msgid "Response must be a survival object"
msgstr ""


#: R/anova.survreg.S: 0
#: R/anova.survreglist.S: 0
#. R/anova.survreg.S: gettext("Response: ")
#. R/anova.survreglist.S: gettext("Response: ")

msgid "Response:"
msgstr ""


#: R/print.summary.coxph.S: 0
#: R/print.summary.coxph.penal.S: 0
#. R/print.summary.coxph.S: gettextf("Robust = %s p=%s", format(round(x$robscore["test"], 2)), format.pval(x$robscore["pvalue"],     digits = pdig), domain = "R-survival")
#. R/print.summary.coxph.penal.S: gettextf("Robust = %s p=%s", format(round(x$rscore, 2)), format.pval(pchisq(x$rscore,     df, lower.tail = FALSE), digits = pdig), domain = "R-survival")

msgid "Robust = %s p=%s"
msgstr ""


#: R/anova.survreg.S: 0
#: R/print.summary.survreg.S: 0
#: R/print.survreg.S: 0
#: R/print.survreg.penal.S: 0
#. R/anova.survreg.S: gettextf("Scale fixed at %s", format(object$scale, digits = getOption("digits")))
#. R/print.summary.survreg.S: gettextf("Scale fixed at %s", format(x$scale, digits = digits), domain = "R-survival")
#. R/print.survreg.S: gettextf("Scale fixed at %s", format(x$scale), domain = "R-survival")
#. R/print.survreg.penal.S: gettextf("Scale fixed at %s", format(x$scale), domain = "R-survival")

msgid "Scale fixed at %s"
msgstr ""


#: R/print.survreg.S: 0
#: R/print.survreg.penal.S: 0
#. R/print.survreg.S: gettext("Scale:", domain = "R-survival")
#. R/print.survreg.penal.S: gettext("Scale:", domain = "R-survival")

msgid "Scale:"
msgstr ""


#: R/print.summary.survreg.S: 0
#: R/print.survreg.S: 0
#: R/print.survreg.penal.S: 0
#. R/print.summary.survreg.S: gettextf("Scale= %s", format(x$scale, digits = digits), domain = "R-survival")
#. R/print.survreg.S: gettextf("Scale= %s", format(x$scale), domain = "R-survival")
#. R/print.survreg.penal.S: gettextf("Scale= %s", format(x$scale), domain = "R-survival")

msgid "Scale= %s"
msgstr ""


#: R/print.summary.coxph.S: 0
#: R/print.summary.coxph.penal.S: 0
#. R/print.summary.coxph.S: gettextf("Score (logrank) test = %s on %s df, p=%s", format(round(x$sctest["test"],     2)), x$sctest["df"], format.pval(x$waldtest["pvalue"], digits = pdig), domain = "R-survival")
#. R/print.summary.coxph.penal.S: gettextf("Score (logrank) test = %s on %s df, p=%s", format(round(sctest, 2)), df,     format.pval(pchisq(sctest, df, lower.tail = FALSE), digits = pdig), domain = "R-survival")

msgid "Score (logrank) test = %s on %s df, p=%s"
msgstr ""


#: R/plot.cox.zph.S: 0
#. R/plot.cox.zph.S: stop("Spline fit is singular, try a smaller degrees of freedom")

msgid "Spline fit is singular, try a smaller degrees of freedom"
msgstr ""


#: R/aareg.S: 0
#. R/aareg.S: stop("Subsripting impossible, coefficient component not a matrix")

msgid "Subsripting impossible, coefficient component not a matrix"
msgstr ""


#: R/survexp.R: 0
#. R/survexp.R: stop("Survexp cannot have interaction terms")

msgid "Survexp cannot have interaction terms"
msgstr ""


#: R/print.survexp.S: 0
#. R/print.survexp.S: gettextf(" Survival at time %s", x$time, domain = "R-survival")

msgid "Survival at time %s"
msgstr ""


#: R/survfit.coxph.R: 0
#. R/survfit.coxph.R: stop("Survival type of newdata does not match the fitted model")

msgid "Survival type of newdata does not match the fitted model"
msgstr ""


#: R/print.survreg.S: 0
#: R/print.survreg.penal.S: 0
#: R/summary.survreg.S: 0
#. R/print.survreg.S: gettext(" Survreg failed. ", domain = "R-survival")
#. R/print.survreg.penal.S: gettext(" Survreg failed. ", domain = "R-survival")
#. R/summary.survreg.S: gettext(" Survreg failed.")

msgid "Survreg failed."
msgstr ""


#: R/anova.coxph.R: 0
#: R/anova.survreg.S: 0
#. R/anova.coxph.R: gettext("Terms added sequentially (first to last)")
#. R/anova.survreg.S: gettext("Terms added sequentially (first to last)")

msgid "Terms added sequentially (first to last)"
msgstr ""


#: R/pyears.R: 0
#: R/survexp.R: 0
#. R/pyears.R: stop("The 'ratetable()' call in a formula is depreciated")
#. R/survexp.R: stop("The 'ratetable()' call in a formula is depreciated")

msgid "The 'ratetable()' call in a formula is depreciated"
msgstr ""


#: R/model.frame.survreg.R: 0
#: R/model.matrix.coxph.R: 0
#. R/model.frame.survreg.R: stop("The coxph call is missing a formula!")
#. R/model.matrix.coxph.R: stop("The coxph call is missing a formula!")

msgid "The coxph call is missing a formula!"
msgstr ""


#: R/anova.survreglist.S: 0
#. R/anova.survreglist.S: stop("The first model has a different response from the rest")

msgid "The first model has a different response from the rest"
msgstr ""


#: R/anova.coxph.penal.R: 0
#. R/anova.coxph.penal.R: gettext("The following arguments to anova.coxph(..) are invalid and dropped:", domain = "R-survival")

msgid "The following arguments to anova.coxph(..) are invalid and dropped:"
msgstr ""


#: R/plot.survfit.R: 0
#. R/plot.survfit.R: stop("The graphical argument 'type' is not allowed")

msgid "The graphical argument 'type' is not allowed"
msgstr ""


#: R/survfit.coxph.R: 0
#. R/survfit.coxph.R: stop("The individual option is only valid for start-stop data")

msgid "The individual option is only valid for start-stop data"
msgstr ""


#: R/survfit.coxph.R: 0
#. R/survfit.coxph.R: stop("The newdata argument must be present when 'individual=TRUE'")

msgid "The newdata argument must be present when 'individual=TRUE'"
msgstr ""


#: R/survfit.coxph.R: 0
#. R/survfit.coxph.R: stop("The survfit function can not yet process coxph models with a tt term")

msgid "The survfit function can not yet process coxph models with a tt term"
msgstr ""


#: R/aareg.S: 0
#. R/aareg.S: stop("The threshold 'nmin' is too high, no model can be fit")

msgid "The threshold 'nmin' is too high, no model can be fit"
msgstr ""


#: R/print.summary.survfit.S: 0
#: R/print.summary.survfitms.S: 0
#. R/print.summary.survfit.S: stop("There are no events to print. Please use the option censored=TRUE with the summary function to see the censored observations.")
#. R/print.summary.survfitms.S: stop("There are no events to print. Please use the option censored=TRUE with the summary function to see the censored observations.")

msgid "There are no events to print. Please use the option censored=TRUE with the summary function to see the censored observations."
msgstr ""


#: R/summary.survreg.S: 0
#. R/summary.survreg.S: warning("This model has zero rank --- no summary is provided")

msgid "This model has zero rank --- no summary is provided"
msgstr ""


#: R/ratetableold.R: 0
#. R/ratetableold.R: stop("This should never be called!")

msgid "This should never be called!"
msgstr ""


#: R/frailty.brent.S: 0
#. R/frailty.brent.S: stop("Ties for 'max(y)', I surrender")

msgid "Ties for 'max(y)', I surrender"
msgstr ""


#: R/lines.aareg.S: 0
#: R/plot.aareg.S: 0
#: R/plot.aareg.S: 0
#: R/plot.aareg.S: 0
#. R/lines.aareg.S: gettext("Time")
#. R/plot.aareg.S: gettext("Time")
#. R/plot.aareg.S: gettext("Time")
#. R/plot.aareg.S: gettext("Time")

msgid "Time"
msgstr ""


#: R/survexp.R: 0
#. R/survexp.R: stop("Times must be in increasing order")

msgid "Times must be in increasing order"
msgstr ""


#: R/print.pyears.R: 0
#. R/print.pyears.R: gettextf(" Total time lost (off table) %s", format(object$offtable), domain = "R-survival")

msgid "Total time lost (off table) %s"
msgstr ""


#: R/print.survfit.S: 0
#: R/survfitms.R: 0
#: R/survfitms.R: 0
#: R/survfitms.R: 0
#: R/survfitms.R: 0
#: R/survfitms.R: 0
#: R/survfitms.R: 0
#. R/print.survfit.S: stop("Truncation point for the mean is < smallest survival")
#. R/print.survfit.S: stop("Truncation point for the mean is < smallest survival")
#. R/survfitms.R: stop("Truncation point for the mean is < smallest survival")
#. R/survfitms.R: stop("Truncation point for the mean is < smallest survival")
#. R/survfitms.R: stop("Truncation point for the mean is < smallest survival")
#. R/survfitms.R: stop("Truncation point for the mean is < smallest survival")
#. R/survfitms.R: stop("Truncation point for the mean is < smallest survival")
#. R/survfitms.R: stop("Truncation point for the mean is < smallest survival")

msgid "Truncation point for the mean is < smallest survival"
msgstr ""


#: R/pyears.R: 0
#: R/survexp.R: 0
#. R/pyears.R: stop("Unable to match new data to old formula")
#. R/survexp.R: stop("Unable to match new data to old formula")

msgid "Unable to match new data to old formula"
msgstr ""


#: R/plot.survfit.R: 0
#. R/plot.survfit.R: stop("Unrecognized function argument")
#. R/plot.survfit.R: stop("Unrecognized function argument")
#. R/plot.survfit.R: stop("Unrecognized function argument")

msgid "Unrecognized function argument"
msgstr ""


#: R/pyears.R: 0
#: R/survexp.R: 0
#. R/pyears.R: gettextf("Variable not found in the ratetable: %s", (names(rcall))[is.na(temp)])
#. R/survexp.R: gettextf("Variable not found in the ratetable: %s", (names(rcall))[is.na(temp)])

msgid "Variable not found in the ratetable: %s"
msgstr ""


#: R/print.summary.coxph.S: 0
#: R/print.summary.coxph.penal.S: 0
#. R/print.summary.coxph.S: gettextf("Wald test = %s on %s df, p=%s", format(round(x$waldtest["test"], 2)), x$waldtest["df"],     format.pval(x$waldtest["pvalue"], digits = pdig), domain = "R-survival")
#. R/print.summary.coxph.penal.S: gettextf("Wald test = %s on %s df, p=%s", format(round(x$wald.test, 2)), df, format.pval(pchisq(x$wald.test,     df, lower.tail = FALSE), digits = pdig), domain = "R-survival")

msgid "Wald test = %s on %s df, p=%s"
msgstr ""


#: R/agreg.fit.R: 0
#. R/agreg.fit.R: stop("Wrong length for inital values")
#. R/agreg.fit.R: stop("Wrong length for inital values")

msgid "Wrong length for inital values"
msgstr ""


#: R/coxph.R: 0
#. R/coxph.R: gettextf("X matrix deemed to be singular; variable %s", paste(vars, collapse = " "))

msgid "X matrix deemed to be singular; variable %s"
msgstr ""


#: R/pyears.R: 0
#. R/pyears.R: stop("Y has too many columns")

msgid "Y has too many columns"
msgstr ""


#: R/anova.coxph.R: 0
#: R/anova.coxph.penal.R: 0
#. R/anova.coxph.R: stop("a 'coxme' model was found and library 'coxme' is not loaded")
#. R/anova.coxph.penal.R: stop("a 'coxme' model was found and library 'coxme' is not loaded")

msgid "a 'coxme' model was found and library 'coxme' is not loaded"
msgstr ""


#: R/finegray.R: 0
#. R/finegray.R: stop("a cluster() term is not valid")

msgid "a cluster() term is not valid"
msgstr ""


#: R/Surv.R: 0
#. R/Surv.R: stop("a mean method has not been defined for Surv objects")

msgid "a mean method has not been defined for Surv objects"
msgstr ""


#: R/predict.coxph.R: 0
#. R/predict.coxph.R: stop("a name given in the 'terms' argument not found in the model")

msgid "a name given in the 'terms' argument not found in the model"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: stop("a numeric term must be an integer between 1 and max terms in the fit")

msgid "a numeric term must be an integer between 1 and max terms in the fit"
msgstr ""


#: R/survexp.R: 0
#. R/survexp.R: stop("a response is required in the formula unless method='ederer'")

msgid "a response is required in the formula unless method='ederer'"
msgstr ""


#: R/finegray.R: 0
#. R/finegray.R: stop("a subject has a transition before their last time point")

msgid "a subject has a transition before their last time point"
msgstr ""


#: R/finegray.R: 0
#. R/finegray.R: stop("a subject has gaps in time")

msgid "a subject has gaps in time"
msgstr ""


#: R/coxph.R: 0
#. R/coxph.R: warning("a variable appears on both the left and right sides of the formula")

msgid "a variable appears on both the left and right sides of the formula"
msgstr ""


#: R/tmerge.R: 0
#. R/tmerge.R: stop("all additional arguments must have a name")

msgid "all additional arguments must have a name"
msgstr ""


#: R/anova.coxph.R: 0
#: R/anova.coxph.penal.R: 0
#. R/anova.coxph.R: gettextf("all arguments must be an objects of class %s or %s", dQuote("coxph"), dQuote("coxme"))
#. R/anova.coxph.penal.R: gettextf("all arguments must be an objects of class %s or %s", dQuote("coxph"), dQuote("coxme"))

msgid "all arguments must be an objects of class %s or %s"
msgstr ""


#: R/strata.S: 0
#. R/strata.S: stop("all arguments must be the same length")

msgid "all arguments must be the same length"
msgstr ""


#: R/strata.S: 0
#. R/strata.S: stop("all arguments must be vectors")

msgid "all arguments must be vectors"
msgstr ""


#: R/survfit.matrix.R: 0
#. R/survfit.matrix.R: stop("all curves must be of the same dimension")

msgid "all curves must be of the same dimension"
msgstr ""


#: R/survfit.matrix.R: 0
#. R/survfit.matrix.R: stop("all curves must be the same type")

msgid "all curves must be the same type"
msgstr ""


#: R/survfit.matrix.R: 0
#. R/survfit.matrix.R: stop("all curves must have a consistent 'start.time' value")

msgid "all curves must have a consistent 'start.time' value"
msgstr ""


#: R/Surv.R: 0
#. R/Surv.R: stop("all elements must be of class Surv")

msgid "all elements must be of class Surv"
msgstr ""


#: R/Surv.R: 0
#. R/Surv.R: stop("all elements must be of the same Surv type")

msgid "all elements must be of the same Surv type"
msgstr ""


#: R/Surv.R: 0
#. R/Surv.R: stop("all elements must have the same list of states")
#. R/Surv.R: stop("all elements must have the same list of states")

msgid "all elements must have the same list of states"
msgstr ""


#: R/parsecovar.R: 0
#. R/parsecovar.R: stop("all formulas must have a left and right side")

msgid "all formulas must have a left and right side"
msgstr ""


#: R/concordance.R: 0
#. R/concordance.R: stop("all models must have the exact same response vector")

msgid "all models must have the exact same response vector"
msgstr ""


#: R/concordance.R: 0
#. R/concordance.R: stop("all models must have the same sample size")

msgid "all models must have the same sample size"
msgstr ""


#: R/concordance.R: 0
#. R/concordance.R: stop("all models must have the same weight vector")

msgid "all models must have the same weight vector"
msgstr ""


#: R/plot.survfit.R: 0
#. R/plot.survfit.R: stop("all points are > xmax")
#. R/plot.survfit.R: stop("all points are > xmax")
#. R/plot.survfit.R: stop("all points are > xmax")

msgid "all points are > xmax"
msgstr ""


#: R/survfitCI.R: 0
#. R/survfitCI.R: warning("an observation transitions to it's starting state, transition ignored")

msgid "an observation transitions to it's starting state, transition ignored"
msgstr ""


#: R/concordance.R: 0
#. R/concordance.R: stop(temp, " argument is not an appropriate fit object")
#. R/concordance.R: stop(temp, " argument is not an appropriate fit object")
#. R/concordance.R: stop(temp, " argument is not an appropriate fit object")

msgid "argument is not an appropriate fit object"
msgstr ""


#: R/attrassign.R: 0
#. R/attrassign.R: stop("argument is not really a model matrix")

msgid "argument is not really a model matrix"
msgstr ""


#: R/tmerge.R: 0
#. R/tmerge.R: gettextf("argument(s) %s not a recognized type", argname[is.na(check)])

msgid "argument(s) %s not a recognized type"
msgstr ""


#: R/tmerge.R: 0
#. R/tmerge.R: stop("attemp to update an event variable and levels do not match")

msgid "attemp to update an event variable and levels do not match"
msgstr ""


#: R/tmerge.R: 0
#. R/tmerge.R: stop("attempt to turn event variable", argname[[ii]], "into a tdc")

msgid "attempt to turn event variable"
msgstr ""


#: R/tmerge.R: 0
#. R/tmerge.R: stop("attempt to update an event variable with a different type")

msgid "attempt to update an event variable with a different type"
msgstr ""


#: R/is.ratetable.R: 0
#. R/is.ratetable.R: gettextf("attribute type[ %d ] is continuous; cutpoint should be null", i)

msgid "attribute type[ %d ] is continuous; cutpoint should be null"
msgstr ""


#: R/frailty.controldf.S: 0
#. R/frailty.controldf.S: gettextf("bisect:new theta= %s", format(mean(x[b1 + 0:1])), domain = "R-survival")

msgid "bisect:new theta= %s"
msgstr ""


#: R/tcut.S: 0
#. R/tcut.S: stop("breaks must be given in ascending order and contain no NA's")

msgid "breaks must be given in ascending order and contain no NA's"
msgstr ""


#: R/survobrien.S: 0
#. R/survobrien.S: stop("can have only 1 cluster term")

msgid "can have only 1 cluster term"
msgstr ""


#: R/survfit.R: 0
#. R/survfit.R: stop("can not have two cluster terms")

msgid "can not have two cluster terms"
msgstr ""


#: R/survfitKM.R: 0
#. R/survfitKM.R: stop("can only handle right censored or counting data")

msgid "can only handle right censored or counting data"
msgstr ""


#: R/anova.coxph.R: 0
#: R/anova.coxph.penal.R: 0
#: R/anova.coxphlist.S: 0
#. R/anova.coxph.R: stop("cannot do anova tables with robust variances")
#. R/anova.coxph.penal.R: stop("cannot do anova tables with robust variances")
#. R/anova.coxphlist.S: stop("cannot do anova tables with robust variances")

msgid "cannot do anova tables with robust variances"
msgstr ""


#: R/survcallback.S: 0
#: R/survpenal.fit.S: 0
#. R/survcallback.S: stop("cannot fit a model with no coefficients other than sparse ones")
#. R/survpenal.fit.S: stop("cannot fit a model with no coefficients other than sparse ones")

msgid "cannot fit a model with no coefficients other than sparse ones"
msgstr ""


#: R/frailty.gamma.S: 0
#: R/frailty.gaussian.S: 0
#: R/frailty.gaussian.S: 0
#: R/frailty.t.S: 0
#. R/frailty.gamma.S: stop("cannot give both a 'df' and 'theta' argument")
#. R/frailty.gaussian.S: stop("cannot give both a 'df' and 'theta' argument")
#. R/frailty.gaussian.S: stop("cannot give both a 'df' and 'theta' argument")
#. R/frailty.t.S: stop("cannot give both a 'df' and 'theta' argument")

msgid "cannot give both a 'df' and 'theta' argument"
msgstr ""


#: R/agexact.fit.R: 0
#. R/agexact.fit.R: stop("cannot handle a null model + exact calculation (yet)")

msgid "cannot handle a null model + exact calculation (yet)"
msgstr ""


#: R/survpenal.fit.S: 0
#: R/survreg.fit.R: 0
#. R/survpenal.fit.S: stop("cannot have both a fixed scale and strata")
#. R/survreg.fit.R: stop("cannot have both a fixed scale and strata")

msgid "cannot have both a fixed scale and strata"
msgstr ""


#: R/survdiff.S: 0
#. R/survdiff.S: stop("cannot have both an offset and groups")

msgid "cannot have both an offset and groups"
msgstr ""


#: R/frailty.t.S: 0
#. R/frailty.t.S: stop("cannot have df <3 for the t-frailty")

msgid "cannot have df <3 for the t-frailty"
msgstr ""


#: R/survfitCI.R: 0
#. R/survfitCI.R: stop("cannot have start time == stop time")

msgid "cannot have start time == stop time"
msgstr ""


#: R/survfit.R: 0
#. R/survfit.R: stop("cannot use both the 'etype' and 'istate' arguments")

msgid "cannot use both the 'etype' and 'istate' arguments"
msgstr ""


#: R/survfit.R: 0
#. R/survfit.R: stop("cannot use both the 'etype' argument and 'mstate' survival type")

msgid "cannot use both the 'etype' argument and 'mstate' survival type"
msgstr ""


#: R/concordance.R: 0
#. R/concordance.R: stop("cannot yet handle models with tt terms")

msgid "cannot yet handle models with tt terms"
msgstr ""


#: R/agexact.fit.R: 0
#: R/coxexact.fit.R: 0
#. R/agexact.fit.R: stop("case weights are not supported for the exact method")
#. R/coxexact.fit.R: stop("case weights are not supported for the exact method")

msgid "case weights are not supported for the exact method"
msgstr ""


#: R/survfit.R: 0
#. R/survfit.R: stop("cluster appears as both an argument and a model term")

msgid "cluster appears as both an argument and a model term"
msgstr ""


#: R/aareg.S: 0
#: R/survreg.R: 0
#. R/aareg.S: stop("cluster cannot be used in an interaction")
#. R/survreg.R: stop("cluster cannot be used in an interaction")

msgid "cluster cannot be used in an interaction"
msgstr ""


#: R/plot.survfit.R: 0
#. R/plot.survfit.R: stop("code error with xmax")
#. R/plot.survfit.R: stop("code error with xmax")
#. R/plot.survfit.R: stop("code error with xmax")

msgid "code error with xmax"
msgstr ""


#: R/cch.R: 0
#. R/cch.R: stop("cohort size must be a scalar for unstratified analysis")

msgid "cohort size must be a scalar for unstratified analysis"
msgstr ""


#: R/print.pyears.R: 0
#. R/print.pyears.R: stop("conf.level must be a single numeric between 0 and 1")

msgid "conf.level must be a single numeric between 0 and 1"
msgstr ""


#: R/survfitCI.R: 0
#. R/survfitCI.R: warning("conf.lower is ignored for multi-state data")

msgid "conf.lower is ignored for multi-state data"
msgstr ""


#: R/plot.survfit.R: 0
#. R/plot.survfit.R: stop("conf.times must be numeric")
#. R/plot.survfit.R: stop("conf.times must be numeric")
#. R/plot.survfit.R: stop("conf.times must be numeric")

msgid "conf.times must be numeric"
msgstr ""


#: R/statefig.R: 0
#. R/statefig.R: stop("connect must be a square matrix")

msgid "connect must be a square matrix"
msgstr ""


#: R/statefig.R: 0
#. R/statefig.R: stop("connect must have the state names as dimnames")

msgid "connect must have the state names as dimnames"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: stop("continuous variables require the levels argument")

msgid "continuous variables require the levels argument"
msgstr ""


#: R/cch.R: 0
#. R/cch.R: gettextf("cox model doesn't support \"%s\" survival data", type)

msgid "cox model doesn't support \"%s\" survival data"
msgstr ""


#: R/survfitCI.R: 0
#: R/survfitKM.R: 0
#. R/survfitCI.R: stop("ctype must be 1 or 2")
#. R/survfitKM.R: stop("ctype must be 1 or 2")

msgid "ctype must be 1 or 2"
msgstr ""


#: R/survfit.matrix.R: 0
#. R/survfit.matrix.R: warning("curves have a larger start.time than the parameter, start.time parameter value was ignored")

msgid "curves have a larger start.time than the parameter, start.time parameter value was ignored"
msgstr ""


#: R/tmerge.R: 0
#. R/tmerge.R: stop("data and options$tdcstart do not agree on data type")
#. R/tmerge.R: stop("data and options$tdcstart do not agree on data type")

msgid "data and options$tdcstart do not agree on data type"
msgstr ""


#: R/coxph.R: 0
#: R/model.matrix.coxph.R: 0
#: R/survreg.R: 0
#. R/coxph.R: stop("data contains an infinite predictor")
#. R/model.matrix.coxph.R: stop("data contains an infinite predictor")
#. R/survreg.R: stop("data contains an infinite predictor")

msgid "data contains an infinite predictor"
msgstr ""


#: R/match.ratetable.R: 0
#. R/match.ratetable.R: gettextf("data has a date type variable, but the reference ratetable is not a date variable %s",     paste(dimid[indx], collapse = " "))

msgid "data has a date type variable, but the reference ratetable is not a date variable %s"
msgstr ""


#: R/survdiff.fit.S: 0
#. R/survdiff.fit.S: stop("data length mismatch")
#. R/survdiff.fit.S: stop("data length mismatch")

msgid "data length mismatch"
msgstr ""


#: R/pyears.R: 0
#. R/pyears.R: stop("data set has 0 observations")

msgid "data set has 0 observations"
msgstr ""


#: R/survexp.R: 0
#. R/survexp.R: stop("data set has 0 rows")

msgid "data set has 0 rows"
msgstr ""


#: R/survreg.R: 0
#. R/survreg.R: stop("default parameters must be a numeric vector")

msgid "default parameters must be a numeric vector"
msgstr ""


#: R/survregDtest.S: 0
#. R/survregDtest.S: gettext("density function must return a 5 column matrix")

msgid "density function must return a 5 column matrix"
msgstr ""


#: R/survpenal.fit.S: 0
#: R/survreg.fit.R: 0
#. R/survpenal.fit.S: stop("density function returned an invalid matrix")
#. R/survreg.fit.R: stop("density function returned an invalid matrix")

msgid "density function returned an invalid matrix"
msgstr ""


#: R/coxph.detail.S: 0
#. R/coxph.detail.S: gettextf("detailed output is not available for the %s method", method)

msgid "detailed output is not available for the %s method"
msgstr ""


#: R/is.ratetable.R: 0
#. R/is.ratetable.R: gettextf("dimname %d is the wrong length", i)

msgid "dimname %d is the wrong length"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: stop("don't know how to do a linear contrast for this term")

msgid "don't know how to do a linear contrast for this term"
msgstr ""


#: R/parsecovar.R: 0
#. R/parsecovar.R: stop("dterm mismatch bug 2")

msgid "dterm mismatch bug 2"
msgstr ""


#: R/Surv.R: 0
#. R/Surv.R: stop("each state must have a non-blank name")

msgid "each state must have a non-blank name"
msgstr ""


#: R/survexp.R: 0
#. R/survexp.R: stop("either a 'times' argument or a 'response' is needed")

msgid "either a 'times' argument or a 'response' is needed"
msgstr ""


#: R/tmerge.R: 0
#. R/tmerge.R: stop("first call has created overlapping or duplicated time intervals")

msgid "first call has created overlapping or duplicated time intervals"
msgstr ""


#: R/parsecovar.R: 0
#. R/parsecovar.R: stop("flist must be a list of formulas")

msgid "flist must be a list of formulas"
msgstr ""


#: R/survexp.R: 0
#. R/survexp.R: stop("for individual survival an observation time must be given")

msgid "for individual survival an observation time must be given"
msgstr ""


#: R/coxph.control.S: 0
#. R/coxph.control.S: warning("for numerical accuracy, tolerance should be < eps")

msgid "for numerical accuracy, tolerance should be < eps"
msgstr ""


#: R/tmerge.R: 0
#. R/tmerge.R: stop("for the first call (that establishes the time range) data1 must have no duplicate identifiers")

msgid "for the first call (that establishes the time range) data1 must have no duplicate identifiers"
msgstr ""


#: R/match.ratetable.R: 0
#. R/match.ratetable.R: gettextf("for this ratetable, %s must be a continuous variable", dimid[i])

msgid "for this ratetable, %s must be a continuous variable"
msgstr ""


#: R/tmerge.R: 0
#. R/tmerge.R: gettextf("found an ending time of %s, the default starting time of 0 is invalid",     tstop[indx[1]])

msgid "found an ending time of %s, the default starting time of 0 is invalid"
msgstr ""


#: R/frailty.S: 0
#. R/frailty.S: gettextf("function %s was not found", sQuote(temp))

msgid "function %s was not found"
msgstr ""


#: R/survfit23.R: 0
#. R/survfit23.R: stop("function requires a survfit object")

msgid "function requires a survfit object"
msgstr ""


#: R/survfitCI.R: 0
#. R/survfitCI.R: gettextf("gap in follow-up, id %s", id[indx1[who]])

msgid "gap in follow-up, id %s"
msgstr ""


#: R/tmerge.R: 0
#. R/tmerge.R: stop("id values were found in data2 which are not in data1")

msgid "id values were found in data2 which are not in data1"
msgstr ""


#: R/tmerge.R: 0
#. R/tmerge.R: stop("id variable cannot have missing values")

msgid "id variable cannot have missing values"
msgstr ""


#: R/tmerge.R: 0
#. R/tmerge.R: stop("id variable not found in data1")

msgid "id variable not found in data1"
msgstr ""


#: R/tmerge.R: 0
#. R/tmerge.R: stop("id variable not found in data2")

msgid "id variable not found in data2"
msgstr ""


#: R/is.ratetable.R: 0
#. R/is.ratetable.R: gettext("illegal 'factor' attribute of <0")

msgid "illegal 'factor' attribute of <0"
msgstr ""


#: R/is.ratetable.R: 0
#. R/is.ratetable.R: gettext("illegal 'factor' attribute of NA")

msgid "illegal 'factor' attribute of NA"
msgstr ""


#: R/coxpenal.fit.R: 0
#: R/survcallback.S: 0
#: R/survpenal.fit.S: 0
#. R/coxpenal.fit.R: stop("incorrect length in 'coxlist1' object")
#. R/survcallback.S: stop("incorrect length in 'coxlist1' object")
#. R/survpenal.fit.S: stop("incorrect length in 'coxlist1' object")

msgid "incorrect length in 'coxlist1' object"
msgstr ""


#: R/survfit.matrix.R: 0
#. R/survfit.matrix.R: stop("incorrect number of states in p0")

msgid "incorrect number of states in p0"
msgstr ""


#: R/survfitCI.R: 0
#: R/survfitKM.R: 0
#. R/survfitCI.R: stop("influence argument must be 0, 1, 2, or 3")
#. R/survfitKM.R: stop("influence argument must be 0, 1, 2, or 3")

msgid "influence argument must be 0, 1, 2, or 3"
msgstr ""


#: R/survfitCI.R: 0
#: R/survfitKM.R: 0
#. R/survfitCI.R: stop("influence argument must be numeric or logical")
#. R/survfitKM.R: stop("influence argument must be numeric or logical")

msgid "influence argument must be numeric or logical"
msgstr ""


#: R/coxph.R: 0
#. R/coxph.R: stop("initial values lead to overflow or underflow of the exp function")

msgid "initial values lead to overflow or underflow of the exp function"
msgstr ""


#: R/coxpenal.fit.R: 0
#: R/survpenal.fit.S: 0
#. R/coxpenal.fit.R: gettextf("inner loop failed to coverge for iterations %s", paste(sQuote(iterfail),     collapse = ", "))
#. R/survpenal.fit.S: gettextf("inner loop failed to coverge for iterations %s", paste(sQuote(iterfail),     collapse = ", "))

msgid "inner loop failed to coverge for iterations %s"
msgstr ""


#: R/print.coxph.S: 0
#: R/summary.coxph.R: 0
#: R/summary.coxph.penal.R: 0
#. R/print.coxph.S: stop("input is not valid")
#. R/summary.coxph.R: stop("input is not valid")
#. R/summary.coxph.penal.R: stop("input is not valid")

msgid "input is not valid"
msgstr ""


#: R/print.pyears.R: 0
#. R/print.pyears.R: stop("input must be a pyears object")

msgid "input must be a pyears object"
msgstr ""


#: R/survfit.matrix.R: 0
#. R/survfit.matrix.R: stop("input must be a square matrix of survival curves")
#. R/survfit.matrix.R: stop("input must be a square matrix of survival curves")
#. R/survfit.matrix.R: stop("input must be a square matrix of survival curves")
#. R/survfit.matrix.R: stop("input must be a square matrix of survival curves")

msgid "input must be a square matrix of survival curves"
msgstr ""


#: R/survfit.matrix.R: 0
#. R/survfit.matrix.R: stop("input must have at least 2 transitions")

msgid "input must have at least 2 transitions"
msgstr ""


#: R/tmerge.R: 0
#. R/tmerge.R: stop("attempt to turn event variable", argname[[ii]], "into a tdc")

msgid "into a tdc"
msgstr ""


#: R/aareg.taper.R: 0
#: R/lines.survfit.coxph.S: 0
#: R/plot.survfit.R: 0
#: R/plot.survfit.R: 0
#: R/plot.survfit.R: 0
#: R/plot.survfit.R: 0
#: R/plot.survfit.R: 0
#: R/predict.coxph.R: 0
#: R/pspline.R: 0
#: R/pspline.R: 0
#: R/pyears.R: 0
#: R/survexp.R: 0
#: R/survexp.fit.R: 0
#: R/survpenal.fit.S: 0
#: R/survreg.fit.R: 0
#: R/survreg.fit.R: 0
#. R/aareg.taper.R: gettextf("invalid '%s' argument", "taper")
#. R/lines.survfit.coxph.S: gettextf("invalid '%s' argument", "mark.time")
#. R/plot.survfit.R: gettextf("invalid '%s' argument", "fun")
#. R/plot.survfit.R: gettextf("invalid '%s' argument", "conf.int")
#. R/plot.survfit.R: gettextf("invalid '%s' argument", "fun")
#. R/plot.survfit.R: gettextf("invalid '%s' argument", "conf.int")
#. R/plot.survfit.R: gettextf("invalid '%s' argument", "fun")
#. R/predict.coxph.R: gettextf("invalid '%s' argument", "terms")
#. R/pspline.R: gettextf("invalid '%s' argument", "theta")
#. R/pspline.R: gettextf("invalid '%s' argument", "Boundary.knots")
#. R/pyears.R: gettextf("invalid '%s' argument", "rcall")
#. R/survexp.R: gettextf("invalid '%s' argument", "rcall")
#. R/survexp.fit.R: gettextf("invalid '%s' argument", "death")
#. R/survpenal.fit.S: gettextf("invalid '%s' argument", "scale")
#. R/survreg.fit.R: gettextf("invalid '%s' argument", "scale")
#. R/survreg.fit.R: gettextf("invalid '%s' argument", "strata")

msgid "invalid '%s' argument"
msgstr ""


#: R/coxpenal.fit.R: 0
#: R/survcallback.S: 0
#: R/survpenal.fit.S: 0
#: R/survpenal.fit.S: 0
#. R/coxpenal.fit.R: gettextf("invalid '%s' or '%s' argument", "pcols", "pattr")
#. R/survcallback.S: gettextf("invalid '%s' or '%s' argument", "pcols", "pattr")
#. R/survpenal.fit.S: gettextf("invalid '%s' or '%s' argument", "strata", "nstrat")
#. R/survpenal.fit.S: gettextf("invalid '%s' or '%s' argument", "pcols", "pattr")

msgid "invalid '%s' or '%s' argument"
msgstr ""


#: R/survfit.R: 0
#. R/survfit.R: gettextf("invalid '%s' type", "conf.int")

msgid "invalid '%s' type"
msgstr ""


#: R/survcallback.S: 0
#: R/survpenal.fit.S: 0
#. R/survcallback.S: stop("invalid 'coxlist1' object")
#. R/survpenal.fit.S: stop("invalid 'coxlist1' object")

msgid "invalid 'coxlist1' object"
msgstr ""


#: R/survpenal.fit.S: 0
#: R/survreg.fit.R: 0
#. R/survpenal.fit.S: stop("invalid 'weights' argument, must be >0")
#. R/survreg.fit.R: stop("invalid 'weights' argument, must be >0")

msgid "invalid 'weights' argument, must be >0"
msgstr ""


#: R/survdiff.fit.S: 0
#. R/survdiff.fit.S: stop("invalid 'y' matrix")

msgid "invalid 'y' matrix"
msgstr ""


#: R/coxph.control.S: 0
#. R/coxph.control.S: stop("invalid convergence criteria")

msgid "invalid convergence criteria"
msgstr ""


#: R/survregDtest.S: 0
#. R/survregDtest.S: gettext("invalid distribution name")

msgid "invalid distribution name"
msgstr ""


#: R/survreg.R: 0
#. R/survreg.R: stop("invalid distribution object")
#. R/survreg.R: stop("invalid distribution object")

msgid "invalid distribution object"
msgstr ""


#: R/survfit.matrix.R: 0
#. R/survfit.matrix.R: stop("invalid elements in p0")

msgid "invalid elements in p0"
msgstr ""


#: R/tmerge.R: 0
#. R/tmerge.R: stop("invalid increment for cumtdc or cumevent")

msgid "invalid increment for cumtdc or cumevent"
msgstr ""


#: R/Surv.R: 0
#. R/Surv.R: warning("invalid interval: start > stop, NA created")
#. R/Surv.R: warning("invalid interval: start > stop, NA created")

msgid "invalid interval: start > stop, NA created"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: stop("invalid level for term", parts[i])

msgid "invalid level for term"
msgstr ""


#: R/Surv.R: 0
#. R/Surv.R: stop("invalid operation on a survival time")
#. R/Surv.R: stop("invalid operation on a survival time")
#. R/Surv.R: stop("invalid operation on a survival time")
#. R/Surv.R: stop("invalid operation on a survival time")

msgid "invalid operation on a survival time"
msgstr ""


#: R/survreg.R: 0
#. R/survreg.R: stop("invalid parameter names")

msgid "invalid parameter names"
msgstr ""


#: R/quantile.survfit.R: 0
#. R/quantile.survfit.R: stop("invalid probability")
#. R/quantile.survfit.R: stop("invalid probability")

msgid "invalid probability"
msgstr ""


#: R/match.ratetable.R: 0
#: R/pyears.R: 0
#: R/pyears.R: 0
#: R/survexp.R: 0
#: R/survexp.R: 0
#. R/match.ratetable.R: stop("invalid rate table")
#. R/pyears.R: stop("invalid rate table")
#. R/pyears.R: stop("invalid rate table")
#. R/survexp.R: stop("invalid rate table")
#. R/survexp.R: stop("invalid rate table")

msgid "invalid rate table"
msgstr ""


#: R/survreg.R: 0
#. R/survreg.R: stop("invalid scale value")

msgid "invalid scale value"
msgstr ""


#: R/Surv.R: 0
#. R/Surv.R: stop("invalid status value")

msgid "invalid status value"
msgstr ""


#: R/Surv.R: 0
#. R/Surv.R: warning("invalid status value, converted to NA")
#. R/Surv.R: warning("invalid status value, converted to NA")

msgid "invalid status value, converted to NA"
msgstr ""


#: R/Surv.R: 0
#. R/Surv.R: stop("invalid status value, must be logical or numeric")
#. R/Surv.R: stop("invalid status value, must be logical or numeric")

msgid "invalid status value, must be logical or numeric"
msgstr ""


#: R/Surv.R: 0
#. R/Surv.R: stop("invalid survival time created")

msgid "invalid survival time created"
msgstr ""


#: R/survreg.R: 0
#. R/survreg.R: stop("invalid survival times for this distribution")

msgid "invalid survival times for this distribution"
msgstr ""


#: R/parsecovar.R: 0
#. R/parsecovar.R: stop("invalid term: ", deparse(z))

msgid "invalid term:"
msgstr ""


#: R/coxph.getdata.S: 0
#. R/coxph.getdata.S: stop("invalid terms component of fit")

msgid "invalid terms component of fit"
msgstr ""


#: R/coxph.detail.S: 0
#: R/predict.survreg.S: 0
#: R/residuals.coxph.S: 0
#: R/residuals.survreg.R: 0
#. R/coxph.detail.S: stop("invalid terms component of object")
#. R/predict.survreg.S: stop("invalid terms component of object")
#. R/residuals.coxph.S: stop("invalid terms component of object")
#. R/residuals.survreg.R: stop("invalid terms component of object")

msgid "invalid terms component of object"
msgstr ""


#: R/print.survfit.S: 0
#: R/survfit.R: 0
#: R/survfitms.R: 0
#: R/survfitms.R: 0
#: R/survfitms.R: 0
#. R/print.survfit.S: gettextf("invalid value for '%s' option", "rmean")
#. R/survfit.R: gettextf("invalid value for '%s' option", "timefix")
#. R/survfitms.R: gettextf("invalid value for '%s' option", "rmean")
#. R/survfitms.R: gettextf("invalid value for '%s' option", "rmean")
#. R/survfitms.R: gettextf("invalid value for '%s' option", "rmean")

msgid "invalid value for '%s' option"
msgstr ""


#: R/survfitCI.R: 0
#: R/survfitKM.R: 0
#. R/survfitCI.R: stop("invalid value for 'type'")
#. R/survfitKM.R: stop("invalid value for 'type'")

msgid "invalid value for 'type'"
msgstr ""


#: R/tmerge.R: 0
#. R/tmerge.R: stop("invalid value for a status variable")

msgid "invalid value for a status variable"
msgstr ""


#: R/coxph.control.S: 0
#. R/coxph.control.S: stop("invalid value for iterations")

msgid "invalid value for iterations"
msgstr ""


#: R/survdiff.S: 0
#. R/survdiff.S: stop("invalid value for timefix option")

msgid "invalid value for timefix option"
msgstr ""


#: R/aeqSurv.R: 0
#. R/aeqSurv.R: stop("invalid value for tolerance")

msgid "invalid value for tolerance"
msgstr ""


#: R/agreg.fit.R: 0
#: R/coxpenal.fit.R: 0
#: R/coxph.fit.R: 0
#. R/agreg.fit.R: stop("invalid weights, must be >0")
#. R/coxpenal.fit.R: stop("invalid weights, must be >0")
#. R/coxph.fit.R: stop("invalid weights, must be >0")

msgid "invalid weights, must be >0"
msgstr ""


#: R/statefig.R: 0
#. R/statefig.R: stop("layout coordinates must be between 0 and 1")

msgid "layout coordinates must be between 0 and 1"
msgstr ""


#: R/statefig.R: 0
#. R/statefig.R: stop("layout matrix should have one row per state")

msgid "layout matrix should have one row per state"
msgstr ""


#: R/statefig.R: 0
#. R/statefig.R: stop("layout must be a numeric vector or matrix")

msgid "layout must be a numeric vector or matrix"
msgstr ""


#: R/survConcordance.R: 0
#. R/survConcordance.R: stop("left hand side of the formula  must be a numeric vector or a surival")

msgid "left hand side of the formula  must be a numeric vector or a surival"
msgstr ""


#: R/concordance.R: 0
#. R/concordance.R: stop("left hand side of the formula  must be a numeric vector or a survival object")

msgid "left hand side of the formula  must be a numeric vector or a survival object"
msgstr ""


#: R/concordance.R: 0
#. R/concordance.R: stop("left hand side of the formula must be a numeric vector,\n survival object, or an orderable factor")
#. R/concordance.R: stop("left hand side of the formula must be a numeric vector,\n survival object, or an orderable factor")

msgid "left hand side of the formula must be a numeric vector,\n survival object, or an orderable factor"
msgstr ""


#: R/survSplit.R: 0
#. R/survSplit.R: stop("left hand side was not recognized")

msgid "left hand side was not recognized"
msgstr ""


#: R/concordance.R: 0
#. R/concordance.R: stop("left or interval censored data is not supported")

msgid "left or interval censored data is not supported"
msgstr ""


#: R/coxpenal.fit.R: 0
#: R/survcallback.S: 0
#: R/survpenal.fit.S: 0
#. R/coxpenal.fit.R: stop("length error in 'coxlist2' object")
#. R/survcallback.S: stop("length error in 'coxlist2' object")
#. R/survpenal.fit.S: stop("length error in 'coxlist2' object")

msgid "length error in 'coxlist2' object"
msgstr ""


#: R/is.ratetable.R: 0
#. R/is.ratetable.R: gettext("length of the data does not match 'prod(dim)'")

msgid "length of the data does not match 'prod(dim)'"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: stop("levels are missing for this contrast")

msgid "levels are missing for this contrast"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: stop("levels data frame has duplicates")

msgid "levels data frame has duplicates"
msgstr ""


#: R/match.ratetable.R: 0
#. R/match.ratetable.R: gettextf("levels do not match for 'ratetable()' variable %s", dimid[i])

msgid "levels do not match for 'ratetable()' variable %s"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: stop("levels matrix has duplicated rows")

msgid "levels matrix has duplicated rows"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: stop("levels matrix has the wrong number of columns")

msgid "levels matrix has the wrong number of columns"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: stop("levels should be a data frame or matrix")

msgid "levels should be a data frame or matrix"
msgstr ""


#: R/print.coxph.null.S: 0
#. R/print.coxph.null.S: gettextf("log likelihood=%s", format(x$loglik), domain = "R-survival")

msgid "log likelihood=%s"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: stop("matrix column names do no match the terms")

msgid "matrix column names do no match the terms"
msgstr ""


#: R/cch.R: 0
#. R/cch.R: gettextf("method (%s) requires 'stratum'", method)

msgid "method (%s) requires 'stratum'"
msgstr ""


#: R/Surv.R: 0
#. R/Surv.R: gettextf("method not defined for an object of class %s", dQuote("Surv"))
#. R/Surv.R: gettextf("method not defined for an object of class %s", dQuote("Surv"))
#. R/Surv.R: gettextf("method not defined for an object of class %s", dQuote("Surv"))
#. R/Surv.R: gettextf("method not defined for an object of class %s", dQuote("Surv"))
#. R/Surv.R: gettextf("method not defined for an object of class %s", dQuote("Surv"))
#. R/Surv.R: gettextf("method not defined for an object of class %s", dQuote("Surv"))
#. R/Surv.R: gettextf("method not defined for an object of class %s", dQuote("Surv"))
#. R/Surv.R: gettextf("method not defined for an object of class %s", dQuote("Surv"))
#. R/Surv.R: gettextf("method not defined for an object of class %s", dQuote("Surv"))

msgid "method not defined for an object of class %s"
msgstr ""


#: R/survregDtest.S: 0
#. R/survregDtest.S: gettext("missing a distribution name")

msgid "missing a distribution name"
msgstr ""


#: R/is.ratetable.R: 0
#. R/is.ratetable.R: gettext("missing attribute:")

msgid "missing attribute:"
msgstr ""


#: R/survreg.fit.R: 0
#. R/survreg.fit.R: stop("missing density function in the definition of the distribution")

msgid "missing density function in the definition of the distribution"
msgstr ""


#: R/survregDtest.S: 0
#. R/survregDtest.S: gettextf("missing or invalid '%s' component", "trans")
#. R/survregDtest.S: gettextf("missing or invalid '%s' component", "itrans")
#. R/survregDtest.S: gettextf("missing or invalid '%s' component", "dtrans")

msgid "missing or invalid '%s' component"
msgstr ""


#: R/survregDtest.S: 0
#. R/survregDtest.S: gettextf("missing or invalid '%s' function", "init")
#. R/survregDtest.S: gettextf("missing or invalid '%s' function", "deviance")
#. R/survregDtest.S: gettextf("missing or invalid '%s' function", "density")
#. R/survregDtest.S: gettextf("missing or invalid '%s' function", "quantile")

msgid "missing or invalid '%s' function"
msgstr ""


#: R/is.ratetable.R: 0
#. R/is.ratetable.R: gettext("missing the 'type' attribute")

msgid "missing the 'type' attribute"
msgstr ""


#: R/tmerge.R: 0
#. R/tmerge.R: stop("missing time value, when that variable defines the span")

msgid "missing time value, when that variable defines the span"
msgstr ""


#: R/Surv.R: 0
#. R/Surv.R: stop("missing values and NaN's not allowed if 'na.rm' is FALSE")

msgid "missing values and NaN's not allowed if 'na.rm' is FALSE"
msgstr ""


#: R/concordance.R: 0
#. R/concordance.R: stop("models must have identical clustering")

msgid "models must have identical clustering"
msgstr ""


#: R/anova.coxphlist.S: 0
#. R/anova.coxphlist.S: stop("models were not all fitted to the same size of dataset")

msgid "models were not all fitted to the same size of dataset"
msgstr ""


#: R/anova.coxphlist.S: 0
#. R/anova.coxphlist.S: gettextf("models with response %s removed because response differs from model 1",     deparse(responses[!sameresp]))

msgid "models with response %s removed because response differs from model 1"
msgstr ""


#: R/pyears.R: 0
#. R/pyears.R: stop("more than one type=4 in a rate table")

msgid "more than one type=4 in a rate table"
msgstr ""


#: R/survfitCI.R: 0
#. R/survfitCI.R: gettextf("multi-state computation doesn't support \"%s\" survival data", type)

msgid "multi-state computation doesn't support \"%s\" survival data"
msgstr ""


#: R/survfit.matrix.R: 0
#. R/survfit.matrix.R: stop("multi-state curves are not a valid input")

msgid "multi-state curves are not a valid input"
msgstr ""


#: R/survreg.R: 0
#. R/survreg.R: stop("multi-state survival is not supported")

msgid "multi-state survival is not supported"
msgstr ""


#: R/cch.R: 0
#. R/cch.R: stop("multiple records per id not allowed")

msgid "multiple records per id not allowed"
msgstr ""


#: R/concordance.R: 0
#. R/concordance.R: stop("multiple state survival is not supported")

msgid "multiple state survival is not supported"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: stop("names of levels does not match the terms")

msgid "names of levels does not match the terms"
msgstr ""


#: R/survexp.fit.R: 0
#. R/survexp.fit.R: stop("negative time point requested")

msgid "negative time point requested"
msgstr ""


#: R/tmerge.R: 0
#. R/tmerge.R: stop("neither a tstop argument nor an initial event argument was found")

msgid "neither a tstop argument nor an initial event argument was found"
msgstr ""


#: R/frailty.controlaic.S: 0
#: R/frailty.controldf.S: 0
#: R/frailty.controlgam.S: 0
#: R/frailty.controlgam.S: 0
#: R/frailty.controlgauss.S: 0
#: R/frailty.controlgauss.S: 0
#. R/frailty.controlaic.S: gettextf("new theta= %s", format(newtheta), domain = "R-survival")
#. R/frailty.controldf.S: gettextf("new theta= %s", format(x[b1] + exp(newx)), domain = "R-survival")
#. R/frailty.controlgam.S: gettextf("new theta= %s", theta, domain = "R-survival")
#. R/frailty.controlgam.S: gettextf("new theta= %s", format(newtheta), domain = "R-survival")
#. R/frailty.controlgauss.S: gettextf("new theta= %s", theta, domain = "R-survival")
#. R/frailty.controlgauss.S: gettextf("new theta= %s", format(newtheta), domain = "R-survival")

msgid "new theta= %s"
msgstr ""


#: R/coxph.R: 0
#: R/finegray.R: 0
#: R/survobrien.S: 0
#. R/coxph.R: stop("no (non-missing) observations")
#. R/finegray.R: stop("no (non-missing) observations")
#. R/survobrien.S: stop("no (non-missing) observations")

msgid "no (non-missing) observations"
msgstr ""


#: R/survobrien.S: 0
#. R/survobrien.S: stop("no continuous variables to modify")

msgid "no continuous variables to modify"
msgstr ""


#: R/survdiff.S: 0
#. R/survdiff.S: stop("no groups to test")

msgid "no groups to test"
msgstr ""


#: R/print.summary.survfit.S: 0
#: R/print.summary.survfitms.S: 0
#. R/print.summary.survfit.S: gettextf("no information available using start.time = %s.", x$start.time)
#. R/print.summary.survfitms.S: gettextf("no information available using start.time = %s.", x$start.time)

msgid "no information available using start.time = %s."
msgstr ""


#: R/yates.R: 0
#. R/yates.R: stop("no non-missing coefficients in the estimate")

msgid "no non-missing coefficients in the estimate"
msgstr ""


#: R/Surv.R: 0
#. R/Surv.R: stop("no time variable!")

msgid "no time variable!"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: gettextf("no yates_setup method exists for a model of class %s and estimate type %s, linear predictor estimate used by default",     dQuote(class(fit)[1]), type)

msgid "no yates_setup method exists for a model of class %s and estimate type %s, linear predictor estimate used by default"
msgstr ""


#: R/statefig.R: 0
#. R/statefig.R: stop("non-integer number of states in layout argument")

msgid "non-integer number of states in layout argument"
msgstr ""


#: R/match.ratetable.R: 0
#. R/match.ratetable.R: gettextf("non-unique ratetable match for variable %s", dimid[i])

msgid "non-unique ratetable match for variable %s"
msgstr ""


#: R/survfit.coxph.R: 0
#. R/survfit.coxph.R: stop("not able to create a curve for models that contain an interaction without the lower order effect")

msgid "not able to create a curve for models that contain an interaction without the lower order effect"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: stop("not found in levels data frame:", parts)

msgid "not found in levels data frame:"
msgstr ""


#: R/survSplit.R: 0
#. R/survSplit.R: gettextf("not valid for %s censored survival data", attr(Y, "type"))

msgid "not valid for %s censored survival data"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: stop("not yet done 1")

msgid "not yet done 1"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: stop("not yet done 2")

msgid "not yet done 2"
msgstr ""


#: R/statefig.R: 0
#. R/statefig.R: stop("number of boxes != number of states")

msgid "number of boxes != number of states"
msgstr ""


#: R/survreg.distributions.S: 0
#. R/survreg.distributions.S: stop("number of degrees of freedom must be >=3")

msgid "number of degrees of freedom must be >=3"
msgstr ""


#: R/print.coxph.S: 0
#: R/print.summary.coxph.S: 0
#: R/print.summary.coxph.penal.S: 0
#. R/print.coxph.S: gettextf("number of events= %d", x$nevent, domain = "R-survival")
#. R/print.summary.coxph.S: gettextf("number of events= %d", x$nevent, domain = "R-survival")
#. R/print.summary.coxph.penal.S: gettextf("number of events= %d", x$nevent, domain = "R-survival")

msgid "number of events= %d"
msgstr ""


#: R/tcut.S: 0
#. R/tcut.S: stop("number of labels must be 1 less than number of break points")

msgid "number of labels must be 1 less than number of break points"
msgstr ""


#: R/tcut.S: 0
#. R/tcut.S: stop("number of labels must equal number of intervals")

msgid "number of labels must equal number of intervals"
msgstr ""


#: R/print.pyears.R: 0
#. R/print.pyears.R: gettextf("number of observations = %d", object$observations, domain = "R-survival")

msgid "number of observations = %d"
msgstr ""


#: R/cch.R: 0
#. R/cch.R: stop("number of records greater than cohort size")

msgid "number of records greater than cohort size"
msgstr ""


#: R/survfitCI.R: 0
#. R/survfitCI.R: stop("number of rows for the influence matrix is > the maximum integer")

msgid "number of rows for the influence matrix is > the maximum integer"
msgstr ""


#: R/coxph.R: 0
#. R/coxph.R: stop("offsets must lead to a finite risk score")

msgid "offsets must lead to a finite risk score"
msgstr ""


#: R/tmerge.R: 0
#. R/tmerge.R: stop("on the first call 'id' must be a single variable name")

msgid "on the first call 'id' must be a single variable name"
msgstr ""


#: R/is.ratetable.R: 0
#. R/is.ratetable.R: gettext("one of the dimnames identifiers is blank")

msgid "one of the dimnames identifiers is blank"
msgstr ""


#: R/coxph.fit.R: 0
#. R/coxph.fit.R: warning("one or more coefficients may be infinite")

msgid "one or more coefficients may be infinite"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: stop("one or more elements of the levels list has duplicates")

msgid "one or more elements of the levels list has duplicates"
msgstr ""


#: R/ridge.S: 0
#. R/ridge.S: stop("only one of 'df' or 'theta' arguments can be specified")

msgid "only one of 'df' or 'theta' arguments can be specified"
msgstr ""


#: R/coxpenal.fit.R: 0
#: R/survcallback.S: 0
#: R/survpenal.fit.S: 0
#. R/coxpenal.fit.R: stop("only one sparse penalty term allowed")
#. R/survcallback.S: stop("only one sparse penalty term allowed")
#. R/survpenal.fit.S: stop("only one sparse penalty term allowed")

msgid "only one sparse penalty term allowed"
msgstr ""


#: R/finegray.R: 0
#. R/finegray.R: warning("only the first endpoint was used")

msgid "only the first endpoint was used"
msgstr ""


#: R/is.ratetable.R: 0
#. R/is.ratetable.R: gettext("only the last dimension can be interpolated")

msgid "only the last dimension can be interpolated"
msgstr ""


#: R/parsecovar.R: 0
#. R/parsecovar.R: stop("option not recognized in a covariates formula: ", paste(ff[is.na(index)], collapse = ", "))

msgid "option not recognized in a covariates formula:"
msgstr ""


#: R/tmerge.R: 0
#. R/tmerge.R: stop("options must be a list")

msgid "options must be a list"
msgstr ""


#: R/tmerge.R: 0
#. R/tmerge.R: gettextf("overwriting data1 variables %s", paste(overwrite, collapse = " "))

msgid "overwriting data1 variables %s"
msgstr ""


#: R/survfitCI.R: 0
#. R/survfitCI.R: stop("p0 must be a numeric vector that adds to 1")

msgid "p0 must be a numeric vector that adds to 1"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: stop("pairwise tests must be for a single term")

msgid "pairwise tests must be for a single term"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: stop("pairwise tests need at least 2 levels")

msgid "pairwise tests need at least 2 levels"
msgstr ""


#: R/print.survreg.penal.S: 0
#. R/print.survreg.penal.S: stop("penalized fits must have an intercept!")

msgid "penalized fits must have an intercept!"
msgstr ""


#: R/summary.coxph.penal.R: 0
#. R/summary.coxph.penal.R: stop("penalized summary function can't be used for a null model")

msgid "penalized summary function can't be used for a null model"
msgstr ""


#: R/survreg.R: 0
#. R/survreg.R: stop("penalty terms cannot be in an interaction")

msgid "penalty terms cannot be in an interaction"
msgstr ""


#: R/cch.R: 0
#. R/cch.R: stop("permissible values for subcohort indicator are 0/1 or TRUE/FALSE")

msgid "permissible values for subcohort indicator are 0/1 or TRUE/FALSE"
msgstr ""


#: R/cch.R: 0
#. R/cch.R: stop("population smaller than sample in some strata")

msgid "population smaller than sample in some strata"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: stop("population=factorial only applies if all the adjusting terms are categorical")

msgid "population=factorial only applies if all the adjusting terms are categorical"
msgstr ""


#: R/clogit.R: 0
#. R/clogit.R: stop("predicted survival curves are not defined for a 'clogit' model")

msgid "predicted survival curves are not defined for a 'clogit' model"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: stop("prediction function should return a vector or matrix")

msgid "prediction function should return a vector or matrix"
msgstr ""


#: R/print.pyears.R: 0
#. R/print.pyears.R: stop("programming length error, notify package author")
#. R/print.pyears.R: stop("programming length error, notify package author")
#. R/print.pyears.R: stop("programming length error, notify package author")

msgid "programming length error, notify package author"
msgstr ""


#: R/pyears.R: 0
#. R/pyears.R: stop("pyears cannot handle stratified Cox models")

msgid "pyears cannot handle stratified Cox models"
msgstr ""


#: R/Surv.R: 0
#. R/Surv.R: stop("quantile method not defined for multiple-endpoint Surv objects")

msgid "quantile method not defined for multiple-endpoint Surv objects"
msgstr ""


#: R/quantile.survfit.R: 0
#. R/quantile.survfit.R: stop("quantiles are not a well defined quantity for multi-state models")

msgid "quantiles are not a well defined quantity for multi-state models"
msgstr ""


#: R/pyears.R: 0
#: R/survexp.fit.R: 0
#. R/pyears.R: stop("ratetable does not have expected shape")
#. R/survexp.fit.R: stop("ratetable does not have expected shape")

msgid "ratetable does not have expected shape"
msgstr ""


#: R/survregDtest.S: 0
#. R/survregDtest.S: gettext("reference distribution was not found")

msgid "reference distribution was not found"
msgstr ""


#: R/aareg.S: 0
#: R/anova.survreg.S: 0
#: R/cch.R: 0
#: R/survdiff.S: 0
#: R/survobrien.S: 0
#: R/survreg.R: 0
#. R/aareg.S: gettextf("response is not an object of class %s", dQuote("Surv"))
#. R/anova.survreg.S: gettextf("response is not an object of class %s", dQuote("Surv"))
#. R/cch.R: gettextf("response is not an object of class %s", dQuote("Surv"))
#. R/survdiff.S: gettextf("response is not an object of class %s", dQuote("Surv"))
#. R/survobrien.S: gettextf("response is not an object of class %s", dQuote("Surv"))
#. R/survreg.R: gettextf("response is not an object of class %s", dQuote("Surv"))

msgid "response is not an object of class %s"
msgstr ""


#: R/survobrien.S: 0
#. R/survobrien.S: stop("response must be right censored or (start, stop] data")

msgid "response must be right censored or (start, stop] data"
msgstr ""


#: R/survdiff.S: 0
#. R/survdiff.S: stop("right censored data only")

msgid "right censored data only"
msgstr ""


#: R/clogit.R: 0
#. R/clogit.R: stop("robust variance plus the exact method is not supported")

msgid "robust variance plus the exact method is not supported"
msgstr ""


#: R/agreg.fit.R: 0
#. R/agreg.fit.R: stop("routine failed due to numeric overflow. This should never happen. Please contact the author.")

msgid "routine failed due to numeric overflow. This should never happen. Please contact the author."
msgstr ""


#: R/yates.R: 0
#. R/yates.R: stop("sgtt method only applies if population = sas and predict = linear")

msgid "sgtt method only applies if population = sas and predict = linear"
msgstr ""


#: R/anova.survreglist.S: 0
#. R/anova.survreglist.S: warning("some fit objects deleted because response differs from the first model")

msgid "some fit objects deleted because response differs from the first model"
msgstr ""


#: R/coxpenal.fit.R: 0
#: R/survcallback.S: 0
#: R/survpenal.fit.S: 0
#. R/coxpenal.fit.R: stop("sparse term must be single column")
#. R/survcallback.S: stop("sparse term must be single column")
#. R/survpenal.fit.S: stop("sparse term must be single column")

msgid "sparse term must be single column"
msgstr ""


#: R/survSplit.R: 0
#. R/survSplit.R: stop("start time must be < stop time")

msgid "start time must be < stop time"
msgstr ""


#: R/survreg.R: 0
#. R/survreg.R: stop("start-stop type Surv objects are not supported")

msgid "start-stop type Surv objects are not supported"
msgstr ""


#: R/survfitTurnbull.S: 0
#. R/survfitTurnbull.S: gettextf("start.time = %s is greater than all time points.", start.time)

msgid "start.time = %s is greater than all time points."
msgstr ""


#: R/survfit.coxph.R: 0
#. R/survfit.coxph.R: stop("start.time argument has removed all endpoints")

msgid "start.time argument has removed all endpoints"
msgstr ""


#: R/survfit.coxph.R: 0
#: R/survfit.matrix.R: 0
#: R/survfitCI.R: 0
#. R/survfit.coxph.R: stop("start.time must be a single numeric value")
#. R/survfit.matrix.R: stop("start.time must be a single numeric value")
#. R/survfitCI.R: stop("start.time must be a single numeric value")

msgid "start.time must be a single numeric value"
msgstr ""


#: R/parsecovar.R: 0
#. R/parsecovar.R: stop("state variable with no list of values: ", x$left$stateid)
#. R/parsecovar.R: stop("state variable with no list of values: ", x$right$stateid)

msgid "state variable with no list of values:"
msgstr ""


#: R/parsecovar.R: 0
#. R/parsecovar.R: stop("statedata does not contain all the possible states: ", states[indx1 == 0])

msgid "statedata does not contain all the possible states:"
msgstr ""


#: R/Surv.R: 0
#. R/Surv.R: warning("status must be 0, 1, 2 or 3; converted to NA")

msgid "status must be 0, 1, 2 or 3; converted to NA"
msgstr ""


#: R/Surv.R: 0
#. R/Surv.R: warning("stop time must be > start time, NA created")

msgid "stop time must be > start time, NA created"
msgstr ""


#: R/survfit.R: 0
#: R/survfitms.R: 0
#. R/survfit.R: gettextf("strata %s not matched", paste(i[is.na(indx)], collapse = " "))
#. R/survfitms.R: gettextf("strata %s not matched", paste(i[is.na(indx)], collapse = " "))

msgid "strata %s not matched"
msgstr ""


#: R/aareg.S: 0
#. R/aareg.S: stop("strata terms not allowed")

msgid "strata terms not allowed"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: stop("stratified models not yet supported")

msgid "stratified models not yet supported"
msgstr ""


#: R/cch.R: 0
#. R/cch.R: warning("stratum levels and names(cohort.size) do not agree")

msgid "stratum levels and names(cohort.size) do not agree"
msgstr ""


#: R/survfitCI.R: 0
#: R/survfitKM.R: 0
#. R/survfitCI.R: stop("stype must be 1 or 2")
#. R/survfitKM.R: stop("stype must be 1 or 2")

msgid "stype must be 1 or 2"
msgstr ""


#: R/survfitCI.R: 0
#. R/survfitCI.R: gettextf("subject is in two different groups, id %s", id[indx1[who]])

msgid "subject is in two different groups, id %s"
msgstr ""


#: R/survfit.R: 0
#: R/survfitms.R: 0
#: R/survfitms.R: 0
#. R/survfit.R: stop("subscript is out of bounds")
#. R/survfitms.R: stop("subscript is out of bounds")
#. R/survfitms.R: stop("subscript is out of bounds")

msgid "subscript is out of bounds"
msgstr ""


#: R/survfit.R: 0
#. R/survfit.R: stop("survfit object does not have 2 dimensions")

msgid "survfit object does not have 2 dimensions"
msgstr ""


#: R/tmerge.R: 0
#. R/tmerge.R: stop("tdcstart must be a single value")

msgid "tdcstart must be a single value"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: gettextf("term '%s' not found in the fit", temp[i])

msgid "term '%s' not found in the fit"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: gettextf("term '%s' not found in the model", contr$termname)

msgid "term '%s' not found in the model"
msgstr ""


#: R/parsecovar.R: 0
#. R/parsecovar.R: stop("term found without a :", x)

msgid "term found without a :"
msgstr ""


#: R/print.pyears.R: 0
#. R/print.pyears.R: gettextf("the %s argument(s) must be single logical values", paste(tname[!temp],     collapse = ", "), domain = "R-survival")

msgid "the %s argument(s) must be single logical values"
msgstr ""


#: R/cox.zph.S: 0
#. R/cox.zph.S: stop("the are no score residuals for a Null model")

msgid "the are no score residuals for a Null model"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: stop("the fit does not have a terms structure")
#. R/yates.R: stop("the fit does not have a terms structure")

msgid "the fit does not have a terms structure"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: stop("the fit is missing an assign component")

msgid "the fit is missing an assign component"
msgstr ""


#: R/anova.coxph.R: 0
#. R/anova.coxph.R: gettextf("the following arguments passed to 'anova.coxph()' are invalid and dropped: %s",     tmp_n)

msgid "the following arguments passed to 'anova.coxph()' are invalid and dropped: %s"
msgstr ""


#: R/survfit.coxph.R: 0
#. R/survfit.coxph.R: stop("the id and/or individual options only make sense with new data")

msgid "the id and/or individual options only make sense with new data"
msgstr ""


#: R/survfitCI.R: 0
#. R/survfitCI.R: stop("the id argument is required for start:stop data")

msgid "the id argument is required for start:stop data"
msgstr ""


#: R/survSplit.R: 0
#. R/survSplit.R: stop("the model must have an object of class \"Surv\" as the response")

msgid "the model must have an object of class \"Surv\" as the response"
msgstr ""


#: R/survdiff.S: 0
#. R/survdiff.S: stop("the offset must be a survival probability")

msgid "the offset must be a survival probability"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: stop("the population argument must be a data frame or character")

msgid "the population argument must be a data frame or character"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: stop("the prediction should be a function, or a list with two functions")

msgid "the prediction should be a function, or a list with two functions"
msgstr ""


#: R/concordance.R: 0
#. R/concordance.R: stop("the reverse argument must be TRUE/FALSE")

msgid "the reverse argument must be TRUE/FALSE"
msgstr ""


#: R/survreg.R: 0
#. R/survreg.R: stop("the scale argument is not valid with multiple strata")

msgid "the scale argument is not valid with multiple strata"
msgstr ""


#: R/tmerge.R: 0
#. R/tmerge.R: stop("the second argument of tdc must be numeric, character, or factor")

msgid "the second argument of tdc must be numeric, character, or factor"
msgstr ""


#: R/parsecovar.R: 0
#. R/parsecovar.R: stop("the statedata data set must contain a variable 'state'")

msgid "the statedata data set must contain a variable 'state'"
msgstr ""


#: R/survSplit.R: 0
#. R/survSplit.R: stop("the suggested id name is already present")
#. R/survSplit.R: stop("the suggested id name is already present")

msgid "the suggested id name is already present"
msgstr ""


#: R/survfit.R: 0
#. R/survfit.R: stop("the survfit function requires a formula as its first argument")

msgid "the survfit function requires a formula as its first argument"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: stop("the term must be a formula, character string, or integer")

msgid "the term must be a formula, character string, or integer"
msgstr ""


#: R/match.ratetable.R: 0
#. R/match.ratetable.R: gettextf("the variable %s is out of range", dimid[i])

msgid "the variable %s is out of range"
msgstr ""


#: R/print.summary.survexp.R: 0
#. R/print.summary.survexp.R: stop("there are no observations to print.")

msgid "there are no observations to print."
msgstr ""


#: R/survdiff.fit.S: 0
#. R/survdiff.fit.S: stop("there is only 1 group")

msgid "there is only 1 group"
msgstr ""


#: R/survobrien.S: 0
#. R/survobrien.S: stop("this function cannot deal with iteraction terms")

msgid "this function cannot deal with iteraction terms"
msgstr ""


#: R/pspline.R: 0
#. R/pspline.R: stop("too few basis functions")

msgid "too few basis functions"
msgstr ""


#: R/pspline.R: 0
#. R/pspline.R: stop("too few degrees of freedom")

msgid "too few degrees of freedom"
msgstr ""


#: R/tmerge.R: 0
#. R/tmerge.R: stop("two data sets are required")

msgid "two data sets are required"
msgstr ""


#: R/is.ratetable.R: 0
#. R/is.ratetable.R: gettext("two dimenesions idenitied as US ratetable years")
#. R/is.ratetable.R: gettext("two dimenesions idenitied as US ratetable years")

msgid "two dimenesions idenitied as US ratetable years"
msgstr ""


#: R/survfitCI.R: 0
#: R/survfitKM.R: 0
#. R/survfitCI.R: stop("type argument must be character")
#. R/survfitKM.R: stop("type argument must be character")

msgid "type argument must be character"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: stop("type expected is not supported")

msgid "type expected is not supported"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: stop("type terms not yet supported")

msgid "type terms not yet supported"
msgstr ""


#: R/is.ratetable.R: 0
#. R/is.ratetable.R: gettextf("type[%d] is 3 or 4 but the cutpoint is not one of the date types", indx)

msgid "type[%d] is 3 or 4 but the cutpoint is not one of the date types"
msgstr ""


#: R/is.ratetable.R: 0
#. R/is.ratetable.R: gettextf("type[%d] is numeric or factor but the cutpoint is a date", indx)

msgid "type[%d] is numeric or factor but the cutpoint is a date"
msgstr ""


#: R/coxph.R: 0
#. R/coxph.R: gettextf("unknown '%s' method", method)

msgid "unknown '%s' method"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: stop("unknown population")

msgid "unknown population"
msgstr ""


#: R/survpenal.fit.S: 0
#: R/survreg.fit.R: 0
#. R/survpenal.fit.S: stop("unrecognized distribution")
#. R/survreg.fit.R: stop("unrecognized distribution")

msgid "unrecognized distribution"
msgstr ""


#: R/survfit.R: 0
#. R/survfit.R: stop("unrecognized survival type")

msgid "unrecognized survival type"
msgstr ""


#: R/cox.zph.S: 0
#. R/cox.zph.S: stop("unrecognized transform")

msgid "unrecognized transform"
msgstr ""


#: R/is.ratetable.R: 0
#. R/is.ratetable.R: gettextf("unsorted cutpoints for dimension %d", i)

msgid "unsorted cutpoints for dimension %d"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: stop("user written prediction function are not yet supported")

msgid "user written prediction function are not yet supported"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: warning("variance matrix is numerically not positive definite")

msgid "variance matrix is numerically not positive definite"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: stop("variance matrix of the coefficients is not symmetric")

msgid "variance matrix of the coefficients is not symmetric"
msgstr ""


#: R/frailty.gaussian.S: 0
#: R/frailty.t.S: 0
#. R/frailty.gaussian.S: gettextf("variance of random effect= %s", format(theta))
#. R/frailty.t.S: gettextf("variance of random effect= %s", format(theta))

msgid "variance of random effect= %s"
msgstr ""


#: R/frailty.gamma.S: 0
#. R/frailty.gamma.S: gettextf("variance of random effect= %s  I-likelihood = %s", format(theta), format(round(clog,     1), digits = 10))

msgid "variance of random effect= %s  I-likelihood = %s"
msgstr ""


#: R/survexp.R: 0
#. R/survexp.R: warning("weights ignored")

msgid "weights ignored"
msgstr ""


#: R/clogit.R: 0
#. R/clogit.R: warning("weights ignored: not possible for the exact method")

msgid "weights ignored: not possible for the exact method"
msgstr ""


#: R/coxph.R: 0
#: R/model.matrix.coxph.R: 0
#: R/survfit.R: 0
#. R/coxph.R: stop("weights must be finite")
#. R/coxph.R: stop("weights must be finite")
#. R/model.matrix.coxph.R: stop("weights must be finite")
#. R/survfit.R: stop("weights must be finite")

msgid "weights must be finite"
msgstr ""


#: R/survfit.R: 0
#. R/survfit.R: stop("weights must be non-negative")

msgid "weights must be non-negative"
msgstr ""


#: R/survfit.R: 0
#. R/survfit.R: stop("weights must be numeric")

msgid "weights must be numeric"
msgstr ""


#: R/coxph.R: 0
#: R/model.matrix.coxph.R: 0
#: R/pspline.R: 0
#: R/residuals.coxph.S: 0
#. R/coxph.R: gettextf("wrong length for '%s' argument", "tt")
#. R/coxph.R: gettextf("wrong length for '%s' argument", "init")
#. R/model.matrix.coxph.R: gettextf("wrong length for '%s' argument", "tt")
#. R/pspline.R: gettextf("wrong length for '%s' argument", "combine")
#. R/residuals.coxph.S: gettextf("wrong length for '%s' argument", "collapse")

msgid "wrong length for '%s' argument"
msgstr ""


#: R/is.ratetable.R: 0
#. R/is.ratetable.R: gettextf("wrong length for '%s' component", "dimnames")
#. R/is.ratetable.R: gettextf("wrong length for '%s' component", "cutpoints")

msgid "wrong length for '%s' component"
msgstr ""


#: R/is.ratetable.R: 0
#. R/is.ratetable.R: gettextf("wrong length for '%s' component, or dimnames do not have names", "dimid")

msgid "wrong length for '%s' component, or dimnames do not have names"
msgstr ""


#: R/is.ratetable.R: 0
#. R/is.ratetable.R: gettext("wrong length for 'type' attribute")

msgid "wrong length for 'type' attribute"
msgstr ""


#: R/is.ratetable.R: 0
#. R/is.ratetable.R: gettextf("wrong length for cutpoints %d", i)

msgid "wrong length for cutpoints %d"
msgstr ""


#: R/is.ratetable.R: 0
#. R/is.ratetable.R: gettext("wrong length for factor")

msgid "wrong length for factor"
msgstr ""


#: R/agexact.fit.R: 0
#: R/coxexact.fit.R: 0
#: R/coxpenal.fit.R: 0
#: R/coxph.fit.R: 0
#: R/survpenal.fit.S: 0
#. R/agexact.fit.R: stop("wrong length for inital values")
#. R/coxexact.fit.R: stop("wrong length for inital values")
#. R/coxpenal.fit.R: stop("wrong length for inital values")
#. R/coxph.fit.R: stop("wrong length for inital values")
#. R/survpenal.fit.S: stop("wrong length for inital values")

msgid "wrong length for inital values"
msgstr ""


#: R/survreg.fit.R: 0
#. R/survreg.fit.R: stop("wrong length for initial parameters")

msgid "wrong length for initial parameters"
msgstr ""


#: R/survfitCI.R: 0
#. R/survfitCI.R: stop("wrong length for p0")

msgid "wrong length for p0"
msgstr ""


#: R/Surv.R: 0
#. R/Surv.R: stop("wrong number of arguments for this type of survival data")
#. R/Surv.R: stop("wrong number of arguments for this type of survival data")

msgid "wrong number of arguments for this type of survival data"
msgstr ""


#: R/survfit.matrix.R: 0
#. R/survfit.matrix.R: stop("wrong number of rows for p0")

msgid "wrong number of rows for p0"
msgstr ""


#: R/concordance.R: 0
#. R/concordance.R: stop("x and y are not the same length")

msgid "x and y are not the same length"
msgstr ""


#: R/survfitKM.R: 0
#. R/survfitKM.R: stop("x must be a factor")

msgid "x must be a factor"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: gettextf("xlevels attribute not found for %s", parts[i])

msgid "xlevels attribute not found for %s"
msgstr ""


#: R/concordance.R: 0
#. R/concordance.R: stop("y and strata are not the same length")

msgid "y and strata are not the same length"
msgstr ""


#: R/concordance.R: 0
#. R/concordance.R: stop("y and weights are not the same length")

msgid "y and weights are not the same length"
msgstr ""


#: R/yates.R: 0
#. R/yates.R: stop("yates sgtt method can only handle contr.SAS or contr.treatment")

msgid "yates sgtt method can only handle contr.SAS or contr.treatment"
msgstr ""


#: R/concordance.R: 0
#. R/concordance.R: stop("ymax must be a single number")

msgid "ymax must be a single number"
msgstr ""


#: R/concordance.R: 0
#. R/concordance.R: stop("ymin must be a single number")

msgid "ymin must be a single number"
msgstr ""


#: R/cch.R: 0
#. R/cch.R: ngettext(sum(!subcoh & !cens), "%d censored observation not in subcohort", "%d censored observations not in subcohort",     domain = "R-survival")

msgid        "%d censored observation not in subcohort"
msgid_plural "%d censored observations not in subcohort"
msgstr[0]    ""
msgstr[1]    ""


#: R/pyears.R: 0
#. R/pyears.R: ngettext(nzero, "%d observation with an event and 0 follow-up time, any rate calculations are statistically questionable",     "%d observations with an event and 0 follow-up time, any rate calculations are statistically questionable",     domain = "R-survival")

msgid        "%d observation with an event and 0 follow-up time, any rate calculations are statistically questionable"
msgid_plural "%d observations with an event and 0 follow-up time, any rate calculations are statistically questionable"
msgstr[0]    ""
msgstr[1]    ""


#: R/print.survreg.S: 0
#. R/print.survreg.S: ngettext(sum(nas), "Coefficients: (%d not defined because of singularity)", "Coefficients: (%d not defined because of singularities)",     domain = "R-survival")

msgid        "Coefficients: (%d not defined because of singularity)"
msgid_plural "Coefficients: (%d not defined because of singularities)"
msgstr[0]    ""
msgstr[1]    ""


#: R/print.ratetable.R: 0
#: R/summary.ratetable.R: 0
#. R/print.ratetable.R: ngettext(length(x), "Rate table with %d dimension:", "Rate table with %d dimesions:",     domain = "R-survival")
#. R/print.ratetable.R: ngettext(length(attr(x, "dimid")), "Rate table with %d dimension:", "Rate table with %d dimensions:",     domain = "R-survival")
#. R/summary.ratetable.R: ngettext(ncat, "Rate table with %d dimension:", "Rate table with %d dimensions:",     domain = "R-survival")

msgid        "Rate table with %d dimension:"
msgid_plural "Rate table with %d dimensions:"
msgstr[0]    ""
msgstr[1]    ""


#: R/yates.R: 0
#. R/yates.R: ngettext(length(parts), "levels list should have %d component", "levels list should have %d components",     domain = "R-survival")

msgid        "levels list should have %d component"
msgid_plural "levels list should have %d components"
msgstr[0]    ""
msgstr[1]    ""


#: R/tmerge.R: 0
#. R/tmerge.R: ngettext(length(extras), "unrecognized option: %s", "unrecognized options: %s", domain = "R-survival")

msgid        "unrecognized option: %s"
msgid_plural "unrecognized options: %s"
msgstr[0]    ""
msgstr[1]    ""
