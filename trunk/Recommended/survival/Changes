Tylko w R-recommended-moje/survival/inst: po
Tylko w R-recommended-moje/survival: po
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/aareg.S R-recommended-moje/survival/R/aareg.S
29c29
<     if (!inherits(Y, "Surv")) stop("Response must be a survival object")
---
>     if (!inherits(Y, "Surv")) stop(gettextf("response is not an object of class %s", dQuote("Surv")))
52c52
< 	if (any(ord>1)) stop ("Cluster can not be used in an interaction")
---
> 	if (any(ord>1)) stop("cluster can not be used in an interaction")
58c58
<     else cluster <- 1:nrow(m)
---
>     else cluster <- seq_len(nrow(m))
70c70
<        stop("Strata terms not allowed")
---
>        stop("strata terms not allowed")
82,83c82
< 	stop(paste("Aalen model doesn't support \"", type,
< 			  "\" survival data", sep=''))
---
> 	stop(gettextf("Aalen model doesn't support \"%s\" survival data", type))
127,128c126,127
<                                      ff$event2[1:ndeath]),
< 	       time = times[ff$index[1:ndeath]],
---
>                                      ff$event2[seq_len(ndeath)]),
> 	       time = times[ff$index[seq_len(ndeath)]],
130c129
< 	       nevent=ff$event2[1:ndeath])  #weighted number of events
---
> 	       nevent=ff$event2[seq_len(ndeath)])  #weighted number of events
154c153
<     index <- match(times, dt$time[1:ndeath], nomatch=0) * status
---
>     index <- match(times, dt$time[seq_len(ndeath)], nomatch=0) * status
168c167
<         resid[nevent*((1:nused)[deaths]-1) + 1:nevent] <- 1.0 
---
>         resid[nevent*((seq_len(nused))[deaths]-1) + seq_len(nevent)] <- 1.0 
253c252
<         dindex2 <- (1:nused)[deaths]  # row number of each death
---
>         dindex2 <- (seq_len(nused))[deaths]  # row number of each death
258c257
< 	for (i in 1:nevent) {	    
---
> 	for (i in seq_len(nevent)) {	    
368c367
<     if (!inherits(x, 'aareg')) stop ("Must be an aareg object")
---
>     if (!inherits(x, 'aareg')) stop(gettextf("'%s' argument is not an object of class %s", "x", dQuote("aareg")))
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/aareg.taper.S R-recommended-moje/survival/R/aareg.taper.S
8c8
<         stop("Invalid taper vector")
---
>         stop(gettextf("invalid '%s' argument", "taper"))
13c13
<         taper <- taper[1:ntime]
---
>         taper <- taper[seq_len(ntime)]
28,29c28,29
<         for (i in 1:ntaper) 
<             smoother[1:i, i] <- taper[seq(to=ntaper, length=i)]/tsum[i]
---
>         for (i in seq_len(ntaper)) 
>             smoother[seq_len(i), i] <- taper[seq(to=ntaper, length=i)]/tsum[i]
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/agsurv.R R-recommended-moje/survival/R/agsurv.R
22,23c22
<         indx  <- approx(etime, 1:length(etime), time, method='constant',
<                         rule=2, f=1)$y   
---
>         indx  <- approx(etime, seq_len(length(etime)), time, method='constant', rule = 2, f = 1)$y   
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/anova.coxmelist.R R-recommended-moje/survival/R/anova.coxmelist.R
10c10
< 	     stop("Argument must be a list of coxme or coxph models")
---
> 	     stop("'object' argument must be a list of objects of class \"coxme\" or \"coxph\"")
25,26c25
<         warning(paste("Models with response", deparse(responses[!sameresp]), 
<             "removed because response differs from", "model 1"))
---
>         warning(gettextf("models with response %s removed because response differs from model 1", deparse(responses[!sameresp])))
28,29c27
<     ns <- sapply(object, function(x) if (inherits(x, "coxph")) c(x$nevent, x$n)
<                                          else x$n)
---
>     ns <- sapply(object, function(x) if (inherits(x, "coxph")) c(x$nevent, x$n) else x$n)
47,48c45
<     table <- data.frame(loglik, Chisq= c(NA, abs(2*diff(loglik))), 
<                         Df= abs(c(NA, diff(df))))
---
>     table <- data.frame(loglik, Chisq = c(NA, abs(2*diff(loglik))), Df = abs(c(NA, diff(df))))
52,57c49,51
<     dimnames(table) <- list(1:nmodels, 
< 			    c("loglik", "Chisq", "Df"))
<     title <- paste("Analysis of Deviance Table\n Cox model: response is ",
< 		   responses[1]) 
<     topnote <- paste(" Model ", format(1:nmodels), ": ", variables, 
< 		     sep = "", collapse = "\n")
---
>     dimnames(table) <- list(seq_len(nmodels), c("loglik", "Chisq", "Df"))
>     title <- paste(gettext("Analysis of Deviance Table"), "\n ", gettextf("Cox model: response is %s", responses[1])) 
>     topnote <- paste(gettextf(" Model %s:", format(seq_len(nmodels))), variables, collapse = "\n")
61,64c55,56
<     if (is.R()) structure(table, heading = c(title, topnote), 
< 			  class = c("anova", "data.frame"))
<     else structure(table, heading = c(title, topnote), 
< 			  class = "anova")	     
---
>     if (is.R()) structure(table, heading = c(title, topnote), class = c("anova", "data.frame"))
>     else structure(table, heading = c(title, topnote), class = "anova")	     
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/anova.coxphlist.S R-recommended-moje/survival/R/anova.coxphlist.S
5c5
<     if (!is.list(object)) stop("First argument must be a list")
---
>     if (!is.list(object)) stop("'object' argument is not a list")
7c7
< 	     stop("Argument must be a list of coxph models")
---
> 	     stop("'object' argument must be a list of objects of class \"coxph\"")
9c9
<         stop("Can't do anova tables with robust variances")
---
>         stop("cannot do anova tables with robust variances")
16,17c16
<         warning(paste("Models with response", deparse(responses[!sameresp]), 
<             "removed because response differs from", "model 1"))
---
> 	warning(gettextf("models with response %s removed because response differs from model 1", deparse(responses[!sameresp])))
34c33
<     dimnames(table) <- list(1:nmodels, 
---
>     dimnames(table) <- list(seq_len(nmodels), 
36,39c35,36
<     title <- paste("Analysis of Deviance Table\n Cox model: response is ",
< 		   responses[1]) 
<     topnote <- paste(" Model ", format(1:nmodels), ": ", variables, 
< 		     sep = "", collapse = "\n")
---
>     title <- paste(gettext("Analysis of Deviance Table"), "\n ", gettextf("Cox model: response is %s", responses[1]), sep = "")
>     topnote <- paste(gettextf(" Model %s:", format(seq_len(nmodels))), variables, collapse = "\n")
43,46c40,41
<     if (is.R()) structure(table, heading = c(title, topnote), 
< 			  class = c("anova", "data.frame"))
<     else structure(table, heading = c(title, topnote), 
< 			  class = "anova")	     
---
>     if (is.R()) structure(table, heading = c(title, topnote), class = c("anova", "data.frame"))
>     else structure(table, heading = c(title, topnote), class = "anova")	     
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/anova.coxph.S R-recommended-moje/survival/R/anova.coxph.S
5c5
<         stop ("argument must be a cox model")
---
>         stop(gettextf("'%s' argument is not an object of class %s", "object", dQuote("coxph")))
16,18c16,19
<         warning(paste("The following arguments to anova.coxph(..)", 
<             "are invalid and dropped:", paste(deparse(dotargs[named]), 
<                 collapse = ", ")))
---
> 	{
> 	tmp_n <- paste(deparse(dotargs[named]), collapse = ", ") 
>         warning(gettextf("the following arguments passed to 'anova.coxph()' are invalid and dropped: %s", tmp_n))
> 	}
26c27
<             stop("All arguments must be Cox models")
---
>             stop("all arguments must be an objects of class \"coxph\" or \"coxme\"")
37c38
<         stop("Can't do anova tables with robust variances")
---
>         stop("cannot do anova tables with robust variances")
90,93c91,92
<     title <- paste("Analysis of Deviance Table\n Cox model: response is ",
< 		   deparse(object$terms[[2]]),
< 		   "\nTerms added sequentially (first to last)\n", 
< 		   sep = "")
---
>     title <- paste(gettext("Analysis of Deviance Table"), "\n ", gettextf("Cox model: response is %s", deparse(object$terms[[2]]), domain = "R-survival"), "\n", 
> 		   gettext("Terms added sequentially (first to last)"), "\n", sep = "")
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/attrassign.R R-recommended-moje/survival/R/attrassign.R
27c27
<                 stop("need terms object")
---
>                 stop(gettextf("'%s' argument is not an object of class %s", "tt", dQuote("terms")))
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/basehaz.S R-recommended-moje/survival/R/basehaz.S
7c7
<         stop("must be a coxph object")
---
>         stop(gettextf("'%s' argument is not an object of class %s", "fit", dQuote("coxph")))
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/cch.R R-recommended-moje/survival/R/cch.R
20c20
<         stop("Multiple records per id not allowed")
---
>         stop("multiple records per id not allowed")
25c25
<         stop("Permissible values for subcohort indicator are 0/1 or TRUE/FALSE")
---
>         stop("permissible values for subcohort indicator are 0/1 or TRUE/FALSE")
27c27
<         stop("Number of records greater than cohort size")
---
>         stop("number of records greater than cohort size")
35c35
<             warning("`robust' not implemented for stratified analysis.")
---
>             warning("'robust' argument is not implemented for stratified analysis")
37c37
<             stop("method (",method,") requires 'stratum'")
---
>             stop(gettextf("method (%s) requires 'stratum'", method))
39c39
<             stop("cohort.size and stratum do not match")
---
>             stop("'cohort.size' and 'stratum' levels lengths do not match")
45c45
<             warning("`robust' ignored for  method (",method,")")
---
>             warning(gettextf("'robust' argument ignored for method (%s)", method))
47c47
<             warning("'stratum' ignored for method (",method,")")
---
>             warning(gettextf("'stratum' argument ignored for method (%s)", method))
53c53
<         stop("Population smaller than sample in some strata")
---
>         stop("population smaller than sample in some strata")
62c62
<         stop("Response must be a survival object")
---
>         stop(gettextf("response is not an object of class %s", dQuote("Surv")))
66c66
<                  stop(paste("Cox model doesn't support \"", type, "\" survival data", sep = "")),
---
>                  stop(gettextf("cox model doesn't support \"%s\" survival data", type)),
70c70,73
<         stop(sum(!subcoh & !cens),"censored observations not in subcohort")
---
>         stop(sprintf(ngettext(sum(!subcoh & !cens),
> 				"%d censored observation not in subcohort",
> 				"%d censored observations not in subcohort", domain = "R-survival"),
> 			 sum(!subcoh & !cens)), domain = NA)
240c243
<   for (j in 1:jj) {
---
>   for (j in seq_len(jj)) {
292c295
<   for (j in 1:jj) {
---
>   for (j in seq_len(jj)) {
326,327c329
<     dimnames(coefficients) <- list(names(coef), c("Value", 
<                                                   "SE", "Z", "p"))
---
>     dimnames(coefficients) <- list(names(coef), c("Value", "SE", "Z", "p"))
335c337
<         cat("Exposure-stratified case-cohort analysis,", x$method, "method.\n")
---
>         cat(gettextf("Exposure-stratified case-cohort analysis, %s method.", x$method, domain = "R-survival"), "\n", sep = "")
339,341c341
<         cat("Case-cohort analysis,")
<         cat("x$method,", x$method,"\n with subcohort of",
<             x$subcohort.size,"from cohort of", x$cohort.size,"\n\n")
---
>         cat(gettextf("Case-cohort analysis, x$method, %s with subcohort of %s from cohort of %s", x$method, x$subcohort.size, x$cohort.size, domain = "R-survival"), "\n\n", sep = "")
343,344c343,344
<     cat("Call: "); print(x$call)
<     cat("\nCoefficients:\n")
---
>     cat(gettext("Call: ", domain = "R-survival")); print(x$call)
>     cat("\n", gettext("Coefficients:", domain = "R-survival"), "\n", sep = "")
362,363c362
<     dimnames(coefficients) <- list(names(coef), c("Value", 
<                                                   "SE", "Z", "p"))
---
>     dimnames(coefficients) <- list(names(coef), c("Value", "SE", "Z", "p"))
377c376
<         cat("Exposure-stratified case-cohort analysis,", x$method, "method.\n")
---
>         cat(gettextf("Exposure-stratified case-cohort analysis, %s method.", x$method, domain = "R-survival"), "\n", sep = "")
381,383c380
<         cat("Case-cohort analysis,")
<         cat("x$method,", x$method,"\n with subcohort of",
<             x$subcohort.size,"from cohort of", x$cohort.size,"\n\n")
---
>         cat(gettextf("Case-cohort analysis, x$method, %s with subcohort of %s from cohort of %s", x$method, x$subcohort.size, x$cohort.size, domain = "R-survival"), "\n\n", sep = "")
385,386c382,383
<     cat("Call: "); print(x$call)
<     cat("\nCoefficients:\n")
---
>     cat(gettext("Call: ", domain = "R-survival")); print(x$call)
>     cat("\n", gettext("Coefficients:", domain = "R-survival"), "\n", sep = "")
388,389c385,386
<                   "(95%"=exp(x$coefficients[,1]-1.96*x$coefficients[,2]),
<                   "CI)"=exp(x$coefficients[,1]+1.96*x$coefficients[,2]),
---
>                   "(95%"=exp(x$coefficients[,1] - qnorm(0.975)*x$coefficients[,2]),
>                   "CI)"=exp(x$coefficients[,1] + qnorm(0.975)*x$coefficients[,2]),
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/clogit.R R-recommended-moje/survival/R/clogit.R
16c16
<     if (indx[1]==0) stop("A formula argument is required")
---
>     if (indx[1]==0) stop("'formula' argument is required")
37c37
<         warning("Weights are ignored in clogit")
---
>         warning("weights are ignored in 'clogit()'")
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/coxph.control.S R-recommended-moje/survival/R/coxph.control.S
8,9c8,9
<     if (iter.max <0) stop("Invalid value for iterations")
<     if (eps <=0) stop ("Invalid convergence criteria")
---
>     if (iter.max <0) stop("invalid value for iterations")
>     if (eps <=0) stop("invalid convergence criteria")
11,12c11,12
< 	    warning("For numerical accuracy, tolerance should be < eps")
<     if (toler.inf <=0) stop ("The inf.warn setting must be >0")
---
> 	    warning("for numerical accuracy, tolerance should be < eps")
>     if (toler.inf <=0) stop("'toler.inf' argument must be >0")
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/coxph.R R-recommended-moje/survival/R/coxph.R
16c16
<     if (indx[1] ==0) stop("A formula argument is required")
---
>     if (indx[1] ==0) stop("'formula' argument is required")
31c31
<     if (nrow(mf) ==0) stop("No (non-missing) observations")
---
>     if (nrow(mf) ==0) stop("no (non-missing) observations")
43,44c43
<             stop(gettextf("Argument %s not matched", names(extraArgs)[indx==0L]),
<                  domain = NA)
---
>             stop(gettextf("argument %s not matched", names(extraArgs)[indx==0L]), domain = "R-survival")
49c48
<     if (!inherits(Y, "Surv")) stop("Response must be a survival object")
---
>     if (!inherits(Y, "Surv")) stop(gettextf("response is not an object of class %s", dQuote("Surv")))
52,53c51
<         stop(paste("Cox model doesn't support \"", type,
<                           "\" survival data", sep=''))
---
>         stop(gettextf("Cox model doesn't support \"%s\" survival data", type))
62c60
<         if (any(ord>1)) stop ("Cluster can not be used in an interaction")
---
>         if (any(ord>1)) stop ("cluster can not be used in an interaction")
103c101
<                  stop("The tt argument must contain function or list of functions")
---
>                  stop("'tt' argument must contain a function or list of functions")
107c105
<                      for (i in 1:ntrans) temp[[i]] <- tt[[1]]
---
>                      for (i in seq_len(ntrans)) temp[[i]] <- tt[[1]]
110c108
<                  else stop("Wrong length for tt argument")
---
>                  else stop(gettextf("wrong length for '%s' argument", "tt"))
113c111
<          else stop("The tt argument must contain a function or list of functions")
---
>          else stop("'tt' argument must contain a function or list of functions")
154c152
<          for (i in 1:ntrans) 
---
>          for (i in seq_len(ntrans)) 
214c212
<         if (any(ord>1)) stop ('Penalty terms cannot be in an interaction')
---
>         if (any(ord>1)) stop("penalty terms cannot be in an interaction")
231c229
<         else stop(paste ("Unknown method", method))
---
>         else stop(gettextf("unknown method %s", method))
243,244c241
<            msg <-paste("X matrix deemed to be singular; variable",
<                            paste(vars, collapse=" "))
---
>            msg <-gettextf("X matrix deemed to be singular; variable %s", paste(vars, collapse=" "))
288c285
<                           init[1:length(fit$coefficients)])[nabeta]
---
>                           init[seq_len(length(fit$coefficients))])[nabeta]
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/coxph.rvar.S R-recommended-moje/survival/R/coxph.rvar.S
5c5
< 	stop ("First argument must be a fitted Cox model")
---
> 	stop(gettextf("'%s' argument is not an object of class %s", "fit", dQuote("coxph")))
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/coxph.wtest.S R-recommended-moje/survival/R/coxph.wtest.S
18c18
< 	else stop("Argument lengths do not match")
---
> 	else stop(gettextf("'%s' and '%s' arguments are of different lengths", "var", "b"))
23c23
<         else stop("Argument lengths do not match")
---
>         else stop(gettextf("'%s' and '%s' arguments are of different lengths", "var", "b"))
27,28c27,28
<             stop("First argument must be a square matrix")
<     if (nrow(var) != nvar) stop("Argument lengths do not match")
---
>             stop("'var' argument is not a square matrix")
>     if (nrow(var) != nvar) stop(gettextf("'%s' and '%s' arguments are of different lengths", "var", "b"))
37c37
<     else          list(test=temp$tests[1:ntest], df=temp$df, 
---
>     else          list(test=temp$tests[seq_len(ntest)], df=temp$df, 
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/dsurvreg.S R-recommended-moje/survival/R/dsurvreg.S
6c6
<     if (is.null(dist)) stop("Distribution not found")
---
>     if (is.null(dist)) stop(gettextf("%s distribution was not found", sQuote(distribution)))
25c25
<     if (is.null(dist)) stop("Distribution not found")
---
>     if (is.null(dist)) stop(gettextf("%s distribution was not found", sQuote(distribution)))
41c41
<     if (is.null(dist)) stop("Distribution not found")
---
>     if (is.null(dist)) stop(gettextf("%s distribution was not found", sQuote(distribution)))
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/frailty.brent.S R-recommended-moje/survival/R/frailty.brent.S
9c9
<     if (length(y) != n) stop ("Length mismatch for x and y")
---
>     if (length(y) != n) stop(gettextf("'%s' and '%s' arguments are of different lengths", "x", "y"))
18,19c18,19
<     best <- (1:n)[yy==max(y)]
<     if (length(best) >1) stop("Ties for max(y), I surrender") #fix this later
---
>     best <- seq_len(n)[yy == max(y)]
>     if (length(best) >1) stop("Ties for 'max(y)', I surrender") #fix this later
43,44c43
<     if (new < xx[1] || new > xx[3] ||
< 	      ( (n>4) && (new-x[n]) > .5*abs(x[n-1]-x[n-2]))) {
---
>     if (new < xx[1] || new > xx[3] || ( (n>4) && (new-x[n]) > .5*abs(x[n-1]-x[n-2]))) {
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/frailty.controlaic.S R-recommended-moje/survival/R/frailty.controlaic.S
21,22c21
< 	history <- c(theta=old$theta, loglik=loglik,
< 		     df=df, aic=loglik-df, aicc=loglik - dfc)
---
> 	history <- c(theta = old$theta, loglik = loglik, df = df, aic = loglik - df, aicc = loglik - dfc)
29,30c28
<     history <- rbind(old$history,c(old$theta, loglik, df, loglik-df, 
< 				   loglik -dfc))
---
>     history <- rbind(old$history,c(old$theta, loglik, df, loglik - df, loglik - dfc))
50,51c48
<     else  newtheta <- frailty.brent(x, aic, lower=parms$lower, 
< 				    upper=parms$upper)
---
>     else  newtheta <- frailty.brent(x, aic, lower = parms$lower, upper = parms$upper)
55c52
< 	cat("    new theta=", format(newtheta), "\n\n")
---
> 	cat("    ", gettextf("new theta= %s", format(newtheta), domain = "R-survival"), "\n\n", sep = "")
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/frailty.controldf.S R-recommended-moje/survival/R/frailty.controldf.S
17,18c17
< 	return(list(theta=theta, done=FALSE, 
< 		    history=cbind(thetas=parms$thetas, dfs=parms$dfs)))
---
> 	return(list(theta = theta, done = FALSE, history = cbind(thetas = parms$thetas, dfs = parms$dfs)))
33,34c32
< 	return(list(theta=theta, done=FALSE,
< 		    history=cbind(thetas=thetas, dfs=dfs), half=0))
---
> 	return(list(theta = theta, done = FALSE, history = cbind(thetas = thetas, dfs = dfs), half = 0))
39,40c37
< 	done <- (iter>1 &&
< 		 (abs(dfs[nx]-parms$df) < eps))
---
> 	done <- (iter>1 && (abs(dfs[nx]-parms$df) < eps))
67,68c64
< 		    cat("  bisect:new theta=" , format( mean(x[b1+0:1])), 
< 			"\n\n")
---
> 		    cat("  ", gettextf("bisect:new theta= %s" , format( mean(x[b1+0:1])), domain = "R-survival"), "\n\n", sep = "")
70,72c66
< 		return(list(theta= mean(x[b1+0:1]),done=done, 
< 			      history=cbind(thetas=thetas, dfs=dfs), 
< 				            half=max(old$half, 0) +1))
---
> 		return(list(theta = mean(x[b1+0:1]),done = done, history = cbind(thetas = thetas, dfs = dfs), half = max(old$half, 0) +1))
77,78c71
< 	    if ((b1+1)==nx ||
< 		(b1>1 &&  ((target -y[b1]) < (y[b1+1] -target))))
---
> 	    if ((b1+1)==nx || (b1>1 &&  ((target -y[b1]) < (y[b1+1] -target))))
92c85
< 	    cat("  new theta=" , format(x[b1] + exp(newx)), "\n\n")
---
> 	    cat("  ", gettextf("new theta= %s" , format(x[b1] + exp(newx)), domain = "R-survival"), "\n\n", sep = "")
94,95c87
< 	list(theta=x[b1] + exp(newx), done=done, 
< 	     history=cbind(thetas=thetas, dfs=dfs), half=0)
---
> 	list(theta = x[b1] + exp(newx), done = done, history = cbind(thetas = thetas, dfs = dfs), half = 0)
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/frailty.controlgam.S R-recommended-moje/survival/R/frailty.controlgam.S
26c26
< 	    if (is.matrix(group)) group <- c(group %*% 1:ncol(group))
---
> 	    if (is.matrix(group)) group <- c(group %*% seq_len(ncol(group)))
54c54
< 		    cat("    new theta=", theta, "\n\n")
---
> 		    cat("    ", gettextf("new theta= %s", theta, domain = "R-survival"), "\n\n", sep = "")
56,57c56
< 		list(theta=theta, done=FALSE, history=history,
< 		     c.loglik= loglik+correct)
---
> 		list(theta = theta, done = FALSE, history = history, c.loglik = loglik + correct)
70c69
< 		    cat("    new theta=", format(newtheta), "\n\n")
---
> 		    cat("    ", gettextf("new theta= %s", format(newtheta), domain = "R-survival"), "\n\n", sep = "")
72,73c71
< 		list(theta=newtheta, done=done, history=history, 
< 		     c.loglik = loglik + correct)
---
> 		list(theta = newtheta, done = done, history = history, c.loglik = loglik + correct)
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/frailty.controlgauss.S R-recommended-moje/survival/R/frailty.controlgauss.S
44c44
< 		    cat("    new theta=", theta, "\n\n")
---
> 		    cat("    ", gettextf("new theta= %s", theta, domain = "R-survival"), "\n\n", sep = "")
59c59
< 		    b1 <- (1:iter)[ord==iter]
---
> 		    b1 <- seq_len(iter)[ord==iter]
83c83
< 		    cat("    new theta=", format(newtheta), "\n\n")
---
> 		    cat("    ", gettextf("new theta= %s", format(newtheta), domain = "R-survival"), "\n\n", sep = "")
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/frailty.S R-recommended-moje/survival/R/frailty.S
12c12
< 	    stop(paste("Function '", temp, "' not found", sep=""))
---
> 	    stop(gettextf("function %s was not found", sQuote(temp)))
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/frailty.t.S R-recommended-moje/survival/R/frailty.t.S
20c20
<     if (tdf <=2) stop("Cannot have df <3 for the t-frailty")
---
>     if (tdf <=2) stop("cannot have df <3 for the t-frailty")
26c26
< 		    stop("Cannot give both a df and theta argument")
---
> 		    stop("cannot give both a 'df' and 'theta' argument")
35c35
<     if (method=='df' && missing(df)) stop("Method = df but no df argument")
---
>     if (method == 'df' && missing(df)) stop(gettextf("'%s' option is set but no '%s' argument", "method = df", "df"))
37c37
< 	    stop("Method= fixed but no theta argument")
---
> 	    stop(gettextf("'%s' option is set but no '%s' argument", "method = fixed", "theta"))
39c39
< 	    stop("Method is not 'fixed', but have a theta argument")
---
> 	    stop(gettextf("'%s' option is set but '%s' argument is specified", "method != fixed", "theta"))
74c74
< 		 history=paste("Variance of random effect=", format(theta)))
---
> 		 history=gettextf("variance of random effect= %s", format(theta)))
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/is.ratetable.S R-recommended-moje/survival/R/is.ratetable.S
14,15c14
< 	if (length(att$dimnames)!=nd ||
< 			 length(att$cutpoints)!=nd) return(FALSE)
---
> 	if (length(att$dimnames) != nd || length(att$cutpoints) != nd) return(FALSE)
31c30
< 	for (i in 1:nd) {
---
> 	for (i in seq_len(nd)) {
35c34
< 	    if (fac[i]!=1 && any(order(att$cutpoints[[i]])!= 1:n)) return(FALSE)
---
> 	    if (fac[i]!=1 && any(order(att$cutpoints[[i]])!= seq_len(n))) return(FALSE)
44c43
<     if (!inherits(x, 'ratetable')) msg <- c(msg, "wrong class")
---
>     if (!inherits(x, 'ratetable')) msg <- c(msg, stop(gettextf("'%s' argument is not an object of class %s", "x", dQuote("ratetable"))))
49c48
<         msg <- c(msg, paste("missing attribute:", dlist[temp]))
---
>         msg <- c(msg, paste(gettext("missing attribute:"), dlist[temp]))
55c54
<         msg <- c(msg, 'length of the data does not match prod(dim)')
---
>         msg <- c(msg, gettext("length of the data does not match 'prod(dim)'"))
58c57
< 	     msg <- c(msg, 'dimnames is not a list')
---
> 	     msg <- c(msg, gettextf("'%s' component is not a list", "dimnames"))
60c59
< 	     msg <- c(msg, 'cutpoints is not a list')
---
> 	     msg <- c(msg, gettextf("'%s' component is not a list", "cutpoints"))
63c62
<         msg <- c(msg, 'wrong length for dimnames')
---
>         msg <- c(msg, gettextf("wrong length for '%s' component", "dimnames"))
65c64
<         msg <- c(msg, 'wrong length for dimid')
---
>         msg <- c(msg, gettextf("wrong length for '%s' component", "dimid"))
68c67
<         msg <- c(msg, 'wrong length for cutpoints')
---
>         msg <- c(msg, gettextf("wrong length for '%s' component", "cutpoints"))
72,73c71,72
<         if (any(is.na(fac))) msg <- c(msg, "illegal 'factor' level of NA")
<         if (any(fac <0)) msg <- c(msg, "illegal 'factor' attribute of <0")
---
>         if (any(is.na(fac))) msg <- c(msg, gettext("illegal 'factor' level of NA"))
>         if (any(fac <0)) msg <- c(msg, gettext("illegal 'factor' attribute of <0"))
75c74
<             msg <- c(msg, 'wrong length for factor')
---
>             msg <- c(msg, gettextf("wrong length for '%s' component", "factor"))
80c79
<             msg <- c(msg, 'type attribute must be 1, 2, 3, or 4')
---
>             msg <- c(msg, gettext("'type' attribute must be 1, 2, 3, or 4"))
83c82
<             msg <- c(msg, 'wrong length for type attribute')
---
>             msg <- c(msg, gettext("wrong length for 'type' attribute"))
85c84
<     else msg <- c(msg, "missing the 'type' attribute")
---
>     else msg <- c(msg, gettext("missing the 'type' attribute"))
87c86
<     for (i in 1:nd) {
---
>     for (i in seq_len(nd)) {
90c89
< 		msg <- c(msg, paste('dimname', i, 'is the wrong length'))
---
> 		msg <- c(msg, gettextf("dimname %d is the wrong length", i))
94,96c93,95
<                 msg <- c(msg, paste('wrong length for cutpoints', i))
<             else if (any(order(att$cutpoints[[i]])!= 1:n)) 
< 		msg <- c(msg, paste('unsorted cutpoints for dimension',i))
---
>                 msg <- c(msg, gettextf("wrong length for cutpoints %d", i))
>             else if (any(order(att$cutpoints[[i]])!= seq_len(n))) 
> 		msg <- c(msg, gettextf("unsorted cutpoints for dimension %d", i))
100,101c99
< 		msg <- c(msg, paste('type[', i, 
<                                     '] is 1; cutpoint should be null'))
---
> 		msg <- c(msg, gettextf("type[ %d ] is 1; cutpoint should be null", i))
104c102
< 		msg <- c(msg, 'only the last dimension can be interpolated')
---
> 		msg <- c(msg, gettext("only the last dimension can be interpolated"))
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/match.ratetable.S R-recommended-moje/survival/R/match.ratetable.S
10c10
<     if (!is.ratetable(ratetable)) stop("Invalid rate table")
---
>     if (!is.ratetable(ratetable)) stop("invalid rate table")
26c26
<         for (i in 1:nd) {
---
>         for (i in seq_len(nd)) {
39,40c39
<        stop(paste("Argument '", dimid[is.na(ord)],
< 	    "' needed by the ratetable was not found in the data", sep=''))
---
>        stop(gettextf("'%s' argument needed by the ratetable was not found in the data", dimid[is.na(ord)]))
44c43
<         stop("A ratetable argument appears twice in the data")
---
>         stop("'ratetable' argument appears twice in the data")
64,65c63
<         stop(paste("Data has a date type variable, but the reference",
<                    "ratetable is not a date for variable", dimid[indx]))
---
>         stop(gettextf("data has a date type variable, but the reference ratetable is not a date for variable %s", dimid[indx]))
67c65
<     for (i in (1:nd)) {
---
>     for (i in seq_len(nd)) {
69,70c67
< 	    if (rtype[i]!=1) stop(paste("In ratetable(),", dimid[i],
< 				     "must be a continuous variable"))
---
> 	    if (rtype[i]!=1) stop(gettextf("In 'ratetable()', %s must be a continuous variable", dimid[i]))
73,74c70
< 		stop(paste("Levels do not match for ratetable() variable",
< 			    dimid[i]))
---
> 		stop(gettextf("levels do not match for 'ratetable()' variable %s", dimid[i]))
76,77c72
<                 stop(paste("Non-unique ratetable match for variable",
<                                dimid[i]))
---
>                 stop(gettextf("non-unique ratetable match for variable %s", dimid[i]))
85,87c80,81
< 		if (any(floor(temp)!=temp) || any(temp<=0) ||
< 			    max(temp) > length(dtemp[[i]]))
< 		stop(paste("The variable", dimid[i], "is out of range"))
---
> 		if (any(floor(temp)!=temp) || any(temp<=0) || max(temp) > length(dtemp[[i]]))
> 		stop(gettextf("the variable %s is out of range", dimid[i]))
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/predict.coxph.R R-recommended-moje/survival/R/predict.coxph.R
8c8
<         stop("Primary argument much be a coxph object")
---
> 	stop(gettextf("'%s' argument is not an object of class %s", "object", dQuote("coxph")))
19c19
<                     terms <1)) stop("Invalid terms argument")
---
>                     terms <1)) stop(gettextf("invalid '%s' argument", "terms"))
22c22
<            stop("a name given in the terms argument not found in the model")
---
>            stop("a name given in the terms argument was not found in the model")
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/print.coxph.null.S R-recommended-moje/survival/R/print.coxph.null.S
6c6
< 	cat("Call:  ")
---
> 	cat(gettext("Call: ", domain = "R-survival"))
11c11
<     cat("Null model\n  log likelihood=", format(x$loglik), "\n")
---
>     cat(gettext("Null model", domain = "R-survival"), "\n  ", gettextf("log likelihood=%s", format(x$loglik), domain = "R-survival"), "\n", sep = "")
14,16c14,15
< 	cat("  n=", x$n, " (", naprint(omit), ")\n",
< 				sep="")
<     else cat("  n=", x$n, "\n")
---
> 	cat("  n=", x$n, " (", naprint(omit), ")\n", sep = "")
>     else cat("  n=", x$n, "\n", sep = "")
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/print.coxph.S R-recommended-moje/survival/R/print.coxph.S
6c6
< 	cat("Call:\n")
---
> 	cat(gettext("Call:", domain = "R-survival"), "\n", sep = "")
11c11
< 	cat(" Coxph failed.", x$fail, "\n")
---
> 	cat(gettext(" Coxph failed. ", domain = "R-survival"), x$fail, "\n", sep = "")
20c20
<         stop("Input is not valid")
---
>         stop("input is not valid")
42,43c42
<     cat("Likelihood ratio test=", format(round(logtest, 2)), "  on ",
< 	df, " df,", " p=", format(1 - pchisq(logtest, df)),  sep="")
---
>     cat(gettextf("Likelihood ratio test = %s on %s df, p=%s", format(round(logtest, 2)), df, format(1 - pchisq(logtest, df)), domain = "R-survival"))
46c45
<     if (!is.null(x$nevent)) cat(", number of events=", x$nevent, "\n")
---
>     if (!is.null(x$nevent)) cat(", ", gettextf("number of events= %d", x$nevent, domain = "R-survival"), "\n", sep = "")
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/print.ratetable.S R-recommended-moje/survival/R/print.ratetable.S
4c4
<   cat ("Rate table with dimension(s):", attr(x, 'dimid'), "\n")
---
>   cat(ngettext(length(attr(x, 'dimid')), "Rate table with dimension: ", "Rate table with dimensions: ", domain = "R-survival"), paste(attr(x, 'dimid'), collapse = ", "), "\n", sep = "")
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/pspline.S R-recommended-moje/survival/R/pspline.S
9c9
< 	if (theta <=0 || theta >=1) stop("Invalid value for theta")
---
> 	if (theta <=0 || theta >=1) stop(gettextf("invalid '%s' argument", "theta"))
18c18
< 	if (df <=1) stop ('Too few degrees of freedom')
---
> 	if (df <=1) stop("too few degrees of freedom")
21c21
<         if (df > nterm) stop("`nterm' too small for df=",df)
---
>         if (df > nterm) stop(gettextf("'nterm' argument is too small for df=%s", df))
29c29
<     if (nterm < 3) stop("Too few basis functions")
---
>     if (nterm < 3) stop("too few basis functions")
34c34
<             stop("Invalid values for Boundary.knots")
---
>             stop(gettextf("invalid '%s' argument", "Boundary.knots"))
209c209
<         stop("Argment must be the result of a call to pspline")
---
>         stop(gettextf("'%s' argument is not an object of class %s", "x", dQuote("pspline")))
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/pyears.R R-recommended-moje/survival/R/pyears.R
10,11c10
<     m <- m[c(1, match(c('formula', 'data', 'weights', 'subset', 'na.action'),
<                       names(m), nomatch=0))]
---
>     m <- m[c(1, match(c('formula', 'data', 'weights', 'subset', 'na.action'), names(m), nomatch=0))]
17c16
<             stop("Pyears cannot have interaction terms")
---
>             stop("'pyears()' cannot have interaction terms")
23c22
<             stop("Can have only 1 ratetable() call in a formula")
---
>             stop("can have only 1 'ratetable()' call in a formula")
28c27
<                 stop("The ratetable() call in a formula is depreciated")
---
>                 stop("'ratetable()' call in a formula is deprecated")
38c37
<                 stop ("Invalid rcall argument")
---
>                 stop(gettextf("invalid '%s' argument", "rmap"))
50c49
<         else stop("Invalid rate table")
---
>         else stop("invalid rate table")
54c53
<             stop("Variable not found in the ratetable:", (names(rcall))[is.na(temp)])
---
>             stop("variable not found in the ratetable:", (names(rcall))[is.na(temp)])
78c77
<     if (is.null(Y)) stop ("Follow-up time must appear in the formula")
---
>     if (is.null(Y)) stop("follow-up time must appear in the formula")
80c79
<         if (any(Y <0)) stop ("Negative follow up time")
---
>         if (any(Y <0)) stop("negative follow up time")
89c88
<             if (any(Y[,1] <0)) stop("Negative survival time")
---
>             if (any(Y[,1] <0)) stop("negative survival time")
92,94c91,94
<                 warning(paste(nzero, 
<                          "observations with an event and 0 follow-up time,",
<                        "any rate calculations are statistically questionable"))
---
>                 warning(sprintf(ngettext(nzero, 
>                          "%d observation with an event and 0 follow-up time, any rate calculations are statistically questionable",
>                          "%d observations with an event and 0 follow-up time, any rate calculations are statistically questionable", domain = "R-survival"),
> 			 nzero), domain = NA)
97c97
<             stop("Only right-censored and counting process survival types are supported")
---
>             stop("only right-censored and counting process survival types are supported")
101c101
<     if (is.null(n) || n==0) stop("Data set has 0 observations")
---
>     if (is.null(n) || n==0) stop("data set has 0 observations")
117c117
<                 stop("Cannot deal with models that contain an offset")
---
>                 stop("cannot deal with models that contain an offset")
120c120
<                 stop("pyears cannot handle stratified Cox models")
---
>                 stop("'pyears()' cannot handle stratified Cox models")
123c123
<                  stop("Unable to match new data to old formula")
---
>                  stop("unable to match new data to old formula")
126c126
<         else stop("Invalid ratetable")
---
>         else stop("invalid rate table")
140c140
<         for (i in 1:odim) {
---
>         for (i in seq_len(odim)) {
187c187
<                  stop("Ratetable does not have expected shape")
---
>                  stop("ratetable does not have expected shape")
191,192c191
<                 offset <- bdate - as.Date(paste(byear, "01/01", sep='/'), 
<                                           origin="1960/01/01")
---
>                 offset <- bdate - as.Date(paste(byear, "01/01", sep='/'), origin="1960/01/01")
204c203
<             else stop("Can't find an appropriate date class\n") 
---
>             else stop("cannot find an appropriate date class") 
213c212
<                 cuts[[temp]] <- round(approx(nint*(1:nyear), cuts[[temp]],
---
>                 cuts[[temp]] <- round(approx(nint*(seq_len(nyear)), cuts[[temp]],
278c277
<         row.names(df) <- 1:nrow(df)
---
>         row.names(df) <- seq_len(nrow(df))
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/ratetable.S R-recommended-moje/survival/R/ratetable.S
34c34
<     for (i in 1:nargs) {
---
>     for (i in seq_len(nargs)) {
37,38c37
<             stop(paste("Aguments do not all have the same length (arg ",
< 			i, ")", sep=''))
---
>             stop(gettextf("Aguments do not all have the same length (arg %d)", i))
41c40
<         if (inherits(args[[i]], 'cateogory') || is.character(args[[i]]))
---
>         if (inherits(args[[i]], 'category') || is.character(args[[i]]))
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/residuals.coxph.null.S R-recommended-moje/survival/R/residuals.coxph.null.S
8,9c8
<     else stop(paste("\'", type, "\' residuals are not defined for a null model",
< 			sep=""))
---
>     else stop(gettextf("'%s' residuals are not defined for a null model", type))
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/residuals.coxph.S R-recommended-moje/survival/R/residuals.coxph.S
26c26
< 	stop(paste(type, 'residuals are not available for the exact method'))
---
> 	stop(gettextf("'%s' residuals are not available for the exact method", type))
170c170
< 	if (length(collapse) !=n) stop("Wrong length for 'collapse'")
---
> 	if (length(collapse) !=n) stop(gettextf("wrong length for '%s' argument", "collapse"))
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/ridge.S R-recommended-moje/survival/R/ridge.S
10c10
< 	    stop("Only one of df or theta can be specified")
---
> 	    stop("only one of 'df' or 'theta' arguments can be specified")
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/summary.coxph.S R-recommended-moje/survival/R/summary.coxph.S
11c11
<          stop("Input is not valid")
---
>          stop("input is not valid")
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/summary.ratetable.S R-recommended-moje/survival/R/summary.ratetable.S
7c7
<     if (!inherits(rtable, 'ratetable')) stop("Argument is not a rate table")
---
>     if (!inherits(rtable, 'ratetable')) stop(gettextf("'%s' argument is not an object of class %s", "object", dQuote("ratetable")))
11c11
<     cat (" Rate table with", ncat, "dimensions:\n")
---
>     cat(gettextf(" Rate table with %d dimensions:\n", ncat, domain = "R-survival"))
16,19c16
<                 cat("\t", att$dimid[i], " ranges from ", 
<                     format(min(att$cutpoints[[i]])), " to ", 
<                     format(max(att$cutpoints[[i]])), "; with ", att$dim[i],
<                     " categories\n", sep='')
---
>                 cat("\t", gettextf("%s ranges from %s to %s; with %d categories\n", att$dimid[i], format(min(att$cutpoints[[i]])), format(max(att$cutpoints[[i]])), att$dim[i], domain = "R-survival"), sep = "")
22,23c19
<                 cat("\t", att$dimid[i], " has levels of: ",
<                     paste(att$dimnames[[i]], collapse=' '), "\n", sep='')
---
>                 cat("\t", gettextf("%s has levels of: %s", att$dimid[i], paste(att$dimnames[[i]], collapse = ' '), domain = "R-survival"), "\n", sep = '')
26,30c22
<                 cat("\t", att$dimid[i], " ranges from " , 
<                     format(min(att$cutpoints[[i]])), " to ", 
<                     format(max(att$cutpoints[[i]])), "; with ", att$dim[i],
<                     " categories,\n\t\tlinearly interpolated in ",
<                     att$factor[i], " steps per division\n", sep='')
---
>                 cat("\t", gettextf("%s ranges from %s to %s; with %d categories linearly interpolated in %d steps per division\n", att$dimid[i], format(min(att$cutpoints[[i]])), format(max(att$cutpoints[[i]])), att$dim[i], att$factor[i], domain = "R-survival"), sep = "")
35,36c27
<                 cat("\t", att$dimid[i], " has levels of: ",
<                     paste(att$dimnames[[i]], collapse=' '), "\n", sep='')
---
>                 cat("\t", gettextf("%s has levels of: %s", att$dimid[i], paste(att$dimnames[[i]], collapse = ' '), domain = "R-survival"), "\n", sep = '')
39,44c30,31
<                 cat("\t", att$dimid[i], " ranges from " , 
<                  format(as.Date(min(att$cutpoints[[i]]), origin='1960/01/01')),
<                     " to ", 
<                  format(as.Date(max(att$cutpoints[[i]]), origin='1960/01/01')),
<                     "; with ", att$dim[i],
<                     " categories\n", sep='')
---
>                 cat("\t", gettextf("%s ranges from %s to %s; with %d categories\n", att$dimid[i], format(as.Date(min(att$cutpoints[[i]]), origin='1960/01/01')),
>                  format(as.Date(max(att$cutpoints[[i]]), origin='1960/01/01')), att$dim[i], domain = "R-survival"), sep = '')
48,51c35,36
<                 cat("\t", att$dimid[i], " ranges from ", 
<                     format(min(att$cutpoints[[i]])), " to ", 
<                     format(max(att$cutpoints[[i]])), "; with ", att$dim[i],
<                     " categories\n", sep='')
---
>                 cat("\t", gettextf("%s ranges from %s to %s; with %d categories\n", att$dimid[i], format(min(att$cutpoints[[i]])),
> 		format(max(att$cutpoints[[i]])), att$dim[i], domain = "R-survival"), sep = '')
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/survcallback.S R-recommended-moje/survival/R/survcallback.S
13c13
< 	    stop("Invalid pcols or pattr arg")
---
> 	    stop(gettextf("invalid '%s' or '%s' argument", "pcols", "pattr"))
15c15
<     if (sum(sparse) >1) stop("Only one sparse penalty term allowed")
---
>     if (sum(sparse) >1) stop("only one sparse penalty term allowed")
39c39
< 	    stop("pcols and assign arguments disagree")
---
> 	    stop("'pcols' and 'assign' arguments disagree")
53c53
< 	if (length(fcol) > 1) stop("Sparse term must be single column")
---
> 	if (length(fcol) > 1) stop("sparse term must be single column")
111c111
< 		    stop("Invalid coxlist1")
---
> 		    stop("invalid 'coxlist1' object")
113c113
< 		    stop("Incorrect length in coxlist1")
---
> 		    stop("incorrect length in 'coxlist1' object")
129c129
<         stop("Cannot fit a model with no coefficients other than sparse ones")
---
>         stop("cannot fit a model with no coefficients other than sparse ones")
184c184
< 		    stop("Length error in coxlist2")
---
> 		    stop("length error in 'coxlist2' object")
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/survConcordance.R R-recommended-moje/survival/R/survConcordance.R
16c16
<         else stop("left hand side of the formula  must be a numeric vector or a surival")
---
>         else stop(gettextf("left hand side of the formula must be a numeric vector or an object of class %s", dQuote("Surv")))
22c22
<     if (length(offset)>0) stop("Offset terms not allowed")
---
>     if (length(offset)>0) stop("offset terms not allowed")
33c33
<     if (ncol(x) > 1) stop("Only one predictor variable allowed")
---
>     if (ncol(x) > 1) stop("only one predictor variable allowed")
57c57
<         cat("Call:\n")
---
>         cat(gettext("Call:", domain = "R-survival"), "\n", sep = "")
65,66c65
<     cat("Concordance= ", format(x$concordance), " se= ", format(x$std.err),
<         '\n', sep='')
---
>     cat(gettextf("Concordance= %s (se = %s)", format(x$concordance), format(x$std.err), domain = "R-survival"), "\n", sep = "")
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/survdiff.S R-recommended-moje/survival/R/survdiff.S
7c7
<         stop("The 'formula' argument is not a formula")
---
>         stop("'formula' argument is not a formula")
17,18c17,18
<     if (!inherits(y, "Surv")) stop("Response must be a survival object")
<     if (attr(y, 'type') != 'right') stop("Right censored data only")
---
>     if (!inherits(y, "Surv")) stop(gettextf("response is not an object of class %s", dQuote("Surv")))
>     if (attr(y, 'type') != 'right') stop("right censored data only")
27c27
< 		stop("Cannot have both an offset and groups")
---
> 		stop("cannot have both an offset and groups")
29c29
< 	    stop("The offset must be a survival probability")
---
> 	    stop("the offset must be a survival probability")
59c59
< 	if (length(ll) == 0) stop("No groups to test")
---
> 	if (length(ll) == 0) stop("no groups to test")
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/survexp.cfit.R R-recommended-moje/survival/R/survexp.cfit.R
44c44
<     for (i in 1:ncurve) {
---
>     for (i in seq_len(ncurve)) {
58,59c58,59
<         indx <- rep(1:length(sfit$strata), sfit$strata)
<         for (i in 1:n) {
---
>         indx <- rep(seq_len(length(sfit$strata)), sfit$strata)
>         for (i in seq_len(n)) {
84c84
<             for (i in 1:ntime) {
---
>             for (i in seq_len(ntime)) {
92c92
<             for (i in 1:ntime) {
---
>             for (i in seq_len(ntime)) {
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/survexp.R R-recommended-moje/survival/R/survexp.R
21c21
<             stop("Can have only 1 ratetable() call in a formula")
---
>             stop("can have only 1 'ratetable()' call in a formula")
24c24
<             stop("The ratetable() call in a formula is depreciated")
---
>             stop("'ratetable()' call in a formula is deprecated")
34c34
<             stop ("Invalid rcall argument")
---
>             stop(gettextf("invalid '%s' argument", "rmap"))
46c46
<     else stop("Invalid rate table")
---
>     else stop(gettextf("'%s' argument is not an object of class %s", "ratetable", dQuote("ratetable")))
70c70
<     if (n==0) stop("Data set has 0 rows")
---
>     if (n==0) stop("data set has 0 rows")
80c80
<             stop("Survexp cannot have interaction terms")
---
>             stop("'survexp()' cannot have interaction terms")
82c82
<         if (any(times<0)) stop("Invalid time point requested")
---
>         if (any(times<0)) stop("invalid time point requested")
84c84
<             if (any(diff(times)<0)) stop("Times must be in increasing order")
---
>             if (any(diff(times)<0)) stop("times must be in increasing order")
91c91
<                 stop("either a times argument or a response is needed")
---
>                 stop("either a 'times' argument or a 'response' is needed")
98c98
<             else stop("Illegal response value")
---
>             else stop("illegal response value")
100c100
<         if (any(Y<0)) stop ("Negative follow up time")
---
>         if (any(Y<0)) stop("negative follow up time")
119c119
<         stop("a response is required in the formula unless method='ederer'")
---
>         stop("a 'response' is required in the formula unless method='ederer'")
135c135
<     #        stop("Cannot deal with models that contain an offset")
---
>     #        stop("cannot deal with models that contain an offset")
138c138
<     #        stop("survexp cannot handle stratified Cox models")
---
>     #        stop("'survexp()' cannot handle stratified Cox models")
141c141
<              stop("Unable to match new data to old formula")
---
>              stop("unable to match new data to old formula")
143c143
<     else stop("Invalid ratetable")
---
>     else stop("invalid rate table")
147c147
<              temp <- survexp.fit (1:n, R, Y, max(Y), TRUE, ratetable)
---
>              temp <- survexp.fit (seq_len(n), R, Y, max(Y), TRUE, ratetable)
151c151
<             temp <- survexp.cfit(1:n, rdata, Y, 'individual', ratetable)
---
>             temp <- survexp.cfit(seq_len(n), rdata, Y, 'individual', ratetable)
163c163
<         for (i in 1:odim) {
---
>         for (i in seq_len(odim)) {
167c167
<                 stop("Can't use tcut variables in expected survival")
---
>                 stop("cannot use tcut variables in expected survival")
193,194c193
<             keep <- approx(temp$time, 1:n, xout=times, yleft=0,
<                            method='constant', f=0, rule=2)$y
---
>             keep <- approx(temp$time, seq_len(n), xout = times, yleft = 0, method = 'constant', f = 0, rule = 2)$y
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/survfitCI.R R-recommended-moje/survival/R/survfitCI.R
23,26c23,24
<     if (type !='mright' && type!='mcounting' && 
<         type != "right" && type != "counting")
<         stop(paste("Cumulative incidence computation doesn't support \"", type,
<                           "\" survival data", sep=''))
---
>     if (type !='mright' && type!='mcounting' && type != "right" && type != "counting")
>         stop(gettextf("cumulative incidence computation doesn't support \"%s\" survival data", type))
44c42
<         stop("istate should be a vector of integers or a factor")
---
>         stop("'istate' argument should be a vector of integers or a factor")
49c47
<     if (length(istate) !=n) stop ("wrong length for istate")
---
>     if (length(istate) !=n) stop(gettextf("wrong length for '%s' argument", "istate"))
111c109
<             stop("Cannot have duplicate id values with (time, status) data")
---
>             stop("cannot have duplicate 'id' values with (time, status) data")
127c125
<             stop("the id argument is required for start:stop data")
---
>             stop("'id' argument is required for start:stop data")
135c133
<             stop("subject is in two different groups, id ", (id[indx1])[who])
---
>             stop(gettextf("subject is in two different groups, id %s", (id[indx1])[who]))
139c137
<             stop("gap in follow-up, id ", (id[indx1])[who])
---
>             stop(gettextf("gap in follow-up, id %s", (id[indx1])[who]))
146c144
<             warning("subject changes to the same state, id ", (id[indx1])[who])
---
>             warning(gettextf("subject changes to the same state, id %s", (id[indx1])[who]))
150c148
<             stop("subject changes case weights, id ", (id[indx1])[who])
---
>             stop(gettextf("subject changes case weights, id %s", (id[indx1])[who]))
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/survfit.coxph.R R-recommended-moje/survival/R/survfit.coxph.R
71c71
<         stop("Cannot handle \"", type, "\" type survival data")
---
>         stop(gettextf("cannot handle \"%s\" type survival data", type))
83c83
<         stop("The individual option is  only valid for start-stop data")
---
>         stop("the individual option is only valid for start-stop data")
156c156
<             stop("Newdata cannot be used when a model has frailty terms")
---
>             stop("'newdata' argument cannot be used when a model has frailty terms")
161c161
<             if (individual) stop("newdata must be a data frame")
---
>             if (individual) stop("'newdata' argument must be a data frame")
163c163
<                 stop("Newdata argument must be a data frame")
---
>                 stop("'newdata' argument must be a data frame")
225c225
<             stop("The newdata argument must be present when individual=TRUE")
---
>             stop("'newdata' argument must be present when 'individual=TRUE'")
242c242
<             stop("Survival type of newdata does not match the fitted model")
---
>             stop("Survival type of 'newdata' argument does not match the fitted model")
244c244
<             stop("Individual=TRUE is only valid for counting process data")
---
>             stop("'individual=TRUE' is only valid for counting process data")
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/survfitKM.S R-recommended-moje/survival/R/survfitKM.S
23,24c23,24
<     if (!is.Surv(y)) stop("y must be a Surv object")
<     if (!is.factor(x)) stop("x must be a factor")
---
>     if (!is.Surv(y)) stop(gettextf("'%s' argument is not an object of class %s", "y", dQuote("Surv")))
>     if (!is.factor(x)) stop(gettextf("'%s' argument must be a factor", "x"))
26c26
< 	    stop("Can only handle right censored or counting data")
---
> 	    stop("can only handle right censored or counting data")
38,39c38
< 		stop(paste("start.time =", start.time,
< 			   "is greater than all time points."))
---
> 		stop(gettextf("start.time = %s is greater than all time points.", start.time))
73c72
<     for (i in 1:nstrat) {
---
>     for (i in seq_len(nstrat)) {
193c192
< 	zz <- 1:length(events)
---
> 	zz <- seq_len(length(events))
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/survfitms.R R-recommended-moje/survival/R/survfitms.R
9c9
<             stop("summary.survfit can only be used for survfit objects")
---
> 	stop(gettextf("'%s' argument is not an object of class %s", "object", dQuote("survfit")))
206c206
<             stop("summary.survfitms can only be used for survfitms objects")
---
> 	stop(gettextf("'%s' argument is not an object of class %s", "object", dQuote("survfitms")))
420c420
<                 stop("unmatched subscript", j[is.na(indx)])
---
>                 stop(gettextf("unmatched subscript %s", j[is.na(indx)]))
438,441c438
<                 stop(paste("strata", 
<                                paste(i[is.na(indx)], collapse=' '),
<                            'not matched'))
< 
---
>                 stop(gettextf("strata %s not matched", paste(i[is.na(indx)], collapse=' ')))
470c467
<                     stop("unmatched subscript", j[indx])
---
>                     stop(gettextf("unmatched subscript %s", j[indx]))
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/survfit.R R-recommended-moje/survival/R/survfit.R
42c42
<         else warning("survfit object has only a single survival curve")
---
>         else warning("Survfit object has only a single survival curve")
49,51c49
<                 stop(paste("strata", 
<                                paste(i[is.na(indx)], collapse=' '),
<                                'not matched'))
---
>                     stop(gettextf("strata %s not matched", paste(i[is.na(indx)], collapse = ' '), domain = "R-survival"), domain = NA)
105,106c103
<     indx <- match(c('formula', 'data', 'weights', 'subset','na.action',
<                     'istate', 'id', "etype"), names(Call), nomatch=0)
---
>     indx <- match(c('formula', 'data', 'weights', 'subset','na.action', 'istate', 'id', "etype"), names(Call), nomatch=0)
121c118
<     if (!is.Surv(Y)) stop("Response must be a survival object")
---
>     if (!is.Surv(Y)) stop(gettextf("response is not an object of class %s", dQuote("Surv")))
126c123
<     if (!is.null(attr(Terms, 'offset'))) warning("Offset term ignored")
---
>     if (!is.null(attr(Terms, 'offset'))) warning("offset term ignored")
142c139
<     if (!is.Surv(Y)) stop("y must be a Surv object")
---
>     if (!is.Surv(Y)) stop(gettextf("response is not an object of class %s", dQuote("Surv")))
149c146
<             stop("cannot use both the etype argument and mstate survival type")
---
>             stop("cannot use both the 'etype' argument and 'mstate' survival type")
151c148
<             stop("cannot use both the etype and istate arguments")
---
>             stop("cannot use both the 'etype' and 'istate' arguments")
168c165
<         else stop("etype argument incompatable with survival type")
---
>         else stop("'etype' argument incompatable with survival type")
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/survfitTurnbull.S R-recommended-moje/survival/R/survfitTurnbull.S
26,27c26,27
<     if (!is.Surv(y)) stop("y must be a Surv object")
<     if (!is.factor(x)) stop("x must be a factor")
---
>     if (!is.Surv(y)) stop(gettextf("'%s' argument is not an object of class %s", "y", dQuote("Surv")))
>     if (!is.factor(x)) stop(gettextf("'%s' argument must be a factor", "x"))
44,45c44
< 		stop(paste("start.time =", start.time,
< 			   "is greater than all time points."))
---
> 		stop(gettextf("start.time = %s is greater than all time points.", start.time))
57c56
< 	    stop("survfitTurnbull not appropriate for counting process data")
---
> 	    stop("'survfitTurnbull()' is not appropriate for counting process data")
211,213c210,211
<                 cat("\n Iteration = ", iter, "\n")
< 		cat("survival=",
< 		    format(round(tfit$surv[tfit$n.event>0],3)),  "\n")
---
>                 cat("\n ", gettextf("Iteration = %d", iter, domain = "R-survival"), "\n", sep = "")
> 		cat("survival=", format(round(tfit$surv[tfit$n.event>0],3)),  "\n")
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/survobrien.S R-recommended-moje/survival/R/survobrien.S
16c16
<         stop("Transform function must be 1 to 1")
---
>         stop("'transform' function must be 1 to 1")
23c23
<     if (indx[1] ==0) stop("A formula argument is required")
---
>     if (indx[1] ==0) stop("'formula' argument is required")
32c32
<     if (nrow(m) ==0) stop("No (non-missing) observations")
---
>     if (nrow(m) ==0) stop("no (non-missing) observations")
37c37
<     if (!inherits(y, "Surv")) stop ("Response must be a survival object")
---
>     if (!inherits(y, "Surv")) stop(gettextf("response is not an object of class %s", dQuote("Surv")))
39c39
<         stop("Response must be right censored or (start, stop] data")
---
>         stop("response must be right censored or (start, stop] data")
43c43
<         if (length(cluster$terms) >1) stop ("Can have only 1 cluster term")
---
>         if (length(cluster$terms) >1) stop("can have only 1 cluster term")
62c62
<         stop("This function cannot deal with iteraction terms")
---
>         stop("this function cannot deal with iteraction terms")
70c70
<     if (all(keepers)) stop ("No continuous variables to modify")
---
>     if (all(keepers)) stop("no continuous variables to modify")
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/survregDtest.S R-recommended-moje/survival/R/survregDtest.S
13c13
<     if (is.null(dlist$name)) errlist <- c(errlist, "Missing a name")
---
>     if (is.null(dlist$name)) errlist <- c(errlist, gettext("missing a distribution name"))
15c15
<         errlist <- c(errlist, "Invalid name")
---
>         errlist <- c(errlist, gettext("invalid distribution name"))
23c23
<             errlist <- c(errlist, "Reference distribution not found")
---
>             errlist <- c(errlist, gettext("reference distribution was not found"))
27c27
<                 errlist <- c(errlist, "Missing or invalid trans component")
---
>                 errlist <- c(errlist, gettextf("missing or invalid '%s' component", "trans"))
29c29
<                 errlist <- c(errlist, "Missing or invalid itrans component")
---
>                 errlist <- c(errlist, gettextf("missing or invalid '%s' component", "itrans"))
31c31
<                 errlist <- c(errlist, "Missing or invalid dtrans component")
---
>                 errlist <- c(errlist, gettextf("missing or invalid '%s' component", "dtrans"))
37c37
<                              "trans and itrans must be inverses of each other")
---
>                              gettext("'trans' and 'itrans' components must be inverses of each other"))
39c39
<                 errlist <- c(errlist, "dtrans must be a 1-1 function")
---
>                 errlist <- c(errlist, gettext("'dtrans()' component must be a 1-1 function"))
49c49
< 	    errlist <- c(errlist, "Missing or invalid init function")
---
> 	    errlist <- c(errlist, gettextf("missing or invalid '%s' function", "init"))
51c51
< 	    errlist <- c(errlist, "Missing or invalid deviance function")
---
> 	    errlist <- c(errlist, gettextf("missing or invalid '%s' function", "deviance"))
53c53
< 	    errlist <- c(errlist, "Missing or invalid density function")
---
> 	    errlist <- c(errlist, gettextf("missing or invalid '%s' function", "density"))
61c61
< 			     "Density function must return a 5 column matrix")
---
> 			     gettext("density function must return a 5 column matrix"))
65c65
< 	    errlist <- c(errlist, "Missing or invalid quantile function")
---
> 	    errlist <- c(errlist, gettextf("missing or invalid '%s' function", "quantile"))
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/survreg.S R-recommended-moje/survival/R/survreg.S
10c10
<     if (indx[1] ==0) stop("A formula argument is required")
---
>     if (indx[1] ==0) stop("'formula' argument is required")
23c23
<     if (!inherits(Y, "Surv")) stop("Response must be a survival object")
---
>     if (!inherits(Y, "Surv")) stop(gettextf("response is not an object of class %s", dQuote("Surv")))
32c32
<         if (any(ord>1)) stop ("Cluster can not be used in an interaction")
---
>         if (any(ord>1)) stop("cluster can not be used in an interaction")
82c82
<     if (type== 'counting') stop ("Invalid survival type")
---
>     if (type== 'counting') stop("invalid survival type")
92c92
< 	if (is.null(dlist)) stop(paste(dist, ": distribution not found"))
---
> 	if (is.null(dlist)) stop(gettextf("%s distribution was not found", sQuote(dist)))
95c95
<     else stop("Invalid distribution object")
---
>     else stop("invalid distribution object")
100c100
<     if (!survregDtest(dlist)) stop("Invalid distribution object")
---
>     if (!survregDtest(dlist)) stop("invalid distribution object")
123c123
< 	    stop("Invalid survival times for this distribution")
---
> 	    stop("invalid survival times for this distribution")
134,135c134
<         if (!missing(scale)) warning(paste(dlist$name, 
<                            "has a fixed scale, user specified value ignored"))
---
>         if (!missing(scale)) warning(gettextf("%s distribution has a fixed scale, user specified value ignored", sQuote(dlist$name)))
146,147c145
<         if (!is.null(parms)) stop(paste(dlist$name, 
<                               "distribution has no optional parameters"))
---
>         if (!is.null(parms)) stop(gettextf("%s distribution has no optional parameters", sQuote(dlist$name)))
151c149
<             stop("Default parameters must be a numeric vector")
---
>             stop("default parameters must be a numeric vector")
155c153
<             if (any(is.na(indx))) stop("Invalid parameter names")
---
>             if (any(is.na(indx))) stop("invalid parameter names")
172c170
<     if (any(scale < 0)) stop("Invalid scale value")
---
>     if (any(scale < 0)) stop("invalid scale value")
174c172
< 	    stop("The scale argument is not valid with multiple strata")
---
> 	    stop("the scale argument is not valid with multiple strata")
189c187
< 	if (any(ord>1)) stop ('Penalty terms cannot be in an interaction')
---
> 	if (any(ord>1)) stop("penalty terms cannot be in an interaction")
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/Surv.S R-recommended-moje/survival/R/Surv.S
9,10c9,10
<     if (missing(time)) stop ("Must have a time argument")
<     if (!is.numeric(time)) stop ("Time variable is not numeric")
---
>     if (missing(time)) stop("'time' argument is required")
>     if (!is.numeric(time)) stop(gettextf("'%s' argument must be numeric", "time"))
36c36
<         else stop ("No time variable!") # no time variable at all!
---
>         else stop("no time variable!") # no time variable at all!
41c41
< 		stop("Wrong number of args for this type of survival data")
---
> 		stop("wrong number of arguments for this type of survival data")
43c43
< 		stop("Wrong number of args for this type of survival data")
---
> 		stop("wrong number of arguments for this type of survival data")
47c47
<         if (!is.numeric(time)) stop("Time variable is not numeric")
---
>         if (!is.numeric(time)) stop(gettextf("'%s' argument must be numeric", "time"))
52c52
<         if (!is.numeric(time)) stop("Time variable is not numeric")
---
>         if (!is.numeric(time)) stop(gettextf("'%s' argument must be numeric", "time"))
54c54
<         if (length(event) != nn) stop ("Time and status are different lengths")
---
>         if (length(event) != nn) stop(gettextf("'%s' and '%s' arguments are of different lengths", "time", "event"))
69c69
< 		    warning("Invalid status value, converted to NA")
---
> 		    warning("invalid status value, converted to NA")
71c71
<             else stop("Invalid status value, must be logical or numeric")
---
>             else stop("invalid status value, must be logical or numeric")
76,79c76,79
< 	if (length(time2) !=nn) stop ("Start and stop are different lengths")
< 	if (length(event)!=nn) stop ("Start and event are different lengths")
<         if (!is.numeric(time))  stop("Start time is not numeric")
< 	if (!is.numeric(time2)) stop("Stop time is not numeric")
---
> 	if (length(time2) !=nn) stop("'time' and 'time2' arguments (start and stop time) are of different lengths")
> 	if (length(event)!=nn) stop("'time' (start time) and 'event' arguments are of different lengths")
>         if (!is.numeric(time))  stop(gettextf("'time' argument (start time) must be numeric", "time"))
> 	if (!is.numeric(time2)) stop(gettextf("'time2' argument (stop time) must be numeric", "time2"))
83c83
< 	    warning("Stop time must be > start time, NA created")
---
> 	    warning("stop time must be > start time, NA created")
99c99
< 		    warning("Invalid status value, converted to NA")
---
> 		    warning("invalid status value, converted to NA")
101c101
< 	    else stop("Invalid status value")
---
> 	    else stop("invalid status value")
109c109
< 	    if (!is.numeric(time2)) stop("Time2 must be numeric")
---
> 	    if (!is.numeric(time2)) stop(gettextf("'%s' argument must be numeric", "time2"))
111c111
< 		    stop ("time and time2 are different lengths")
---
> 		    stop(gettextf("'%s' and '%s' arguments are of different lengths", "time", "time2"))
122c122
<                 warning("Invalid interval: start > stop, NA created")
---
>                 warning("invalid interval: start > stop, NA created")
130c130
< 		    stop("Time and status are different lengths")
---
> 		    stop(gettextf("'%s' and '%s' arguments are of different lengths", "time", "event"))
132c132
< 		   stop("Invalid status value, must be logical or numeric")
---
> 		   stop("invalid status value, must be logical or numeric")
136c136
<                 warning("Status must be 0, 1, 2 or 3; converted to NA")
---
>                 warning("status must be 0, 1, 2 or 3; converted to NA")
139c139
< 		if (!is.numeric(time2)) stop("Time2 must be numeric")
---
> 		if (!is.numeric(time2)) stop(gettextf("'%s' argument must be numeric", "time2"))
141c141
< 		    stop ("time and time2 are different lengths")
---
> 		    stop(gettextf("'%s' and '%s' arguments are of different lengths", "time", "time2"))
145c145
<                     warning("Invalid interval: start > stop, NA created")
---
>                     warning("invalid interval: start > stop, NA created")
246,248c246,248
< Math.Surv <- function(...)  stop("Invalid operation on a survival time")
< Ops.Surv  <- function(...)  stop("Invalid operation on a survival time")
< Summary.Surv<-function(...) stop("Invalid operation on a survival time")
---
> Math.Surv <- function(...)  stop("invalid operation on a survival time")
> Ops.Surv  <- function(...)  stop("invalid operation on a survival time")
> Summary.Surv<-function(...) stop("invalid operation on a survival time")
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/R/tcut.S R-recommended-moje/survival/R/tcut.S
8c8
< 		stop("Must specify at least one interval")
---
> 		stop("'breaks' argument must specify at least one interval")
12c12
< 		stop("Number of labels must equal number of intervals")
---
> 		stop("number of labels must equal number of intervals")
20,21c20
< 	}
<     else {
---
> 	} else {
25,26c24
< 	    labels <- paste(format(breaks[ - length(breaks)]),
< 			"+ thru ", format(breaks[-1]), sep = "")
---
> 	    labels <- gettextf("%s+ thru %s", format(breaks[ - length(breaks)]), format(breaks[-1]))
28c26
< 	   stop("Number of labels must be 1 less than number of break points")
---
> 	   stop("number of labels must be 1 less than number of break points")
diff -rEZbwB '--exclude=*.[pdf,mo,po,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended-frozen/survival/src/cox_Rcallback.c R-recommended-moje/survival/src/cox_Rcallback.c
8c8
< 
---
> #include "localization.h"
53c53
<                 error("coef:invalid type\n");
---
>                 error(_("coef: invalid type\n"));
62c62
<                 error("first: invalid type\n");
---
>                 error(_("first: invalid type\n"));
72c72
<                 error("second: invalid type\n");
---
>                 error(_("second: invalid type\n"));
81c81
<                 error("flag:invalid type\n");
---
>                 error(_("flag: invalid type\n"));
90c90
<                 error("penalty: invalid type\n");
---
>                 error(_("penalty: invalid type\n"));
Tylko w R-recommended-moje/survival/src: localization.h
