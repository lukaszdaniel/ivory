\documentclass{article}
\usepackage{noweb}
\usepackage[pdftex]{graphicx}
\addtolength{\textwidth}{1in}
\addtolength{\oddsidemargin}{-.5in}
\setlength{\evensidemargin}{\oddsidemargin}

\newcommand{\myfig}[1]{\resizebox{\textwidth}{!}
                        {\includegraphics{#1.pdf}}}

\SweaveOpts{keep.source=TRUE}
\title{Rate tables in the Survival Package}
\author{Terry Therneau and Megan O'Byrne}

\begin{document}
\maketitle

<<preamble, echo=F>>=
options(width=60, continue=" ")
makefig <- function(file, top=1, right=1, left=4) {
    pdf(file, width=9.5, height=7, pointsize=18)
    par(mar=c(4, left, top, right) +.1)
    }
@ 
\section{Introduction}
This is a short introduction to how the United States rate tables found in the 
\emph{survival} package are generated.  
Data for new calendar years is regularly added; this is stored in the data
directory and processed by a function there into the current rate table.
Much more detail on how the rate tables are used can be found in a series
of technical reports from the Department of Health Science Research, Mayo 
Clinic.

\section{Data}
The US death rates for 1940 to 2000 are based on the US Decennial Rate tables,
published by the National Center for Health Statistics, within the Centers for
Disease Control.  The detailed address of the web pages changes, at the time
of typing this \texttt{www.cdc.gov/nchs} will reach the top level, from which the
documents can be found by using \emph{rate tables} in the search box.
The structure of the tables has changed slightly over the years
$$
\begin{tabular}{c|l|l}
  Year & Age & Race \\ \hline
  1940 & 0--110 & total, white, black, other \\
  1950--1960 & 0--109 + first year & total, white, non-white \\
  1970--1990 & 0-1d, 1-7d, 7-28d, 28-365d, 1-109 & 
         total, white, nowhite, black \\
  2000 & 0-1d, 1-7d, 7-28d, 28-365d, 1-109 & total, white, black \\
\end{tabular}
$$
The first year data for 1950-1960 is a separate table, with much more
detail than the other years.

Publication dates of the decennial tables has lagged, however, with the 2000
table not appearing until late in 2008.  
The 2000 decennial data for individual states has not yet appeared as of 
this writing (Feb 2011).
Data for 2001 and forward is taken
from the annual life tables, which appear more promptly.  The annual tables
contain total, white, and black, do not break up the first year of life,
and extend only to age 99.  
First year of life data for the later years is obtained from Report GMWK264A:
Deaths under 1 Year,  by Month, Age, Race, and Sex: United States, 1999-2007,
which can be found in the National Vital Statistics System (within NCHS). 
The log(hazard) for the later ages is extrapolated from ages 70-99 using a
smoothing spline. 

The source code for the \emph{survival} package contains a \texttt{noweb}
directory with the code for this report, amongst other things, and a
sub-directory \texttt{noweb/rates} containing the raw data for the rate tables.
The decennial files have been subset and normalized into a common form, and
found as \texttt{usdecennial.dat} and \texttt{minndecennial.dat}. 
The US data contains the $q$ values for all combinations of age 
(0-1 day, 2-7 d, 7-28 d, 28-365 d), 
sex (male, female) and race (total, white, black).
The Minnesota table does not subdivide the first year of life, and contains
data only for total and white.

For individual years the \texttt{noweb/rates} directory contains individual files
for each year.  As new rate tables are published a new file is added with
the following procedure.
\begin{enumerate}
  \item The NCHS source is a pdf file, with tables for each combinations of
    race and sex.  These will be saved as individual files with names like
    \texttt{us2006tf.csv}, \texttt{us2006wf.csv}, etc for the total female and white
    female tables, respectively.
  \item The code below, with names modified appropriately for the particular
    year, is used to create a single file containing the $q$ values for
    each age.  
\end{enumerate}

<<makedatfile, echo=TRUE, eval=FALSE>>=
basename <- "us2006"
suffix <- c("tm", "tf", "wm", "wf", "bm", "bf") #total male, ..., black female
newdata <- list(age=paste(0:99, 1:100, sep='-'))
for (i in 1:6) {
    tdata <- read.csv(paste(basename, suffix[j], '.csv', sep=''),
                    col.names=c('age', 'q', 'n', 'deaths', 'L', "n.older",
                                "expect", 'dummy'), sep=',', header=FALSE)
    newdata[[suffix[j]]]  <- 10000* tdata$q
    }
write.table(newdata, file=paste(basename, "dat", sep='.'))
@ 

The infant mortality data is also updated as new information becomes available,
usually by hand editing new lines into the file.  
Updates of the life tables and the infant mortality tables 
on the NCHS site are not coordinated.

\section{Rate tables}
A rate table is an array containing daily hazard rates $\lambda$.  
The US tables contain annual death rates $q = 1 - exp(\lambda* 365.25)$.
(Technically one could keep track of leap year, using either 365 or 366
as appropriate for each calendar year.  We do not.)
They can be cross-classified in any way that is desired, various attributes
of the table describe this cross classification.

The attributes are
\begin{description}
  \item[dim] The dimensions of the array
  \item[dimnames] The labels for each dimension.  These two attributes act
    identically to those for a normal array.  
  \item[dimid] A name for each dimension.  For the survexp.us table these are
    ``age'', ``sex'', and ``year''.  For survexp.usr they are ``age'', ``sex'',
    ``race'', and ``year''.  
  \item[type] A vector giving the type of each dimension. One of
    \begin{itemize}
      \item 1: a categorical trait such as sex, race, smoking status, etc.  
	As a
	particular subject is followed forward in time, this trait does not 
	change.
      \item 2: a continuous trait that changes over time such as age.  
	As a subject 
	is followed forward, different rows of the ratetable apply when 
	calculating the expected hazard. 
        If I start at age 2 with 5 years of follow-up, the rates for ages
        2--6 will be used.
      \item 3: a continuous trait, as in 2, but represented as a date.  This 
	allows the routine to be more intelligent in handling the multiple
	date formats available.
      \item 4: the calendar year dimension of a US rate table.
    \end{itemize}
  \item[cutpoints] A list with one element for each dimension
    \begin{itemize}
      \item If \texttt{type==1} the element should be NULL
      \item Otherwise it contains the vector of starting points for each row 
	of the
	dimension, e.g., for the age dimension this defines the age range
	over which each row of the table applies.  Because we only define the
        start of each row, the last row of the table implicitly extends to
        infinity.
    \end{itemize}
  \item[summary] a function to summarize data.
\end{description}


\section{Creating the US table}
\subsection{Data}
First read in the US Decennial data for 1940 to 2000, and fill
the $q$ values into a temporary array.
The first 3 ages are the q's for days 0-1, 1-7, and 7-28, the fourth
is the q for the entire first year.
Change the array to one of daily hazard rates.
For the 4th row, make it so the sum of the first year's hazard is 
correct,  i.e., 1*row1 + 6*row2 + 21*row3 + 337.25* row4 = -log(1-q)
<<survexp.us>>=
decdata <- read.table('rates/usdecennial.dat', header=TRUE)
temp <- array(decdata$q[decdata$race=='total'], dim=c(113,2,7))

usd      <- -log(1- temp)
usd[4,,] <- usd[4,,] - (usd[1,,] + usd[2,,] + usd[3,,])
usd[2,,] <- usd[2,,] /6     #days 1-7
usd[3,,] <- usd[3,,] /21    #days 7-28
usd[4,,] <- usd[4,,] /337.25
usd[5:113,,] <- usd[5:113,,]/365.25
@ 

Note a change from some earlier releases of the code. 
There are 36524 days
per century, so I used 365.24.  However the year 2000 is the
exception to the exception: ``Every 4 years is a leap year, unless
divisible by 100; unless divisible by 1000".  
So over the lifetime that these tables will be used 365.25 is the right number.
(If they are still in use in the year 2100, some one else will be maintaining
the code.)
Plus, using .24 confused everyone.

Now pull in the single year tables. The \texttt{temp3} array is made full
size, even though the single year data is missing the subdivision of
year 1 of life, and the older ages of 100-109.
Thus the 4:103 subscript below.
We keep the data for all races in \texttt{usy} but kept only the total column
for \texttt{usd}, the reason why will appear when creating the table by race.
<<survexp.us>>=
i <- 2004
while(file.exists(paste('rates/us', i, '.dat', sep=''))) i <- i+1
singleyear <- 1996:(i-1)   #the data we have
nsingle <- length(singleyear)
temp <- array(0, dim=c(113, 2, 3, nsingle)) #age, sex, race, year
for (i in 1:nsingle) {
    tdata <- read.table(paste("rates/us", singleyear[i], ".dat", sep=''),
                                 header=TRUE)
    temp[4:103,,,i] <- -log(1- c(as.matrix(tdata[,-1]))/100000)
    }
@ 

Pull in the first year of life breakdown.  We use that to compute the
proportion of the first year hazard that falls into each interval.
Then rescale to daily hazards.
<<survexp.us>>=
infant <- read.csv('rates/usinfant.dat')
iyears <- unique(infant$year)

# extract the deaths for total (all races)
#  then scale each year/sex group out as proportions
deaths <- array(as.matrix(infant[,3:8]), dim=c(4, length(iyears), 2,3),
            dimnames=list(c('0', '1-6','7-27', '28-365'), iyears,
                          c("Male", "Female"), c("total", "white", "black")))
for (i in 1:length(iyears)) {
    for (j in 1:2) {
        for (k in 1:3) {
            deaths[,i,j,k] <- deaths[,i,j,k]/sum(deaths[,i,j,k])
            }
        }
    }
 
# Partition out the total 1 year hazard, and then rescale to daily hazards
usy <- array(0., dim=c(113, 2,3, nsingle))
indx <- match(singleyear, iyears)
indx[singleyear < min(iyears)] <- 1
for (i in 1:nsingle) {
    for (j in 1:2) {
        for (k in 1:3) {
            usy[1:4,j,k,i] <- temp[4,j,k,i] * 
                deaths[,indx[i],j,k]/c(1,6,21, 337.25)
             }
        }
    }
usy[5:113,,,] <- temp[5:113,,,] /365.25
@ 

\begin{figure}
  \myfig{extrapolate}
  \caption{Plot of selected decennial and annual year data, along with
    a spline fit from ages 70--99 and the extrapolation of that fit to
    age 109.}
  \label{fig:extrapolate}
  \end{figure}

Now we want to extend the yearly data to ages 100--109. 
There are two reasons for this, the simple is so that we can match the
decennial data.
The more compelling one is to note how the expected survival routines make use
of the rate tables: namely that for any continuous variable the largest 
dimension of the rate table is used for values exceeding the dimension.
If a rate table extends to the year 2007, then for follow-up in 2008 and later
the 2007 data is used; if age extends to 99 then the age 99 values are used 
for all earlier ages.  
Thus it is not a question of \emph{whether} we will extrapolate for age but
\emph{how} we do so, with a constant hazard after age 99 or one with a more
rational basis.  
We have noticed that the log(hazard) is remarkably linear after age 95,
and so do the extrapolation on that scale.  
Figure \ref{fig:extrapolate} shows the results for the last 4 decennial
years, along with 2006.

% Because I like to manage my own plots as floating figures, I need to
%  use plot=F. Otherwise Sweave tries to do it.
% 
<<survexp.us, plot=FALSE>>=
for (i in 1:2) {
    for (j in 1:3) {
        for (k in 1:nsingle) {
            loghaz <- log(usy[4+ 80:99, i, j, k])
            tfit <- smooth.spline(80:99, loghaz, df=8)
            usy[4+ 100:109, i, j, k] <- exp(predict(tfit, 100:109)$y)
            }
        }
    }

makefig("extrapolate.pdf")
matplot(80:109, 100000* usd[4+ 80:109, 2, 4:7], log='y',
        xlab="Age", ylab="Daily hazard * 100,000", pch='7890')
for (i in 4:7) {
    loghaz <- log(usd[4+ 80:99,2, i] * 100000)
    tfit <- smooth.spline(80:99, loghaz, df=8)
    lines(80:109, exp(predict(tfit, 80:109)$y), col=i-3)
    }
temp <-  usd[4+99,2,6]*100000
segments(99, temp, 109, temp, col=3, lty=2)

ty <- match(2006, singleyear)
points(80:99, 100000*usy[4+80:99,2,1,ty], col=1, pch=2)
lines(80:109, 100000*usy[4+80:109,2,1,ty])
dev.off()
@ 

\subsection{US total table}
The US total table will have an entry for each single calendar year,
and dimensions of age, sex, and year.
The data for 1940 to 2000 is based on decennial values, interpolated
across years, and for 2001 and onward on single year data.
<<survexp.us>>=
years <- seq(1940, max(singleyear))
survexp.us <- array(0., dim=c(113, 2, length(years)))
single2 <- singleyear[singleyear > 2000]
xtemp <- c(1940, 1950, 1960, 1970, 1980, 1990, 2000, single2)
for (i in 1:nrow(usd)) { 
    for (j in 1:2) {  #so what if loops are slow, we only do this once
        ytemp <- c(usd[i,j,], usy[i,j,1, match(single2, singleyear)])
        survexp.us[i,j,] <- approx(xtemp, ytemp, xout=years)$y
        }
    }
@ 

Rate tables store dates as the number of days since Jan 1 1960.  
This is historical and not every going to change.  Users should
make use of the \texttt{ratetableDate} function.
I can't use it here, unfortunately, because this code is run in
the process of making the survival library, so I cannot count on
the function's existence.
<<survexp.us>>= 
if (exists('as.Date')) { # R
    datecut <- as.Date(paste(years, '/01/01', sep=''))-
               as.Date('1960/01/01')
    datecut <- as.integer(datecut)
    
}else if (exists('month.day.year')) { #Splus
    datecut <- julian(1,1, years, origin=c(1,1,1960))
    
}else stop("Cannot find appropriate routine for dates")
@

Adding the attributes is the fussy part, since these are what
define a rate table.  
Users making their own table ``mytable''should always follow the exercise with
\texttt{is.ratetable(mytable)}, but again I cannot count on the 
function being present.

The summary function is called with a data frame containing values
for each of the dimensions, and prints a message giving the
observed range of each.  Its primary function is provide a
warning to users to invalid input; the most common is when someone
uses age in years instead of in days and all the subjects are
treated as being 1-100 days old.
<<survexp.us>>=
attributes(survexp.us) <- list(
    dim= c(113,2, length(years)),
    dimnames = list(c('0-1d','1-7d', '7-28d', '28-365d', 
          as.character(1:109)), c("male", "female"), years),
    dimid    =c("age", "sex", "year"),
    type  = c(2,1,4),
    cutpoints= list(c(0,1,7,28,1:109 * 365.25), NULL,  datecut),
    summary = function(R) {
        x <- c(format(round(min(R[,1]) /365.25, 1)),
               format(round(max(R[,1]) /365.25, 1)),
               sum(R[,2]==1), sum(R[,2]==2))
        if (is.R()) x2<- as.Date(c(min(R[,3]), max(R[,3])), 
                                origin='1960/01/01')
        else x2 <- timeDate(julian=c(min(R[,3]), max(R[,3])))
        paste("  age ranges from", x[1], "to", x[2], "years\n",
              " male:", x[3], " female:", x[4], "\n",
              " date of entry from", x2[1], "to", x2[2], "\n")
        })
    
oldClass(survexp.us) <- 'ratetable'
@ 

\subsection{US race table}
The US tables have not been consistent in their race breakdown.
\begin{itemize}
  \item Decennial tables
    \begin{itemize}
    \item 1940: total, white, nonwhite, black
    \item 1950--60: total, white, nonwhite,
    \item 1970--90: total, white, nonwhite, black
    \item 2000: total, white, black
    \end{itemize}
  \item 1997--2006 Annual tables: total, white, black
\end{itemize}

We will create a table for white/black only, and use the nonwhite data
for 1950 and 1960.
Then create our usd array as was done for the total rates.
<<survexp.usr>>=
temp <-array(0., dim=c(113,2,2,7)) #age, sex, race, year
temp[,,1,] <- decdata$q[decdata$race=='white']
temp[,,2,c(1,4,5,6,7)] <- decdata$q[decdata$race=='black']
temp[,,2, 2:3] <- decdata$q[decdata$race=='nonwhite' & 
                            (decdata$year==1950 |decdata$year==1970)]
    
usd      <- -log(1- temp)
usd[4,,,] <- usd[4,,,] - (usd[1,,,] + usd[2,,,] + usd[3,,,])
usd[2,,,] <- usd[2,,,]/6      #days 2-7
usd[3,,,] <- usd[3,,,]/21     #days 8-28
usd[4,,,] <- usd[4,,,]/337.25    #days 29-365.25
usd[5:113,,,] <- usd[5:113,,,] / 365.25
@ 

Building the remainder of the table is almost identical to the prior
code.
<<survexp.usr>>=
survexp.usr <- array(0., dim=c(113, 2, 2, length(years)))
for (i in 1:113) { 
    for (j in 1:2) {  #so what if loops are slow, we only do this once
        for (k in 1:2) { #race
            ytemp <- c(usd[i,j,k,], usy[i,j,k+1, match(single2, singleyear)])
            survexp.usr[i,j,k,] <- approx(xtemp, ytemp, xout=years)$y
            }
        }
    }
   
attributes(survexp.usr) <- list(
        dim= c(113,2,2, length(years)),
        dimnames = list(c('0-1d','1-7d', '7-28d', '28-365d', 
              as.character(1:109)), c("male", "female"), c("white", "black"),
                        years),
        dimid    =c("age", "sex", "race", "year"),
        type  = c(2,1,1,4),
        cutpoints= list(c(0,1,7,28,1:109 * 365.25), NULL,  NULL, datecut),
        summary = function(R) {
            x <- c(format(round(min(R[,1]) /365.25, 1)),
                   format(round(max(R[,1]) /365.25, 1)),
                   sum(R[,2]==1), sum(R[,2]==2),
                   sum(R[,3]==1), sum(R[,3]==2))
            if (is.R()) x2<- as.Date(c(min(R[,4]), max(R[,4])), 
                                    origin='1960/01/01')
            else x2 <- timeDate(julian=c(min(R[,4]), max(R[,4])))
            paste("  age ranges from", x[1], "to", x[2], "years\n",
                  " male:", x[3], " female:", x[4], "\n",
                  " date of entry from", x2[1], "to", x2[2], "\n",
                  " white:",x[7], " black:", x[8], "\n")
            })

oldClass(survexp.usr) <- "ratetable"    
@ 

And finally, save the tables away for use in the survival package.
<<save>>=
save(survexp.us, survexp.usr, file="survexp.rda")
@ 

\end{document}
