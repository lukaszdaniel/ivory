Only in R: BASE-REVISION
Only in R: README-IVORY
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/po/POTFILES R/po/POTFILES
3a4,5
> src/appl/lbfgsb.c
> src/appl/maxcol.c
5a8,25
> src/appl/uncmin.c
> src/extra/blas/xerbla.c
> src/extra/bzip2/blocksort.c
> src/extra/graphapp/clipboard.c
> src/extra/graphapp/context.c
> src/extra/graphapp/dialogs.c
> src/extra/graphapp/gmenus.c
> src/extra/graphapp/metafile.c
> src/extra/graphapp/printer.c
> src/extra/intl/plural.c
> src/extra/tre/regerror.c
> src/extra/tre/tre-internal.h
> src/extra/trio/trio.c
> src/extra/trio/trionan.c
> src/extra/tzone/localtime.c
> src/extra/tzone/registryTZ.c
> src/gnuwin32/console.c
> src/gnuwin32/dos_wglob.c
6a27
> src/gnuwin32/editor.c
7a29,31
> src/gnuwin32/malloc.c
> src/gnuwin32/pager.c
> src/gnuwin32/preferences.c
11d34
< src/gnuwin32/sys-win32.c
12a36,41
> src/gnuwin32/sys-win32.c
> src/gnuwin32/front-ends/rcmdfn.c
> src/gnuwin32/getline/getline.c
> src/gnuwin32/getline/wc_history.c
> src/gnuwin32/windlgs/src/ttest.c
> src/include/Defn.h
14,19c43,46
< src/main/CommandLineArgs.c
< src/main/RNG.c
< src/main/Rdynload.c
< src/main/Renviron.c
< src/main/Rmain.c
< src/main/Rstrptime.h
---
> src/include/Localization.h
> src/include/Rdefines.h
> src/include/Rinlinedfuns.h
> src/include/Rinterface.h
28a56,57
> src/main/colors.c
> src/main/CommandLineArgs.c
31a61
> src/main/contour-common.h
40a71
> src/main/duplicate.c
46d76
< src/main/g_alab_her.c
47a78
> src/main/gram.c
50a82
> src/main/gzio.h
51a84
> src/main/inspect.c
53a87
> src/main/libcurl.c
64a99
> src/main/plot.c
66d100
< src/main/print.c
67a102
> src/main/print.c
68a104
> src/main/printvector.c
71a108
> src/main/Rdynload.c
72a110,112
> src/main/Renviron.c
> src/main/RNG.c
> src/main/Rstrptime.h
91,93d130
< src/modules/X11/dataentry.c
< src/modules/X11/devX11.c
< src/modules/internet/Rhttpd.c
96a134
> src/modules/internet/Rhttpd.c
99,100c137,139
< src/modules/lapack/init_win.c
< src/modules/lapack/vecLibg95c.c
---
> src/modules/X11/dataentry.c
> src/modules/X11/devX11.c
> src/modules/X11/rbitmap.c
105a145
> src/nmath/dpq.h
107a148
> src/nmath/pbinom.c
111d151
< src/nmath/qnorm.c
115d154
< src/nmath/toms708.c
117d155
< src/unix/X11.c
118a157,158
> src/unix/hpdlfcn.c
> src/unix/Rscript.c
120d159
< src/unix/sys-unix.c
121a161,162
> src/unix/sys-unix.c
> src/unix/X11.c
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/po/THANKS R/po/THANKS
14c14
< po:	Łukasz Daniel
---
> pl:	Łukasz Daniel
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/share/R/REMOVE.R R/share/R/REMOVE.R
65c65
<     stop("ERROR: no packages specified", call.=FALSE)
---
>     stop("Error: no packages specified", domain = "R-base", call.=FALSE)
68c68
<     message("Removing from library ", sQuote(lib))
---
>     message(gettextf("Removing from library %s", sQuote(lib)), domain = "R-base")
74c74
<         stop("ERROR: cannot cd to directory ", sQuote(lib), call. = FALSE)
---
>         stop(gettextf("Error: cannot cd to directory %s", sQuote(lib)), domain = "R-base", call. = FALSE)
79c79
<     stop("ERROR: no permission to remove from directory ", sQuote(lib),
---
>     stop(gettextf("Error: no permission to remove from directory %s", sQuote(lib)), domain = "R-base",
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/share/R/examples-footer.R R/share/R/examples-footer.R
4c4
< base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
---
> base::cat(gettext("Time elapsed: ", domain = "R-base"), proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/share/R/examples-header.R R/share/R/examples-header.R
44c44
< 	   delayedAssign("T", stop("T used instead of TRUE", domain = NA),
---
> 	   delayedAssign("T", stop("T used instead of TRUE", domain = "R-base"),
46c46
< 	   delayedAssign("F", stop("F used instead of FALSE", domain = NA),
---
> 	   delayedAssign("F", stop("F used instead of FALSE", domain = "R-base"),
53,54c53
< 	       warning("items ", paste(missitems, collapse=", "),
< 		       " have been removed from the search path", domain = NA)
---
> 	       warning(gettextf("items %s have been removed from the search path", paste(missitems, collapse = ", ")), domain = "R-base")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/share/R/nspackloader.R R/share/R/nspackloader.R
24c24
<         stop("cannot find namespace environment for ", pkg, domain = NA);
---
>         stop(gettextf("cannot find namespace environment for package %s", sQuote(pkg)), domain = "R-base");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/appl/lbfgsb.c R/src/appl/lbfgsb.c
40a41,42
> #include <R_ext/Minmax.h>
> #include <Localization.h>
44,47d45
< #ifndef max
< # define max(a, b) (a < b)?(b):(a)
< # define min(a, b) (a > b)?(b):(a)
< #endif
684,686c682,687
< 	if (iprint >= 1)
< 	    Rprintf("%s\n%s\n", "Singular triangular system detected;",
< 		    "   refresh the lbfgs memory and restart the iteration.");
---
> 	if (iprint >= 1) {
> 	    Rprintf(_("Singular triangular system detected."));
> 		Rprintf("\n");
> 	    Rprintf(_("Refresh the lbfgs memory and restart the iteration."));
> 		Rprintf("\n");
> 	}
724,727c725,730
< 	if (iprint >= 0)
< 	    Rprintf("%s\n%s\n",
< 		    "Nonpositive definiteness in Cholesky factorization in formk;",
< 		    "   refresh the lbfgs memory and restart the iteration.");
---
> 	if (iprint >= 0) {
> 	    Rprintf(_("Nonpositive definiteness in Cholesky factorization in formk."));
> 		Rprintf("\n");
> 	    Rprintf(_("Refresh the lbfgs memory and restart the iteration."));
> 		Rprintf("\n");
> 	}
751,753c754,759
< 	if (iprint >= 1)
< 	    Rprintf("%s\n%s\n", "Singular triangular system detected;",
< 		    "   refresh the lbfgs memory and restart the iteration.");
---
> 	if (iprint >= 1) {
> 	    Rprintf(_("Singular triangular system detected."));
> 		Rprintf("\n");
> 	    Rprintf(_("Refresh the lbfgs memory and restart the iteration."));
> 		Rprintf("\n");
> 	}
795,797c801,806
< 	    if (iprint >= 1)
< 		Rprintf("%s\n%s\n", "Bad direction in the line search;",
< 		    "   refresh the lbfgs memory and restart the iteration.");
---
> 	    if (iprint >= 1) {
> 		Rprintf(_("Bad direction in the line search."));
> 		Rprintf("\n");
> 	        Rprintf(_("Refresh the lbfgs memory and restart the iteration."));
> 		Rprintf("\n");
> 	    }
879,882c888,893
< 	if (iprint >= 0)
< 	    Rprintf("%s\n%s\n",
< 		    "Nonpositive definiteness in Cholesky factorization in formk;",
< 		    "   refresh the lbfgs memory and restart the iteration.");
---
> 	if (iprint >= 0) {
> 	    Rprintf(_("Nonpositive definiteness in Cholesky factorization in formk."));
> 		Rprintf("\n");
> 	    Rprintf(_("Refresh the lbfgs memory and restart the iteration."));
> 		Rprintf("\n");
> 	}
1010,1012c1021,1029
< 	if (*prjctd)
< 	    Rprintf("The initial X is infeasible.  Restart with its projection.\n");
< 	if (!*cnstnd) Rprintf("This problem is unconstrained.\n");
---
> 	if (*prjctd) {
> 	    Rprintf(_("The initial X is infeasible. Restart with its projection."));
> 		Rprintf("\n");
> 	}
> 	if (!*cnstnd) { Rprintf(_("This problem is unconstrained.")); Rprintf("\n"); }
>     }
>     if (iprint > 0) {
> 	Rprintf(n_("At X0, %d variable is exactly at the bounds", "At X0, %d variables are exactly at the bounds", nbdd), nbdd);
> 		Rprintf("\n");
1014,1015d1030
<     if (iprint > 0)
< 	Rprintf("At X0, %d variables are exactly at the bounds\n", nbdd);
1380,1382c1395,1399
<     if (iprint >= 99)
< 	Rprintf("\n---------------- CAUCHY entered-------------------\n\n");
< 
---
>     if (iprint >= 99) {
> 	Rprintf("\n---------------- ");
> 	Rprintf(_("CAUCHY entered"));
> 	Rprintf("-------------------\n\n");
>     }
1497c1514,1517
<     if (iprint >= 99) Rprintf("There are %d  breakpoints\n", nbreak);
---
>     if (iprint >= 99) {
> 		Rprintf(n_("There is %d breakpoint", "There are %d breakpoints", nbreak), nbreak);
> 		Rprintf("\n");
> 	}
1535,1538c1555,1561
< 	Rprintf("\nPiece    %3i f1, f2 at start point %11.4e %11.4e\n",
< 		*nint, f1, f2);
< 	Rprintf("Distance to the next break point =  %11.4e\n", dt);
< 	Rprintf("Distance to the stationary point =  %11.4e\n", dtm);
---
> 	Rprintf("\n");
> 	Rprintf(_("Piece %3i f1, f2 at start point %11.4e %11.4e"), *nint, f1, f2);
> 	Rprintf("\n");
> 	Rprintf(_("Distance to the next break point = %11.4e"), dt);
> 	Rprintf("\n");
> 	Rprintf(_("Distance to the stationary point = %11.4e"), dtm);
> 	Rprintf("\n");
1562c1585
<     if (iprint >= 100) Rprintf("Variable  %d  is fixed.\n", ibp);
---
>     if (iprint >= 100) { Rprintf(_("Variable %d is fixed."), ibp); Rprintf("\n"); }
1617,1620c1640,1646
< 	Rprintf("\nGCP found in this segment\n");
< 	Rprintf("Piece    %3i f1, f2 at start point %11.4e %11.4e\n",
< 		*nint,f1,f2);
< 	Rprintf("Distance to the stationary point =  %11.4e\n", dtm);
---
> 	Rprintf("\n");
> 	Rprintf(_("GCP found in this segment"));
> 	Rprintf("\n");
> 	Rprintf(_("Piece %3i f1, f2 at start point %11.4e %11.4e"), *nint,f1,f2);
> 	Rprintf("\n");
> 	Rprintf(_("Distance to the stationary point = %11.4e"), dtm);
> 	Rprintf("\n");
1642,1643c1668,1672
<     if (iprint >= 99)
< 	Rprintf("\n---------------- exit CAUCHY----------------------\n\n");
---
>     if (iprint >= 99) {
> 	Rprintf("\n---------------- ");
> 	Rprintf(_("exit CAUCHY"));
> 	Rprintf("----------------------\n\n");
>     }
2273,2275c2302,2305
< 		if (iprint >= 100)
< 		    Rprintf("Variable %d leaves the set of free variables\n",
< 			    k);
---
> 		if (iprint >= 100) {
> 		    Rprintf(_("Variable %d leaves the set of free variables"), k);
> 			Rprintf("\n");
> 		}
2283,2289c2313,2323
< 		if (iprint >= 100)
< 		    Rprintf("Variable %d enters the set of free variables\n",
< 			    k);
< 	    }
<          if (iprint >= 100)
< 	     Rprintf("%d variables leave; %d variables enter\n",
< 		     n + 1 - *ileave, *nenter);
---
> 		if (iprint >= 100) {
> 		    Rprintf(_("Variable %d enters the set of free variables"), k);
> 			Rprintf("\n");
> 		}
> 	    }
>          if (iprint >= 100) {
> 	     Rprintf(n_("%d variable leave", "%d variables leave", n + 1 - *ileave), n + 1 - *ileave);
> 	     Rprintf("; ");
> 	     Rprintf(n_("%d variable enter", "%d variables enter", *nenter), *nenter);
> 		 Rprintf("\n");
> 	 }
2305,2307c2339,2342
<     if (iprint >= 99)
< 	Rprintf("%d  variables are free at GCP on iteration %d\n",
< 		*nfree, *iter + 1);
---
>     if (iprint >= 99) {
> 	Rprintf(n_("%d variable is free at GCP on iteration %d", "%d variables are free at GCP on iteration %d", *nfree), *nfree, *iter + 1);
> 	Rprintf("\n");
> 	}
3550c3585,3587
< 	    Rprintf("\niterations %d\nfunction evaluations %d\nsegments explored during Cauchy searches %d\nBFGS updates skipped %d\nactive bounds at final generalized Cauchy point %d\nnorm of the final projected gradient %g\nfinal function value %g\n\n", iter, nfgv, nintol, nskip, nact, sbgnrm, *f);
---
> 	    Rprintf("\n");
> 	    Rprintf(_("iterations %d\nfunction evaluations %d\nsegments explored during Cauchy searches %d\nBFGS updates skipped %d\nactive bounds at final generalized Cauchy point %d\nnorm of the final projected gradient %g\nfinal function value %g"), iter, nfgv, nintol, nskip, nact, sbgnrm, *f);
> 	    Rprintf("\n\n");
3557,3565c3594,3602
< 	case -1: Rprintf("Matrix in 1st Cholesky factorization in formk is not Pos. Def."); break;
< 	case -2: Rprintf("Matrix in 2st Cholesky factorization in formk is not Pos. Def."); break;
< 	case -3: Rprintf("Matrix in the Cholesky factorization in formt is not Pos. Def."); break;
< 	case -4: Rprintf("Derivative >= 0, backtracking line search impossible."); break;
< 	case -5: Rprintf("l(%d) > u(%d).  No feasible solution", k, k); break;
< 	case -6: Rprintf("Input nbd(%d) is invalid", k); break;
< 	case -7: Rprintf("Warning:  more than 10 function and gradient evaluations\n   in the last line search\n"); break;
< 	case -8: Rprintf("The triangular system is singular."); break;
< 	case -9: Rprintf("%s\n%s\n", "Line search cannot locate an adequate point after 20 function", "and gradient evaluations"); break;
---
> 	case -1: Rprintf(_("Matrix in 1st Cholesky factorization in formk is not Pos. Def.")); break;
> 	case -2: Rprintf(_("Matrix in 2nd Cholesky factorization in formk is not Pos. Def.")); break;
> 	case -3: Rprintf(_("Matrix in the Cholesky factorization in formt is not Pos. Def.")); break;
> 	case -4: Rprintf(_("Derivative >= 0, backtracking line search impossible.")); break;
> 	case -5: Rprintf(_("l(%d) > u(%d). No feasible solution"), k, k); break;
> 	case -6: Rprintf(_("Input nbd(%d) is invalid"), k); break;
> 	case -7: Rprintf(_("Warning: more than 10 function and gradient evaluations in the last line search")); break;
> 	case -8: Rprintf(_("The triangular system is singular.")); break;
> 	case -9: Rprintf(_("Line search cannot locate an adequate point after 20 function and gradient evaluations")); break;
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/appl/maxcol.c R/src/appl/maxcol.c
36c36
< 
---
> #include <Localization.h>
91c91
< 	    else error("invalid 'ties_meth' {should not happen}");
---
> 	    else error(_("invalid '%s' argument {should not happen}"), "ties_meth");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/appl/optim.c R/src/appl/optim.c
23a24
> #include <Localization.h>
148c149
<     if (trace) Rprintf("initial  value %f \n", f);
---
>     if (trace) { Rprintf(_("initial value %f"), f); Rprintf("\n"); }
245,246c246,249
< 	if (trace && (iter % nREPORT == 0))
< 	    Rprintf("iter%4d value %f\n", iter, f);
---
> 	if (trace && (iter % nREPORT == 0)) {
> 	    Rprintf(_("iter %4d value %f"), iter, f);	
> 	    Rprintf("\n");
> 	}
252,254c255,259
< 	Rprintf("final  value %f \n", *Fmin);
< 	if (iter < maxit) Rprintf("converged\n");
< 	else Rprintf("stopped after %i iterations\n", iter);
---
> 	Rprintf(_("final value %f"), *Fmin);
> 	Rprintf("\n");
> 	if (iter < maxit) Rprintf(_("'vmmin' alghoritm converged"));
> 	else Rprintf(_("stopped after %i iterations"), iter);
> 	Rprintf("\n");
291,292c296,299
<     if (trace)
< 	Rprintf("  Nelder-Mead direct search function minimizer\n");
---
>     if (trace) {
> 	Rprintf(_("  Nelder-Mead direct search function minimizer"));
> 	Rprintf("\n");
> 	}
300c307
< 	if (trace) Rprintf("function value for initial parameters = %f\n", f);
---
> 	if (trace) { Rprintf(_("function value for initial parameters = %f"), f); Rprintf("\n"); }
303c310
< 	if (trace) Rprintf("  Scaled convergence tolerance is %g\n", convtol);
---
> 	if (trace) { Rprintf(_("  Scaled convergence tolerance is %g"), convtol); Rprintf("\n"); }
319c326
< 	if (trace) Rprintf("Stepsize computed as %f\n", step);
---
> 	if (trace) { Rprintf(_("Stepsize computed as %f"), step); Rprintf("\n"); }
444,445c451,454
< 			    if (trace)
< 				Rprintf("Polytope size measure not decreased in shrink\n");
---
> 			    if (trace) {
> 				Rprintf(_("Polytope size measure not decreased in shrink"));
> 				Rprintf("\n");
> 			    }
458,459c467,470
< 	Rprintf("Exiting from Nelder Mead minimizer\n");
< 	Rprintf("    %d function evaluations used\n", funcount);
---
> 	Rprintf(_("Exiting from Nelder Mead minimizer"));
> 	Rprintf("\n    ");
> 	Rprintf(n_("%d function evaluation used", "%d function evaluations used", funcount), funcount);
> 	Rprintf("\n");
491c502,503
< 	Rprintf("  Conjugate gradients function minimizer\n");
---
> 	Rprintf(_("  Conjugate gradients function minimizer"));
> 	Rprintf("\n");
493,495c505,507
< 	case 1:	    Rprintf("Method: Fletcher Reeves\n");	break;
< 	case 2:	    Rprintf("Method: Polak Ribiere\n");		break;
< 	case 3:	    Rprintf("Method: Beale Sorenson\n");	break;
---
> 	case 1:	    Rprintf(_("Method: Fletcher Reeves"));	break;
> 	case 2:	    Rprintf(_("Method: Polak Ribiere"));	break;
> 	case 3:	    Rprintf(_("Method: Beale Sorenson"));	break;
497c509
< 	    error(_("unknown 'type' in \"CG\" method of 'optim'"));
---
> 	    error(_("unknown type in \"CG\" method of 'optim'"));
498a511
> 	Rprintf("\n");
507c520
<     if (trace) Rprintf("tolerance used in gradient test=%g\n", tol);
---
>     if (trace) { Rprintf(_("tolerance used in gradient test=%g"), tol); Rprintf("\n"); }
510c523
< 	error(_("Function cannot be evaluated at initial parameters"));
---
> 	error(_("function cannot be evaluated at initial parameters"));
527c540
< 		    Rprintf("parameters ");
---
> 		    Rprintf(_("parameters: "));
631,633c644,649
< 	Rprintf("Exiting from conjugate gradients minimizer\n");
< 	Rprintf("    %d function evaluations used\n", funcount);
< 	Rprintf("    %d gradient evaluations used\n", gradcount);
---
> 	Rprintf(_("Exiting from conjugate gradients minimizer"));
> 	Rprintf("\n    ");
> 	Rprintf(n_("%d function evaluation used", "%d function evaluations used", funcount), funcount);
> 	Rprintf("\n    ");
> 	Rprintf(n_("%d gradient evaluation used", "%d gradient evaluations used", gradcount), gradcount);
> 	Rprintf("\n");
690c706,707
< 		Rprintf("iter %4d value %f\n", iter, f);
---
> 		Rprintf(_("iter %4d value %f"), iter, f);
> 		Rprintf("\n");
712,714c729,733
< 	Rprintf("final  value %f \n", *Fmin);
< 	if (iter < maxit && *fail == 0) Rprintf("converged\n");
< 	else Rprintf("stopped after %i iterations\n", iter);
---
> 	Rprintf(_("final value %f"), *Fmin);
> 	Rprintf("\n");
> 	if (iter < maxit && *fail == 0) Rprintf("converged");
> 	else Rprintf(_("stopped after %i iterations"), iter);
> 	Rprintf("\n");
754,755c773,776
< 	Rprintf ("sann objective function values\n");
< 	Rprintf ("initial       value %f\n", *yb);
---
> 	Rprintf (_("sann objective function values"));
> 	Rprintf("\n");
> 	Rprintf (_("initial value %f"), *yb);
> 	Rprintf("\n");
779,780c800,803
< 	if (trace && ((itdoc % trace) == 0))
< 	    Rprintf("iter %8d value %f\n", its - 1, *yb);
---
> 	if (trace && ((itdoc % trace) == 0)) {
> 	    Rprintf(_("iter %8d value %f"), its - 1, *yb);
> 	    Rprintf("\n");
> 	}
784,785c807,810
< 	Rprintf ("final         value %f\n", *yb);
< 	Rprintf ("sann stopped after %d iterations\n", its - 1);
---
> 	Rprintf (_("final value %f"), *yb);
> 	Rprintf("\n");
> 	Rprintf (_("sann stopped after %d iterations"), its - 1);
> 	Rprintf("\n");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/appl/pretty.c R/src/appl/pretty.c
47,52c47
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) gettext (String)
< #else
< #define _(String) (String)
< #endif
---
> #include <Localization.h>
63,67c58
< #ifdef HAVE_VISIBILITY_ATTRIBUTE
< # define attribute_hidden __attribute__ ((visibility ("hidden")))
< #else
< # define attribute_hidden
< #endif
---
> #include <R_ext/Visibility.h>
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/appl/uncmin.c R/src/appl/uncmin.c
29a30
> #include <Localization.h>
2097c2098
<     Rprintf("iteration = %d\n", itncnt);
---
>     Rprintf(_("iteration = %d\n"), itncnt);
2102c2103
< 	Rprintf("Step:\n");
---
> 	Rprintf(_("Step:\n"));
2108c2109
<     Rprintf("Parameter:\n");
---
>     Rprintf(_("Parameter:\n"));
2113c2114
<     Rprintf("Function Value\n");
---
>     Rprintf(_("Function Value\n"));
2118c2119
<     Rprintf("Gradient:\n");
---
>     Rprintf(_("Gradient:\n"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/extra/blas/xerbla.c R/src/extra/blas/xerbla.c
2a3
> #include <Localization.h>
13c14
<     printf("BLAS/LAPACK routine '%6s' gave error code %d", buf, -(*info));
---
>     printf(_("BLAS/LAPACK routine '%6s' gave error code %d"), buf, -(*info));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/extra/bzip2/blocksort.c R/src/extra/bzip2/blocksort.c
21a22
> #include <Localization.h>
231c232
<       VPrintf0 ( "        bucket sorting ...\n" );
---
>       VPrintf0 ( _("        bucket sorting ...\n") );
310c311
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
---
>          VPrintf1 ( n_("%6d unresolved string\n", "%6d unresolved strings\n", nNotDone), nNotDone );
322c323
<       VPrintf0 ( "        reconstructing block ...\n" );
---
>       VPrintf0 ( _("        reconstructing block ...\n") );
772c773
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
---
>    if (verb >= 4) VPrintf0 ( _("        main sort initialise ...\n") );
805c806
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
---
>    if (verb >= 4) VPrintf0 ( _("        bucket sorting ...\n") );
899,900c900
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
---
>                      VPrintf4 ( _("        qsort [0x%x, 0x%x]   done %d   this %d\n"),
1014c1014
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
---
>       VPrintf3 ( _("        %d pointers, %d sorted, %d scanned\n"),
1075c1075
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
---
>          VPrintf3 ( _("      %d work, %d block, ratio %5.2f\n"),
1082,1083c1082
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
---
>             VPrintf0 ( _("    too repetitive; using fallback sorting algorithm\n") );
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/extra/graphapp/clipboard.c R/src/extra/graphapp/clipboard.c
31c31
< #include "win-nls.h"
---
> #include <Localization.h>
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/extra/graphapp/context.c R/src/extra/graphapp/context.c
240c240
< 	/* apperror("Cannot find DC for non-drawable object."); */
---
> 	/* apperror(_("Cannot find DC for non-drawable object.")); */
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/extra/graphapp/dialogs.c R/src/extra/graphapp/dialogs.c
37c37
< #include "win-nls.h"
---
> #include <Localization.h>
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/extra/graphapp/gmenus.c R/src/extra/graphapp/gmenus.c
27c27
< #include "win-nls.h"
---
> #include <Localization.h>
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/extra/graphapp/internal.h R/src/extra/graphapp/internal.h
265a266
> #include <R_ext/Minmax.h>
267,270d267
< #undef min
< #undef max
< #define min(a,b) (((a) < (b)) ? (a) : (b))
< #define max(a,b) (((a) > (b)) ? (a) : (b))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/extra/graphapp/metafile.c R/src/extra/graphapp/metafile.c
32c32
< #include "win-nls.h"
---
> #include <Localization.h>
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/extra/graphapp/printer.c R/src/extra/graphapp/printer.c
27c27
< #include "win-nls.h"
---
> #include <Localization.h>
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/extra/tre/regerror.c R/src/extra/tre/regerror.c
23,32c23
< 
< #ifdef HAVE_GETTEXT
< #include <libintl.h>
< #else
< #define dgettext(p, s) s
< #define gettext(s) s
< #endif
< 
< #define _(String) dgettext(PACKAGE, String)
< #define gettext_noop(String) String
---
> #include <Localization.h>
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/extra/tre/tre-internal.h R/src/extra/tre/tre-internal.h
22a23,25
> #include <Localization.h>
> #include <R_ext/Minmax.h>
> 
136,139d138
< #undef MAX
< #undef MIN
< #define MAX(a, b) (((a) >= (b)) ? (a) : (b))
< #define MIN(a, b) (((a) <= (b)) ? (a) : (b))
199c198
< #define R_assert(e) ((e) ? (void) 0 : Rf_error("assertion '%s' failed in executing regexp: file '%s', line %d\n", #e, __FILE__, __LINE__))
---
> #define R_assert(e) ((e) ? (void) 0 : Rf_error(_("assertion '%s' failed in executing regexp: file '%s', line %d\n"), #e, __FILE__, __LINE__))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/extra/tre/tre-match-backtrack.c R/src/extra/tre/tre-match-backtrack.c
36a37,38
> #include <R_ext/Minmax.h>
> 
197,198d198
< #undef MIN
< #define MIN(a, b) ((a) <= (b) ? (a) : (b))
441c441
< 	      slen = MIN(bt_len, len - pos);
---
> 	      slen = min(bt_len, len - pos);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/extra/tre/tre-parse.c R/src/extra/tre/tre-parse.c
311c311
< 		  len = MIN(endptr - re - 2, 63);
---
> 		  len = min(endptr - re - 2, 63);
456c456
<       int min, max;
---
>       int minn, maxx;
458,459c458,459
<       min = (int) l->code_min;
<       max = (int) l->code_max;
---
>       minn = (int) l->code_min;
>       maxx = (int) l->code_max;
466c466
< 	  if (min < curr_max)
---
> 	  if (minn < curr_max)
469c469
< 	      curr_max = MAX(max + 1, curr_max);
---
> 	      curr_max = max(maxx + 1, curr_max);
476c476
< 	      curr_max = min - 1;
---
> 	      curr_max = minn - 1;
488c488
< 	      curr_min = curr_max = max + 1;
---
> 	      curr_min = curr_max = maxx + 1;
1518c1518
< 		      ctx->max_backref = MAX(val, ctx->max_backref);
---
> 		      ctx->max_backref = max(val, ctx->max_backref);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/extra/trio/trio.c R/src/extra/trio/trio.c
48a49
> #include <Localization.h>
192c193
< #define assert(a) if(!(a)) Rf_error("internal error in trio library")
---
> #define assert(a) if(!(a)) Rf_error(_("internal error in trio library"))
7615c7616
<       return "End of file";
---
>       return _("End of file");
7617c7618
<       return "Invalid argument";
---
>       return _("invalid argument");
7619c7620
<       return "Too many arguments";
---
>       return _("too many arguments");
7621c7622
<       return "Double reference";
---
>       return _("Double reference");
7623c7624
<       return "Reference gap";
---
>       return _("Reference gap");
7625c7626
<       return "Out of memory";
---
>       return _("Out of memory");
7627c7628
<       return "Invalid range";
---
>       return _("Invalid range");
7629c7630
<       return "Custom error";
---
>       return _("Custom error");
7631c7632
<       return "Unknown";
---
>       return _("Unknown error");
7634c7635
<   return "Unknown";
---
>   return _("Unknown error");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/extra/trio/trionan.c R/src/extra/trio/trionan.c
36a37
> #include <Localization.h>
80c81
< #   error "Must be compiled with option /IEEE_MODE=UNDERFLOW_TO_ZERO/FLOAT=IEEE"
---
> #   error _("Must be compiled with option /IEEE_MODE=UNDERFLOW_TO_ZERO/FLOAT=IEEE")
83c84
< #    error "Must be compiled with option -ieee"
---
> #    error _("Must be compiled with option -ieee")
88c89
< #   error "Must be compiled with option -mieee"
---
> #   error _("Must be compiled with option -mieee")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/extra/tzone/localtime.c R/src/extra/tzone/localtime.c
39a40
> #include <Localization.h>
413c414
< 	    Rf_warning("unknown timezone '%s'", sname);
---
> 	    Rf_warning(_("unknown timezone '%s'"), sname);
417c418
< 	    Rf_warning("unknown timezone '%s'", sname);
---
> 	    Rf_warning(_("unknown timezone '%s'"), sname);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/extra/tzone/registryTZ.c R/src/extra/tzone/registryTZ.c
20a21
> #include <Localization.h>
363c364
<     Rf_warning("unable to identify current timezone '%s':\nplease set environment variable 'TZ'", s);
---
>     Rf_warning(_("unable to identify current timezone '%s':\nplease set environment variable 'TZ'"), s);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/gnuwin32/console.c R/src/gnuwin32/console.c
27c27
< #include "win-nls.h"
---
> #include <Localization.h>
1001,1002c1001,1005
< 	if (alen > max_show)
< 	    consolewrites(c, "\n[...truncated]");
---
> 	if (alen > max_show) {
> 		consolewrites(c, "\n");
> 	    const char *trunc = _("[... truncated]");
> 	    consolewrites(c, trunc);
> 	}
2081c2084
< 	    snprintf(msg, LF_FACESIZE + 128, "Page %d", cp++);
---
> 	    snprintf(msg, LF_FACESIZE + 128, _("Page %d"), cp++);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/gnuwin32/dos_wglob.c R/src/gnuwin32/dos_wglob.c
738c738
<     Rprintf("Adding ");
---
>     Rprintf(_("Adding: "));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/gnuwin32/dynload.c R/src/gnuwin32/dynload.c
29a30
> #include <Localization.h>
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/gnuwin32/editor.c R/src/gnuwin32/editor.c
24c24
< #include "win-nls.h"
---
> #include <Localization.h>
47a48
> #undef gettext
258c259
< 	    snprintf(msg, LF_FACESIZE + 128, "Page %d", page++);
---
> 	    snprintf(msg, LF_FACESIZE + 128, _("Page %d"), page++);
320c321
< 		 "\"%s\" has been modified.  Do you want to save the changes?",
---
> 		 _("File \"%s\" has been modified. Do you want to save the changes?"),
609c610
<     strcat(s, G_("To run a line or section of R code, select the code and either\n"));
---
>     strcat(s, G_("To run a line or section of R code, select the code and either:\n"));
614,615c615
<     strcat(s, G_("If there is no selection, this will just run the current line and advance\n"));
<     strcat(s, G_("the cursor by one line.\n"));
---
>     strcat(s, G_("If there is no selection, this will just run the current line and advance\nthe cursor by one line.\n"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/gnuwin32/embeddedR.c R/src/gnuwin32/embeddedR.c
145c145
< 	PrintWarnings();	/* from device close and .Last */
---
> 	PrintWarnings(NULL);	/* from device close and .Last */
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/gnuwin32/extra.c R/src/gnuwin32/extra.c
30c30
< #include "win-nls.h"
---
> #include <Localization.h>
35c35
< #include "Defn.h"
---
> #include <Defn.h>
61c61
< 	error(_("R_HOME not set"));
---
> 	error(_("R_HOME is not set"));
68c68
< 	    error(_("'%s' not found"), file);
---
> 	    error(_("file '%s' was not found"), file);
70,71c70
< 	    error(_("file association for '%s' not available or invalid"),
< 		  file);
---
> 	    error(_("file association for file '%s' is not available or invalid"), file);
73,74c72,73
< 	    error(_("access to '%s' denied"), file);
< 	error(_("problem in displaying '%s'"), file);
---
> 	    error(_("access to file '%s' denied"), file);
> 	error(_("problem in displaying file '%s'"), file);
89c88
< 	    error(_("R_HOME not set"));
---
> 	    error(_("R_HOME is not set"));
99c98
< 	    error(_("'%ls' not found"), file);
---
> 	    error(_("file '%ls' was not found"), file);
101,102c100
< 	    error(_("file association for '%ls' not available or invalid"),
< 		  file);
---
> 	    error(_("file association for file '%ls' is not available or invalid"), file);
104,105c102,103
< 	    error(_("access to '%ls' denied"), file);
< 	error(_("problem in displaying '%ls'"), file);
---
> 	    error(_("access to file '%ls' denied"), file);
> 	error(_("problem in displaying file '%ls'"), file);
128c126
< 	error(_("R_HOME not set"));
---
> 	error(_("R_HOME is not set"));
413c411
< 	errorcall(call, _("'path' must be a character vector"));
---
> 	errorcall(call, _("'%s' argument must be a character vector"), "path");
417c415
< 	errorcall(call, "'winslash' must be a character string");
---
> 	errorcall(call, _("'%s' argument must be a character string"), "winslash");
420c418
< 	errorcall(call, "'winslash' must be '/' or '\\\\'");
---
> 	errorcall(call, _("'winslash' argument must be '/' or '\\\\'"));
514c512
<     if(!isString(paths)) error(_("'path' must be a character vector"));
---
>     if(!isString(paths)) error(_("'%s' argument must be a character vector"), "path");
565c563
< 	if(stay && ismdi()) error(_("requires SDI mode"));
---
> 	if(stay && ismdi()) error(_("SDI mode is required"));
782c780
< 	    if(m < 0) error(_("invalid input in 'Rmbstowcs'"));
---
> 	    if(m < 0) error(_("invalid input in '%s' function"), "Rmbstowcs()");
790c788
< 	    if(m < 0) error(_("invalid input in 'Rmbstowcs'"));
---
> 	    if(m < 0) error(_("invalid input in '%s' function"), "Rmbstowcs()");
813c811
< 	error(_("file choice cancelled"));
---
> 	error(_("file choice was cancelled"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/gnuwin32/getline/getline.c R/src/gnuwin32/getline/getline.c
2a3
> #include <Localization.h>
249c250
< 	gl_error("\n*** Error: getline(): not interactive, use stdio.\n");
---
> 	gl_error(_("\n*** Error: getline(): not interactive, use stdio."));
251c252
<         gl_error("\n*** Error: getline(): no enough memory.\n");
---
>         gl_error(_("\n*** Error: getline(): no enough memory."));
273c274
< 	gl_error("\n*** Error: minimum screen width is 21\n");
---
> 	gl_error(_("\n*** Error: minimum screen width is 21"));
518c519
< 		    gl_error("invalid multibyte character in mbcs_get_next");
---
> 		    gl_error(_("invalid multibyte character in mbcs_get_next"));
522c523
< 		    gl_error("EOF whilst reading MBCS char");
---
> 		    gl_error(_("EOF whilst reading MBCS char"));
559c560
< 	        gl_error("\n*** Error: getline(): input buffer overflow\n");
---
> 	        gl_error(_("\n*** Error: getline(): input buffer overflow"));
568c569
< 	            gl_error("\n*** Error: getline(): input buffer overflow\n");
---
> 	            gl_error(_("\n*** Error: getline(): input buffer overflow"));
632c633
<         gl_error("\n*** Error: getline(): input buffer overflow\n");
---
>         gl_error(_("\n*** Error: getline(): input buffer overflow"));
934c935
< 	gl_error("\n*** Error: gl_hist_init() failed on malloc\n");
---
> 	gl_error(_("\n*** Error: gl_hist_init() failed on malloc"));
962c963
< 		gl_error("\n*** Error: gl_histadd() failed on realloc\n");
---
> 		gl_error(_("\n*** Error: gl_histadd() failed on realloc"));
1027c1028
< 	gl_error("\n*** Error: hist_save() failed on malloc\n");
---
> 	gl_error(_("\n*** Error: hist_save() failed on malloc"));
1040c1041
<        sprintf(msg, "Unable to open %s", file);
---
>        sprintf(msg, _("unable to open file '%s'"), file);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/gnuwin32/getline/wc_history.c R/src/gnuwin32/getline/wc_history.c
9a10
> #include <Localization.h>
21,22c22
<     snprintf(buf, 1000, 
< 	     "%s\nDisabling commands history for this session", msg);
---
>     snprintf(buf, 1000, _("%s\nDisabling commands history for this session"), msg);
49c49
< 	gl_error("*** Error: hist_save() failed on malloc");
---
> 	gl_error(_("*** Error: 'hist_save()' failed on malloc"));
86c86
< 		gl_error("*** Error: wgl_histadd() failed on realloc");
---
> 		gl_error(_("*** Error: 'wgl_histadd()' failed on realloc"));
142c142
<        snprintf(msg, 256, "Unable to open %s", file);
---
>        snprintf(msg, 256, _("unable to open file '%s'"), file);
178c178
<        snprintf(msg, 256, "Unable to open %ls", file);
---
>        snprintf(msg, 256, _("Unable to open %ls"), file);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/gnuwin32/installer/CustomMsg.iss R/src/gnuwin32/installer/CustomMsg.iss
267,293c267,293
< po.regentries=Wpisy rejestru:
< po.associate=Powiąż R z plikami z rozszerzeniem .RData
< po.user=Instalacja użytkownika
< po.custom=Dopasowana instalacja
< po.adminprivilegesrequired=Dla instalacji R, trzeba posiadać uprawnienia administratora
< po.adminexplanation=Pełna instalacja R wymaga uprawnienia administratora, które nie są dostępne. Jeśli ta instalacja będzie kontinuowana, powiążanie pliki .RData z R nie będą możliwe. Instalacja R jest tylko możliwe w katalogu z prawem zapisu dla użytkownika dokonującego instalacji.
< po.recordversion=Złóż numer wersji w rejestrze
< po.startupt=Opcje startowe
< po.startupq=Czy chcesz dopasować opcje startowe?
< po.startupi=Wybierz tak lub nie, i kliknij Dalej.
< po.startup0=Tak (dopasowane opcje)
< po.startup1=Nie (przyjąc opcje standardowe)
< po.MDIt=Interfejs graficzny
< po.MDIq=Czy wolisz interfejs MDI czy SDI?
< po.MDIi=Wybierz MDI lub SDI, i kliknij Dalej.
< po.MDI0=MDI (jedno duze okno)
< po.MDI1=SDI (oddzielne okna)
< po.HelpStylet=Typ pomocy
< po.HelpStyleq=Jaki typ pokazania pomocy wolisz?
< po.HelpStylei=Wybierz pomoc tekstową, lub pomoc HTML, i kliknij Dalej.
< po.HelpStyle0=Pomoc tekstowa
< po.HelpStyle1=pomoc HTML
< po.Internett=Dostęp do internetu
< po.Internetq=Czy chcesz używać internet2.dll, by wykorzystać nastawienie proxy z Internet Explorer?
< po.Interneti=Wybierz Standard lub Internet2, i kliknij Dalej.
< po.Internet0=Standard
< po.Internet1=Internet2
---
> pl.regentries=Wpisy rejestru:
> pl.associate=Powiąż R z plikami z rozszerzeniem .RData
> pl.user=Instalacja użytkownika
> pl.custom=Dopasowana instalacja
> pl.adminprivilegesrequired=Do instalacji R trzeba posiadać uprawnienia administratora
> pl.adminexplanation=Pełna instalacja R wymaga uprawnienia administratora, które nie są dostępne. Jeśli ta instalacja będzie kontynuowana, powiązanie plików .RData z R nie będzie możliwe. Instalacja R jest możliwa tylko w katalogu z prawem zapisu dla użytkownika dokonującego instalacji.
> pl.recordversion=Złóż numer wersji w rejestrze
> pl.startupt=Opcje startowe
> pl.startupq=Czy chcesz dopasować opcje startowe?
> pl.startupi=Wybierz tak lub nie, po czym kliknij Dalej.
> pl.startup0=Tak (dopasowane opcje)
> pl.startup1=Nie (przyjąć opcje standardowe)
> pl.MDIt=Interfejs graficzny
> pl.MDIq=Czy wolisz interfejs MDI czy SDI?
> pl.MDIi=Wybierz MDI lub SDI, po czym kliknij Dalej.
> pl.MDI0=MDI (jedno duże okno)
> pl.MDI1=SDI (oddzielne okna)
> pl.HelpStylet=Typ pomocy
> pl.HelpStyleq=Jaki typ pokazania pomocy wolisz?
> pl.HelpStylei=Wybierz pomoc tekstową lub pomoc HTML po czym kliknij Dalej.
> pl.HelpStyle0=Pomoc tekstowa
> pl.HelpStyle1=Pomoc HTML
> pl.Internett=Dostęp do internetu
> pl.Internetq=Czy chcesz używać biblioteki internet2.dll, by wykorzystać ustawienie proxy z Internet Explorer?
> pl.Interneti=Wybierz Standard lub Internet2, i kliknij Dalej.
> pl.Internet0=Standard
> pl.Internet1=Internet2
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/gnuwin32/installer/JRins.R R/src/gnuwin32/installer/JRins.R
33c33
<     SVN <- as.character(as.numeric(SVN) - 50000L)
---
>     #SVN <- as.character(as.numeric(SVN) - 50000L)
51,52c51,52
<         paste("AppName=R for Windows ", Rver, sep = ""),
<         paste("AppVerName=R for Windows ", Rver, sep = ""),
---
>         paste("AppName=R for Windows (IVORY edition) ", Rver, sep = ""),
>         paste("AppVerName=R for Windows (IVORY edition) ", Rver, sep = ""),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/gnuwin32/installer/header1.iss R/src/gnuwin32/installer/header1.iss
33c33
< Name: po; MessagesFile: "compiler:Languages\Polish.isl"
---
> Name: pl; MessagesFile: "compiler:Languages\Polish.isl"
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/gnuwin32/malloc.c R/src/gnuwin32/malloc.c
450a451
> #include <Localization.h>
1340c1341
< 	  Rf_warning("Reached total allocation of %dMb: see help(memory.size)",
---
> 	  Rf_warning(_("Reached total allocation of %dMb: see help(memory.size)"),
1355c1356
< 	  Rf_warning("Reached total allocation of %dMb: see help(memory.size)",
---
> 	  Rf_warning(_("Reached total allocation of %dMb: see help(memory.size)"),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/gnuwin32/pager.c R/src/gnuwin32/pager.c
26c26
< #include "win-nls.h"
---
> #include <Localization.h>
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/gnuwin32/preferences.c R/src/gnuwin32/preferences.c
26c26
< #include "win-nls.h"
---
> #include <Localization.h>
44a45
> #undef gettext
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/gnuwin32/rt_complete.c R/src/gnuwin32/rt_complete.c
28a29
> #include <R_ext/Minmax.h>
30,33d30
< #ifndef min
< /* in stdlib.h in Win64 headers */
< # define min(a, b) (a < b ? a : b)
< #endif
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/gnuwin32/rui.c R/src/gnuwin32/rui.c
24c24
< #include "win-nls.h"
---
> #include <Localization.h>
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/gnuwin32/run.c R/src/gnuwin32/run.c
29c29
< #include "win-nls.h"
---
> #include <Localization.h>
614c614
<     ((RWpipeconn)(con->private))->rp = rp;
---
>     ((RWpipeconn)(con->conprivate))->rp = rp;
626c626
<     con->status = rpipeClose( ((RWpipeconn)con->private) ->rp);
---
>     con->status = rpipeClose( ((RWpipeconn)con->conprivate) ->rp);
632c632
<     free(con->private);
---
>     free(con->conprivate);
638c638
<     rpipe *rp = ((RWpipeconn)con->private) ->rp;
---
>     rpipe *rp = ((RWpipeconn)con->conprivate) ->rp;
661c661
<     rpipe *rp = ((RWpipeconn)con->private) ->rp;
---
>     rpipe *rp = ((RWpipeconn)con->conprivate) ->rp;
669c669
<     rpipe *rp = ((RWpipeconn)con->private) ->rp;
---
>     rpipe *rp = ((RWpipeconn)con->conprivate) ->rp;
690c690
<     rpipe *rp = ((RWpipeconn)con->private) ->rp;
---
>     rpipe *rp = ((RWpipeconn)con->conprivate) ->rp;
697c697
< 	warning("broken Windows pipe");
---
> 	warning(_("broken Windows pipe"));
715c715
< 	warning("printing of extremely long output is truncated");
---
> 	warning(_("printing of extremely long output is truncated"));
730,731c730,731
<     new->class = (char *) malloc(strlen("pipe") + 1);
<     if(!new->class) {
---
>     new->conclass = (char *) malloc(strlen("pipe") + 1);
>     if(!new->conclass) {
735c735
<     strcpy(new->class, "pipe");
---
>     strcpy(new->conclass, "pipe");
745c745
< 	free(command); free(new->class); free(new);
---
> 	free(command); free(new->conclass); free(new);
771,773c771,773
<     new->private = (void *) malloc(sizeof(struct Wpipeconn));
<     if(!new->private) {
< 	free(new->description); free(new->class); free(new);
---
>     new->conprivate = (void *) malloc(sizeof(struct Wpipeconn));
>     if(!new->conprivate) {
> 	free(new->description); free(new->conclass); free(new);
788c788
< 	error(_("'names' is not a character vector"));
---
> 	error(_("'%s' argument is not a character vector"), "names");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/gnuwin32/sys-win32.c R/src/gnuwin32/sys-win32.c
28a29
> #include <Localization.h>
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/gnuwin32/system.c R/src/gnuwin32/system.c
52c52
< #include "win-nls.h"
---
> #include <Localization.h>
494c494
< 	PrintWarnings();        /* from device close and (if run) .Last */
---
> 	PrintWarnings(NULL);        /* from device close and (if run) .Last */
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/gnuwin32/win-nls.h R/src/gnuwin32/win-nls.h
21,34c21,26
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) libintl_gettext (String)
< #undef gettext /* needed for graphapp */
< #define gettext_noop(String) String
< #define N_(String) gettext_noop (String)
< #define G_(String) libintl_dgettext("RGui", String)
< #define GN_(String) gettext_noop (String)
< #else /* not NLS */
< #define _(String) (String)
< #define N_(String) String
< #define G_(String) (String)
< #define GN_(String) String
< #endif
---
> /*
>  * IVORY:
>  * Definitions have been merged in 'Localization.h' header.
>  * Please use 'Localization.h' instead of 'win-nls.h'.
>  */
> #include <Localization.h>
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/gnuwin32/windlgs/src/ttest.c R/src/gnuwin32/windlgs/src/ttest.c
190c190
< 	    error("invalid call %s", cmd);
---
> 	    error(_("invalid call %s"), cmd);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/include/Defn.h R/src/include/Defn.h
24,25d23
< /* seems unused */
< #define COUNTING
27d24
< #define BYTECODE
29,30c26,28
< /* probably no longer needed */
< #define NEW_CONDITION_HANDLING
---
> 
> #define isRaw(x) (TYPEOF(x) == RAWSXP)
> 
45,51c43
< #ifdef HAVE_VISIBILITY_ATTRIBUTE
< # define attribute_visible __attribute__ ((visibility ("default")))
< # define attribute_hidden __attribute__ ((visibility ("hidden")))
< #else
< # define attribute_visible
< # define attribute_hidden
< #endif
---
> #include <R_ext/Visibility.h>
534,535c526,527
< } RCNTXT, *context;
< 
---
> } RCNTXT;
> RCNTXT *context;
1128c1120
< void PrintWarnings(void);
---
> void PrintWarnings(const char *);
1316a1309,1310
> //IVORY UPDATE: localization moved to a separate file 'Localization.h'.
> // From now on it must be included separately.
1318,1334d1311
< #ifndef NO_NLS
< # ifdef ENABLE_NLS
< #  include <libintl.h>
< #  ifdef Win32
< #   define _(String) libintl_gettext (String)
< #   undef gettext /* needed for graphapp */
< #  else
< #   define _(String) gettext (String)
< #  endif
< #  define gettext_noop(String) String
< #  define N_(String) gettext_noop (String)
< #  else /* not NLS */
< #  define _(String) (String)
< #  define N_(String) String
< #  define ngettext(String, StringP, N) (N > 1 ? StringP: String)
< # endif
< #endif
1359,1363c1336
< #ifdef HAVE_LONG_DOUBLE
< # define LDOUBLE long double
< #else
< # define LDOUBLE double
< #endif
---
> #include <R_ext/Ldouble.h>
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/include/Errormsg.h R/src/include/Errormsg.h
25c25
< #define R_MSG_subs_o_b	_("subscript out of bounds")
---
> #define R_MSG_subs_o_b	_("subscript is out of bounds")
60c60
< #endif
---
> #endif /* ERRORMSG_H */
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/include/Fileio.h R/src/include/Fileio.h
28c27
< #endif
---
> #endif /* RFILEIO_H_ */
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/include/Graphics.h R/src/include/Graphics.h
215c215
<     Rboolean new;	/* Clean plot ? */
---
>     Rboolean newplot;	/* Clean plot ? */
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/include/IOStuff.h R/src/include/IOStuff.h
84c84
< #endif /* not R_IOSTUFF_H */
---
> #endif /* R_IOSTUFF_H */
Only in R/src/include: Localization.h
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/include/Print.h R/src/include/Print.h
24c24
< #include "Defn.h"
---
> #include <Defn.h>
89c89
< #endif
---
> #endif /* PRINT_H_ */
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/include/R.h R/src/include/R.h
74c74
< #endif /* !R_R_H */
---
> #endif /* R_R_H */
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/include/R_ext/Connections.h R/src/include/R_ext/Connections.h
45c45
<     char* class;
---
>     char* conclass;
75c75
<     void *private;
---
>     void *conprivate;
91c91
< #endif
---
> #endif /* R_EXT_CONNECTIONS_H_ */
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/include/R_ext/Constants.h R/src/include/R_ext/Constants.h
27,29d26
< #ifndef M_PI
< #define M_PI 3.141592653589793238462643383279502884197169399375
< #endif
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/include/R_ext/GetX11Image.h R/src/include/R_ext/GetX11Image.h
36c36
< #endif
---
> #endif /* GETX11IMAGE_H_ */
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/include/R_ext/Itermacros.h R/src/include/R_ext/Itermacros.h
54,55c54,78
< #define MOD_ITERATE_CORE(n, n1, n2, i, i1, i2, loop_body) do {	\
< 	for (; i < n;							\
---
> /* i1 = i % n1; i2 = i % n2;
>  * this macro is quite a bit faster than having real modulo calls
>  * in the loop (tested on Intel and Sparc)
>  */
> /* See arithmetic.c */
> #define mod_iterate(n1,n2,i1,i2)   \
>  for (i=i1=i2=0; i<n;              \
>         i1 = (++i1 == n1) ? 0 : i1,\
>         i2 = (++i2 == n2) ? 0 : i2,\
>         ++i)
> #define mod_iterate3(n1,n2,n3,i1,i2,i3) \
>  for (i=i1=i2=i3=0; i<n;                \
>         i1 = (++i1==n1) ? 0 : i1,       \
>         i2 = (++i2==n2) ? 0 : i2,       \
>         i3 = (++i3==n3) ? 0 : i3,       \
>         ++i)
> #define mod_iterate4(n1,n2,n3,n4,i1,i2,i3,i4) \
>  for (i=i1=i2=i3=i4=0; i<n;                   \
>         i1 = (++i1==n1) ? 0 : i1,             \
>         i2 = (++i2==n2) ? 0 : i2,             \
>         i3 = (++i3==n3) ? 0 : i3,             \
>         i4 = (++i4==n4) ? 0 : i4,             \
>         ++i)
> #define mod_iterate5(n1,n2,n3,n4,n5, i1,i2,i3,i4,i5) \
>  for (i=i1=i2=i3=i4=i5=0; i<n;                       \
58c81,87
< 		 ++i) {							\
---
>         i3 = (++i3==n3) ? 0 : i3,                    \
>         i4 = (++i4==n4) ? 0 : i4,                    \
>         i5 = (++i5==n5) ? 0 : i5,                    \
>         ++i)
> 
> #define MOD_ITERATE_CORE(n, n1, n2, i, i1, i2, loop_body) do {	\
> 	mod_iterate(n1,n2,i1,i2) {							\
63,66d91
< #define MOD_ITERATE(n, n1, n2, i, i1, i2, loop_body) do {	\
< 	i = i1 = i2 = 0;					\
< 	MOD_ITERATE_CORE(n, n1, n2, i, i1, i2, loop_body);	\
<     } while (0)
69d93
< 	i = i1 = i2 = 0;						\
75,79c99
< 	for (; i < n;							\
< 	     i1 = (++i1 == n1) ? 0 : i1,				\
< 		 i2 = (++i2 == n2) ? 0 : i2,				\
< 		 i3 = (++i3 == n3) ? 0 : i3,				\
< 		 ++i) {							\
---
> 	mod_iterate3(n1,n2,n3,i1,i2,i3) {							\
84,87d103
< #define MOD_ITERATE3(n, n1, n2, n3, i, i1, i2, i3, loop_body) do {	\
< 	i = i1 = i2 = i3 = 0;						\
< 	MOD_ITERATE3_CORE(n, n1, n2, n3, i, i1, i2, i3, loop_body);	\
<     } while (0)
91d106
< 	i = i1 = i2 = i3 = 0;						\
98,103c113
< 	for (; i < n;							\
< 	     i1 = (++i1 == n1) ? 0 : i1,				\
< 		 i2 = (++i2 == n2) ? 0 : i2,				\
< 		 i3 = (++i3 == n3) ? 0 : i3,				\
< 		 i4 = (++i4 == n4) ? 0 : i4,				\
< 		 ++i) {							\
---
> 	mod_iterate4(n1,n2,n3,n4,i1,i2,i3,i4) {							\
108,111d117
< #define MOD_ITERATE4(n, n1, n2, n3, n4, i, i1, i2, i3, i4, loop_body) do { \
< 	i = i1 = i2 = i3 = i4 = 0;					\
< 	MOD_ITERATE4_CORE(n, n1, n2, n3, n4, i, i1, i2, i3, i4, loop_body); \
<     } while (0)
116d121
< 	i = i1 = i2 = i3 = i4 = 0;					\
125,131c130
< 	for (; i < n;							\
< 	     i1 = (++i1 == n1) ? 0 : i1,				\
< 		 i2 = (++i2 == n2) ? 0 : i2,				\
< 		 i3 = (++i3 == n3) ? 0 : i3,				\
< 		 i4 = (++i4 == n4) ? 0 : i4,				\
< 		 i5 = (++i5 == n5) ? 0 : i5,				\
< 		 ++i) {							\
---
> 	mod_iterate5(n1,n2,n3,n4,n5, i1,i2,i3,i4,i5) {							\
136,141d134
< #define MOD_ITERATE5(n, n1, n2, n3, n4, n5, i, i1, i2, i3, i4, i5, loop_body) \
<     do {								\
< 	i = i1 = i2 = i3 = i4 = i5 = 0;					\
< 	MOD_ITERATE5_CORE(n, n1, n2, n3, n4, n5, i, i1, i2, i3, i4, i5, \
< 			  loop_body);					\
<     } while (0)
147d139
< 	i = i1 = i2 = i3 = i4 = i5 = 0;					\
Only in R/src/include/R_ext: Ldouble.h
Only in R/src/include/R_ext: Minmax.h
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/include/R_ext/Parse.h R/src/include/R_ext/Parse.h
47c47
< #endif
---
> #endif /* R_EXT_PARSE_H_ */
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/include/R_ext/QuartzDevice.h R/src/include/R_ext/QuartzDevice.h
236c236
< #endif
---
> #endif /* R_EXT_QUARTZDEVICE_H_ */
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/include/R_ext/RStartup.h R/src/include/R_ext/RStartup.h
107c107
< #endif
---
> #endif /* R_EXT_RSTARTUP_H_ */
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/include/Rconnections.h R/src/include/Rconnections.h
66c66
< void init_con(Rconnection new, const char *description, int enc,
---
> void init_con(Rconnection newcon, const char *description, int enc,
81c81,82
< #endif
---
> 
> #endif /* R_CONNECTIONS_H_ */
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/include/Rdefines.h R/src/include/Rdefines.h
117,118c117,118
< #define LIST_VALUE(x)		error("the 'value' of a list object is not defined")
< #define RAW_VALUE(x)		error("the 'value' of a raw object is not defined")
---
> #define LIST_VALUE(x)		error(_("the 'value' of a list object is not defined"))
> #define RAW_VALUE(x)		error(_("the 'value' of a raw object is not defined"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/include/Rdynpriv.h R/src/include/Rdynpriv.h
214c214
< #endif /* ifdef R_DYNPRIV_H */
---
> #endif /* R_DYNPRIV_H */
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/include/Rinlinedfuns.h R/src/include/Rinlinedfuns.h
397c397
< INLINE_FUN Rboolean isFunction(SEXP s)
---
> INLINE_FUN Rboolean isPrimitive(SEXP s)
399,400c399
<     return (TYPEOF(s) == CLOSXP ||
< 	    TYPEOF(s) == BUILTINSXP ||
---
>     return (TYPEOF(s) == BUILTINSXP ||
404c403
< INLINE_FUN Rboolean isPrimitive(SEXP s)
---
> INLINE_FUN Rboolean isFunction(SEXP s)
406,407c405,406
<     return (TYPEOF(s) == BUILTINSXP ||
< 	    TYPEOF(s) == SPECIALSXP);
---
>     return (TYPEOF(s) == CLOSXP ||
>             isPrimitive(s));
712c711
< 	    warning("cycle detected");
---
> 	    warning(_("cycle detected"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/include/Rinternals.h R/src/include/Rinternals.h
52a53
> #define DO_NOTHING do {} while(0)
251c252
< //#define SWITCH_TO_REFCNT
---
> #define SWITCH_TO_REFCNT
318c319
< # define SET_NAMED(x, v) do {} while (0)
---
> # define SET_NAMED(x, v) DO_NOTHING
396,399c397,400
< #define CDDDR(e)	CDR(CDR(CDR(e)))
< #define CADDR(e)	CAR(CDR(CDR(e)))
< #define CADDDR(e)	CAR(CDR(CDR(CDR(e))))
< #define CAD4R(e)	CAR(CDR(CDR(CDR(CDR(e)))))
---
> #define CDDDR(e)	CDR(CDDR(e))
> #define CADDR(e)	CAR(CDDR(e))
> #define CADDDR(e)	CAR(CDR(CDDR(e)))
> #define CAD4R(e)	CAR(CDDR(CDDR(e)))
485,488c486,489
< # define SET_REFCNT(x,v) do {} while(0)
< # define SET_TRACKREFS(x,v) do {} while(0)
< # define DECREMENT_REFCNT(x) do {} while(0)
< # define INCREMENT_REFCNT(x) do {} while(0)
---
> # define SET_REFCNT(x,v) DO_NOTHING
> # define SET_TRACKREFS(x,v) DO_NOTHING
> # define DECREMENT_REFCNT(x) DO_NOTHING
> # define INCREMENT_REFCNT(x) DO_NOTHING
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/include/Rmath.h0.in R/src/include/Rmath.h0.in
91a92,98
> /* usually in math.h, but not with strict C99 compliance */
> //echo 'scale=48; 4*a(1)' | bc -l
> #ifndef M_PI
> #define M_PI 3.141592653589793238462643383279502884197169399372
> #endif
> 
> //echo 'scale=32; e(1)' | bc -l
95a103
> //echo 'scale=32; l(e(1))/l(2)' | bc -l
99a108
> //echo 'scale=32; l(e(1))/l(10)' | bc -l
103a113
> //echo 'scale=32; l(2)' | bc -l
107a118
> //echo 'scale=32; l(10)' | bc -l
112,115c123
< #ifndef M_PI
< #define M_PI		3.141592653589793238462643383280	/* pi */
< #endif
< 
---
> //echo 'scale=32; 8*a(1)' | bc -l
119a128
> //echo 'scale=32; 2*a(1)' | bc -l
123a133
> //echo 'scale=32; a(1)' | bc -l
127a138
> //echo 'scale=32; 1/(4*a(1))' | bc -l
131a143
> //echo 'scale=32; 1/(2*a(1))' | bc -l
135a148
> //echo 'scale=32; 1/sqrt(a(1))' | bc -l
139a153
> //echo 'scale=32; sqrt(2)' | bc -l
143a158
> //echo 'scale=32; 1/sqrt(2)' | bc -l
149a165
> //echo 'scale=32; sqrt(3)' | bc -l
153a170
> //echo 'scale=32; sqrt(32)' | bc -l
157a175
> //echo 'scale=32; l(2)/l(10)' | bc -l
161a180
> //echo 'scale=32; sqrt(4*a(1))' | bc -l
165a185
> //echo 'scale=32; 1/sqrt(8*a(1))' | bc -l
169a190
> //echo 'scale=32; sqrt(1/(2*a(1)))' | bc -l
174a196
> //echo 'scale=32; l(8*a(1))/l(e(1))' | bc -l
178a201
> //echo 'scale=32; l(sqrt(4*a(1)))/l(e(1))' | bc -l
183a207
> //echo 'scale=32; l(sqrt(8*a(1)))/l(e(1))' | bc -l
188a213
> //echo 'scale=32; l(sqrt(2*a(1)))/l(e(1))' | bc -l
193a219,222
> 
> #ifndef M_EC
> #define M_EC            0.57721566490153286060651209008240243104215933593992 /* euler's constant */
> #endif
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/include/Rmodules/Rinternet.h R/src/include/Rmodules/Rinternet.h
60c60
< #endif /* ifndef R_INTERNET_MODULE_H */
---
> #endif /* R_INTERNET_MODULE_H */
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/include/S.h R/src/include/S.h
83c83
< #endif /* !R_S_H */
---
> #endif /* R_S_H */
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/Defunct.R R/src/library/base/R/Defunct.R
21,22c21
< 	msg <- gettextf("'%s' is defunct.\n",
< 			as.character(sys.call(sys.parent())[[1L]]))
---
> 	msg <- gettextf("Function %s is defunct.\n", sQuote(as.character(sys.call(sys.parent())[[1L]])))
24c23
< 	    msg <- c(msg, gettextf("Use '%s' instead.\n", new))
---
> 	    msg <- gettextf("Function %s is defunct.\nUse function %s instead.\n", sQuote(as.character(sys.call(sys.parent())[[1L]])), sQuote(new))
33c32
<     stop(paste(msg, collapse=""), call. = FALSE, domain = NA)
---
>     stop(paste(msg, collapse = ""), call. = FALSE, domain = "R-base")
175c174
< ##     .Defunct(msg = "namespaces should be specified via the 'NAMESPACE' file")
---
> ##     .Defunct(msg = gettext("namespaces should be specified via the 'NAMESPACE' file"))
177c176
< ##     .Defunct(msg = "namespaces should be specified via the 'NAMESPACE' file")
---
> ##     .Defunct(msg = gettext("namespaces should be specified via the 'NAMESPACE' file"))
179c178
< ##     .Defunct(msg = "namespaces should be specified via the 'NAMESPACE' file")
---
> ##     .Defunct(msg = gettext("namespaces should be specified via the 'NAMESPACE' file"))
181c180
< ##     .Defunct(msg = "namespaces should be specified via the 'NAMESPACE' file")
---
> ##     .Defunct(msg = gettext("namespaces should be specified via the 'NAMESPACE' file"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/Deprecated.R R/src/library/base/R/Deprecated.R
25c25
< 	msg <- gettextf("'%s' is deprecated.\n", old)
---
> 	msg <- gettextf("Function %s is deprecated.\n", sQuote(old))
27c27
< 	    msg <- c(msg, gettextf("Use '%s' instead.\n", new))
---
> 	    msg <- gettextf("Function %s is deprecated.\nUse function %s instead.\n", sQuote(old), sQuote(new))
35c35
<     warning(paste(msg, collapse=""), call. = FALSE, domain = NA)
---
>     warning(paste(msg, collapse=""), call. = FALSE, domain = "R-base")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/LAPACK.R R/src/library/base/R/LAPACK.R
22,23c22,23
< 	stop("argument to 'La.svd' must be numeric or complex")
<     if (any(!is.finite(x))) stop("infinite or missing values in 'x'")
---
> 	stop("argument passed to 'La.svd()' function must be logical, numeric or complex")
>     if (any(!is.finite(x))) stop(gettextf("infinite or missing values in '%s' argument", "x"))
27c27
<     if(!n || !p) stop("a dimension is zero")
---
>     if(!n || !p) stop(gettextf("at least one dimension of '%s' argument is 0", "x"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/New-Internal.R R/src/library/base/R/New-Internal.R
32,33c32,33
<             prefix <- paste("Error in", dcall, ": ")
<             LONG <- 75L # to match value in errors.c
---
>             prefix <- gettextf("Error in command '%s': ", paste(dcall, collapse = ""), domain = "R-base")
>             LONG <- getOption("width") - 5L # to match value in errors.c
43c43
<         else prefix <- "Error : "
---
>         else prefix <- gettext("Error: ")
111c111
<                               "deparse options %s are not recognized"),
---
>                               "deparse options %s are not recognized", domain = "R-base"),
117c117
<         stop('"hexNumeric"and "digits17" are mutually exclusive')
---
>         stop("\"hexNumeric\" and \"digits17\" are mutually exclusive")
122c122
<     function(expr, width.cutoff = 60L,
---
>     function(expr, width.cutoff = getOption("width"),
132c132
< 	stop("second argument must be a list")
---
> 	stop(gettextf("'%s' argument must be a list", "args"))
255c255
<         stop("'iconvlist' is not available on this system")
---
>         stop("'iconvlist()' function is not available on this system")
257c257
<     if(!length(ext)) stop("'iconvlist' is not available on this system")
---
>     if(!length(ext)) stop("'iconvlist()' function is not available on this system")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/RNG.R R/src/library/base/R/RNG.R
35c35
< 	    stop("'kind' must be a character string of length 1 (RNG to be used).")
---
> 	    stop(gettextf("'%s' argument must be a character string of length 1 (RNG to be used).", "kind"))
37,38c37,38
< 	    stop(gettextf("'%s' is not a valid abbreviation of an RNG", kind),
<                  domain = NA)
---
> 	    stop(gettextf("'%s' value is not a valid abbreviation of an RNG", kind),
>                  domain = "R-base")
44c44
< 	    stop("'normal.kind' must be a character string of length 1")
---
> 	    stop(gettextf("'%s' argument must be a character string of length 1", "normal.kind"))
47,48c47,48
< 	    stop(gettextf("'%s' is not a valid choice", normal.kind),
<                  domain = NA)
---
> 	    stop(gettextf("'%s' value is not a valid choice", normal.kind),
>                  domain = "R-base")
51c51
<                     domain = NA)
---
>                     domain = "R-base")
69c69
< 	    stop("'kind' must be a character string of length 1 (RNG to be used).")
---
> 	    stop(gettextf("'%s' argument must be a character string of length 1 (RNG to be used).", "kind"))
71,72c71,72
< 	    stop(gettextf("'%s' is not a valid abbreviation of an RNG", kind),
<                  domain = NA)
---
> 	    stop(gettextf("'%s' value is not a valid abbreviation of an RNG", kind),
>                  domain = "R-base")
78c78
< 	    stop("'normal.kind' must be a character string of length 1")
---
> 	    stop(gettextf("'%s' argument must be a character string of length 1", "normal.kind"))
81,82c81,82
< 	    stop(gettextf("'%s' is not a valid choice", normal.kind),
<                  domain = NA)
---
> 	    stop(gettextf("'%s' value is not a valid choice", normal.kind),
>                  domain = "R-base")
85c85
<                  domain = NA)
---
>                  domain = "R-base")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/TAOCP.R R/src/library/base/R/TAOCP.R
25c25
<     for(j in 1L:KK) {
---
>     for(j in seq_len(KK)) {
50c50
<     rs <- c(X[(LL+1L):KK], X[1L:LL])
---
>     rs <- c(X[(LL+1L):KK], X[seq_len(LL)])
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/apply.R R/src/library/base/R/apply.R
25c25
<     if(!dl) stop("dim(X) must have a positive length")
---
>     if(!dl) stop("'dim(X)' value must have a positive length")
70c70
<         for(i in 1L:d2) {
---
>         for(i in seq_len(d2)) {
75c75
<        for(i in 1L:d2) {
---
>        for(i in seq_len(d2)) {
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/array.R R/src/library/base/R/array.R
29c29
<         if (!length(dim)) stop("'dims' cannot be of length 0")
---
>         if (!length(dim)) stop(gettextf("'%s' argument cannot be of length 0", "dims"))
34c34
<                 stop("'dim' specifies too large an array")
---
>                 stop("'dim' argument specifies too large array")
52c52
<         stop("incorrect value for 'MARGIN'")
---
>         stop(gettextf("incorrect value for '%s' argument", "MARGIN"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/as.R R/src/library/base/R/as.R
81c81
< as.qr <- function(x) stop("you cannot be serious", domain = NA)
---
> as.qr <- function(x) stop("you cannot be serious", domain = "R-base")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/attach.R R/src/library/base/R/attach.R
25c25
<                  "The following objects are masked _by_ %s:\n\n%s\n")
---
>                  "The following objects are masked _by_ %s:\n\n%s\n", domain = "R-base")
29c29
<                  "The following objects are masked from %s:\n\n%s\n")
---
>                  "The following objects are masked from %s:\n\n%s\n", domain = "R-base")
83,84c83,84
<         warning("*** 'pos=1' is not possible; setting 'pos=2' for now.\n",
<                 "*** Note that 'pos=1' will give an error in the future")
---
>         warning("*** 'pos=1' is not possible; setting 'pos=2' for now.", "\n",
>                 "*** Note that 'pos=1' will give an error in the future", sep = "")
89c89
<             stop(gettextf("file '%s' not found", what), domain = NA)
---
>             stop(gettextf("file '%s' was not found", what), domain = "R-base")
116c116
< 	if(is.na(pos)) stop("invalid 'name' argument")
---
> 	if(is.na(pos)) stop(gettextf("invalid '%s' argument", "name"))
134c134
<                                  sQuote(pkgname), sQuote(sub("^package:", "", pkg))),
---
>                                  sQuote(pkgname), sQuote(sub("^package:", "", pkg)), domain = "R-base"),
138c138
<                               sQuote(pkgname), sQuote(sub("^package:", "", pkg))),
---
>                               sQuote(pkgname), sQuote(sub("^package:", "", pkg)), domain = "R-base"),
154,157c154,156
<                 warning(gettextf("%s failed in %s() for '%s', details:\n  call: %s\n  error: %s",
<                                  ".onDetach", "detach", pkgname,
<                                  deparse(conditionCall(res))[1L],
<                                  conditionMessage(res)),
---
>                 warning(gettextf("%s failed in %s function for package %s, details:\n  call: %s\n  error: %s",
>                                  sQuote(".onDetach"), sQuote("detach()"), sQuote(pkgname),
>                                  deparse(conditionCall(res))[1L], conditionMessage(res), domain = "R-base"),
168,169c167,168
<                 warning(gettextf("%s failed in %s() for '%s', details:\n  call: %s\n  error: %s",
<                                  ".Last.lib", "detach", pkgname,
---
>                 warning(gettextf("%s failed in %s function for package %s, details:\n  call: %s\n  error: %s",
>                                  sQuote(".Last.lib"), sQuote("detach()"), sQuote(pkgname),
171c170
<                                  conditionMessage(res)),
---
>                                  conditionMessage(res), domain = "R-base"),
183,184c182
<                      warning(gettextf("%s namespace cannot be unloaded:\n  ",
<                                       sQuote(pkgname)),
---
>                      warning(gettextf("%s namespace cannot be unloaded:", sQuote(pkgname), domain = "R-base"), "\n  ",
186c184
<                              call. = FALSE, domain = NA))
---
>                              call. = FALSE, domain = NA, sep = ""))
208,209c206
<             warning(gettextf("%s converted to character string", sQuote(name)),
<                     domain = NA)
---
>             warning(gettextf("%s value was converted to character string", sQuote(name)), domain = "R-base")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/attr.R R/src/library/base/R/attr.R
22c22
< 	if(!is.list(value)) stop("'value' must be a list")
---
> 	if(!is.list(value)) stop(gettextf("'%s' argument must be a list", "value"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/autoload.R R/src/library/base/R/autoload.R
51,52c51
< 	stop(gettextf("autoloader did not find '%s' in '%s'", name, package),
<              domain = NA)
---
> 	stop(gettextf("autoloader did not find '%s' in package %s", name, sQuote(package), domain = "R-base"), domain = NA)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/colSums.R R/src/library/base/R/colSums.R
27c27
<         stop("'x' must be an array of at least two dimensions")
---
>         stop("'x' argument must be an array of at least two dimensions")
29c29
<         stop("invalid 'dims'")
---
>         stop(gettextf("invalid '%s' argument", "dims"))
47c47
<         stop("'x' must be an array of at least two dimensions")
---
>         stop("'x' argument must be an array of at least two dimensions")
49c49
<         stop("invalid 'dims'")
---
>         stop(gettextf("invalid '%s' argument", "dims"))
67c67
<         stop("'x' must be an array of at least two dimensions")
---
>         stop("'x' argument must be an array of at least two dimensions")
69c69
<         stop("invalid 'dims'")
---
>         stop(gettextf("invalid '%s' argument", "dims"))
87c87
<         stop("'x' must be an array of at least two dimensions")
---
>         stop("'x' argument must be an array of at least two dimensions")
89c89
<         stop("invalid 'dims'")
---
>         stop(gettextf("invalid '%s' argument", "dims"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/conditions.R R/src/library/base/R/conditions.R
117c117
<         cat("<", cl, " in ", deparse(call), ": ", msg, ">\n", sep="")
---
> 	cat("<", gettextf("%s in %s: %s", cl, deparse(call), msg, domain = "R-base"), ">\n", sep = "")
128c128
<         paste0(cl, " in ", deparse(call)[1L], ": ", msg, "\n")
---
> 	cat(gettextf("%s in %s: %s", cl, deparse(call)[1L], msg, domain = "R-base"), "\n", sep = "")
137c137
<         paste0("Error in ", deparse(call)[1L], ": ", msg, "\n")
---
> 	paste(gettextf("Error in command '%s':", deparse(call)[1L], domain = "R-base"), msg, "\n", sep = "")
139c139
<         paste0("Error: ", msg, "\n")
---
> 	paste(gettext("Error:", domain = "R-base"), msg, "\n", sep = "")
159c159
<     cat(paste("<restart:", x[[1L]], ">\n"))
---
>     cat(gettextf("<restart: %s>", x[[1L]], domain = "R-base"), "\n", sep = "")
195,196c195
<             stop(gettextf("no 'restart' '%s' found", as.character(r)),
<                  domain = NA)
---
>             stop(gettextf("no 'restart' '%s' found", as.character(r)), domain = "R-base")
204c203
<         stop("not an interactive session")
---
>         stop("this session is not interactive")
208,209c207
<             stop(gettextf("no 'restart' '%s' found", as.character(r)),
<                  domain = NA)
---
>             stop(gettextf("no 'restart' '%s' found", as.character(r)), domain = "R-base")
216c214
<             cat("Enter values for restart arguments:\n\n")
---
>             cat(gettext("Enter values for restart arguments:", domain = "R-base"), "\n\n", sep = "")
264c262
<                stop("not a valid restart specification")
---
>                stop("this is not a valid restart specification")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/conflicts.R R/src/library/base/R/conflicts.R
22c22
<     if(length(where) < 1L) stop("argument 'where' of length 0")
---
>     if(length(where) < 1L) stop(gettextf("'%s' argument is of length 0", "where"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/connections.R R/src/library/base/R/connections.R
142c142
<         stop("'origin' must be one of 'start', 'current' or 'end'")
---
>         stop("'origin' argument must be one of 'start', 'current' or 'end'")
151c151
<     if(!isOpen(con)) stop("can only truncate an open connection")
---
>     if(!isOpen(con)) stop("'truncate.connection()' function can only truncate an open connection")
255c255
<         stop("can only write character objects")
---
>         stop("'writeChar()' can only write character objects")
270c270
<         stop("'timeout' must be NULL or a non-negative number")
---
>         stop("'timeout' argument must be NULL or a non-negative number")
281c281
<     else if(!is.raw(from)) stop("'from' must be raw or character")
---
>     else if(!is.raw(from)) stop("'from' argument must be raw or character")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/contributors.R R/src/library/base/R/contributors.R
23,28c23
<     writeLines(paste0("R is a project which is attempting to provide a ",
<                       "modern piece of\nstatistical software for the ",
<                       "GNU suite of software.\n\n",
<                       "The current R is the result of a collaborative ",
<                       "effort with\ncontributions from all over the ",
<                       "world.\n\n"), outConn)
---
>     writeLines(gettext("R is a project which is attempting to provide a modern piece of\nstatistical software for the GNU suite of software.\n\nThe current R is the result of a collaborative effort with\ncontributions from all over the world.", domain = "R-base"), "\n\n", outConn, sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/cut.R R/src/library/base/R/cut.R
25c25
<     if (!is.numeric(x)) stop("'x' must be numeric")
---
>     if (!is.numeric(x)) stop(gettextf("'%s' argument must be numeric", "x"))
40c40
<     if (anyDuplicated(breaks)) stop("'breaks' are not unique")
---
>     if (anyDuplicated(breaks)) stop("values in 'breaks' argument are not unique")
63c63
<         stop("lengths of 'breaks' and 'labels' differ")
---
>         stop("lengths of 'breaks' and 'labels' arguments differ")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/dataframe.R R/src/library/base/R/dataframe.R
69,73c69,72
<         warning(ngettext(length(nonuniq),
<                          sprintf("non-unique value when setting 'row.names': %s",
<                                  sQuote(nonuniq[1L])),
<                          sprintf("non-unique values when setting 'row.names': %s",
<                                  paste(sQuote(nonuniq), collapse = ", "))),
---
>         warning(sprintf(ngettext(length(nonuniq),
>                          "non-unique value when setting 'row.names': %s",
>                          "non-unique values when setting 'row.names': %s", domain = "R-base"),
>                                  paste(sQuote(nonuniq), collapse = ", ")),
75c74
< 	stop("duplicate 'row.names' are not allowed")
---
> 	stop("duplicate values in 'row.names' are not allowed")
144,146c143
<     stop(gettextf("cannot coerce class \"%s\" to a data.frame",
<                   deparse(class(x))),
<          domain = NA)
---
>     stop(gettextf("cannot coerce class %s to a \"data.frame\" class", dQuote(class(x))), domain = "R-base")
164c161
<                                   "invalid 'row.names', length %d for a data frame with %d rows"),
---
>                                   "invalid 'row.names', length %d for a data frame with %d rows", domain = "R-base"),
191c188
<                                   "supplied %d row names for %d rows"),
---
>                                   "supplied %d row names for %d rows", domain = "R-base"),
239c236
<         stop('options("stringsAsFactors") not set to TRUE or FALSE')
---
>         stop("'options(\"stringsAsFactors\")' is not set to TRUE or FALSE")
303c300
<                                   "supplied %d row names for %d rows"),
---
>                                   "supplied %d row names for %d rows", domain = "R-base"),
382c379
< 		stop(gettextf("mismatch of row names in arguments of 'data.frame\', item %d", i), domain = NA)
---
> 		stop(gettextf("mismatch of row names in arguments of 'data.frame()' function, item %d", i), domain = "R-base")
387,389c384
< 		    warning(gettextf("some row.names duplicated: %s --> row.names NOT used",
<                                      paste(which(duplicated(new)), collapse=",")),
<                             domain = NA)
---
> 		    warning(gettextf("some row.names duplicated: %s --> row.names NOT used", paste(which(duplicated(new)), collapse = ", ")), domain = "R-base")
406,409c401
<                 stop(gettextf("duplicate row.names: %s",
<                               paste(unique(row.names[duplicated(row.names)]),
<                                     collapse = ", ")),
<                      domain = NA)
---
>                 stop(gettextf("duplicate row.names: %s", paste(unique(row.names[duplicated(row.names)]), collapse = ", ")), domain = "R-base")
485,487c477
<         stop(gettextf("arguments imply differing number of rows: %s",
<                       paste(unique(nrows), collapse = ", ")),
<              domain = NA)
---
>         stop(gettextf("arguments imply differing number of rows: %s", paste(unique(nrows), collapse = ", ")), domain = "R-base")
504c494
<                 stop("'row.names' should specify one of the variables")
---
>                 stop("'row.names' argument should specify one of the variables")
522,525c512
<             stop(gettextf("duplicate row.names: %s",
<                           paste(unique(row.names[duplicated(row.names)]),
<                                 collapse = ", ")),
<                  domain = NA)
---
>             stop(gettextf("duplicate row.names: %s", paste(unique(row.names[duplicated(row.names)]), collapse = ", ")), domain = "R-base")
544c531
<         warning("named arguments other than 'drop' are discouraged")
---
>         warning(gettextf("named arguments other than '%s' are discouraged", "drop"))
693c680
<         warning("named arguments other than 'exact' are discouraged")
---
>         warning(gettextf("named arguments other than '%s' are discouraged", "exact"))
756c743
<                     stop("'value' is the wrong length")
---
>                     stop(gettextf("'%s' argument is of the wrong length", "value"))
875c862
<                                       "replacement has %d rows, data has %d"),
---
>                                       "replacement has %d rows, data has %d", domain = "R-base"),
883c870
<                                           "replacement has %d rows, data has %d"),
---
>                                           "replacement has %d rows, data has %d", domain = "R-base"),
891c878
<                                       "replacement has %d items, need %d"),
---
>                                       "replacement has %d items, need %d", domain = "R-base"),
907,909c894,895
<                                       "replacement element %d is a matrix/data frame of %d rows, need %d"),
<                              k, N, n),
<                      domain = NA)
---
>                                       "replacement element %d is a matrix/data frame of %d rows, need %d", domain = "R-base"),
>                              k, N, n), domain = NA)
913c899
<                                       "replacement element %d has %d rows, need %d"),
---
>                                       "replacement element %d has %d rows, need %d", domain = "R-base"),
920c906
<                                          "replacement element %d has %d rows to replace %d rows"),
---
>                                          "replacement element %d has %d rows to replace %d rows", domain = "R-base"),
934c920
<                                   "%d rows in value to replace %d rows"),
---
>                                   "%d rows in value to replace %d rows", domain = "R-base"),
940c926
<                                  "replacement data has %d rows to replace %d rows"),
---
>                                  "replacement data has %d rows to replace %d rows", domain = "R-base"),
948c934
<                                  "provided %d variables to replace %d variables"),
---
>                                  "provided %d variables to replace %d variables", domain = "R-base"),
1027c1013
<                                       "replacement has %d rows, data has %d"),
---
>                                       "replacement has %d rows, data has %d", domain = "R-base"),
1035c1021
<                                           "replacement has %d rows, data has %d"),
---
>                                           "replacement has %d rows, data has %d", domain = "R-base"),
1087,1088c1073
<             stop(gettextf("replacing element in non-existent column: %s",
<                           j[is.na(jseq)]), domain = NA)
---
>             stop(gettextf("replacing element in non-existent column: %s", j[is.na(jseq)]), domain = "R-base")
1095,1096c1080
<             stop(gettextf("replacing element in non-existent column: %s",
<                           jseq[jseq > nvars]), domain = NA)
---
>             stop(gettextf("replacing element in non-existent column: %s", jseq[jseq > nvars]), domain = "R-base")
1120c1104
<                                   "replacement has %d rows, data has %d"),
---
>                                   "replacement has %d rows, data has %d", domain = "R-base"),
1128c1112
<                                       "replacement has %d rows, data has %d"),
---
>                                       "replacement has %d rows, data has %d", domain = "R-base"),
1399c1383
< 	cat(gettext("<0 rows> (or 0-length row.names)\n"))
---
> 	cat(gettext("<0 rows> (or 0-length row.names)", domain = "R-base"), "\n", sep = "")
1512,1513c1496
< 	    stop(gettextf("%s only defined for equally-sized data frames",
<                           sQuote(.Generic)), domain = NA)
---
> 	    stop(gettextf("%s function is only defined for equally-sized data frames", sQuote(.Generic)))
1523,1524c1506
< 		stop(gettextf("list of length %d not meaningful", length(e2)),
<                      domain = NA)
---
> 		stop(gettextf("list of length %d is not meaningful", length(e2)), domain = "R-base")
1540,1541c1522
< 		stop(gettextf("list of length %d not meaningful", length(e1)),
<                      domain = NA)
---
> 		stop(gettextf("list of length %d is not meaningful", length(e1)), domain = "R-base")
1569c1550
<             stop("only defined on a data frame with all numeric variables")
---
>             stop("'summary()' function is only defined on a data frame with all numeric variables")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/dates.R R/src/library/base/R/dates.R
65c65
<     if(missing(origin)) stop("'origin' must be supplied")
---
>     if(missing(origin)) stop(gettextf("'%s' argument must be specified", "origin"))
74,77c74
<     stop(gettextf("do not know how to convert '%s' to class %s",
<                   deparse(substitute(x)),
<                   dQuote("Date")),
<          domain = NA)
---
>     stop(gettextf("do not know how to convert %s to class %s", sQuote(deparse(substitute(x))), dQuote("Date")), domain = "R-base")
86,87c83
<     } else stop(gettextf("'%s' is not a \"date\" object",
<                          deparse(substitute(x)) ))
---
>     } else stop(gettextf("%s is not an object of class %s", sQuote(deparse(substitute(x))), dQuote("Date")))
99,100c95
<     } else stop(gettextf("'%s' is not a \"dates\" object",
<                          deparse(substitute(x)) ))
---
>     } else stop(gettextf("%s is not an object of class %s", sQuote(deparse(substitute(x))), dQuote("Dates")))
116,117c111,114
< 	cat(' [ reached getOption("max.print") -- omitted',
< 	    length(x) - max, 'entries ]\n')
---
> 	cat(sprintf(ngettext(as.integer(length(x) - max),
> 			" [ reached 'getOption(\"max.print\")' -- omitted %d entry ]",
> 			" [ reached 'getOption(\"max.print\")' -- omitted %d entries ]", domain = "R-base"),
> 			length(x) - max), "\n", sep = "")
145c142
<         stop("binary + is not defined for \"Date\" objects")
---
>         stop(gettextf("binary '%s' operator is not defined for objects of class %s", "+", dQuote("Date")))
158,159c155,156
<         stop("can only subtract from \"Date\" objects")
<     if (nargs() == 1) stop("unary - is not defined for \"Date\" objects")
---
>         stop(gettextf("can only subtract from objects of class %s", dQuote("date")))
>     if (nargs() == 1) stop(gettextf("unary '%s' operator is not defined for objects of class %s", "-", dQuote("Date")))
163c160
<         stop("can only subtract numbers from \"Date\" objects")
---
>         stop(gettextf("can only subtract numbers from objects of class %s", dQuote("Date")))
170,171c167
<         stop(gettextf("unary %s not defined for \"Date\" objects", .Generic),
<              domain = NA)
---
>         stop(gettextf("unary '%s' operator is not defined for objects of class %s", .Generic, dQuote("Date")), domain = "R-base")
176,177c172
<         stop(gettextf("%s not defined for \"Date\" objects", .Generic),
<              domain = NA)
---
>         stop(gettextf("binary '%s' operator is not defined for objects of class %s", .Generic, dQuote("Date")), domain = "R-base")
185,186c180
<     stop(gettextf("%s not defined for \"Date\" objects", .Generic),
<          domain = NA)
---
>     stop(gettextf("'%s' function is not defined for objects of class %s", .Generic, dQuote("Date")), domain = "R-base")
191,192c185
<     if (!ok) stop(gettextf("%s not defined for \"Date\" objects", .Generic),
<                   domain = NA)
---
>     if (!ok) stop(gettextf("'%s' function is not defined for objects of class %s", .Generic, dQuote("Date")), domain = "R-base")
242,244c235,237
<     if (missing(from)) stop("'from' must be specified")
<     if (!inherits(from, "Date")) stop("'from' must be a \"Date\" object")
<         if(length(as.Date(from)) != 1L) stop("'from' must be of length 1")
---
>     if (missing(from)) stop(gettextf("'%s' argument must be specified", "from"))
>     if (!inherits(from, "Date")) stop(gettextf("'%s' argument must be an object of class %s", "from", dQuote("Date")))
>         if(length(as.Date(from)) != 1L) stop(gettextf("'%s' argument must be of length 1", "from"))
246,247c239,240
<         if (!inherits(to, "Date")) stop("'to' must be a \"Date\" object")
<         if (length(as.Date(to)) != 1L) stop("'to' must be of length 1")
---
>         if (!inherits(to, "Date")) stop(gettextf("'%s' argument must be an object of class %s", "to", dQuote("Date")))
>         if (length(as.Date(to)) != 1L) stop(gettextf("'%s' argument must be of length 1", "to"))
252c245
<         if (length(length.out) != 1L) stop("'length.out' must be of length 1")
---
>         if (length(length.out) != 1L) stop(gettextf("'%s' argument must be of length 1", "length.out"))
257c250
<         stop("exactly two of 'to', 'by' and 'length.out' / 'along.with' must be specified")
---
>         stop("exactly two of 'to', 'by' and 'length.out' / 'along.with' arguments must be specified")
265c258
<     if (length(by) != 1L) stop("'by' must be of length 1")
---
>     if (length(by) != 1L) stop(gettextf("'%s' argument must be of length 1", "by"))
274,276c267,268
<         valid <- pmatch(by2[length(by2)],
<                         c("days", "weeks", "months", "quarters", "years"))
<         if(is.na(valid)) stop("invalid string for 'by'")
---
>         valid <- pmatch(by2[length(by2)], c("days", "weeks", "months", "quarters", "years"))
>         if(is.na(valid)) stop("invalid string for 'by' argument")
282,283c274,275
<     } else if(!is.numeric(by)) stop("invalid mode for 'by'")
<     if(is.na(by)) stop("'by' is NA")
---
>     } else if(!is.numeric(by)) stop("invalid mode for 'by' argument")
>     if(is.na(by)) stop(gettextf("'%s' argument is NA", "by"))
331c323
<     if(!inherits(x, "Date")) stop("'x' must be a date-time object")
---
>     if(!inherits(x, "Date")) stop(gettextf("'%s' argument must be an object of class %s", "x", dQuote("Date")))
411c403
<     if(length(origin) != 1L) stop("'origin' must be of length one")
---
>     if(length(origin) != 1L) stop(gettextf("'%s' argument must be of length 1", "origin"))
451c443
<         stop("'lag' and 'differences' must be integers >= 1")
---
>         stop("'lag' and 'differences' arguments must be integers >= 1")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/datetime.R R/src/library/base/R/datetime.R
81c81
<     if(missing(origin)) stop("'origin' must be supplied")
---
>     if(missing(origin)) stop(gettextf("'%s' argument must be specified", "origin"))
91,94c91
<     stop(gettextf("do not know how to convert '%s' to class %s",
<                   deparse(substitute(x)),
<                   dQuote("POSIXlt")),
<          domain = NA)
---
>     stop(gettextf("do not know how to convert %s to class %s", sQuote(deparse(substitute(x))), dQuote("POSIXlt")), domain = "R-base")
108,109c105
<     } else stop(gettextf("'%s' is not a \"date\" object",
<                          deparse(substitute(x)) ))
---
>     } else stop(gettextf("%s is not an object of class %s", sQuote(deparse(substitute(x))), dQuote("Date")))
121,122c117
<     } else stop(gettextf("'%s' is not a \"dates\" object",
<                          deparse(substitute(x)) ))
---
>     } else stop(gettextf("%s is not an object of class %s", sQuote(deparse(substitute(x))), dQuote("Dates")))
139c134
<     if(missing(origin)) stop("'origin' must be supplied")
---
>     if(missing(origin)) stop(gettextf("'%s' argument must be specified", "origin"))
150,153c145
<     stop(gettextf("do not know how to convert '%s' to class %s",
<                   deparse(substitute(x)),
<                   dQuote("POSIXct")),
<          domain = NA)
---
>     stop(gettextf("do not know how to convert %s to class %s", sQuote(deparse(substitute(x))), dQuote("POSIXct")), domain = "R-base")
164c156
<     if(!inherits(x, "POSIXlt")) stop("wrong class")
---
>     if(!inherits(x, "POSIXlt")) stop(gettextf("'%s' argument is not an object of class %s", "x", dQuote("POSIXlt")))
207c199
<     if(!inherits(x, "POSIXct")) stop("wrong class")
---
>     if(!inherits(x, "POSIXct")) stop(gettextf("'%s' argument is not an object of class %s", "x", dQuote("POSIXct")))
219,220c211,214
<         cat(' [ reached getOption("max.print") -- omitted',
<             length(x) - max.print, 'entries ]\n')
---
> 	cat(sprintf(ngettext(as.integer(length(x) - max),
> 			" [ reached 'getOption(\"max.print\")' -- omitted %d entry ]",
> 			" [ reached 'getOption(\"max.print\")' -- omitted %d entries ]", domain = "R-base"),
> 			length(x) - max), "\n", sep = "")
230,231c224,227
<         cat(' [ reached getOption("max.print") -- omitted',
<             length(x) - max.print, 'entries ]\n')
---
>         cat(sprintf(ngettext(as.integer(length(x) - max.print),
> 	" [ reached 'getOption(\"max.print\")' -- omitted %d entry ]",
> 	" [ reached 'getOption(\"max.print\")' -- omitted %d entries ]", domain = "R-base"),
>             length(x) - max.print), "\n", sep = "")
264c260
<         stop("binary '+' is not defined for \"POSIXt\" objects")
---
>         stop(gettextf("binary '%s' operator is not defined for objects of class %s", "+", dQuote("POSIXt")))
280,281c276,277
<         stop("can only subtract from \"POSIXt\" objects")
<     if (nargs() == 1) stop("unary '-' is not defined for \"POSIXt\" objects")
---
>         stop(gettextf("can only subtract from objects of class %s", dQuote("POSIXt")))
>     if (nargs() == 1) stop(gettextf("unary '%s' operator is not defined for objects of class %s", "-", dQuote("POSIXt")))
285c281
<         stop("can only subtract numbers from \"POSIXt\" objects")
---
>         stop(gettextf("can only subtract numbers from objects of class %s", dQuote("POSIXt")))
293,296c289,290
<         stop(gettextf("unary '%s' not defined for \"POSIXt\" objects",
<                       .Generic), domain = NA)
<     boolean <- switch(.Generic, "<" = , ">" = , "==" = ,
<                       "!=" = , "<=" = , ">=" = TRUE, FALSE)
---
>         stop(gettextf("unary '%s' operator is not defined for objects of class %s", .Generic, dQuote("POSIXt")), domain = "R-base")
>     boolean <- switch(.Generic, "<" = , ">" = , "==" = , "!=" = , "<=" = , ">=" = TRUE, FALSE)
298,299c292
<         stop(gettextf("'%s' not defined for \"POSIXt\" objects", .Generic),
<              domain = NA)
---
>         stop(gettextf("binary '%s' operator is not defined for objects of class %s", .Generic, dQuote("POSIXt")), domain = "R-base")
308,309c301
<     stop(gettextf("'%s' not defined for \"POSIXt\" objects", .Generic),
<          domain = NA)
---
>     stop(gettextf("'%s' operator is not defined for objects of class %s", .Generic, dQuote("POSIXt")), domain = "R-base")
328,329c320
<         stop(gettextf("'%s' not defined for \"POSIXt\" objects", .Generic),
<              domain = NA)
---
>         stop(gettextf("'%s' operator is not defined for objects of class %s", .Generic, dQuote("POSIXt")), domain = "R-base")
342,343c333
<         stop(gettextf("'%s' not defined for \"POSIXt\" objects", .Generic),
<              domain = NA)
---
>         stop(gettextf("'%s' operator is not defined for objects of class %s", .Generic, dQuote("POSIXt")), domain = "R-base")
483,484c473,474
<         if (!is.numeric(tim)) stop("'tim' is not character or numeric")
< 	if (units == "auto") stop("need explicit units for numeric conversion")
---
>         if (!is.numeric(tim)) stop("'tim' argument is not character or numeric")
> 	if (units == "auto") stop("'as.difftime()' function needs explicit 'units' argument for numeric conversion")
486c476
< 	    stop("invalid units specified")
---
> 	    stop("invalid 'units' specified")
503c493
<         stop("invalid units specified")
---
> 	stop("invalid 'units' specified")
524c514,518
<         cat("Time differences in ", attr(x, "units"), "\n", sep = "")
---
>         if(attr(x, "units") == "secs") cat(gettext("Time differences in seconds", domain = "R-base"), "\n", sep = "")
>         else if(attr(x, "units") == "mins") cat(gettext("Time differences in minutes", domain = "R-base"), "\n", sep = "")
>         else if(attr(x, "units") == "hours") cat(gettext("Time differences in hours", domain = "R-base"), "\n", sep = "")
>         else if(attr(x, "units") == "days") cat(gettext("Time differences in days", domain = "R-base"), "\n", sep = "")
>         else cat(gettext("Time differences in weeks", domain = "R-base"), "\n", sep = "")
528,531c522,528
<     else
<         cat("Time difference of ", format(unclass(x), digits = digits), " ",
<             attr(x, "units"), "\n", sep = "")
< 
---
>     else {
>         if(attr(x, "units") == "secs") cat(gettextf("Time difference of %s seconds", format(unclass(x), digits = digits), domain = "R-base"), "\n", sep = "")
>         else if(attr(x, "units") == "mins") cat(gettextf("Time difference of %s minutes", format(unclass(x), digits = digits), domain = "R-base"), "\n", sep = "")
>         else if(attr(x, "units") == "hours") cat(gettextf("Time difference of %s hours", format(unclass(x), digits = digits), domain = "R-base"), "\n", sep = "")
>         else if(attr(x, "units") == "days") cat(gettextf("Time difference of %s days", format(unclass(x), digits = digits), domain = "R-base"), "\n", sep = "")
>         else cat(gettextf("Time difference of %s weeks", format(unclass(x), digits = digits), domain = "R-base"), "\n", sep = "")
>     }
555,556c552
<                stop(gettextf("unary '%s' not defined for \"difftime\" objects",
<                              .Generic), domain = NA, call. = FALSE)
---
>                stop(gettextf("unary '%s' operator is not defined for objects of class %s", .Generic, dQuote("difftime")), domain = "R-base", call. = FALSE)
586,587c582
<         stop(gettextf("'%s' not defined for \"difftime\" objects", .Generic),
<              domain = NA)
---
>         stop(gettextf("'%s' operator is not defined for objects of class %s", .Generic, dQuote("difftime")), domain = "R-base")
595c590
<         stop("both arguments of * cannot be \"difftime\" objects")
---
>         stop(gettextf("both arguments of '%s' operator cannot be objects of class %s", "*", dQuote("difftime")))
604c599
<         stop("second argument of / cannot be a \"difftime\" object")
---
>         stop(gettextf("second argument of '/' operator cannot be an object of class %s", dQuote("difftime")))
618,619c613
<            stop(gettextf("'%s' not defined for \"difftime\" objects", .Generic),
<                 domain = NA))
---
>            stop(gettextf("'%s' operator is not defined for objects of class %s", .Generic, dQuote("difftime")), domain = "R-base"))
637,638c631
<         stop(gettextf("'%s' not defined for \"difftime\" objects", .Generic),
<              domain = NA)
---
>         stop(gettextf("'%s' operator is not defined for objects of class %s", .Generic, dQuote("difftime")), domain = "R-base")
661,662c654,655
<     if (missing(from)) stop("'from' must be specified")
<     if (!inherits(from, "POSIXt")) stop("'from' must be a \"POSIXt\" object")
---
>     if (missing(from)) stop(gettextf("'%s' argument must be specified", "from"))
>     if (!inherits(from, "POSIXt")) stop(gettextf("'%s' argument must be an object of class %s", "from", dQuote("POSIXt")))
664c657
<     if(length(cfrom) != 1L) stop("'from' must be of length 1")
---
>     if(length(cfrom) != 1L) stop(gettextf("'%s' argument must be of length 1", "from"))
667,668c660,661
<         if (!inherits(to, "POSIXt")) stop("'to' must be a \"POSIXt\" object")
<         if (length(as.POSIXct(to)) != 1) stop("'to' must be of length 1")
---
>         if (!inherits(to, "POSIXt")) stop(gettextf("'%s' argument must be an object of class %s", "to", dQuote("POSIXt")))
>         if (length(as.POSIXct(to)) != 1) stop(gettextf("'%s' argument must be of length 1", "to"))
673c666
<         if (length(length.out) != 1L) stop("'length.out' must be of length 1")
---
>         if (length(length.out) != 1L) stop(gettextf("'%s' argument must be of length 1", "length.out"))
689c682
<     if (length(by) != 1L) stop("'by' must be of length 1")
---
>     if (length(by) != 1L) stop(gettextf("'%s' argument must be of length 1", "by"))
697,701c690,692
<             stop("invalid 'by' string")
<         valid <- pmatch(by2[length(by2)],
<                         c("secs", "mins", "hours", "days", "weeks",
<                           "months", "years", "DSTdays", "quarters"))
<         if(is.na(valid)) stop("invalid string for 'by'")
---
>             stop("invalid string for 'by' argument")
>         valid <- pmatch(by2[length(by2)], c("secs", "mins", "hours", "days", "weeks", "months", "years", "DSTdays", "quarters"))
>         if(is.na(valid)) stop("invalid string for 'by' argument")
707,708c698,699
<     } else if(!is.numeric(by)) stop("invalid mode for 'by'")
<     if(is.na(by)) stop("'by' is NA")
---
>     } else if(!is.numeric(by)) stop("invalid mode for 'by' argument")
>     if(is.na(by)) stop(gettextf("'%s' argument is NA", "by"))
763c754
<     if(!inherits(x, "POSIXt")) stop("'x' must be a date-time object")
---
>     if(!inherits(x, "POSIXt")) stop(gettextf("'%s' argument must be an object of class %s", "x", dQuote("POSIXt")))
847c838
<     if(length(origin) != 1L) stop("'origin' must be of length one")
---
>     if(length(origin) != 1L) stop(gettextf("'%s' argument must be of length 1", "origin"))
946c937
<         stop("'lag' and 'differences' must be integers >= 1")
---
>         stop("'lag' and 'differences' arguments must be integers >= 1")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/dcf.R R/src/library/base/R/dcf.R
27c27
<         stop("'file' must be a character string or connection")
---
>         stop(gettextf("'%s' argument must be a character string or connection", "file"))
81,83c81
<         stop(gettextf("Invalid DCF format.\nRegular lines must have a tag.\nOffending lines start with:\n%s",
<                       paste0("  ", lines, collapse = "\n")),
<              domain = NA)
---
>         stop(gettextf("Invalid DCF format.\nRegular lines must have a tag.\nOffending lines start with:\n%s", paste0("  ", lines, collapse = "\n")), domain = "R-base")
105,107c103
<         stop(gettextf("Invalid DCF format.\nContinuation lines must not start a record.\nOffending lines start with:\n%s",
<                       paste0("  ", lines, collapse = "\n")),
<              domain = NA)
---
>         stop(gettextf("Invalid DCF format.\nContinuation lines must not start a record.\nOffending lines start with:\n%s", paste0("  ", lines, collapse = "\n")), domain = "R-base")
146c142
<         stop("'file' must be a character string or connection")
---
>         stop(gettextf("'%s' argument must be a character string or connection", "file"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/det.R R/src/library/base/R/det.R
36c36
<         stop("'x' must be a square matrix")
---
>         stop(gettextf("'%s' argument must be a square matrix", "x"))
44c44
<         stop("'determinant' not currently defined for complex matrices")
---
>         stop("'determinant()' function not currently defined for complex matrices")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/diag.R R/src/library/base/R/diag.R
35c35
<         stop("'x' is an array, but not one-dimensional.")
---
>         stop(gettextf("'%s' argument is an array, but not one-dimensional.", "x"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/diff.R R/src/library/base/R/diff.R
27c27
< 	stop("'lag' and 'differences' must be integers >= 1")
---
> 	stop("'lag' and 'differences' arguments must be integers >= 1")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/duplicated.R R/src/library/base/R/duplicated.R
44,45c44
<         stop(gettextf("MARGIN = %d is invalid for dim = %d", MARGIN, dx),
<              domain = NA)
---
>         stop(gettextf("MARGIN = %d is invalid for dim = %d", MARGIN, dx), domain = "R-base")
78,79c77
<         stop(gettextf("MARGIN = %d is invalid for dim = %d", MARGIN, dx),
<              domain = NA)
---
>         stop(gettextf("MARGIN = %d is invalid for dim = %d", MARGIN, dx), domain = "R-base")
122,123c120
<         stop(gettextf("MARGIN = %d is invalid for dim = %d", MARGIN, dx),
<              domain = NA)
---
>         stop(gettextf("MARGIN = %d is invalid for dim = %d", MARGIN, dx), domain = "R-base")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/dynload.R R/src/library/base/R/dynload.R
51c51
<                       dQuote("DllInfoReference")),
---
>                       dQuote("DllInfoReference"), domain = "R-base"),
58c58
< 	    msg <- paste("no such symbol", id)
---
> 	    stop(gettextf("no such symbol %s", id), domain = "R-base")
60,61c60
< 		msg <- paste(msg, "in package", pkgName)
< 	    stop(msg, domain = NA)
---
> 		stop(gettextf("no such symbol %s in package %s", id, pkgName), domain = "R-base")
88,89c87
<         stop(gettextf("No DLL currently loaded with name or path %s", sQuote(dll)),
<              domain = NA)
---
>         stop(gettextf("No DLL currently loaded with name or path %s", sQuote(dll)), domain = "R-base")
93,94c91
<         warning(gettextf("multiple DLLs match '%s'. Using '%s'",
<                          dll, dll[["path"]]), domain = NA)
---
>         warning(gettextf("multiple DLL files match %s. Using file %s", sQuote(dll), sQuote(dll[["path"]])), domain = "R-base")
104,106c101
<         stop(gettextf("must specify DLL via a %s object. See getLoadedDLLs()",
<                       dQuote("DLLInfo")),
<              domain = NA)
---
>         stop(gettextf("must specify DLL file via an object of class %s. See 'getLoadedDLLs()' function", dQuote("DLLInfo")), domain = "R-base")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/eigen.R R/src/library/base/R/eigen.R
40,41c40,41
<     if (!n) stop("0 x 0 matrix")
<     if (n != ncol(x)) stop("non-square matrix in 'eigen'")
---
>     if (!n) stop(gettextf("'%s' argument is a 0 x 0 matrix", "x"))
>     if (n != ncol(x)) stop("non-square matrix in 'eigen()' function")
43c43
<     if(is.na(n)) stop("invalid nrow(x)")
---
>     if(is.na(n)) stop(gettextf("invalid '%s' value", "nrow(x)"))
46c46
<     if (!all(is.finite(x))) stop("infinite or missing values in 'x'")
---
>     if (!all(is.finite(x))) stop(gettextf("infinite or missing values in '%s' argument", "x"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/factor.R R/src/library/base/R/factor.R
41,42c41
< 	stop(gettextf("invalid 'labels'; length %d should be 1 or %d", nl, nL),
< 	     domain = NA)
---
> 	stop(gettextf("invalid 'labels'; length %d should be 1 or %d", nl, nL), domain = "R-base")
142c141
<         T0 <- "Levels: "
---
>         T0 <- gettext("Levels: ", domain = "R-base")
162c161
<     stop(gettextf("%s not meaningful for factors", sQuote(.Generic)))
---
>     stop(gettextf("%s function is not meaningful for factors", sQuote(.Generic)))
166c165
<     stop(gettextf("%s not meaningful for factors", sQuote(.Generic)))
---
>     stop(gettextf("%s function is not meaningful for factors", sQuote(.Generic)))
172c171
< 	warning(gettextf("%s not meaningful for factors", sQuote(.Generic)))
---
> 	warning(gettextf("%s function is not meaningful for factors", sQuote(.Generic)))
221c220
< 	warning("invalid factor level, NA generated")
---
> 	warning("invalid factor level, NA value generated")
246c245
< 	warning("invalid factor level, NA generated")
---
> 	warning("invalid factor level, NA value generated")
268,269c267
< 	warning(sprintf("'%s' is not meaningful for ordered factors",
<                         .Generic))
---
> 	warning(gettextf("'%s' operator is not meaningful for ordered factors", .Generic))
310,311c308
< 	stop(gettextf("'%s' not defined for ordered factors", .Generic),
< 	     domain = NA)
---
> 	stop(gettextf("'%s' operator is not defined for ordered factors", .Generic), domain = "R-base")
317,318c314
< 	stop(gettextf("'%s' is only meaningful for ordered factors if all arguments have the same level sets",
< 		      .Generic))
---
> 	stop(gettextf("'%s' operator is only meaningful for ordered factors if all arguments have the same level sets", .Generic))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/files.R R/src/library/base/R/files.R
39c39
<     function (..., header = rep("", nfiles), title = "R Information",
---
>     function (..., header = rep("", nfiles), title = gettext("R Information", domain = "R-base"),
121c121
<         warning("'recursive' will be ignored as 'to' is not a single existing directory")
---
>         warning("'recursive' argument will be ignored as 'to' argument is not a single existing directory")
189c189
<         stop("'package' must be of length 1")
---
>         stop(gettextf("'%s' argument must be of length 1", "package"))
242c242
<         stop("invalid 'path' argument")
---
>         stop(gettextf("invalid '%s' argument", "path"))
244c244
<     if (is.na(time))  stop("invalid 'time' argument")
---
>     if (is.na(time))  stop(gettextf("invalid '%s' argument", "time"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/findInt.R R/src/library/base/R/findInt.R
27c27
< 	stop("'vec' contains NAs")
---
> 	stop("'vec' argument contains NA values")
29c29
< 	stop("'vec' must be sorted non-decreasingly")
---
> 	stop("'vec' argument must be sorted non-decreasingly")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/format.R R/src/library/base/R/format.R
115c115
<         warning("class of 'x' was discarded")
---
>         warning("class of 'x' argument was discarded")
133,134c133
<     else if (mode != "character")
<         stop("'mode' must be \"double\" (\"real\"), \"integer\" or \"character\"")
---
>     else if (mode != "character") stop("'mode' argument must be \"double\" (\"real\"), \"integer\" or \"character\"")
137c136
< 	    warning('coercing argument to "character" for format="s"')
---
> 	    warning("coercing argument to an object of class \"character\" for 'format=\"s\"' option")
151c150
< 	else stop('\'format\' must be one of {"f","e","E","g","G", "fg", "s"}')
---
> 	else stop("'format' argument must be one of {\"f\",\"e\",\"E\",\"g\",\"G\",\"fg\",\"s\"}")
168,169c167
<             warning(gettextf("'digits' reduced to %d", maxDigits),
<                     domain = NA)
---
>             warning(gettextf("'digits' argument reduced to %d", maxDigits), domain = "R-base")
193c191
< 	stop("'flag' can contain only '0+- #'")
---
> 	stop("'flag' argument can contain only '0+- #'")
230c228
< 	warning("corrupt data frame: columns will be truncated or padded with NAs")
---
> 	warning("corrupt data frame: columns will be truncated or padded with NA values")
299,300c297,298
<         warning(gettextf("'big.mark' and 'decimal.mark' are both '%s', which could be confusing",
<                          big.mark), domain = NA)
---
>         warning(gettextf("'big.mark' and 'decimal.mark' arguments are both set to '%s', which could be confusing",
>                          big.mark), domain = "R-base")
310c308
< 	if(length(zero.print) > 1L) stop("'zero.print' has length > 1")
---
> 	if(length(zero.print) > 1L) stop(gettextf("'%s' argument has length > 1", "zero.print"))
314c312
< 	    stop("'zero.print' must be character, logical or NULL")
---
> 	    stop(gettextf("'%s' argument must be character, logical or NULL", "zero.print"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/frametools.R R/src/library/base/R/frametools.R
26c26
<         if(!is.logical(r)) stop("'subset' must be logical")
---
>         if(!is.logical(r)) stop(gettextf("'%s' argument must be logical", "subset"))
45c45
<     if(!is.logical(subset)) stop("'subset' must be logical")
---
>     if(!is.logical(subset)) stop(gettextf("'%s' argument must be logical", "subset"))
54c54
< 	nl <- as.list(1L:ncol(x))
---
> 	nl <- as.list(seq_len(ncol(x)))
59c59
<     else if(!is.logical(subset)) stop("'subset' must be logical")
---
>     else if(!is.logical(subset)) stop(gettextf("'%s' argument must be logical", "subset"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/getenv.R R/src/library/base/R/getenv.R
26c26
< 	for (i in 1L:LEN) {
---
> 	for (i in seq_len(LEN)) {
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/grep.R R/src/library/base/R/grep.R
213,215c213
<         stop(gettextf("%s and %s must have the same length",
<                       sQuote("x"), sQuote("m")),
<              domain = NA)
---
>         stop(gettextf("'%s' and '%s' arguments must have the same length", "x", "m", domain = "R-base"), domain = NA)
261,263c259
<                     stop(gettextf("need non-overlapping matches for %s",
<                                   sQuote("invert = TRUE")),
<                          domain = NA)
---
>                     stop(gettextf("need non-overlapping matches for %s", sQuote("invert = TRUE"), domain = "R-base"), domain = NA)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/jitter.R R/src/library/base/R/jitter.R
28c28
<         stop("'x' must be numeric")
---
>         stop(gettextf("'%s' argument must be numeric", "x"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/kappa.R R/src/library/base/R/kappa.R
60c60
< 	    warning(gettextf("norm '%s' currently always uses exact = FALSE",
---
> 	    warning(gettextf("norm '%s' currently always uses 'exact = FALSE' option",
88c88
<         if(is.na(p)) stop("invalid nrow(x)")
---
>         if(is.na(p)) stop(gettextf("invalid '%s' value", "nrow(x)"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/kronecker.R R/src/library/base/R/kronecker.R
46c46
<     dp <- as.vector(t(matrix(1L:(2*length(dX)), ncol = 2)[, 2:1]))
---
>     dp <- as.vector(t(matrix(seq_len((2*length(dX))), ncol = 2)[, 2:1]))
67c67
< 	for (i in 1L:k) {
---
> 	for (i in seq_len(k)) {
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/lapply.R R/src/library/base/R/lapply.R
36c36
<         stop("'object' must be a list")
---
>         stop(gettextf("'%s' argument must be a list", "object"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/lazyload.R R/src/library/base/R/lazyload.R
39c39
<         if (! is.character(file)) halt("bad file name")
---
>         if (! is.character(file)) halt(gettext("invalid file name"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/library.R R/src/library/base/R/library.R
41,43c41
<             stop(gettextf("package %s has not been installed properly\n",
<                           sQuote(pkgname)),
<                  call. = FALSE, domain = NA)
---
>             stop(gettextf("package %s has not been installed properly", sQuote(pkgname)), call. = FALSE, domain = "R-base")
48,49c46
<             stop(gettextf("package %s was built before R 3.0.0: please re-install it",
<                           sQuote(pkgname)), call. = FALSE, domain = NA)
---
>             stop(gettextf("package %s was built before R 3.0.0: please re-install it", sQuote(pkgname)), call. = FALSE, domain = "R-base")
69,71c66
<                         stop(gettextf("This is R %s, package %s needs %s %s",
<                                       current, sQuote(pkgname), dep$op, target),
<                              call. = FALSE, domain = NA)
---
>                         stop(gettextf("This is R %s, package %s needs %s %s", current, sQuote(pkgname), dep$op, target), call. = FALSE, domain = "R-base")
76,78c71
<             warning(gettextf("package %s was built under R version %s",
<                              sQuote(pkgname), as.character(built$R)),
<                     call. = FALSE, domain = NA)
---
>             warning(gettextf("package %s was built under R version %s", sQuote(pkgname), as.character(built$R)), call. = FALSE, domain = "R-base")
87,89c80
<                 stop(gettextf("package %s was built for %s",
<                               sQuote(pkgname), platform),
<                      call. = FALSE, domain = NA)
---
>                 stop(gettextf("package %s was built for platform %s", sQuote(pkgname), platform), call. = FALSE, domain = "R-base")
95,97c86
<                 stop(gettextf("package %s was built for %s",
<                               sQuote(pkgname), platform),
<                      call. = FALSE, domain = NA)
---
>                 stop(gettextf("package %s was built for platform %s", sQuote(pkgname), platform), call. = FALSE, domain = "R-base")
103,105c92
<             stop(gettextf("package %s is not installed for 'arch = %s'",
<                           sQuote(pkgname), r_arch),
<                  call. = FALSE, domain = NA)
---
>             stop(gettextf("package %s is not installed for 'arch = %s'", sQuote(pkgname), r_arch), call. = FALSE, domain = "R-base")
121c108
<                 stop(gettextf("package %s has a license that you need to accept in an interactive session", sQuote(pkg)), domain = NA)
---
>                 stop(gettextf("package %s has a license that you need to accept in an interactive session", sQuote(pkg)), domain = "R-base")
125,126c112,113
<                 message(gettextf("package %s has a license that you need to accept after viewing", sQuote(pkg)), domain = NA)
<                 readline("press RETURN to view license")
---
>                 message(gettextf("package %s has a license that you need to accept after viewing", sQuote(pkg)), domain = "R-base")
>                 readline(gettext("press RETURN to view license"))
133,134c120
<                 message(gettextf("package %s has a license that you need to accept:\naccording to the DESCRIPTION file it is", sQuote(pkg)), domain = NA)
<                 message(pkgInfo$DESCRIPTION["License"], domain = NA)
---
>                 message(gettextf("package %s has a license that you need to accept:\naccording to the DESCRIPTION file it is %s", sQuote(pkg), pkgInfo$DESCRIPTION["License"], domain = "R-base"), domain = NA)
136,137c122
<             choice <- menu(c("accept", "decline"),
<                            title = paste("License for", sQuote(pkg)))
---
>             choice <- menu(c(gettext("accept"), gettext("decline")), title = gettextf("License for %s", sQuote(pkg)))
139,140c124
<                 stop(gettextf("license for package %s not accepted",
<                               sQuote(package)), domain = NA, call. = FALSE)
---
>                 stop(gettextf("license for package %s was not accepted", sQuote(package)), domain = "R-base", call. = FALSE)
212,214c196
<                         packageStartupMessage(gettextf("\nAttaching package: %s\n",
<                                                        sQuote(package)),
<                                               domain = NA)
---
>                         packageStartupMessage(gettextf("\nAttaching package: %s\n", sQuote(package)), domain = "R-base")
224c206
< 	message("'verbose' and 'quietly' are both true; being verbose then ..")
---
> 	message("'verbose' and 'quietly' arguments are both true; being verbose then ..")
233c215
<             stop("'package' must be of length 1")
---
>             stop(gettextf("'%s' argument must be of length 1", "package"))
250c232
<                     gettextf("there is no package called %s", sQuote(package))
---
> 	            sprintf(ngettext(1L, "there is no package called %s", "there are no packages called %s", domain = "R-base"), paste(sQuote(package), collapse = ", "))
252c234
<                     gettext("no library trees found in 'lib.loc'")
---
>                     gettext("no library trees found in 'lib.loc'", domain = "R-base")
262,263c244
<             	stop(gettextf("%s is not a valid installed package",
<                               sQuote(package)), domain = NA)
---
>             	stop(gettextf("%s package is not a valid installed package", sQuote(package), domain = "R-base"), domain = NA)
278c259
<                     warning(gettextf("%s not found on search path, using pos = 2", sQuote(pos)), domain = NA)
---
>                     warning(gettextf("%s package was not found on search path, using 'pos = 2'", sQuote(pos)), domain = "R-base")
297c278
<                     	    stop(dQuote(package), " version ", oldversion, " cannot be unloaded.")
---
>                     	    stop(gettextf("Package %s version %s cannot be unloaded", sQuote(package), oldversion, domain = "R-base"))
307,309c288
<                     else stop(gettextf("package or namespace load failed for %s",
<                                        sQuote(package)),
<                               call. = FALSE, domain = NA)
---
>                     else stop(gettextf("package or namespace load failed for package %s", sQuote(package)), call. = FALSE, domain = "R-base")
327,328c306
<             stop(gettextf("package %s does not have a namespace and should be re-installed",
<                           sQuote(package)), domain = NA)
---
>             stop(gettextf("package %s does not have a namespace and should be re-installed", sQuote(package)), domain = "R-base")
331,332c309
<             warning(gettextf("package %s already present in search()",
<                              sQuote(package)), domain = NA)
---
>             warning(gettextf("package %s already present in 'search()'", sQuote(package)), domain = "R-base")
355c332
<                         warning("'DESCRIPTION' has an 'Encoding' field and re-encoding is not possible", call.=FALSE)
---
>                         warning("'DESCRIPTION' file has an 'Encoding' field and re-encoding is not possible", call. = FALSE)
410c387
<                             warning("'DESCRIPTION' has an 'Encoding' field and re-encoding is not possible", call.=FALSE)
---
>                             warning("'DESCRIPTION' file has an 'Encoding' field and re-encoding is not possible", call. = FALSE)
415c392
<                     title <- " ** No title available ** "
---
>                     title <- gettext(" ** No title available ** ")
423,424c400
<             pkglist <- paste(sQuote(nopkgs), collapse = ", ")
<             msg <- sprintf(ngettext(length(nopkgs),
---
>             warning(sprintf(ngettext(length(nopkgs),
426,428c402,403
<                                     "libraries %s contain no packages"),
<                            pkglist)
<             warning(msg, domain=NA)
---
>                                     "libraries %s contain no packages", domain = "R-base"),
>                            paste(sQuote(nopkgs), collapse = ", ")), domain = NA)
453c428
<         c(gettextf("%sPackages in library %s:\n", sep, sQuote(lib)),
---
>         c(paste(sep, gettextf("Packages in library %s:\n", sQuote(lib)), sep = "", collapse = ""),
467c442
<         message("no packages found")
---
>         message("no packages were found")
501c476
<             stop(gettextf("DLL %s not found: maybe not installed for this architecture?", sQuote(chname)), domain = NA)
---
>             stop(gettextf("DLL %s was not found: maybe not installed for this architecture?", sQuote(chname)), domain = "R-base")
503,504c478
<             stop(gettextf("shared object %s not found", sQuote(chname1)),
<                  domain = NA)
---
>             stop(gettextf("shared object %s was not found", sQuote(chname1)), domain = "R-base")
511,512c485
<                 message(gettextf("DLL %s already loaded", sQuote(chname1)),
<                         domain = NA)
---
>                 message(gettextf("DLL %s is already loaded", sQuote(chname1)), domain = "R-base")
514,515c487
<                 message(gettextf("shared object '%s' already loaded",
<                                  sQuote(chname1)), domain = NA)
---
>                 message(gettextf("shared object %s is already loaded", sQuote(chname1)), domain = "R-base")
533c505
<         message(gettextf("now dyn.load(\"%s\") ...", file), domain = NA)
---
>         message(gettextf("now dyn.load(\"%s\") ...", file), domain = "R-base")
563,564c535
<             stop(gettextf("DLL %s was not loaded", sQuote(chname1)),
<                  domain = NA)
---
>             stop(gettextf("DLL %s was not loaded", sQuote(chname1)), domain = "R-base")
566,567c537
<             stop(gettextf("shared object %s was not loaded", sQuote(chname1)),
<                  domain = NA)
---
>             stop(gettextf("shared object %s was not loaded", sQuote(chname1)), domain = "R-base")
571c541
<             stop(gettextf("DLL %s not found", sQuote(chname1)), domain = NA)
---
>             stop(gettextf("DLL %s was not found", sQuote(chname1)), domain = "R-base")
573,574c543
<             stop(gettextf("shared object '%s' not found", sQuote(chname1)),
<                  domain = NA)
---
>             stop(gettextf("shared object %s was not found", sQuote(chname1)), domain = "R-base")
576c545
<         message(gettextf("now dyn.unload(\"%s\") ...", file), domain = NA)
---
>         message(gettextf("now running dyn.unload(\"%s\") ...", file), domain = "R-base")
592,593c561
<             packageStartupMessage(gettextf("Loading required package: %s",
<                                            package), domain = NA)
---
>             packageStartupMessage(gettextf("Loading required package: %s", sQuote(package), domain = "R-base"))
603,604c571
<                 cat("Failed with error:  ",
<                     sQuote(msg), "\n", file = stderr(), sep = "")
---
>                 cat(gettextf("'library()' function failed with error: %s", sQuote(msg), domain = "R-base"), "\n", file = stderr(), sep = "")
650,651c617,618
<                                          "packages %s are not loaded"),
<                                 paste(package[m], collapse=", ")),
---
>                                          "packages %s are not loaded", domain = "R-base"),
>                                 paste(sQuote(package[m]), collapse = ", ")),
752,753c719
<                 warning(gettextf("package %s found more than once,\nusing the one found in %s",
<                                  sQuote(pkg), sQuote(paths)), domain = NA)
---
>                 warning(gettextf("package %s was found more than once. Using the one found in %s", sQuote(pkg), sQuote(paths)), domain = "R-base")
760,769c726
<             if(length(bad) == 1L) {
<                 stop(gettextf("there is no package called %s", sQuote(pkg)),
<                      domain = NA)
<             } else {
<                 stop(ngettext(length(bad),
<                               "there is no package called",
<                               "there are no packages called"), " ",
<                      paste(sQuote(bad), collapse = ", "), domain = NA)
< 
<             }
---
> 	    stop(sprintf(ngettext(length(bad), "there is no package called %s", "there are no packages called %s", domain = "R-base"), paste(sQuote(bad), collapse = ", ")), domain = NA)
772,773c729
<             warning(gettextf("there is no package called %s", sQuote(pkg)),
<                     domain = NA)
---
> 	    warning(sprintf(ngettext(1L, "there is no package called %s", "there are no packages called %s", domain = "R-base"), paste(sQuote(pkg), collapse = ", ")), domain = NA)
782c738
<     if(!inherits(x, "packageInfo")) stop("wrong class")
---
>     if(!inherits(x, "packageInfo")) stop(gettextf("'%s' argument is not an object of class %s", "x", dQuote("packageInfo")))
796c752
<     c(gettextf("\n\t\tInformation on package %s", sQuote(x$name)),
---
>     c("\n\t\t", gettextf("Information on package %s", sQuote(x$name), domain = "R-base"),
810c766
<               gettextf("Documentation for package %s", sQuote(x$name)))
---
>               gettextf("Documentation for package %s", sQuote(x$name), domain = "R-base"))
849,851c805
<             stop(gettextf("package %s required by %s could not be found",
<                           sQuote(pkg), sQuote(pkgname)),
<                  call. = FALSE, domain = NA)
---
>             stop(gettextf("package %s required by package %s could not be found", sQuote(pkg), sQuote(pkgname)), call. = FALSE, domain = "R-base")
870c824,825
<                     msg <- "package %s %s is loaded, but %s %s is required by %s"
---
>                     stop(gettextf("package %s version %s is loaded, but package %s version %s is required by package %s", sQuote(pkg), current, dep$op,
>                               target, sQuote(pkgname)), call. = FALSE, domain = "R-base")
872,876c827,828
<                     msg <- "package %s %s was found, but %s %s is required by %s"
<                 stop(gettextf(msg, sQuote(pkg), current, dep$op,
<                               target, sQuote(pkgname)),
<                      call. = FALSE, domain = NA)
<             }
---
>                     stop(gettextf("package %s version %s was found, but package %s version %s is required by package %s", sQuote(pkg), current, dep$op,
>                               target, sQuote(pkgname)), call. = FALSE, domain = "R-base")            }
881,882c833,834
<                 packageStartupMessage(gettextf("Loading required package: %s",
<                                                pkg), domain = NA)
---
>                 packageStartupMessage(gettextf("Loading required package: %s", sQuote(pkg), domain = "R-base"))
> 
885,886c837
<                 stop(gettextf("package %s could not be loaded", sQuote(pkg)),
<                      call. = FALSE, domain = NA)
---
>                 stop(gettextf("package %s could not be loaded", sQuote(pkg)), call. = FALSE, domain = "R-base")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/load.R R/src/library/base/R/load.R
34,40c34,37
<             ## Not a version 2 magic number, so try the pre-R-1.4.0 code
<             warning(sprintf("file %s has magic number '%s'\n",
<                             sQuote(basename(file)),
<                             gsub("[\n\r]*", "", magic)),
<                     "  ",
<                     "Use of save versions prior to 2 is deprecated",
<                     domain = NA, call. = FALSE)
---
>             ## Not a version 2 magic number, so try the pre-R-1.4.0 codea
> 	    mn <- gsub("[\n\r]*", "", magic)
>             warning(gettextf("file %s has magic number '%s'", sQuote(basename(file)), mn), "\n  ",
> 		"Use of save versions prior to 2 is deprecated", sep = "", domain = "R-base", call. = FALSE)
46c43
<     } else stop("bad 'file' argument")
---
>     } else stop(gettextf("invalid '%s' argument", "file"))
49c46
<     	cat("Loading objects:\n")
---
>     	cat(gettext("Loading objects:", domain = "R-base"), "\n", sep = "")
55c52
<                  file = stop("'file' must be specified"),
---
>                  file = stop(gettextf("'%s' argument must be specified", "file")),
69c66
<         warning("Use of save versions prior to 2 is deprecated", domain = NA)
---
>         warning("Use of save versions prior to 2 is deprecated", domain = "R-base")
73c70
< 	warning("nothing specified to be save()d")
---
> 	warning("nothing specified to be saved")
85,87c82,83
<                                       "object %s not found",
<                                       "objects %s not found"
<                                       ),
---
>                                       "object %s was not found",
>                                       "objects %s were not found", domain = "R-base"),
93c89
< 	    if(!nzchar(file)) stop("'file' must be non-empty string")
---
> 	    if(!nzchar(file)) stop(gettextf("'%s' argument must be non-empty character string", "file"))
96c92
< 		    stop("'compress' must be logical or character")
---
> 		    stop(gettextf("'%s' argument must be logical or character", "compress"))
116c112
< 			  stop(gettextf("'compress = \"%s\"' is invalid", compress)))
---
> 			  stop(gettextf("'compress = \"%s\"' option is invalid", compress)))
121c117
< 	else stop("bad file argument")
---
> 	else stop(gettextf("invalid '%s' argument", "file"))
132c128
<         stop("'file' must be non-empty string")
---
>         stop(gettextf("'%s' argument must be non-empty character string", "file"))
164,165c160
<             stop(gettextf("image could not be renamed and is left in %s",
<                           outfile), domain = NA)
---
>             stop(gettextf("image could not be renamed and is left in %s", outfile), domain = "R-base")
175c170
< 	    message("[Previously saved workspace restored]", "\n")
---
> 	    message("[Previously saved workspace restored]", "\n", sep = "")
190,191c185
<     message(gettextf("Attempting to load the environment %s", sQuote(info)),
<             domain = NA)
---
>     message(gettextf("Attempting to load the environment %s", sQuote(info)), domain = "R-base")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/locales.R R/src/library/base/R/locales.R
24c24
<     if(is.na(category)) stop("invalid 'category' argument")
---
>     if(is.na(category)) stop(gettextf("invalid '%s' argument", "category"))
33c33
<     if(is.na(category)) stop("invalid 'category' argument")
---
>     if(is.na(category)) stop(gettextf("invalid '%s' argument", "category"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/match.R R/src/library/base/R/match.R
47c47
< 	stop("'arg' must be NULL or a character vector")
---
> 	stop(gettextf("'%s' argument must be NULL or a character vector", "arg"))
51,52c51,52
<         if(length(arg) > 1L) stop("'arg' must be of length 1")
<     } else if(length(arg) == 0L) stop("'arg' must be of length >= 1")
---
>         if(length(arg) > 1L) stop(gettextf("'%s' argument must be of length 1", "arg"))
>     } else if(length(arg) == 0L) stop(gettextf("'%s' argument must be of length greater or equal to 1", "arg"))
57,59c57,58
< 	stop(gettextf("'arg' should be one of %s",
<                       paste(dQuote(choices), collapse = ", ")),
<              domain = NA)
---
> 	stop(gettextf("'%s' argument should be one of %s", "arg",
>                       paste(dQuote(choices), collapse = ", "), domain = "R-base"), domain = NA)
62c61
<         stop("there is more than one match in 'match.arg'")
---
>         stop("there is more than one match in 'match.arg()' function")
69c68
< char.expand <- function(input, target, nomatch = stop("no match"))
---
> char.expand <- function(input, target, nomatch = stop("no match in 'char.expand()' function"))
72c71
< 	stop("'input' must have length 1")
---
> 	stop(gettextf("'%s' argument must be of length 1", "input"))
74c73
< 	stop("'input' and 'target' must be character vectors")
---
> 	stop(gettextf("'%s' and '%s' arguments must be character vectors", "input", "target"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/mean.R R/src/library/base/R/mean.R
24c24
<         warning("argument is not numeric or logical: returning NA")
---
>         warning(gettextf("%s value is not numeric or logical: returning NA", sQuote(deparse(substitute(x)))))
30c30
<         stop("'trim' must be numeric of length one")
---
>         stop(gettextf("'%s' argument must be numeric of length 1", "trim"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/merge.R R/src/library/base/R/merge.R
41,42c41,42
<                               "'by' must specify a uniquely valid column",
<                               "'by' must specify uniquely valid columns"),
---
>                               "'by' argument must specify a uniquely valid column",
>                               "'by' argument must specify uniquely valid columns", domain = "R-base"),
47c47
<                 stop("'by' must match numbers of columns")
---
>                 stop("'by' argument must match number of columns")
49c49
<             if(length(by) != nc) stop("'by' must match number of columns")
---
>             if(length(by) != nc) stop("'by' argument must match number of columns")
51c51
<         } else stop("'by' must specify one or more columns as numbers, names or logical")
---
>         } else stop("'by' argument must specify one or more columns as numbers, names or logical")
54,55c54,55
<                           "'by' must specify a uniquely valid column",
<                           "'by' must specify uniquely valid columns"),
---
>                           "'by' argument must specify a uniquely valid column",
>                           "'by' argument must specify uniquely valid columns", domain = "R-base"),
65c65
<         stop("'by.x' and 'by.y' specify different numbers of columns")
---
>         stop("'by.x' and 'by.y' arguments specify different numbers of columns")
100c100
<                 stop("'incomparables' is supported only for merging on a single column")
---
>                 stop("'incomparables' argument is supported only for merging on a single column")
162,168c162
<             if(sum(d) > 1L)
<                 warning("column names ",
<                         paste(sQuote(nm[d]), collapse = ", "),
<                         " are duplicated in the result", domain = NA)
<             else
<                 warning("column name ", sQuote(nm[d]),
<                         " is duplicated in the result", domain = NA)
---
> 	    warning(sprintf(ngettext(sum(d), "column name %s is duplicated in the result", "column names %s are duplicated in the result", domain = "R-base"), paste(sQuote(nm[d]), collapse = ", ")), domain = NA)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/message.R R/src/library/base/R/message.R
36c36
<             warning("additional arguments ignored in message()")
---
>             warning(gettextf("additional arguments ignored in '%s' function", "message()"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/methodsSupport.R R/src/library/base/R/methodsSupport.R
25c25
<             message("(loaded the methods namespace)", domain = NA)
---
>             message("(loaded the methods namespace)", domain = "R-base")
85c85
< 	    cat("Tracing", call, msg, "\n")
---
> 	    cat(gettextf("Tracing %s %s", call, msg, domain = "R-base"), "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/mode.R R/src/library/base/R/mode.R
37c37
<     if(is.factor(x)) stop("invalid to change the storage mode of a factor")
---
>     if(is.factor(x)) stop("cannot change the storage mode of a factor")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/namespace.R R/src/library/base/R/namespace.R
39c39
<                       warning(gettextf("namespace %s is not available and has been replaced\nby .GlobalEnv when processing object %s",
---
>                       warning(gettextf("namespace %s is not available and has been replaced by '.GlobalEnv' when processing object %s",
41c41
<                               domain = NA, call. = FALSE, immediate. = TRUE)
---
>                               domain = "R-base", call. = FALSE, immediate. = TRUE)
95,97c95
<                 stop(gettextf("'%s' is not an exported object from 'namespace:%s'",
<                               name, getNamespaceName(ns)),
<                      call. = FALSE, domain = NA)
---
>                 stop(gettextf("%s is not an exported object from 'namespace:%s'", sQuote(name), getNamespaceName(ns)), call. = FALSE, domain = "R-base")
125,126c123,124
<                 stop(gettextf("%s failed in %s() for '%s', details:\n  call: %s\n  error: %s",
<                               hookname, "attachNamespace", nsname,
---
>                 stop(gettextf("%s failed in %s function for namespace %s, details:\n  call: %s\n  error: %s",
>                               sQuote(hookname), sQuote("attachNamespace()"), sQuote(nsname),
129c127
<                      call. = FALSE, domain = NA)
---
>                      call. = FALSE, domain = "R-base")
134,135c132
< ##             warning(sprintf("ignoring .First.lib() for package %s",
< ##                             sQuote(nsname)), domain = NA, call. = FALSE)
---
> ##            warning(sprintf("ignoring '.First.lib()' for package %s", sQuote(nsname)), domain = "R-base", call. = FALSE)
170,171c167,168
< dynGet <- function(x, ifnotfound = stop(gettextf("%s not found",
< 			     sQuote(x)), domain = NA),
---
> dynGet <- function(x, ifnotfound = stop(gettextf("'%s' was not found",
> 			     sQuote(x)), domain = "R-base"),
192,195c189,190
<         stop("cyclic namespace dependency detected when loading ",
<              sQuote(package), ", already loading ",
<              paste(sQuote(loading), collapse = ", "),
<              domain = NA)
---
>         stop(gettextf("cyclic namespace dependency detected when loading package %s, already loading %s",
>              sQuote(package), paste(sQuote(loading), collapse = ", ")), domain = "R-base")
205,206c200
<                               sQuote(package), current, zop, zversion),
<                      domain = NA)
---
>                               sQuote(package), current, zop, zversion), domain = "R-base")
215,216c209,210
<                     stop(gettextf("%s failed in %s() for '%s', details:\n  call: %s\n  error: %s",
<                                   hookname, "loadNamespace", pkgname,
---
>                     stop(gettextf("%s failed in %s function for package %s, details:\n  call: %s\n  error: %s",
>                                   sQuote(hookname), sQuote("loadNamespace()"), sQuote(pkgname),
218c212
<                                   conditionMessage(res)),
---
>                                   conditionMessage(res), domain = "R-base"),
257,259c251
<                 stop(gettextf("namespace %s is already sealed in 'loadNamespace'",
<                               sQuote(getNamespaceName(ns))),
<                      call. = FALSE, domain = NA)
---
>                 stop(gettextf("namespace %s is already sealed in 'loadNamespace()' function", sQuote(getNamespaceName(ns))), call. = FALSE, domain = "R-base")
294,295c286,287
<                                                            sym$name, varName, varName, sQuote(package)),
<                                                   domain = NA)
---
>                                                            sQuote(sym$name), sQuote(varName), sQuote(varName), sQuote(package)),
>                                                   domain = "R-base")
318,319c310,311
<                                                 origVarName, varName, varName, sQuote(package)),
<                                        domain = NA)
---
>                                                 sQuote(origVarName), sQuote(varName), sQuote(varName), sQuote(package)),
>                                        domain = "R-base")
322,323c314,315
<                                                 origVarName, varName, sQuote(package)),
<                                        domain = NA)
---
>                                                 sQuote(origVarName), sQuote(varName), sQuote(package)),
>                                        domain = "R-base")
334,335c326
<             stop(gettextf("there is no package called %s", sQuote(package)),
<                  domain = NA)
---
> 	    stop(sprintf(ngettext(1L, "there is no package called %s", "there are no packages called %s", domain = "R-base"), paste(sQuote(package), collapse = ", ")), domain = NA)
343,344c334
<                 msg <- gettextf("package %s does not have a namespace",
<                                 sQuote(package))
---
>                 msg <- gettextf("package %s does not have a namespace", sQuote(package), domain = "R-base")
368,370c358,359
<                 stop(gettextf("package %s has not been installed properly\n",
<                               sQuote(basename(pkgpath))),
<                      call. = FALSE, domain = NA)
---
>                 stop(gettextf("package %s has not been installed properly\n", sQuote(basename(pkgpath))),
>                      call. = FALSE, domain = "R-base")
373,375c362
<                 stop(gettextf("package %s was built before R 3.0.0: please re-install it",
<                              sQuote(basename(pkgpath))),
<                      call. = FALSE, domain = NA)
---
>                 stop(gettextf("package %s was built before R 3.0.0: please re-install it", sQuote(basename(pkgpath))), call. = FALSE, domain = "R-base")
383,385c370
<                 stop(gettextf("namespace %s %s is being loaded, but %s %s is required",
<                               sQuote(package), version, zop, zversion),
<                      domain = NA)
---
>                 stop(gettextf("namespace %s %s is being loaded, but %s %s is required", sQuote(package), version, zop, zversion), domain = "R-base")
429,430c414
<                 stop(gettextf("unable to load R code in package %s",
<                               sQuote(package)), call. = FALSE, domain = NA)
---
>                 stop(gettextf("unable to load R code in package %s", sQuote(package), domain = "R-base"), call. = FALSE, domain = NA)
433,434c417
<         # else warning(gettextf("package %s contains no R code",
<         #                        sQuote(package)), call. = FALSE, domain = NA)
---
>         # else warning(gettextf("package %s contains no R code", sQuote(package)), call. = FALSE, domain = "R-base")
515,516c498,499
<                     warning(gettextf("'exportClassPattern' specified in 'NAMESPACE' but no matching classes in package %s", sQuote(package)),
<                             call. = FALSE, domain = NA)
---
>                     warning(gettextf("'exportClassPattern' specified in 'NAMESPACE' file but no matching classes in package %s", sQuote(package)),
>                             call. = FALSE, domain = "R-base")
523c506
<                     stop(gettextf("in package %s classes %s were specified for export but not defined",
---
>                     stop(gettextf("in package %s classes %s were specified for export but were not defined",
525,527c508,509
<                                   paste(expClasses[missingClasses],
<                                         collapse = ", ")),
<                          domain = NA)
---
>                                   paste(dQuote(expClasses[missingClasses]), collapse = ", ")),
>                          domain = "R-base")
541c523
<                     warning(gettextf("no function found corresponding to methods exports from %s for: %s",
---
>                     warning(gettextf("no function found corresponding to methods exports from namespace %s for: %s",
544c526
<                          domain = NA, call. = FALSE)
---
>                          domain = "R-base", call. = FALSE)
556,557c538
<                         msg <-
<                             ngettext(length(bad),
---
>                             stop(sprintf(ngettext(length(bad),
559,561c540,541
<                                      "Functions found when exporting methods from the namespace %s which are not S4 generic: %s", domain = "R-base")
<                         stop(sprintf(msg, sQuote(package),
<                                      paste(sQuote(bad), collapse = ", ")),
---
>                                      "Functions found when exporting methods from the namespace %s which are not S4 generic: %s", domain = "R-base"),
>                                      sQuote(package), paste(sQuote(bad), collapse = ", ")),
574c554
<                 ##        paste(addGenerics[local], collapse = ", ")),
---
>                 ##        paste(addGenerics[local], collapse = ", "), domain = "R-base"),
585,589c565,566
<                     stop(gettextf("in %s methods for export not found: %s",
<                                   sQuote(package),
<                                   paste(expMethods[missingMethods],
<                                         collapse = ", ")),
<                          domain = NA)
---
>                     stop(gettextf("in %s methods for export were not found: %s",
>                                   sQuote(package), paste(expMethods[missingMethods], collapse = ", ")), domain = "R-base")
621,622c598
< 			    warning(gettextf("multiple methods tables found for %s",
< 				    sQuote(mi)), call. = FALSE, domain = NA)
---
> 			    warning(gettextf("multiple methods tables found for %s", sQuote(mi)), call. = FALSE, domain = "R-base")
628,629c604
<                       warning(gettextf("failed to find metadata object for %s",
<                                        sQuote(mi)), call. = FALSE, domain = NA)
---
>                       warning(gettextf("failed to find metadata object for %s", sQuote(mi)), call. = FALSE, domain = "R-base")
634,637c609,610
<                 stop(gettextf("in package %s methods %s were specified for export but not defined",
<                               sQuote(package),
<                               paste(expMethods, collapse = ", ")),
<                      domain = NA)
---
>                 stop(gettextf("in package %s methods %s were specified for export but were not defined",
>                               sQuote(package), paste(sQuote(expMethods), collapse = ", ")), domain = "R-base")
663,665c636
<         if(!quietly)
<             packageStartupMessage(gettextf("Loading required namespace: %s",
<                                            package), domain = NA)
---
>         packageStartupMessage(gettextf("Loading required namespace: %s", sQuote(package), domain = "R-base"))
669,671c640
<                 msg <- conditionMessage(value)
<                 cat("Failed with error:  ",
<                     sQuote(msg), "\n", file = stderr(), sep = "")
---
>                 cat(gettextf("Failed with error:  %s", sQuote(conditionMessage(value)), domain = "R-base"), "\n", file = stderr(), sep = "")
709,710c678,679
<                 warning(gettextf("%s failed in %s() for '%s', details:\n  call: %s\n  error: %s",
<                                  hookname, "unloadNamespace", nsname,
---
>                 warning(gettextf("%s failed in %s function for namespace %s, details:\n  call: %s\n  error: %s",
>                                  sQuote(hookname), sQuote("unloadNamespace()"), sQuote(nsname),
713c682
<                         call. = FALSE, domain = NA)
---
>                         call. = FALSE, domain = "R-base")
726c695
<              domain = NA)
---
>              domain = "R-base")
758c727
<         stop("not a namespace")
---
>         stop("'ns' argument is not a namespace")
760c729
<         stop("operation not allowed on base namespace")
---
>         stop("operation is not allowed on base namespace")
816,818c785
<         stop(gettextf("duplicate import names %s",
<                       paste(sQuote(impnames[duplicated(impnames)]),
<                             collapse = ", ")), domain = NA)
---
>         stop(gettextf("duplicate import names %s", paste(sQuote(impnames[duplicated(impnames)]), collapse = ", ")), domain = "R-base")
822c789
<         msg <- gettext("replacing local value with import %s when loading %s")
---
>         msg <- gettext("replacing local value with import %s when loading namespace %s")
829c796
<         msg <- gettext("replacing previous import by %s when loading %s")
---
>         msg <- gettext("replacing previous import by %s when loading namespace %s")
834c801
<         msg <- gettext("replacing local value with import %s when loading %s")
---
>         msg <- gettext("replacing local value with import %s when loading namespace %s")
856,858c823
< 			warning(gettextf("found methods to import for function %s but not the generic itself",
< 					 sQuote(genName)),
<                                 call. = FALSE, domain = NA)
---
> 			warning(gettextf("found methods to import for function %s but not the generic itself", sQuote(genName)), call. = FALSE, domain = "R-base")
886,888c851
<             warning(sprintf(msg, sQuote(paste(nsname, n, sep = "::")),
<                             sQuote(from)),
<                     call. = FALSE, domain = NA)
---
>             warning(gettextf(msg, sQuote(paste(nsname, n, sep = "::")), sQuote(from), domain = "R-base"), call. = FALSE, domain = NA)
911,913c874,876
<         message(gettextf("No methods found in \"%s\" for requests: %s",
<                          pkg, paste(vars[is.na(match(vars, allFuns))], collapse = ", ")),
<                 domain = NA)
---
>         message(gettextf("No methods were found in package %s for requests: %s",
>                          sQuote(pkg), paste(vars[is.na(match(vars, allFuns))], collapse = ", ")),
>                 domain = "R-base")
917c880
<         stop(gettextf("requested methods not found in environment/package %s: %s",
---
>         stop(gettextf("requested methods were not found in environment/package %s: %s",
919,920c882
<                       paste(vars[is.na(match(vars, allFuns))],
<                             collapse = ", ")), call. = FALSE, domain = NA)
---
>                       paste(vars[is.na(match(vars, allFuns))], collapse = ", ")), call. = FALSE, domain = "R-base")
945,947c907,908
<                     warning(gettextf("No generic function found corresponding to requested imported methods for \"%s\" from package \"%s\" (malformed exports?)",
<                                  g, pkg),
<                         domain = NA)
---
>                     warning(gettextf("No generic function was found corresponding to requested imported methods for function %s from package %s (malformed exports?)",
>                                  sQuote(g), sQuote(pkg)), domain = "R-base")
966,967c927,928
<                                   "classes %s are not exported by 'namespace:%s'"),
<                          paste(paste0('"', miss, '"'), collapse = ", "),
---
>                                   "classes %s are not exported by 'namespace:%s'", domain = "R-base"),
>                          paste(dQuote(miss), collapse = ", "),
973c934
<                                   "objects %s are not exported by 'namespace:%s'"),
---
>                                   "objects %s are not exported by 'namespace:%s'", domain = "R-base"),
1000,1001c961,962
<                                          "previous export '%s' is being replaced",
<                                          "previous exports '%s' are being replaced"),
---
>                                          "previous export %s is being replaced",
>                                          "previous exports %s are being replaced", domain = "R-base"),
1024c985
<             stop(gettextf("undefined exports: %s", undef), domain = NA)
---
>             stop(gettextf("undefined exports: %s", undef), domain = "R-base")
1099,1100c1060
<         stop(gettextf("package %s has no 'NAMESPACE' file", sQuote(package)),
<              domain = NA)
---
>         stop(gettextf("package %s has no 'NAMESPACE' file", sQuote(package)), domain = "R-base")
1120,1122c1080
< 		stop(gettextf("empty name in directive '%s' in 'NAMESPACE' file",
< 			      as.character(e[[1L]])),
< 		     domain = NA)
---
> 		stop(gettextf("empty name in directive %s in 'NAMESPACE' file", sQuote(as.character(e[[1L]]))), domain = "R-base")
1222,1225c1180
<                            warning(gettextf("duplicate symbol names %s in useDynLib(\"%s\")",
<                                             paste(sQuote(names(symNames)[dup]),
<                                                   collapse = ", "), dyl),
<                                    domain = NA)
---
>                            warning(gettextf("duplicate symbol names %s in useDynLib(\"%s\")", paste(sQuote(names(symNames)[dup]), collapse = ", "), dyl), domain = "R-base")
1274,1276c1229
<                        stop(gettextf("bad 'S3method' directive: %s",
<                                      deparse(e)),
<                             call. = FALSE, domain = NA)
---
>                        stop(gettextf("bad 'S3method' directive: %s", deparse(e)), call. = FALSE, domain = "R-base")
1284c1237
<                        for (i in 1:3) new[ind, i] <- old[ind, i]
---
>                        for (i in seq_len(3)) new[ind, i] <- old[ind, i]
1290,1291c1243
<                stop(gettextf("unknown namespace directive: %s", deparse(e, nlines=1L)),
<                     call. = FALSE, domain = NA)
---
>                stop(gettextf("unknown namespace directive: %s", deparse(e, nlines=1L)), call. = FALSE, domain = "R-base")
1337,1338c1289
<             warning(gettextf("S3 method %s was declared but not found",
<                              sQuote(method)), call. = FALSE)
---
>             warning(gettextf("S3 method %s was declared but was not found", sQuote(method)), call. = FALSE)
1346c1297
<     else stop("bad method")
---
>     else stop("invalid method")
1374,1375c1325,1326
< 		stop(gettextf("object '%s' not found whilst loading namespace '%s'",
< 			      genname, package), call. = FALSE, domain = NA)
---
>                 stop(gettextf("object %s was not found whilst loading namespace %s",
>                               sQuote(genname), sQuote(package)), call. = FALSE, domain = "R-base")
1396,1397c1347,1348
<                                  "S3 method %s was declared in NAMESPACE but not found",
<                                  "S3 methods %s were declared in NAMESPACE but not found"),
---
>                                  "S3 method %s was declared in 'NAMESPACE' file but was not found",
>                                  "S3 methods %s were declared in 'NAMESPACE' file but was not found", domain = "R-base"),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/notyet.R R/src/library/base/R/notyet.R
20,21c20
<     stop(gettextf("'%s' is not implemented yet",
<                   as.character(sys.call(sys.parent())[[1L]])), call. = FALSE)
---
>     stop(gettextf("%s value is not implemented yet", sQuote(as.character(sys.call(sys.parent())[[1L]]))), call. = FALSE)
24c23
<     msg <- gettextf("argument '%s' is not used (yet)", arg)
---
>     msg <- gettextf("%s value is not used (yet)", sQuote(arg), domain = "R-base")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/octhex.R R/src/library/base/R/octhex.R
63c63
<     stop("'x' cannot be coerced to class \"octmode\"")
---
>     stop(gettextf("'%s' argument cannot be coerced to an object of class %s", "x", dQuote("octmode")))
113c113
<     stop("'x' cannot be coerced to class \"hexmode\"")
---
>     stop(gettextf("'%s' argument cannot be coerced to an object of class %s", "x", dQuote("hexmode")))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/outer.R R/src/library/base/R/outer.R
40c40
<         if(!missing(...)) stop('using ... with FUN = "*" is an error')
---
>         if(!missing(...)) stop("using '...' with 'FUN = \"*\"' option is an error")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/pmax.R R/src/library/base/R/pmax.R
25c25
<     if(length(elts) == 0L) stop("no arguments")
---
>     if(length(elts) == 0L) stop(gettextf("no arguments passed to '%s' function", "pmax()"))
63c63
<     if(length(elts) == 0L) stop("no arguments")
---
>     if(length(elts) == 0L) stop(gettextf("no arguments passed to '%s' function", "pmin()"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/print.R R/src/library/base/R/print.R
79c79
<     if(length(nn) != ll) nn <- paste("Component", seq.int(ll))
---
>     if(length(nn) != ll) nn <- gettextf("Component %d", seq.int(ll), domain = "R-base")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/qr.R R/src/library/base/R/qr.R
33c33
<     if(is.na(p)) stop("invalid ncol(x)")
---
>     if(is.na(p)) stop(gettextf("invalid '%s' value", "ncol(x)"))
35,36c35,36
<     if(is.na(n)) stop("invalid nrow(x)")
<     if(1.0 * n * p > 2147483647) stop("too large a matrix for LINPACK")
---
>     if(is.na(n)) stop(gettextf("invalid '%s' value", "nrow(x)"))
>     if(1.0 * n * p > 2147483647) stop(gettextf("matrix %s is too large for LINPACK", dataname <- sQuote(deparse(substitute(x)))))
59,62c59,62
<     if( !is.qr(qr) ) stop("first argument must be a QR decomposition")
<     n <- as.integer(nrow(qr$qr)); if(is.na(n)) stop("invalid nrow(qr$qr)")
<     p <- as.integer(ncol(qr$qr)); if(is.na(p)) stop("invalid ncol(qr$qr)")
<     k <- as.integer(qr$rank); if(is.na(k)) stop("invalid ncol(qr$rank)")
---
>     if(!is.qr(qr)) stop(gettextf("'%s' argument is not a QR decomposition", "qr"))
>     n <- as.integer(nrow(qr$qr)); if(is.na(n)) stop(gettextf("invalid '%s' value", "nrow(qr$qr)"))
>     p <- as.integer(ncol(qr$qr)); if(is.na(p)) stop(gettextf("invalid '%s' value", "ncol(qr$qr)"))
>     k <- as.integer(qr$rank); if(is.na(k)) stop(gettextf("invalid '%s' value", "ncol(qr$rank)"))
66c66
<     if(is.na(ny)) stop("invalid ncol(y)")
---
>     if(is.na(ny)) stop(gettextf("invalid '%s' value", "ncol(y)"))
84c84
< 	stop("'qr' and 'y' must have the same number of rows")
---
> 	stop("'qr' and 'y' arguments must have the same number of rows")
94c94
<     if(z$info) stop("exact singularity in 'qr.coef'")
---
>     if(z$info) stop("exact singularity in 'qr.coef()' function")
113c113
<     if(!is.qr(qr)) stop("argument is not a QR decomposition")
---
>     if(!is.qr(qr)) stop(gettextf("'%s' argument is not a QR decomposition", "qr"))
120c120
<     if(is.na(n)) stop("invalid nrow(qr$qr)")
---
>     if(is.na(n)) stop(gettextf("invalid '%s' value", "nrow(qr$qr)"))
123c123
<     if(is.na(ny)) stop("invalid NCOL(y)")
---
>     if(is.na(ny)) stop(gettextf("invalid '%s' value", "NCOL(y)"))
126c126
< 	stop("'qr' and 'y' must have the same number of rows")
---
> 	stop("'qr' and 'y' arguments must have the same number of rows")
139c139
<     if(!is.qr(qr)) stop("argument is not a QR decomposition")
---
>     if(!is.qr(qr)) stop(gettextf("'%s' argument is not a QR decomposition", "qr"))
146c146
<     if(is.na(n)) stop("invalid nrow(qr$qr)")
---
>     if(is.na(n)) stop(gettextf("invalid '%s' value", "nrow(qr$qr)"))
149c149
<     if(is.na(ny)) stop("invalid NCOL(y)")
---
>     if(is.na(ny)) stop(gettextf("invalid '%s' value", "NCOL(y)"))
151c151
< 	stop("'qr' and 'y' must have the same number of rows")
---
> 	stop("'qr' and 'y' arguments must have the same number of rows")
165,167c165,167
<     if(!is.qr(qr)) stop("argument is not a QR decomposition")
<     if(is.complex(qr$qr)) stop("not implemented for complex 'qr'")
<     if(isTRUE(attr(qr, "useLAPACK"))) stop("not supported for LAPACK QR")
---
>     if(!is.qr(qr)) stop(gettextf("'%s' argument is not a QR decomposition", "qr"))
>     if(is.complex(qr$qr)) stop("'qr()' function is not implemented for complex 'qr' argument")
>     if(isTRUE(attr(qr, "useLAPACK"))) stop("'qr()' function is not supported for LAPACK QR")
171c171
<     if(is.na(n)) stop("invalid nrow(qr$qr)")
---
>     if(is.na(n)) stop(gettextf("invalid '%s' value", "nrow(qr$qr)"))
173c173
<     if(is.na(ny)) stop("invalid NCOL(y)")
---
>     if(is.na(ny)) stop(gettextf("invalid '%s' value", "NCOL(y)"))
175c175
< 	stop("'qr' and 'y' must have the same number of rows")
---
> 	stop("'qr' and 'y' arguments must have the same number of rows")
183,185c183,185
<     if(!is.qr(qr)) stop("argument is not a QR decomposition")
<     if(is.complex(qr$qr)) stop("not implemented for complex 'qr'")
<     if(isTRUE(attr(qr, "useLAPACK"))) stop("not supported for LAPACK QR")
---
>     if(!is.qr(qr)) stop(gettextf("'%s' argument is not a QR decomposition", "qr"))
>     if(is.complex(qr$qr)) stop("'qr()' function is not implemented for complex 'qr' argument")
>     if(isTRUE(attr(qr, "useLAPACK"))) stop("'qr()' function is not supported for LAPACK QR")
187c187
<     if(is.na(n)) stop("invalid nrow(qr$qr)")
---
>     if(is.na(n)) stop(gettextf("invalid '%s' value", "nrow(qr$qr)"))
189c189
<     if(k > qr$rank) stop("'k' is too large")
---
>     if(k > qr$rank) stop(gettextf("'%s' argument is too large", "k"))
191c191
<     if(is.na(ny)) stop("invalid NCOL(y)")
---
>     if(is.na(ny)) stop(gettextf("invalid '%s' value", "NCOL(y)"))
193c193
< 	stop("'qr' and 'y' must have the same number of rows")
---
> 	stop("'qr' and 'y' arguments must have the same number of rows")
204c204
<     if(!is.qr(qr)) stop("argument is not a QR decomposition")
---
>     if(!is.qr(qr)) stop(gettextf("'%s' argument is not a QR decomposition", "qr"))
222c222
<     if(!is.qr(qr)) stop("argument is not a QR decomposition")
---
>     if(!is.qr(qr)) stop(gettextf("'%s' argument is not a QR decomposition", "qr"))
226c226
< 				 "extra arguments %s will be disregarded"),
---
> 				 "extra arguments %s will be disregarded", domain = "R-base"),
239c239
<     if(!is.qr(qr)) stop("argument is not a QR decomposition")
---
>     if(!is.qr(qr)) stop(gettextf("'%s' argument is not a QR decomposition", "qr"))
246c246
<     if(is.na(p)) stop("invalid NCOL(R)")
---
>     if(is.na(p)) stop(gettextf("invalid '%s' value", "NCOL(R)"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/rle.R R/src/library/base/R/rle.R
22c22
<         stop("'x' must be a vector of an atomic type")
---
>         stop(gettextf("'%s' argument must be a vector of an atomic type", "x"))
36c36
<     cat("", "Run Length Encoding\n", "  lengths:", sep=prefix)
---
>     cat(prefix, gettext("Run Length Encoding", domain = "R-base"), "\n", prefix, gettext("  lengths:", domain = "R-base"), sep = "")
38c38
<     cat("", "  values :", sep=prefix)
---
>     cat(prefix, gettext("  values :", domain = "R-base"), sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/rm.R R/src/library/base/R/rm.R
26c26
<        stop("... must contain names or character strings")
---
>        stop("'...' must contain names or character strings")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/rowsum.R R/src/library/base/R/rowsum.R
23,25c23,25
<     if (!is.numeric(x)) stop("'x' must be numeric")
<     if (length(group) != NROW(x)) stop("incorrect length for 'group'")
<     if (anyNA(group)) warning("missing values for 'group'")
---
>     if (!is.numeric(x)) stop(gettextf("'%s' argument must be numeric", "x"))
>     if (length(group) != NROW(x)) stop("incorrect length for 'group' argument")
>     if (anyNA(group)) warning("missing values for 'group' argument")
34,36c34,36
<     if (!is.data.frame(x)) stop("not a data frame") ## make MM happy
<     if (length(group) != NROW(x)) stop("incorrect length for 'group'")
<     if (anyNA(group)) warning("missing values for 'group'")
---
>     if (!is.data.frame(x)) stop("'x' argument is not a data frame") ## make MM happy
>     if (length(group) != NROW(x)) stop("incorrect length for 'group' argument")
>     if (anyNA(group)) warning("missing values for 'group' argument")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/scale.R R/src/library/base/R/scale.R
34c34
< 	stop("length of 'center' must equal the number of columns of 'x'")
---
> 	stop(gettextf("length of '%s' argument must equal the number of columns of '%s' argument", "center", "x"))
48c48
< 	stop("length of 'scale' must equal the number of columns of 'x'")
---
> 	stop(gettextf("length of '%s' argument must equal the number of columns of '%s' argument", "scale", "x"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/seq.R R/src/library/base/R/seq.R
28,30c28,30
<             if(!is.finite(from)) stop("'from' cannot be NA, NaN or infinite")
<             1L:from
<         } else if(lf) 1L:lf else integer())
---
>             if(!is.finite(from)) stop(gettextf("'%s' argument cannot be NA, NaN or infinite", "from"))
>             seq_len(from)
>         } else if(lf) seq_len(lf) else integer())
38c38
<         if(!len) stop("argument 'length.out' must be of length 1")
---
>         if(!len) stop(gettextf("'%s' argument must be of length 1", "length.out"))
43a44
> 	#length.out <- as.integer(length.out) #IVORY: maybe we should have this line in order to have: seq_len(12.3) == seq(length.out=12.3)
48c49
<                                  "extra arguments %s will be disregarded"),
---
>                                  "extra arguments %s will be disregarded", domain = "R-base"),
51,52c52,53
<     if (!missing(from) && length(from) != 1L) stop("'from' must be of length 1")
<     if (!missing(to) && length(to) != 1L) stop("'to' must be of length 1")
---
>     if (!missing(from) && length(from) != 1L) stop(gettextf("'%s' argument must be of length 1", "from"))
>     if (!missing(to) && length(to) != 1L) stop(gettextf("'%s' argument must be of length 1", "to"))
54c55
<         stop("'from' cannot be NA, NaN or infinite")
---
>         stop(gettextf("'%s' argument cannot be NA, NaN or infinite", "from"))
56c57
<         stop("'to' cannot be NA, NaN or infinite")
---
>         stop(gettextf("'%s' argument cannot be NA, NaN or infinite", "to"))
67c68
< 		stop("invalid (to - from)/by in seq(.)")
---
> 		stop("invalid '(to - from)/by' in 'seq(.)' function")
72c73
< 		stop("'by' argument is much too small")
---
> 		stop(gettextf("'%s' argument is much too small", "by"))
87c88
< 	stop("length must be non-negative number")
---
> 	stop(gettextf("'%s' argument must be non-negative number", "length.out"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/serialize.R R/src/library/base/R/serialize.R
24c24
<         if(file == "") stop("'file' must be non-empty string")
---
>         if(file == "") stop(gettextf("'%s' argument must be non-empty character string", "file"))
33c33
<             warning("'compress' is ignored unless 'file' is a file name")
---
>             warning("'compress' argument is ignored unless 'file' argument is a file name")
37c37
<         stop("bad 'file' argument")
---
>         stop(gettextf("invalid '%s' argument", "file"))
48c48
<     else stop("bad 'file' argument")
---
>     else stop(gettextf("invalid '%s' argument", "file"))
58c58
<             stop("'connection' must be a connection")
---
>             stop("'connection' argument must be a connection")
77c77
<         stop("'connection' must be a connection")
---
>         stop("'connection' argument must be a connection")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/solve.R R/src/library/base/R/solve.R
22c22
< 	stop("this is the \"qr\" method for the generic function solve()")
---
> 	stop("this is the 'qr' method for the generic function 'solve()'")
26c26
< 	stop("singular matrix 'a' in 'solve'")
---
> 	stop("singular matrix 'a' in 'solve()' function")
50c50
< 	warning("solve.default called with a \"qr\" object: use 'qr.solve'")
---
> 	warning("'solve.default()' function called with an object of class \"qr\": use 'qr.solve()' function")
70c70
< 	stop("singular matrix 'a' in solve")
---
> 	stop("singular matrix 'a' in 'solve()' function")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/sort.R R/src/library/base/R/sort.R
22c22
<         stop("'decreasing' must be a length-1 logical vector.\nDid you intend to set 'partial'?")
---
>         stop("'decreasing' argument must be a logical vector of length 1.\nDid you intend to set 'partial'?")
38c38
<         if(index.return) stop("'index.return' only for non-factors")
---
>         if(index.return) stop(gettextf("'%s' argument is valid only for non-factors", "index.return"))
44c44
<         stop("'x' must be atomic")
---
>         stop(gettextf("'%s' argument must be atomic", "x"))
51c51
<         stop("'index.return' only for 'na.last = NA'")
---
>         stop(gettextf("'%s' argument is valid only for 'na.last = NA' option", "index.return"))
131c131
<         stop("'x' must be atomic for 'sort.list'\nHave you called 'sort' on a list?")
---
>         stop("'x' argument must be atomic for 'sort.list()' function.\nHave you called 'sort()' function on a list?")
139c139
<         else stop("method = \"quick\" is only for numeric 'x'")
---
>         else stop("'method = \"quick\"' option is only for numeric 'x'")
143c143
<             stop("method = \"radix\" is only for integer 'x'")
---
>             stop("'method = \"radix\"' option is only for integer 'x'")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/source.R R/src/library/base/R/source.R
34c34
<     } else stop("'local' must be TRUE, FALSE or an environment")
---
>     } else stop("'local' argument must be TRUE, FALSE or an environment")
38c38
< 	    stop("'echo' must be logical")
---
> 	    stop(gettextf("'%s' argument must be logical", "echo"))
40c40
< 	    warning("'verbose' is TRUE, 'echo' not; ... coercing 'echo <- TRUE'")
---
> 	    warning("'verbose' argument is TRUE, 'echo' argument is not; ... coercing 'echo <- TRUE'")
45c45
< 	cat("'envir' chosen:")
---
> 	cat(gettext("'envir' chosen:", domain = "R-base"))
71c71
<             cat(gettextf('encoding = "%s" chosen', encoding), "\n", sep = "")
---
>             cat(gettextf("'encoding = \"%s\"' chosen", encoding, domain = "R-base"), "\n", sep = "")
121c121
< 	cat("--> parsed", Ne, "expressions; now eval(.)ing them:\n")
---
> 	cat(sprintf(ngettext(Ne, "--> parsed %d expression; now evaluating them:", "--> parsed %d expressions; now evaluating them:", domain = "R-base"), Ne), "\n", sep = "")
127c127
<                 warning("'chdir = TRUE' makes no sense for a URL")
---
>                 warning("'chdir = TRUE' option makes no sense for an URL")
136c136
<             warning("'chdir = TRUE' makes no sense for a connection")
---
>             warning("'chdir = TRUE' option makes no sense for a connection")
204c204
< 			  " ...\" ..." else " ....", "[TRUNCATED] "),
---
> 			  " ...\" ..." else " ....", gettext("[TRUNCATED] ", domain = "R-base")),
242c242
< 	stop(gettextf("'%s' is not an existing file", file))
---
> 	stop(gettextf("%s is not an existing file", sQuote(file)))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/srcfile.R R/src/library/base/R/srcfile.R
51c51,52
<     	cat("Timestamp: ", format(object$timestamp, usetz=TRUE), "\n", sep="")
---
>     	cat(gettextf("Timestamp: %s", format(object$timestamp, usetz=TRUE), domain = "R-base"), "\n", sep = "")
> 
53d53
<     cat('Encoding: "', object$encoding, '"', sep="")
55,56c55,59
<     	cat(', re-encoded to "', object$Enc, '"', sep="")
<     cat("\n")
---
>       cat(gettextf("Encoding: %s, re-encoded to %s", dQuote(object$encoding), dQuote(object$Enc), domain = "R-base"), "\n", sep = "")
> 	else
> 	  cat(gettextf("Encoding: %s", dQuote(object$encoding), domain = "R-base"), "\n", sep = "")
> 	
> 
78,80c81
<             warning(gettextf("Timestamp of %s has changed",
<                              sQuote(srcfile$filename)),
<                     call. = FALSE, domain = NA)
---
>             warning(gettextf("Timestamp of %s has changed", sQuote(srcfile$filename)), call. = FALSE, domain = "R-base")
221c222
<        cat("forcing class on") ## debug
---
>        cat(gettext("forcing class on", domain = "R-base")) ## debug
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/stop.R R/src/library/base/R/stop.R
25c25
<             warning("additional arguments ignored in stop()")
---
>             warning(gettextf("additional arguments ignored in '%s' function", "stop()"))
40c40
<     for(i in 1L:n)
---
>     for(i in seq_len(n))
45,47c45,47
<                                   "%s is not TRUE",
<                                   "%s are not all TRUE"),
<                          ch), call. = FALSE, domain = NA)
---
>                                   "variable %s is not TRUE",
>                                   "variables %s are not all TRUE", domain = "R-base"),
>                          sQuote(ch)), call. = FALSE, domain = NA)
59,60c59
<             cat(gettext("additional arguments ignored in warning()"),
<                 "\n", sep = "", file = stderr())
---
>             cat(gettextf("additional arguments ignored in '%s' function", "warning()", domain = "R-base"), "\n", sep = "", file = stderr())
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/strwrap.R R/src/library/base/R/strwrap.R
152c152
<             stop("incorrect value for 'x'")
---
>             stop(gettextf("incorrect value for '%s' argument", "x"))
159c159
<             stop("incorrect value for 'x'")
---
>             stop(gettextf("incorrect value for '%s' argument", "x"))
166c166
<         stop("'x' and 'y' must have the same length")
---
>         stop(gettextf("'%s' and '%s' arguments must have the same length", "x", "y"))
176c176
<         stop("incorrect values of 'indent' and 'width'")
---
>         stop("incorrect values of 'indent' and 'width' arguments")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/summary.R R/src/library/base/R/summary.R
29c29
<     value <- if(is.logical(object)) # scalar or array!
---
>     value <- if(is.logical(object)) {# scalar or array!
31c31
<           {tb <- table(object, exclude = NULL) # incl. NA s
---
>           {tb <- table(object, exclude = NULL)
33c33
<                dimnames(tb)[[1L]][iN] <- "NA's"
---
>                dimnames(tb)[[1L]][iN] <- gettext("NA's")
35,36c35,36
<            })
<     else if(is.numeric(object)) {
---
>            })# incl. NA s
>     } else if(is.numeric(object)) {
39a40,45
> 	if(any(nas)) {
> 	    qq <- c(signif(c(qq[1L:3L], mean(object), qq[4L:5L]), digits), sum(nas))
> 	    names(qq) <- c(gettext("Min."), gettext("1st Qu."), gettext("Median"), gettext("Mean"), gettext("3rd Qu."), gettext("Max."), gettext("NA's"))
> 	    qq
> 	}
> 	else {
41,44c47,49
< 	names(qq) <- c("Min.", "1st Qu.", "Median", "Mean", "3rd Qu.", "Max.")
< 	if(any(nas))
< 	    c(qq, "NA's" = sum(nas))
< 	else qq
---
> 	    names(qq) <- c(gettext("Min."), gettext("1st Qu."), gettext("Median"), gettext("Mean"), gettext("3rd Qu."), gettext("Max."))
> 	    qq
> 	}
47,48c52
< 	sumry <- array("", c(n, 3L), list(names(object),
<                                           c("Length", "Class", "Mode")))
---
> 	sumry <- array("", c(n, 3L), list(names(object), c(gettext("Length", domain = "R-base"), gettext("Class", domain = "R-base"), gettext("Mode", domain = "R-base"))))
50c54
< 	for(i in 1L:n) {
---
> 	for(i in seq_len(n)) {
60c64,68
<     else c(Length = length(object), Class = class(object), Mode = mode(object))
---
>     else { 
> 	yy <- c(length(object), class(object), mode(object))
> 	names(yy) <- c(gettext("Length"), gettext("Class"), gettext("Mode"))
> 	yy
>     }
69c77
<     m <- match("NA's", names(x), 0)
---
>     m <- match(gettext("NA's"), names(x), 0)
71,75c79,89
<         if(length(a <- attr(x, "NAs")))
<             c(format(xx, ...), "NA's" = as.character(a))
<         else format(xx)
<     } else if(m && !is.character(x))
<         xx <- c(format(xx[-m], ...), "NA's" = as.character(xx[m]))
---
>         if(length(a <- attr(x, "NAs"))) {
>             xx <- c(format(xx), as.character(a))
>             names(xx) <- c(gettext("Min."), gettext("1st Qu."), gettext("Median"), gettext("Mean"), gettext("3rd Qu."), gettext("Max."), gettext("NA's"))
> 	    xx
> 	}
>         else xx <- format(xx)
>     } else if(m && !is.character(x)) {
>         yy <- c(format(xx[-m], ...), as.character(xx[m]))
>         names(yy) <- c(gettext("Min."), gettext("1st Qu."), gettext("Median"), gettext("Mean"), gettext("3rd Qu."), gettext("Max."), gettext("NA's"))
> 	yy
> 	}
83c97
<     m <- match("NA's", names(xx), 0)
---
>     m <- match(gettext("NA's"), names(xx), 0)
85,87c99,104
<         xx <- if(length(a <- attr(x, "NAs")))
<             c(format(xx), "NA's" = as.character(a))
<         else format(xx)
---
>         if(length(a <- attr(x, "NAs"))) {
>             xx <- c(format(xx), as.character(a))
>             names(xx) <- c(gettext("Min."), gettext("1st Qu."), gettext("Median"), gettext("Mean"), gettext("3rd Qu."), gettext("Max."), gettext("NA's"))
> 	    xx
> 	}
>         else xx <- format(xx)
90,91c107,111
<     } else if(m && !is.character(x))
<         xx <- c(format(xx[-m]), "NA's" = as.character(xx[m]))
---
>     } else if(m && !is.character(x)) {
>         xx <- c(format(xx[-m]), as.character(xx[m]))
>         names(xx) <- c(gettext("Min."), gettext("1st Qu."), gettext("Median"), gettext("Mean"), gettext("3rd Qu."), gettext("Max."), gettext("NA's"))
> 	xx
>     }
107c127,135
< 	tt <- c(tt[o[ - drop]], "(Other)" = sum(tt[o[drop]]))
---
> 	tt <- c(tt[o[ - drop]], sum(tt[o[drop]]))
>         names(tt) <- c(names(tt)[ - drop], gettext("(Other)"))
> 	tt
> 	
>     }
>     if(any(nas)) {
> 	tt2 <- c(tt, sum(nas))
> 	names(tt2) <- c(names(tt), gettext("NA's"))
> 	tt2
109c137
<     if(any(nas)) c(tt, "NA's" = sum(nas)) else tt
---
>     else tt
169,170c197
< 	    warning("probably wrong encoding in names(.) of column ",
< 		paste(which(is.na(lw)), collapse = ", "))
---
> 	warning(gettextf("probably wrong encoding in 'names(.)' of column %s", paste(which(is.na(lw)), collapse = ", ")))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/svd.R R/src/library/base/R/svd.R
22c22
<     if (any(!is.finite(x))) stop("infinite or missing values in 'x'")
---
>     if (any(!is.finite(x))) stop(gettextf("infinite or missing values in '%s' argument", "x"))
26c26
<     if(!n || !p) stop("a dimension is zero")
---
>     if(!n || !p) stop(gettextf("at least one dimension of '%s' argument is 0", "x"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/sweep.R R/src/library/base/R/sweep.R
28c28
<             warning("STATS is longer than the extent of 'dim(x)[MARGIN]'")
---
>             warning("'STATS' argument is longer than the extent of 'dim(x)[MARGIN]'")
34c34
<                 warning("STATS does not recycle exactly across MARGIN")
---
>                 warning("'STATS' argument does not recycle exactly across 'MARGIN' argument")
40c40
<                 warning("length(STATS) or dim(STATS) do not match dim(x)[MARGIN]")
---
>                 warning("'length(STATS)' or 'dim(STATS)' do not match 'dim(x)[MARGIN]'")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/table.R R/src/library/base/R/table.R
127c127
<         cat ("< table of extent", paste(d, collapse=" x "), ">\n")
---
>         cat(gettextf("< table of extent %s>", paste(d, collapse = " x "), domain = "R-base"), "\n", sep = "")
152,154c152
< 	stop(gettextf("'object' must inherit from class %s",
<                       dQuote("table")),
<              domain = NA)
---
> 	stop(gettextf("'%s' argument must inherit from class %s", "object", dQuote("table"), domain = "R-base"), domain = NA)
162c160
< 	for(k in 1L:n.vars)
---
> 	for(k in seq_len(n.vars))
182,184c180
< 	stop(gettextf("'x' must inherit from class %s",
<                       dQuote("summary.table")),
<              domain = NA)
---
> 	stop(gettextf("'%s' argument must inherit from class %s", "x", dQuote("summary.table"), domain = "R-base"), domain = NA)
186c182
< 	cat("Call: "); print(x$call)
---
> 	cat(gettext("Call: ", domain = "R-base")); print(x$call)
188,189c184,185
<     cat("Number of cases in table:", x$n.cases, "\n")
<     cat("Number of factors:", x$n.vars, "\n")
---
>     cat(gettext("Number of cases in table: ", domain = "R-base"), x$n.cases, "\n", sep = "")
>     cat(gettext("Number of factors: ", domain = "R-base"), x$n.vars, "\n", sep = "")
191c187
< 	cat("Test for independence of all factors:\n")
---
> 	cat(gettext("Test for independence of all factors:", domain = "R-base"), "\n", sep = "")
193,196c189
< 	cat("\tChisq = ",	format(round(ch, max(0, digits - log10(ch)))),
< 	    ", df = ",		x$parameter,
< 	    ", p-value = ",	format.pval(x$p.value, digits, eps = 0),
< 	    "\n", sep = "")
---
> 	cat("\t", gettextf("Chisq = %s, df = %s, p-value = %s",	format(round(ch, max(0, digits - log10(ch)))), x$parameter, format.pval(x$p.value, digits, eps = 0), domain = "R-base"), "\n", sep = "")
198c191
< 	    cat("\tChi-squared approximation may be incorrect\n")
---
> 	    cat("\t", gettext("Chi-squared approximation may be incorrect", domain = "R-base"), "\n", sep = "")
238c231
<     if(!is.array(x)) stop("'x' is not an array")
---
>     if(!is.array(x)) stop(gettextf("'%s' argument is not an array", "x"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/tabulate.R R/src/library/base/R/tabulate.R
22c22
< 	stop("'bin' must be numeric or a factor")
---
> 	stop("'bin' argument must be numeric or a factor")
28c28
<     if (is.na(nbins)) stop("invalid value of 'nbins'")
---
>     if (is.na(nbins)) stop(gettextf("invalid '%s' value", "nbins"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/tapply.R R/src/library/base/R/tapply.R
24c24
<     if (!nI) stop("'INDEX' is of length zero")
---
>     if (!nI) stop(gettextf("'%s' argument is of length 0", "INDEX"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/taskCallback.R R/src/library/base/R/taskCallback.R
99c99
<                 stop(gettextf("no such element '%s'", which), domain = NA)
---
>                 stop(gettextf("no such element '%s'", which), domain = "R-base")
139c139
<                     cat(gettextf("Removing %s", paste(discard, collapse=", ")), "\n")
---
>                     cat(gettextf("Removing %s", paste(discard, collapse=", "), domain = "R-base"), "\n", sep = "")
158c158
<                 cat(gettext("Registering 'evaluate' as low-level callback\n"))
---
>                 cat(gettext("Registering 'evaluate' as low-level callback", domain = "R-base"), "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/time.R R/src/library/base/R/time.R
31c31
<     on.exit(cat("Timing stopped at:", ppt(proc.time() - time), "\n"))
---
>     on.exit(cat(gettextf("Timing stopped at: %s", ppt(proc.time() - time), domain = "R-base"), "\n", sep = ""))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/toString.R R/src/library/base/R/toString.R
26c26
<     if( width < 0 ) stop("'width' must be positive")
---
>     if( width < 0 ) stop(gettextf("'%s' argument must be positive", "width"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/traceback.R R/src/library/base/R/traceback.R
28c28
<         cat(gettext("No traceback available"), "\n")
---
>         cat(gettext("No traceback available", domain = "R-base"), "\n", sep = "")
30c30
<         for(i in 1L:n) {
---
>         for(i in seq_len(n)) {
35,36c35
<             	x[[i]][m] <- paste0(x[[i]][m], " at ",
< 				    basename(srcfile$filename), "#", srcref[1L])
---
>             	x[[i]][m] <- paste0(x[[i]][m], " at ", basename(srcfile$filename), "#", srcref[1L])
39,41c38
<                 label <- c(label, rep(substr("          ", 1L,
<                                              nchar(label, type="w")),
<                                       m - 1L))
---
>                 label <- c(label, rep(substr("          ", 1L, nchar(label, type="w")), m - 1L))
43,44c40
<                 cat(paste0(label[1L:max.lines], x[[i]][1L:max.lines]),
<                     sep = "\n")
---
>                 cat(paste0(label[1L:max.lines], x[[i]][1L:max.lines]), sep = "\n")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/unix/system.unix.R R/src/library/base/R/unix/system.unix.R
30c30
<         stop("'intern' must be TRUE or FALSE")
---
>         stop(gettextf("'%s' argument must be TRUE or FALSE", "intern"))
32c32
<         stop("'ignore.stdout' must be TRUE or FALSE")
---
>         stop(gettextf("'%s' argument must be TRUE or FALSE", "ignore.stdout"))
34c34
<         stop("'ignore.stderr' must be TRUE or FALSE")
---
>         stop(gettextf("'%s' argument must be TRUE or FALSE", "ignore.stderr"))
36c36
<         stop("'wait' must be TRUE or FALSE")
---
>         stop(gettextf("'%s' argument must be TRUE or FALSE", "wait"))
42c42
<             stop("'input' must be a character vector or 'NULL'")
---
>             stop(gettextf("'%s' argument must be a character vector or 'NULL'", "input"))
62c62
<         stop("'wait' must be TRUE or FALSE")
---
>         stop(gettextf("'%s' argument must be TRUE or FALSE", "wait"))
71c71
<         if (!isTRUE(stdout)) warning("setting stdout = TRUE")
---
>         if (!isTRUE(stdout)) warning("setting 'stdout = TRUE'")
79c79
<         if(length(stdout) != 1L) stop("'stdout' must be of length 1")
---
>         if(length(stdout) != 1L) stop(gettextf("'%s' argument must be of length 1", "stdout"))
91c91
<         if(length(stderr) != 1L) stop("'stderr' must be of length 1")
---
>         if(length(stderr) != 1L) stop(gettextf("'%s' argument must be of length 1", "stderr"))
97c97
<             stop("'input' must be a character vector or 'NULL'")
---
>             stop(gettextf("'%s' argument must be a character vector or 'NULL'", "input"))
115c115
<         warning("'which' was not found on this platform")
---
>         warning("'which' command was not found on this platform")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/version.R R/src/library/base/R/version.R
51,53c51
<             stop(gettextf("invalid version specification %s",
<                           paste(sQuote(unique(x[!ok])), collapse = ", ")),
<                  call. = FALSE, domain = NA)
---
>             stop(gettextf("invalid version specification %s", paste(sQuote(unique(x[!ok])), collapse = ", "), domain = "R-base"), call. = FALSE, domain = NA)
151c149
<     if(!is.numeric_version(x)) stop("wrong class")
---
>     if(!is.numeric_version(x)) stop(gettextf("'%s' argument is not an object of class %s", "x", dQuote("numeric_version")))
250c248
<            else if(!is.integer(value)) stop("invalid 'value'")
---
>            else if(!is.integer(value)) stop(gettextf("invalid '%s' value", "value"))
253c251
<            if(length(value) != 1L) stop("invalid 'value'")
---
>            if(length(value) != 1L) stop(gettextf("invalid '%s' value", "value"))
258c256
<        if(length(value) != 1L) stop("invalid 'value'")
---
>        if(length(value) != 1L) stop(gettextf("invalid '%s' value", "value"))
268,269c266
<         stop(gettextf("unary '%s' not defined for \"numeric_version\" objects",
<                       .Generic), domain = NA)
---
>         stop(gettextf("unary '%s' operator is not defined for objects of class %s", .Generic, dQuote("numeric_version")), domain = "R-base")
273,274c270
<         stop(gettextf("'%s' not defined for \"numeric_version\" objects",
<                       .Generic), domain = NA)
---
>         stop(gettextf("binary '%s' operator is not defined for objects of class %s", .Generic, dQuote("numeric_version")), domain = "R-base")
292,293c288
<         stop(gettextf("%s not defined for \"numeric_version\" objects",
<                       .Generic), domain = NA)
---
>         stop(gettextf("%s is not defined for objects of class %s", .Generic, dQuote("numeric_version"), domain = "R-base"), domain = NA)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/warnings.R R/src/library/base/R/warnings.R
39c39
<         cat(ngettext(n, "Warning message:\n", "Warning messages:\n"))
---
>         cat(ngettext(n, "Warning message:", "Warning messages:", domain = "R-base"), "\n", sep = "")
48,53c48,49
<                 nl <- if(nchar(ind, "w") + nchar(temp[1L], "w") +
<                          nchar(sm[1L], "w") <= 75L)
<                     " " else "\n  "
<                 paste(ind, "In ",
<                       temp[1L], if(length(temp) > 1L) " ...",
<                       " :", nl, msgs[i], sep = "")
---
>                 nl <- if(nchar(ind, "w") + nchar(temp[1L], "w") + nchar(sm[1L], "w") <= options("width")[[1]]) " " else "\n  "
>                 paste(ind, gettextf("In command %s", sQuote(temp[1L]), domain = "R-base"), if(length(temp) > 1L) " ...", ":", nl, msgs[i], sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/windows/junctions.R R/src/library/base/R/windows/junctions.R
32c32
<             warning(gettextf("link '%s' already exists", link), domain = NA)
---
>             warning(gettextf("link '%s' already exists", link), domain = "R-base")
36,37c36
<             warning(gettextf("failed to create directory for link '%s", link),
<                     domain = NA)
---
>             warning(gettextf("failed to create directory for link '%s", link), domain = "R-base")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/windows/system.R R/src/library/base/R/windows/system.R
26c26
<         stop("'intern' must be TRUE or FALSE")
---
>         stop(gettextf("'%s' argument must be TRUE or FALSE", "intern"))
28c28
<         stop("'ignore.stdout' must be TRUE or FALSE")
---
>         stop(gettextf("'%s' argument must be TRUE or FALSE", "ignore.stdout"))
30c30
<         stop("'ignore.stderr' must be TRUE or FALSE")
---
>         stop(gettextf("'%s' argument must be TRUE or FALSE", "ignore.stderr"))
32c32
<         stop("'wait' must be TRUE or FALSE")
---
>         stop(gettextf("'%s' argument must be TRUE or FALSE", "wait"))
34c34
<         stop("'show.output.on.console' must be TRUE or FALSE")
---
>         stop(gettextf("'%s' argument must be TRUE or FALSE", "show.output.on.console"))
36c36
<         stop("'minimized' must be TRUE or FALSE")
---
>         stop(gettextf("'%s' argument must be TRUE or FALSE", "minimized"))
38c38
<         stop("'invisible' must be TRUE or FALSE")
---
>         stop(gettextf("'%s' argument must be TRUE or FALSE", "invisible"))
68c68
<         stop("'wait' must be TRUE or FALSE")
---
>         stop(gettextf("'%s' argument must be TRUE or FALSE", "wait"))
70c70
<         stop("'minimized' must be TRUE or FALSE")
---
>         stop(gettextf("'%s' argument must be TRUE or FALSE", "minimized"))
72c72
<         stop("'invisible' must be TRUE or FALSE")
---
>         stop(gettextf("'%s' argument must be TRUE or FALSE", "invisible"))
110,112c110,111
<                 stop(gettextf("'%s' could not be run", cmd0), domain = NA)
<             else stop(gettextf("'%s' execution failed with error code %d",
<                                cmd0, res), domain = NA)
---
>                 stop(gettextf("'%s' command could not be run", cmd0), domain = "R-base")
>             else stop(gettextf("'%s' command execution failed with error code %d", cmd0, res), domain = "R-base")
115,117c114,115
<                 warning(gettextf("'%s' could not be run", cmd0), domain = NA)
<             else warning(gettextf("'%s' execution failed with error code %d",
<                                   cmd0, res), domain = NA)
---
>                 warning(gettextf("'%s' command could not be run", cmd0), domain = "R-base")
>             else warning(gettextf("'%s' command execution failed with error code %d", cmd0, res), domain = "R-base")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/R/zapsmall.R R/src/library/base/R/zapsmall.R
22c22
<         stop("invalid 'digits'")
---
>         stop(gettextf("invalid '%s' argument", "digits"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/baseloader.R R/src/library/base/baseloader.R
34c34
<         if (! is.character(file)) halt("bad file name")
---
>         if (! is.character(file)) halt(gettext("bad file name"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/man/deparse.Rd R/src/library/base/man/deparse.Rd
13c13
< deparse(expr, width.cutoff = 60L,
---
> deparse(expr, width.cutoff = getOption("width"),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/base/man/save.Rd R/src/library/base/man/save.Rd
22c22
<      file = stop("'file' must be specified"),
---
>      file = stop(gettextf("'\%s' argument must be specified", "file")),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/compiler/R/cmp.R R/src/library/compiler/R/cmp.R
97c97
<             stop("not a proper evaluation environment")
---
>             stop("supplied 'env' argument is not a proper evaluation environment")
105c105
<                 stop("not a proper evaluation environment")
---
>                 stop("supplied 'env' argument is not a proper evaluation environment")
128c128
<             stop("'ns' must be a namespace or a namespace imports environment")
---
>             stop("'ns' argument must be a namespace or a namespace imports environment")
194,195c194
<         stop(gettextf("bad assignment: %s", pasteExpr(e)),
<              domain = NA)
---
>         stop(gettextf("bad assignment: %s", pasteExpr(e)), domain = "R-compiler")
201,202c200
<                 stop(gettextf("bad assignment: %s", pasteExpr(e)),
<                      domain = NA)
---
>                 stop(gettextf("bad assignment: %s", pasteExpr(e)), domain = "R-compiler")
205,206c203
<                 stop(gettextf("bad assignment: %s", pasteExpr(e)),
<                      domain = NA)
---
>                 stop(gettextf("bad assignment: %s", pasteExpr(e)), domain = "R-compiler")
209,210c206
<             stop(gettextf("bad assignment: %s", pasteExpr(e)),
<                  domain = NA)
---
>             stop(gettextf("bad assignment: %s", pasteExpr(e)), domain = "R-compiler")
269c265
<                 msg <- ngettext(sum(rdsf),
---
>                 warning(ngettext(sum(rdsf),
271,272c267
<                                 "local assignments to syntactic functions: ")
<                 warning(msg, paste(vals[rdsf], collapse = ", "),
---
>                                 "local assignments to syntactic functions: ", domain = "R-compiler"), paste(vals[rdsf], collapse = ", "),
796,797c791
<                 stop(gettextf("no offset recorded for label \"%s\"", lbl),
<                      domain = NA)
---
>                 stop(gettextf("no offset recorded for label \"%s\"", lbl), domain = "R-compiler")
852c846
<                    warn = function(x, cntxt) cat(paste("Note:", x, "\n"))),
---
>                    warn = function(x, cntxt) cat(paste(gettext("Note: ", domain = "R-compiler"), x, "\n", sep = ""))),
1076,1078c1070
<             emsg <- gettextf("possible error in '%s': %s",
<                              deparse(call, 20)[1], msg)
<             if (! is.null(signal)) signal(emsg)
---
>             if (! is.null(signal)) signal(gettextf("possible error in '%s': %s", deparse(call, 20)[1], msg))
1107,1108c1099
<             fmt <- "handler for '%s' is already defined for another package"
<             stop(gettextf(fmt, name), domain = NA)
---
>             stop(gettextf("handler for '%s' is already defined for another package", name), domain = "R-compiler")
1310,1311c1301
<             fmt <- "handler for '%s' is already defined for another package"
<             stop(gettextf(fmt, name), domain = NA)
---
>             stop(gettextf("handler for '%s' is already defined for another package", name), domain = "R-compiler")
1347,1348c1337
<             fmt <- "handler for '%s' is already defined for another package"
<             stop(gettextf(fmt, name), domain = NA)
---
>             stop(gettextf("handler for '%s' is already defined for another package", name), domain = "R-compiler")
1946c1935
<             stop(sQuote(name), "is not a registered math1 function")
---
>             stop(gettextf("%s is not a registered math1 function", sQuote(name)))
2603,2605c2592
<         msg <- gettextf("no visible global function definition for '%s'",
<                         as.character(fun))
<         cntxt$warn(msg, cntxt)
---
>         cntxt$warn(gettextf("no visible global function definition for '%s'", as.character(fun)), cntxt)
2611,2613c2598
<         msg <- gettextf("no visible binding for global variable '%s'",
<                         as.character(var))
<         cntxt$warn(msg, cntxt)
---
>         cntxt$warn(gettextf("no visible binding for global variable '%s'", as.character(var)), cntxt)
2619,2621c2604
<         msg <- gettextf("no visible binding for '<<-' assignment to '%s'",
<                         as.character(symbol))
<         cntxt$warn(msg, cntxt)
---
>         cntxt$warn(gettextf("no visible binding for '<<-' assignment to '%s'", as.character(symbol)), cntxt)
2627,2629c2610
<         cntxt$warn(gettextf("wrong number of arguments to '%s'",
<                             as.character(fun)),
<                    cntxt)
---
>         cntxt$warn(gettextf("wrong number of arguments to '%s'", as.character(fun)), cntxt)
2634c2615
<         cntxt$warn(paste(var, "may be used in an incorrect context"), cntxt)
---
>         cntxt$warn(gettextf("%s may be used in an incorrect context", var), cntxt)
2639,2640c2620
<         msg <- paste(fun, "may be used in wrong context: no loop is visible")
<         cntxt$warn(msg, cntxt)
---
>         cntxt$warn(gettextf("%s may be used in wrong context: no loop is visible", fun), cntxt)
2708c2688
<                 cat(gettextf("compiling '%s'", f), "\n", sep = "")
---
>                 cat(gettextf("compiling %s", sQuote(f), domain = "R-compiler"), "\n", sep = "")
2713c2693
<     cat(gettextf("saving to file \"%s\" ... ", file))
---
>     cat(gettextf("saving to file %s ... ", sQuote(file), domain = "R-compiler"))
2715c2695
<     cat(gettext("done"), "\n", sep = "")
---
>     cat(gettext("done", domain = "R-compiler"), "\n", sep = "")
2760c2740
<                     cat(paste0("compiling function \"", e[[2]], "\"\n"))
---
>                     cat(gettextf("compiling function %s", sQuote(e[[2]]), domain = "R-compiler"), "\n", sep = "")
2762,2763c2742
<                     cat(paste("compiling expression", deparse(e, 20)[1],
<                               "...\n"))
---
>                     cat(gettextf("compiling expression %s ...", sQuote(deparse(e, 20)[1]), domain = "R-compiler"), "\n", sep = "")
2767c2746
<         cat(gettextf("saving to file \"%s\" ... ", outfile))
---
>         cat(gettextf("saving to file %s ... ", sQuote(outfile), domain = "R-compiler"))
2769c2748
<         cat(gettext("done"), "\n", sep = "")
---
>         cat(gettext("done", domain = "R-compiler"), "\n", sep = "")
2777c2756
<         stop(gettextf("file '%s' does not exist", file), domain = NA)
---
>         stop(gettextf("file '%s' does not exist", file), domain = "R-compiler")
2803,2804c2782
<             stop(gettextf("'%s' is not a valid compiler option", n),
<                  domain = NA)
---
>             stop(gettextf("'%s' is not a valid compiler option", n), domain = "R-compiler")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/R/cairo.R R/src/library/grDevices/R/cairo.R
25c25
<     if(!checkIntFormat(filename)) stop("invalid 'filename'")
---
>     if(!checkIntFormat(filename)) stop(gettextf("invalid '%s' argument", "filename"))
37c37
<     if(!checkIntFormat(filename)) stop("invalid 'filename'")
---
>     if(!checkIntFormat(filename)) stop(gettextf("invalid '%s' argument", "filename"))
50c50
<     if(!checkIntFormat(filename)) stop("invalid 'filename'")
---
>     if(!checkIntFormat(filename)) stop(gettextf("invalid '%s' argument", "filename"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/R/calc.R R/src/library/grDevices/R/calc.R
81c81
<     if(any(!is.finite(x))) stop("finite coordinates are needed")
---
>     if(any(!is.finite(x))) stop("finite coordinates are required")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/R/colorRamp.R R/src/library/grDevices/R/colorRamp.R
35c35
<     if (bias <= 0) stop("'bias' must be positive")
---
>     if (bias <= 0) stop(gettextf("'%s' argument must be positive", "bias"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/R/colorstuff.R R/src/library/grDevices/R/colorstuff.R
29c29
<         stop("numerical color values must be positive", domain = NA)
---
>         stop("numerical color values must be positive")
43c43
< 	    if(ncol(red) < 3L) stop("at least 3 columns needed")
---
> 	    if(ncol(red) < 3L) stop("at least 3 columns are needed")
70c70
<         stop("rgb values must be in [0, maxColorValue]")
---
>         stop("'r', 'g', and 'b' arguments must be in [0, maxColorValue]")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/R/convertColor.R R/src/library/grDevices/R/convertColor.R
57c57
<     } else stop("'gamma' must be a scalar or 'sRGB'")
---
>     } else stop("'gamma' argument must be a scalar or 'sRGB' value")
70c70
<     cat(gettextf("Color space converter: %s", x$name), "\n", sep = "")
---
>     cat(gettextf("Color space converter: %s", x$name, domain = "R-grDevices"), "\n", sep = "")
72c72
<         cat(gettextf("Reference white: %s", x$reference.white), "\n", sep = "")
---
>         cat(gettextf("Reference white: %s", x$reference.white, domain = "R-grDevices"), "\n", sep = "")
79c79
<         cat(gettextf("display gamma = %s", format(x$gamma)), "\n", sep = "")
---
>         cat(gettextf("display gamma = %s", format(x$gamma), domain = "R-grDevices"), "\n", sep = "")
216c216
<       stop("'from' must be a \"colorConverter\" object or a string")
---
>       stop(gettextf("'%s' argument must be an object of class %s or a string", "from", dQuote("colorConverter")))
220c220
<       stop("'to' must be a \"colorConverter\" object or a string")
---
>       stop(gettextf("'%s' argument must be an object of class %s or a string", "to", dQuote("colorConverter")))
228,229c228
<       stop(gettextf("'from.ref.white' disagrees with definition of %s",
<                     from$name), domain = NA)
---
>       stop(gettextf("'%s' argument disagrees with definition of '%s'", "from.ref.white", from$name))
234,235c233
<       stop(gettextf("'to.ref.white' disagrees with definition of %s",
<                     to$name), domain = NA)
---
>       stop(gettextf("'%s' argument disagrees with definition of '%s'", "to.ref.white", to$name))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/R/device.R R/src/library/grDevices/R/device.R
254c254
<         stop("dev.control() called without an open graphics device")
---
>         stop(gettextf("'%s' function called without an open graphics device", "dev.control()"))
265c265
<         stop("dev.displaylist() called without an open graphics device")
---
>         stop(gettextf("'%s' function called without an open graphics device", "dev.displaylist()"))
308c308
<         else stop(gettextf("device '%s' not found", dev), domain=NA)
---
>         else stop(gettextf("device '%s' was not found", dev), domain = "R-grDevices")
318,320c318,319
<             if(all(fe)) stop("no suitable unused file name for pdf()")
<             message(gettextf("dev.new(): using pdf(file=\"%s\")", tmp[!fe][1L]),
<                     domain=NA)
---
>             if(all(fe)) stop(gettextf("no suitable unused file name for '%s'", "pdf()"))
>             message(gettextf("dev.new(): using '%s'", paste("pdf(file=\"", tmp[!fe][1L], "\")", collapse = "")), domain = "R-grDevices")
327,329c326,327
<             if(all(fe)) stop("no suitable unused file name for postscript()")
<             message(gettextf("dev.new(): using postscript(file=\"%s\")",
<                              tmp[!fe][1L]), domain=NA)
---
>             if(all(fe)) stop(gettextf("no suitable unused file name for '%s'", "postscript()"))
>             message(gettextf("dev.new(): using '%s'", paste("postscript(file=\"", tmp[!fe][1L], "\")", collapse = "")), domain = "R-grDevices")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/R/gevents.R R/src/library/grDevices/R/gevents.R
38c38
< getGraphicsEvent <- function(prompt = "Waiting for input",
---
> getGraphicsEvent <- function(prompt = gettext("Waiting for input", domain = "R-grDevices"),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/R/postscript.R R/src/library/grDevices/R/postscript.R
31,32c31
< 	stop(gettextf("invalid arguments in '%s' (need named args)",
<                       deparse(sys.call(sys.parent()))), domain = NA)
---
> 	stop(gettextf("invalid arguments in %s (need named args)", sQuote(deparse(sys.call(sys.parent())))), domain = "R-grDevice")
34c33
< 	stop("'name.opt' must be character, name of an existing list")
---
> 	stop("'name.opt' argument must be character, name of an existing list")
40,41c39
< 	} else stop(gettextf("cannot reset non-existent '%s'", name.opt),
<                     domain = NA)
---
> 	} else stop(gettextf("cannot reset non-existent '%s'", name.opt), domain = "R-grDevice")
45c43
< 	stop(gettextf("invalid options in '%s'", name.opt), domain = NA)
---
> 	stop(gettextf("invalid options in '%s'", name.opt), domain = "R-grDevices")
52,56c50,51
<                                  "invalid argument names %s in '%s'"),
<                          paste(sQuote(newnames[is.na(matches)]),
<                                collapse=", "),
<                          deparse(sys.call(sys.parent()))),
<                  domain = NA)
---
>                                  "invalid argument names %s in '%s'", domain = "R-grDevices"),
>                          paste(sQuote(newnames[is.na(matches)]), collapse=", "), deparse(sys.call(sys.parent()))), domain = NA)
68,78c63,69
< 		    warning(paste(sQuote(paste0(fn, "(", names(prev[ii]), ")" )),
<                                   collapse = " and "), " ",
<                             ngettext(as.integer(sum(ii)),
<                                      "differs between new and previous",
<                                      "differ between new and previous"),
<                             if(any(do.keep)) {
<                                 paste("\n\t ==> ",
<                                       gettextf("NOT changing %s",
<                                               paste(sQuote(names(prev[do.keep])),
<                                                     collapse=" & ")),
<                                       sep = "")} else "",
---
> 		    tmp_n <- paste(sQuote(paste0(fn, "(", names(prev[ii]), ")" )), collapse = " & ")
> 			if(any(do.keep))
> 			{
>                     warning(sprintf(ngettext(as.integer(sum(ii)),
>                                      "%s differs between new and previous\n\t ==> NOT changing %s",
>                                      "%s differ between new and previous\n\t ==> NOT changing %s", domain = "R-grDevices"),
> 					tmp_n, paste(sQuote(names(prev[do.keep])), collapse=" & ")),
80a72,77
> 			else
> 		    warning(sprintf(ngettext(as.integer(sum(ii)),
>                                      "%s differs between new and previous",
>                                      "%s differ between new and previous", domain = "R-grDevices"),
> 				     tmp_n), domain = NA, call. = FALSE)
> 		}
255c252
<               stop(gettextf("unknown family '%s'", family), domain = NA)
---
>               stop(gettextf("unknown family '%s'", family), domain = "R-grDevices")
258c255
<             stop("invalid 'family' argument")
---
>             stop(gettextf("invalid '%s' argument", "family"))
263,264c260
<     if(!checkIntFormat(file))
<         stop(gettextf("invalid 'file' argument '%s'", file), domain = NA)
---
>     if(!checkIntFormat(file)) stop(gettextf("invalid 'file' argument '%s'", file))
286,287c282
<     if(!checkIntFormat(file))
<         stop(gettextf("invalid 'file' argument '%s'", file), domain = NA)
---
>     if(!checkIntFormat(file)) stop(gettextf("invalid 'file' argument '%s'", file))
350c345
<               stop(gettextf("unknown family '%s'", family), domain = NA)
---
>               stop(gettextf("unknown family '%s'", family), domain = "R-grDevices")
353c348
<             stop("invalid 'family' argument")
---
>             stop(gettextf("invalid '%s' argument", "family"))
365,366c360
<     if(!checkIntFormat(file))
<         stop(gettextf("invalid 'file' argument '%s'", file), domain = NA)
---
>     if(!checkIntFormat(file)) stop(gettextf("invalid 'file' argument '%s'", file))
459c453
<         stop("Not a CID font")
---
>         stop(gettextf("'%s' argument is not an object of class %s", "font", dQuote("CIDFont")))
488c482
<             stop(gettextf("font %s already in use", i), domain = NA)
---
>             stop(gettextf("font %s already in use", sQuote(i)), domain = "R-grDevices")
537,538c531
<                 stop(gettextf("invalid arguments in '%s' (must be font names)",
<                               "postscriptFonts"), domain = NA)
---
>                 stop(sprintf(gettext("invalid arguments in %s (must be font names)", domain = "R-grDevices"), sQuote("postscriptFonts")), domain = NA)
543,544c536
<                 stop(gettextf("invalid arguments in '%s' (need named args)",
<                               "postscriptFonts"), domain = NA)
---
>                 stop(sprintf(gettext("invalid arguments in %s (need named args)", domain = "R-grDevices"), sQuote("postscriptFonts")), domain = NA)
591,592c583
<                 stop(gettextf("invalid arguments in '%s' (must be font names)",
<                               "pdfFonts"), domain = NA)
---
>                 stop(sprintf(gettext("invalid arguments in %s (must be font names)", domain = "R-grDevices"), sQuote("pdfFonts")), domain = NA)
597,598c588
<                 stop(gettextf("invalid arguments in '%s' (need named args)",
<                               "pdfFonts"), domain = NA)
---
>                 stop(sprintf(gettext("invalid arguments in %s (need named args)", domain = "R-grDevices"), sQuote("pdfFonts")), domain = NA)
622,623c612
<         stop(gettextf("font encoding mismatch '%s'/'%s'",
<                       font$encoding, encoding), domain=NA)
---
>         stop(gettextf("font encoding mismatch '%s'/'%s'", font$encoding, encoding), domain = "R-grDevices")
959c948
<         stop("'file' must be a non-empty character string")
---
>         stop("'file' argument must be a non-empty character string")
980,981c969
<         stop(gettextf("status %d in running command '%s'", ret, cmd),
<              domain = NA)
---
>         stop(gettextf("status %d in running command '%s'", ret, cmd), domain = "R-grDevices")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/R/recordplot.R R/src/library/grDevices/R/recordplot.R
32,33c32
<         stop(gettextf("argument is not of class %s", dQuote("recordedplot")),
<              domain = NA)
---
>         stop(gettextf("'%s' argument is not an object of class %s", "x", dQuote("recordedplot")), domain = "R-grDevices")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/R/smooth2d.R R/src/library/grDevices/R/smooth2d.R
29c29
< 	stop("'nbin' must be numeric of length 1 or 2")
---
> 	stop("'nbin' argument must be numeric of length 1 or 2")
38,39c38,39
< 	if(!is.numeric(bandwidth)) stop("'bandwidth' must be numeric")
< 	if(any(bandwidth <= 0)) stop("'bandwidth' must be positive")
---
> 	if(!is.numeric(bandwidth)) stop(gettextf("'%s' argument must be numeric", "bandwidth"))
> 	if(any(bandwidth <= 0)) stop(gettextf("'%s' argument must be positive", "bandwidth"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/R/unix/dev2bitmap.R R/src/library/grDevices/R/unix/dev2bitmap.R
23c23
<     if(missing(file)) stop("'file' is missing with no default")
---
>     if(missing(file)) stop("'file' argument is missing with no default")
25c25
<         stop("'file' must be a non-empty character string")
---
>         stop("'file' argument must be a non-empty character string")
67c67
<     if(missing(file)) stop("'file' is missing with no default")
---
>     if(missing(file)) stop("'file' argument is missing with no default")
69c69
<         stop("'file' must be a non-empty character string")
---
>         stop("'file' argument must be a non-empty character string")
110c110
<                  domain = NA)
---
>                  domain = "R-grDevices")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/R/unix/png.R R/src/library/grDevices/R/unix/png.R
42c42
<     if(!checkIntFormat(filename)) stop("invalid 'filename'")
---
>     if(!checkIntFormat(filename)) stop(gettextf("invalid '%s' argument", "filename"))
77c77
<     if(!checkIntFormat(filename)) stop("invalid 'filename'")
---
>     if(!checkIntFormat(filename)) stop(gettextf("invalid '%s' argument", "filename"))
109c109
<     if(!checkIntFormat(filename)) stop("invalid 'filename'")
---
>     if(!checkIntFormat(filename)) stop(gettextf("invalid '%s' argument", "filename"))
142c142
<     if(!checkIntFormat(filename)) stop("invalid 'filename'")
---
>     if(!checkIntFormat(filename)) stop(gettextf("invalid '%s' argument", "filename"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/R/unix/quartz.R R/src/library/grDevices/R/unix/quartz.R
54d53
<         msg <- "screen devices should not be used in examples etc"
56c55
<             stop(msg, domain = NA)
---
>             stop("screen devices should not be used in examples etc", domain = "R-grDevices")
58c57
<             warning(msg, immediate. = TRUE, noBreaks. = TRUE, domain = NA)
---
>             warning("screen devices should not be used in examples etc", immediate. = TRUE, noBreaks. = TRUE, domain = "R-grDevices")
72,73c71,72
<     if(!checkIntFormat(new$title)) stop("invalid 'title'")
<     if(!is.null(file) && !checkIntFormat(file)) stop("invalid 'file'")
---
>     if(!checkIntFormat(new$title)) stop(gettextf("invalid '%s' argument", "title"))
>     if(!is.null(file) && !checkIntFormat(file)) stop(gettextf("invalid '%s' argument", "file"))
131c130
<                 stop("invalid arguments in 'quartzFonts' (must be font names)")
---
>                 stop(gettextf("invalid arguments in %s (must be font names)", sQuote("quartzFonts")))
136c135
<                 stop("invalid arguments in 'quartzFonts' (need named args)")
---
>                 stop(gettextf("invalid arguments in %s (need named args)", sQuote("quartzFonts")))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/R/unix/x11.R R/src/library/grDevices/R/unix/x11.R
64c64
<             stop("X11 library is missing: install XQuartz from xquartz.macosforge.org", domain = NA)
---
>             stop("X11 library is missing: install XQuartz from xquartz.macosforge.org", domain = "R-utils")
75d74
<         msg <- "screen devices should not be used in examples etc"
77c76
<             stop(msg, domain = NA)
---
>         stop("screen devices should not be used in examples etc", domain = "R-grDevices")
79c78
<             warning(msg, immediate. = TRUE, noBreaks. = TRUE, domain = NA)
---
>         warning("screen devices should not be used in examples etc", immediate. = TRUE, noBreaks. = TRUE, domain = "R-grDevices")
96c95
<     if(!checkIntFormat(new$title)) stop("invalid 'title'")
---
>     if(!checkIntFormat(new$title)) stop(gettextf("invalid '%s' argument", "title"))
110c109
<             stop('unknown family for X11(type = "XLib")')
---
>             stop("unknown family for 'X11(type = \"XLib\")'")
193c192
<                 stop("invalid arguments in 'X11Fonts' (must be font names)")
---
>                 stop(gettextf("invalid arguments in %s (must be font names)", sQuote("X11Fonts")))
198c197
<                 stop("invalid arguments in 'X11Fonts' (need named args)")
---
>                 stop(gettextf("invalid arguments in %s (need named args)", sQuote("X11Fonts")))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/R/utils.R R/src/library/grDevices/R/utils.R
32c32
<         stop("'r' must be a \"range\", hence of length 2")
---
>         stop("'r' must be a 'range()' result, hence of length 2")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/R/windows/cairo.R R/src/library/grDevices/R/windows/cairo.R
26c26
<     if(!checkIntFormat(filename)) stop("invalid 'filename'")
---
>     if(!checkIntFormat(filename)) stop(gettextf("invalid '%s' argument", "filename"))
47c47
<     if(!checkIntFormat(filename)) stop("invalid 'filename'")
---
>     if(!checkIntFormat(filename)) stop(gettextf("invalid '%s' argument", "filename"))
68c68
<     if(!checkIntFormat(filename)) stop("invalid 'filename'")
---
>     if(!checkIntFormat(filename)) stop(gettextf("invalid '%s' argument", "filename"))
90c90
<     if(!checkIntFormat(filename)) stop("invalid 'filename'")
---
>     if(!checkIntFormat(filename)) stop(gettextf("invalid '%s' argument", "filename"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/R/windows/dev2bitmap.R R/src/library/grDevices/R/windows/dev2bitmap.R
23c23
<     if(missing(file)) stop("'file' is missing with no default")
---
>     if(missing(file)) stop("'file' argument is missing with no default")
25c25
<         stop("'file' must be a non-empty character string")
---
>         stop("'file' argument must be a non-empty character string")
67c67
<     if(missing(file)) stop("'file' is missing with no default")
---
>     if(missing(file)) stop("'file' argument is missing with no default")
69c69
<         stop("'file' must be a non-empty character string")
---
>         stop("'file' argument must be a non-empty character string")
111c111
<                  domain = NA)
---
>                  domain = "R-grDevices")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/R/windows/png.R R/src/library/grDevices/R/windows/png.R
44c44
<     if(!checkIntFormat(filename)) stop("invalid 'filename'")
---
>     if(!checkIntFormat(filename)) stop(gettextf("invalid '%s' argument", "filename"))
82c82
<     if(!checkIntFormat(filename)) stop("invalid 'filename'")
---
>     if(!checkIntFormat(filename)) stop(gettextf("invalid '%s' argument", "filename"))
114c114
<     if(!checkIntFormat(filename)) stop("invalid 'filename'")
---
>     if(!checkIntFormat(filename)) stop(gettextf("invalid '%s' argument", "filename"))
148c148
<     if(!checkIntFormat(filename)) stop("invalid 'filename'")
---
>     if(!checkIntFormat(filename)) stop(gettextf("invalid '%s' argument", "filename"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/R/windows/windows.R R/src/library/grDevices/R/windows/windows.R
68d67
<     msg <- "screen devices should not be used in examples etc"
70c69
<         stop(msg, domain = NA)
---
>         stop("screen devices should not be used in examples etc", domain = "R-grDevices")
72c71
<         warning(msg, immediate. = TRUE, noBreaks. = TRUE, domain = NA)
---
>         warning("screen devices should not be used in examples etc", immediate. = TRUE, noBreaks. = TRUE, domain = "R-grDevices")
123c122
<         stop("windows devices should not be used in examples etc", domain = NA)
---
>         stop("windows devices should not be used in examples etc", domain = "R-grDevices")
140c139
<         stop("windows devices should not be used in examples etc", domain = NA)
---
>         stop("windows devices should not be used in examples etc", domain = "R-grDevices")
142c141
<     if(!checkIntFormat(filename)) stop("invalid 'filename'")
---
>     if(!checkIntFormat(filename)) stop(gettextf("invalid '%s' argument", "filename"))
199c198
<         cat("object is not of class `SavedPlots'\n")
---
>         cat(gettextf("'%s' argument is not an object of class %s", "x", dQuote("SavedPlots"), domain = "R-grDevices"), "\n", sep = "")
202,203c201,202
<     cat("Saved Plots from R version 1.4.0 or later\n\n")
<     cat("  Contains", x[[2L]], "out of a maximum", x[[3L]], "plots\n")
---
>     cat(gettext("Saved Plots from R version 1.4.0 or later", domain = "R-grDevices"), "\n\n", sep = "")
>     cat(gettextf("  Contains %d out of a maximum %d plots", x[[2L]], x[[3L]], domain = "R-grDevices"), "\n", sep = "")
205,206c204,205
<     cat("  #plot calls are", paste(lens, collapse=", "), "\n")
<     cat("  Current position is plot", 1L + x[[4L]], "\n")
---
>     cat(gettext("  #plot calls are:", domain = "R-grDevices"), paste(lens, collapse=", "), "\n", sep = "")
>     cat(gettextf("  Current position is plot %d", 1L + x[[4L]], domain = "R-grDevices"), "\n", sep = "")
213c212
<     if(i > numplots || i < 1) stop("subscript out of range")
---
>     if(i > numplots || i < 1) stop("subscript is out of range")
270c269
<                 stop("invalid arguments in 'windowsFonts' (must be font names)")
---
>                 stop(gettextf("invalid arguments in %s (must be font names)", sQuote("windowsFonts")))
275c274
<                 stop("invalid arguments in 'windowsFonts' (need named args)")
---
>                 stop(gettextf("invalid arguments in %s (need named args)", sQuote("windowsFonts")))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/R/xyz.coords.R R/src/library/grDevices/R/xyz.coords.R
103c103
<                             "%d x values <= 0 omitted from logarithmic plot"),
---
>                             "%d x values <= 0 omitted from logarithmic plot", domain = "R-grDevices"),
111c111
<                             "%d y values <= 0 omitted from logarithmic plot"),
---
>                             "%d y values <= 0 omitted from logarithmic plot", domain = "R-grDevices"),
139c139
< 	    if(ncol(x) < 2) stop("at least 2 columns needed")
---
> 	    if(ncol(x) < 2) stop("at least 2 columns are needed")
222c222
<                                      "%d x values <= 0 omitted from logarithmic plot"),
---
>                                      "%d x values <= 0 omitted from logarithmic plot", domain = "R-grDevices"),
230c230
<                                      "%d y values <= 0 omitted from logarithmic plot"),
---
>                                      "%d y values <= 0 omitted from logarithmic plot", domain = "R-grDevices"),
238c238
<                                      "%d z values <= 0 omitted from logarithmic plot"),
---
>                                      "%d z values <= 0 omitted from logarithmic plot", domain = "R-grDevices"),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/man/getGraphicsEvent.Rd R/src/library/grDevices/man/getGraphicsEvent.Rd
17c17
< getGraphicsEvent(prompt = "Waiting for input",
---
> getGraphicsEvent(prompt = gettext("Waiting for input", domain = "R-grDevices"),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/src/axis_scales.c R/src/library/grDevices/src/axis_scales.c
28a29
> #include "localization.h"
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/src/cairo/cairoBM.c R/src/library/grDevices/src/cairo/cairoBM.c
60,68c60
< 
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #undef _
< #define _(String) dgettext ("grDevices", String)
< #else
< #define _(String) (String)
< #endif
< 
---
> #include "../localization.h"
116c108
< 	warning("cairo error '%s'", cairo_status_to_string(res));
---
> 	warning(_("cairo error '%s'"), cairo_status_to_string(res));
122c114
< 	warning("cairo error '%s'", cairo_status_to_string(res));
---
> 	warning(_("cairo error '%s'"), cairo_status_to_string(res));
151c143
< 	warning("BM_Close_bitmap called on non-surface");
---
> 	warning(_("BM_Close_bitmap called on non-surface"));
216c208
< 		error("cairo error '%s'", cairo_status_to_string(res));
---
> 		error(_("cairo error '%s'"), cairo_status_to_string(res));
223c215
< 		error("cairo error '%s'", cairo_status_to_string(res));
---
> 		error(_("cairo error '%s'"), cairo_status_to_string(res));
245c237
< 		error("cairo error '%s'", cairo_status_to_string(res));
---
> 		error(_("cairo error '%s'"), cairo_status_to_string(res));
250c242
< 		error("cairo error '%s'", cairo_status_to_string(res));
---
> 		error(_("cairo error '%s'"), cairo_status_to_string(res));
270c262
< 		error("cairo error '%s'", cairo_status_to_string(res));
---
> 		error(_("cairo error '%s'"), cairo_status_to_string(res));
280c272
< 		error("cairo error '%s'", cairo_status_to_string(res));
---
> 		error(_("cairo error '%s'"), cairo_status_to_string(res));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/src/cairo/cairoFns.c R/src/library/grDevices/src/cairo/cairoFns.c
88a89
> #include "../localization.h"
862c863
<     if (!utf8Valid(str)) error("invalid string in Cairo_StrWidth");
---
>     if (!utf8Valid(str)) error(_("invalid string in Cairo_StrWidth"));
872c873
<     if (!utf8Valid(str)) error("invalid string in Cairo_Text");
---
>     if (!utf8Valid(str)) error(_("invalid string in Cairo_Text"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/src/colors.c R/src/library/grDevices/src/colors.c
30a31
> #include "localization.h"
69c70
<     	error(_("color intensity %s, not in [0,1]"), "NA");
---
>     	error(_("color intensity '%s' is not in [0,1]"), "NA");
78c79
<     	error(_("color intensity %s, not in 0:255"), "NA");
---
>     	error(_("color intensity '%s' is not in 0:255"), "NA");
87c88
< 	error(_("alpha level %s, not in [0,1]"), "NA"); 
---
> 	error(_("alpha level '%s' is not in [0,1]"), "NA"); 
96c97
<     	error(_("alpha level %s, not in 0:255"), "NA");
---
>     	error(_("alpha level '%s' is not in 0:255"), "NA");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/src/devCairo.c R/src/library/grDevices/src/devCairo.c
27a28
> #include "localization.h"
46c47
<     if (!R_devCairo) error("failed to load cairo DLL");
---
>     if (!R_devCairo) error(_("failed to load cairo DLL"));
55c56
<     if (Load_Rcairo_Dll() < 0) warning("failed to load cairo DLL");
---
>     if (Load_Rcairo_Dll() < 0) warning(_("failed to load cairo DLL"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/src/devPS.c R/src/library/grDevices/src/devPS.c
42a43
> #include <R_ext/Minmax.h>
54a56
> #include "localization.h"
56,58d57
< #ifndef max
< #define max(a,b) ((a > b) ? a : b)
< #endif
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/src/devPicTeX.c R/src/library/grDevices/src/devPicTeX.c
33a34
> #include "localization.h"
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/src/devQuartz.c R/src/library/grDevices/src/devQuartz.c
86c86
< 
---
> #include "localization.h"
1605a1606
> #include "localization.h"
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/src/devWindows.c R/src/library/grDevices/src/devWindows.c
59,65c59
< #ifdef ENABLE_NLS
< #define G_(String) libintl_dgettext("RGui", String)
< #define GN_(String) gettext_noop (String)
< #else /* not NLS */
< #define G_(String) (String)
< #define GN_(String) String
< #endif
---
> #include "localization.h"
580c574
< 	    snprintf(oops, 256, "[%s] Error at line %d.", optfile(), optline());
---
> 	    snprintf(oops, 256, _("[%s] Error at line %d."), optfile(), optline());
584c578
< 		strcpy(oops, "Insufficient memory. ");
---
> 		strcpy(oops, _("Insufficient memory. "));
595c589
< 		    snprintf(oops, 256, "Unknown style at line %d. ", optline());
---
> 		    snprintf(oops, 256, _("Unknown style at line %d. "), optline());
1234c1228
<     PrintWarnings();
---
>     PrintWarnings(NULL);
1257c1251
<     PrintWarnings();
---
>     PrintWarnings(NULL);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/src/devices.c R/src/library/grDevices/src/devices.c
38,46c38
< 
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #undef _
< #define _(String) dgettext ("grDevices", String)
< #else
< #define _(String) (String)
< #endif
< 
---
> #include "localization.h"
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/src/grDevices.h R/src/library/grDevices/src/grDevices.h
24,31d23
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #undef _
< #define _(String) dgettext ("grDevices", String)
< #else
< #define _(String) (String)
< #endif
< 
Only in R/src/library/grDevices/src: localization.h
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/src/qdBitmap.c R/src/library/grDevices/src/qdBitmap.c
32c32
< #define _(String) (String)
---
> #include "localization.h"
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/src/qdPDF.c R/src/library/grDevices/src/qdPDF.c
34c34
< #define _(String) (String)
---
> #include "localization.h"
110c110
< 	values[0] = CFSTR("Quartz R Device");
---
> 	values[0] = CFSTR(_("Quartz R Device"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grDevices/src/stubs.c R/src/library/grDevices/src/stubs.c
23a24
> #include "localization.h"
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/graphics/R/abline.R R/src/library/graphics/R/abline.R
34c34
<             warning(gettextf("only using the first two of %d regression coefficients", p), domain = NA)
---
>             warning(gettextf("only using the first two of %d regression coefficients", p), domain = "R-graphics")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/graphics/R/axis.R R/src/library/graphics/R/axis.R
73c73
<         stop("'side' must be in {1:4}")
---
>         stop("'side' argument must be in {1:4}")
77c77
<     else if(!is.numeric(axp) || length(axp) != 3) stop("invalid 'axp'")
---
>     else if(!is.numeric(axp) || length(axp) != 3) stop(gettextf("invalid '%s' argument", "axp"))
79c79
<     else if(!is.logical(log) || anyNA(log)) stop("invalid 'log'")
---
>     else if(!is.logical(log) || anyNA(log)) stop(gettextf("invalid '%s' argument", "log"))
84c84
<         else if(!is.numeric(usr) || length(usr) != 2) stop("invalid 'usr'")
---
>         else if(!is.numeric(usr) || length(usr) != 2) stop(gettextf("invalid '%s' argument", "usr"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/graphics/R/barplot.R R/src/library/graphics/R/barplot.R
97c97
< 	    stop("log scale error: 'xlim' <= 0")
---
> 	    stop(gettextf("log scale error: '%s' <= 0", "xlim"))
99c99
< 	    stop("log scale error: 'ylim' <= 0")
---
> 	    stop(gettextf("log scale error: '%s' <= 0", "ylim"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/graphics/R/boxplot.R R/src/library/graphics/R/boxplot.R
177c177
< 				 "Outliers (%s) in boxplot %d are not drawn"),
---
> 				 "Outliers (%s) in boxplot %d are not drawn", domain = "R-graphics"),
190,191c190
<         stop(gettextf("'at' must have same length as 'z$n', i.e. %d", n),
<              domain = NA)
---
>         stop(gettextf("'at' must have same length as 'z$n', i.e. %d", n), domain = "R-graphics")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/graphics/R/coplot.R R/src/library/graphics/R/coplot.R
122c122
<     bad.givens <- function() stop("invalid 'given.values'")
---
>     bad.givens <- function() stop(gettextf("invalid '%s' argument", "given.values"))
351,352c351
< 	cat("\n", gettextf("Missing rows: %s",
<                            paste0(missingrows, collapse = ", ")), "\n")
---
> 	cat("\n", gettextf("Missing rows: %s", paste0(missingrows, collapse = ", "), domain = "R-graphics"), "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/graphics/R/curve.R R/src/library/graphics/R/curve.R
30c30
< 	    stop(gettextf("'expr' must be a function, or a call or an expression containing '%s'", xname), domain = NA)
---
> 	    stop(gettextf("'expr' must be a function, or a call or an expression containing '%s'", xname), domain = "R-graphics")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/graphics/R/datetime.R R/src/library/graphics/R/datetime.R
90c90
<     if(!inherits(x, "POSIXt")) stop("wrong method")
---
>     if(!inherits(x, "POSIXt")) stop(gettextf("'%s' argument is not of class %s", "x", dQuote("POSIXt")))
96c96
< 	stop("Must specify 'breaks' in hist(<POSIXt>)")
---
>         stop("'breaks' argument must be specified")
116c116
<             if(is.na(valid)) stop("invalid specification of 'breaks'")
---
>             if(is.na(valid)) stop(gettextf("invalid '%s' argument", "breaks"))
169c169
<         else stop("invalid specification of 'breaks'")
---
>         else stop(gettextf("invalid '%s' argument", "breaks"))
250c250
<     if(!inherits(x, "Date")) stop("wrong method")
---
>     if(!inherits(x, "Date")) stop(gettextf("'%s' argument is not of class %s", "x", dQuote("Date")))
255c255
<         stop("Must specify 'breaks' in hist(<Date>)")
---
>         stop("'breaks' argument must be specified")
271c271
<             if(is.na(valid)) stop("invalid specification of 'breaks'")
---
>             if(is.na(valid)) stop(gettextf("invalid '%s' argument", "breaks"))
314c314
<         } else stop("invalid specification of 'breaks'")
---
>         } else stop(gettextf("invalid '%s' argument", "breaks"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/graphics/R/hist.R R/src/library/graphics/R/hist.R
26c26
< 	      main = paste("Histogram of", xname),
---
> 	      main = gettextf("Histogram of %s", xname, domain = "R-graphics"),
33c33
< 	stop("'x' must be numeric")
---
> 	stop(gettextf("'%s' argument must be numeric", "x"))
37c37
<     if(is.na(n)) stop("invalid length(x)")
---
>     if(is.na(n)) stop(gettextf("invalid '%s' value", "length(x)"))
71,72c71
<         ##     stop(gettextf("hist.default: pretty() error, breaks=%s",
<         ##                   format(breaks)), domain = NA)
---
>         ##     stop(gettextf("hist.default: pretty() error, breaks=%s", format(breaks)), domain = "R-graphics")
79,80c78
<                 stop(gettextf("hist.default: pretty() error, breaks=%s",
<                               format(breaks)), domain = NA)
---
>                 stop(gettextf("hist.default: pretty() error, breaks=%s", format(breaks)), domain = "R-graphics")
84,85c82
<                 stop(gettextf("Invalid breakpoints produced by 'breaks(x)': %s",
<                               format(breaks)), domain = NA)
---
>                 stop(gettextf("Invalid breakpoints produced by 'breaks(x)': %s", format(breaks)), domain = "R-graphics")
92c89
<     if(is.na(nB)) stop("invalid length(breaks)")
---
>     if(is.na(nB)) stop(gettextf("invalid '%s' value", "length(breaks)"))
123c120
< 	stop("negative 'counts'. Internal Error.", domain = NA)
---
> 	stop("negative 'counts'. Internal Error.", domain = "R-graphics")
151c148
< 					 "arguments %s are not made use of"),
---
> 					 "arguments %s are not made use of", domain = "R-graphics"),
162c159
< 	      main = paste("Histogram of", paste(x$xname, collapse="\n")),
---
> 	      main = gettextf("Histogram of %s", paste(x$xname, collapse="\n"), domain = "R-graphics"),
183c180
< 	    ylab <- if (!freq) "Density" else "Frequency"
---
> 	    ylab <- if (!freq) gettext("Density", domain = "R-graphics") else gettext("Frequency", domain = "R-graphics")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/graphics/R/image.R R/src/library/graphics/R/image.R
126,128c126
<             stop(gettextf("%s can only be used with a regular grid",
<                           sQuote("useRaster = TRUE")),
<                  domain = NA)
---
>             stop(gettextf("%s can only be used with a regular grid", sQuote("useRaster = TRUE")), domain = "R-graphics")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/graphics/R/layout.R R/src/library/graphics/R/layout.R
36,37c36
<             stop(gettextf("layout matrix must contain at least one reference\nto each of the values {1 ... %d}\n",
<                           num.figures), domain = NA)
---
>             stop(gettextf("layout matrix must contain at least one reference\nto each of the values {1 ... %d}", num.figures), domain = "R-graphics")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/graphics/R/legend.R R/src/library/graphics/R/legend.R
45c45
<     if(length(title) > 1) stop("invalid 'title'")
---
>     if(length(title) > 1) stop(gettextf("invalid '%s' argument", "title"))
48c48
<     if(n.leg == 0) stop("'legend' is of length 0")
---
>     if(n.leg == 0) stop("'legend' argument is of length 0")
97c97
< 	stop("'text.width' must be numeric, >= 0")
---
> 	stop("'text.width' argument must be numeric, >= 0")
125c125
<                                  n.leg), domain = NA)
---
>                                  n.leg), domain = "R-graphics")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/graphics/R/matplot.R R/src/library/graphics/R/matplot.R
72,75c72
< 	message("matplot: doing ", k, " plots with ",
< 		paste0(" col= (", paste.ch(col), ")"),
< 		paste0(" pch= (", paste.ch(pch), ")"),
< 		" ...\n", domain=NA)
---
> 	message(gettextf("matplot: doing %d plots with %s %s ...", k, paste0(" col= (", paste.ch(col), ")"), paste0(" pch= (", paste.ch(pch), ")")), domain = "R-graphics")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/graphics/R/mosaicplot.R R/src/library/graphics/R/mosaicplot.R
182c182
<         stop("'x' must not have 0 dimensionality")
---
>         stop("'x' argument must not have 0 dimensionality")
186c186
<                                  "extra arguments %s will be disregarded"),
---
>                                  "extra arguments %s will be disregarded", domain = "R-graphics"),
218c218
<             stop("invalid 'shade' specification")
---
>             stop(gettextf("invalid '%s' argument", "shade"))
319c319
<         rtxt <- "Standardized\nResiduals:"
---
>         rtxt <- gettext("Standardized\nResiduals:")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/graphics/R/pairs.R R/src/library/graphics/R/pairs.R
45c45
<           horInd = 1:nc, verInd = 1:nc,
---
>           horInd = seq_len(nc), verInd = seq_len(nc),
103c103
<         stop("invalid argument 'horInd'")
---
>         stop(gettextf("invalid '%s' argument", "hordInd"))
105c105
<         stop("invalid argument 'verInd'")
---
>         stop(gettextf("invalid '%s' argument", "verInd"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/graphics/R/pie.R R/src/library/graphics/R/pie.R
26c26
< 	stop("'x' values must be positive.")
---
> 	stop("'x' values must be positive")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/graphics/R/stem.R R/src/library/graphics/R/stem.R
21c21
<     if (!is.numeric(x) ) stop("'x' must be numeric")
---
>     if (!is.numeric(x) ) stop("'x' argument must be numeric")
24c24
<     if (is.na(n)) stop("invalid length(x)")
---
>     if (is.na(n)) stop(gettextf("invalid '%s' value", "length(x)"))
26c26
<     if (scale <= 0) stop("'scale' must be positive") # unlike S
---
>     if (scale <= 0) stop("'scale' argument must be positive") # unlike S
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/graphics/R/stripchart.R R/src/library/graphics/R/stripchart.R
43,44c43
< 	stop(gettextf("'at' must have length equal to the number %d of groups",
<                       n), domain = NA)
---
> 	stop(gettextf("'at' argument must have length equal to the number %d of groups", n), domain = "R-graphics")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/graphics/man/hist.Rd R/src/library/graphics/man/hist.Rd
15c15
<      main = paste("Histogram of" , xname),
---
>      main = gettextf("Histogram of \%s", xname, domain = "R-graphics"),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/graphics/man/pairs.Rd R/src/library/graphics/man/pairs.Rd
22c22
<       horInd = 1:nc, verInd = 1:nc,
---
>       horInd = seq_len(nc), verInd = seq_len(nc),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/graphics/man/plothistogram.Rd R/src/library/graphics/man/plothistogram.Rd
17,18c17,18
<                main = paste("Histogram of",
<                             paste(x$xname, collapse = "\n")),
---
>                main = gettextf("Histogram of \%s",
>                             paste(x$xname, collapse = "\n"), domain = "R-graphics"),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/graphics/src/base.c R/src/library/graphics/src/base.c
28a29
> #include "localization.h"
32,38d32
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #undef _
< #define _(String) dgettext ("graphics", String)
< #else
< #define _(String) (String)
< #endif
161c155
<     dpptr(dd)->new = dpSavedptr(dd)->new;
---
>     dpptr(dd)->newplot = dpSavedptr(dd)->newplot;
302c296
< 	  error("event 'GE_ScalePS' requires a single numeric value");
---
> 	  error(_("event 'GE_ScalePS' requires a single numeric value"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/graphics/src/graphics.c R/src/library/graphics/src/graphics.c
31a32
> #include "localization.h"
38,45d38
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #undef _
< #define _(String) dgettext ("grDevices", String)
< #else
< #define _(String) (String)
< #endif
< 
1763,1764c1756,1757
<      * gpptr(dd)->new to TRUE by par(new=TRUE)
<      * If gpptr(dd)->new is FALSE, we leave it that way (further GNewPlot's
---
>      * gpptr(dd)->newplot to TRUE by par(new=TRUE)
>      * If gpptr(dd)->newplot is FALSE, we leave it that way (further GNewPlot's
1766,1767c1759,1760
<      * If gpptr(dd)->new is TRUE, any subsequent drawing will dirty the plot
<      * and reset gpptr(dd)->new to FALSE
---
>      * If gpptr(dd)->newplot is TRUE, any subsequent drawing will dirty the plot
>      * and reset gpptr(dd)->newplot to FALSE
1778c1771
<     if (!gpptr(dd)->new) {
---
>     if (!gpptr(dd)->newplot) {
1843c1836
< 	G_ERR_MSG(_("outer margins too large (figure region too small)"));
---
> 	G_ERR_MSG(_("outer margins are too large (figure region is too small)"));
1845c1838
< 	G_ERR_MSG(_("figure region too large"));
---
> 	G_ERR_MSG(_("figure region is too large"));
1847c1840
< 	G_ERR_MSG(_("figure margins too large"));
---
> 	G_ERR_MSG(_("figure margins are too large"));
1849c1842
< 	G_ERR_MSG(_("plot region too large"));
---
> 	G_ERR_MSG(_("plot region is too large"));
2194c2187
<     dp->new = FALSE;
---
>     dp->newplot = FALSE;
2606c2599
<     gpptr(dd)->new = dpptr(dd)->new = FALSE;
---
>     gpptr(dd)->newplot = dpptr(dd)->newplot = FALSE;
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/graphics/src/graphics.h R/src/library/graphics/src/graphics.h
20,26d19
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #undef _
< #define _(String) dgettext ("graphics", String)
< #else
< #define _(String) (String)
< #endif
Only in R/src/library/graphics/src: localization.h
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/graphics/src/par-common.c R/src/library/graphics/src/par-common.c
43c43
< 	R_DEV__(new) = FALSE;
---
> 	R_DEV__(newplot) = FALSE;
243c243
< 	    warning("`mgp[1:3]' are of differing sign");
---
> 	    warning(_("'mgp[1:3]' are of differing sign"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/graphics/src/par.c R/src/library/graphics/src/par.c
45a46
> #include "localization.h"
274c275
< 	R_DEV__(new) = FALSE;
---
> 	R_DEV__(newplot) = FALSE;
442c443
< 	    error(_("parameter \"i\" in \"mfg\" is out of range"));
---
> 	    error(_("parameter \"%s\" in \"mfg\" parameter is out of range"), "i");
444c445
< 	    error(_("parameter \"j\" in \"mfg\" is out of range"));
---
> 	    error(_("parameter \"%s\" in \"mfg\" parameter is out of range"), "j");
449c450
< 		warning(_("value of 'nr' in \"mfg\" is wrong and will be ignored"));
---
> 		warning(_("value of '%s' in \"mfg\" parameter is wrong and will be ignored"), "nr");
451c452
< 		warning(_("value of 'nc' in \"mfg\" is wrong and will be ignored"));
---
> 		warning(_("value of '%s' in \"mfg\" parameter is wrong and will be ignored"), "nc");
466c467
< 	R_DEV_2(new) = TRUE;
---
> 	R_DEV_2(newplot) = TRUE;
477,478c478,479
< 	    if(ix != 0) warning(_("calling par(new=TRUE) with no plot"));
< 	} else R_DEV__(new) = (ix != 0);
---
> 	    if(ix != 0) warning(_("calling 'par(new=TRUE)' with no plot"));
> 	} else R_DEV__(newplot) = (ix != 0);
896c897
< 	LOGICAL(value)[0] = dpptr(dd)->new;
---
> 	LOGICAL(value)[0] = dpptr(dd)->newplot;
925c926
<         if (dpptr(dd)->new) {
---
>         if (dpptr(dd)->newplot) {
1119c1120
< 	error(_("invalid argument passed to par()"));
---
> 	error(_("invalid argument passed to 'par()'"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/graphics/src/plot.c R/src/library/graphics/src/plot.c
26a27
> #include "localization.h"
37c38
< 	error("invalid type passed to graphics function");
---
> 	error(_("invalid type passed to graphics function"));
217c218
<     else error(_("invalid font specification"));
---
>     else error(_("invalid '%s' specification"), "font");
518c519
< 	    error(_("NAs not allowed in 'xlim'"));
---
> 	    error(_("NA values are not allowed in '%s'"), "xlim");
524c525
< 	    error(_("need finite 'xlim' values"));
---
> 	    error(_("'%s' needs finite values"), "xlim");
530c531
< 	    error(_("NAs not allowed in 'ylim'"));
---
> 	    error(_("NA values are not allowed in '%s'"), "ylim");
536c537
< 	    error(_("need finite 'ylim' values"));
---
> 	    error(_("'%s' needs finite values"), "ylim");
866c867
< 	error(_("'hadj' must be of length one"));
---
> 	error(_("'%s' argument must be of length 1"), "hadj");
942c943
< 		error(_("'labels' is supplied and not 'at'"));
---
> 		error(_("'labels' argument is supplied and not 'at' argument"));
946,947c947
< 	    error(_("'at' and 'labels' lengths differ, %d != %d"),
< 		      length(at), length(lab));
---
> 	    error(_("'at' and 'labels' argument lengths differ, %d != %d"), length(at), length(lab));
1316c1316
< 	error(_("'x' and 'y' lengths differ in %s()"), subname);\
---
> 	error(_("'x' and 'y' argument lengths differ in '%s()'"), subname);\
1790c1790
< 	error("unable to allocate memory (in GPath)");
---
> 	error("unable to allocate memory (in 'GPath()')");
1796c1796
<             error("invalid 'x' or 'y' (in 'GPath')");
---
>             error("invalid 'x' or 'y' arguments (in 'GPath()')");
2436,2437c2436,2437
<     gpnewsave = gpptr(dd)->new;
<     dpnewsave = dpptr(dd)->new;
---
>     gpnewsave = gpptr(dd)->newplot;
>     dpnewsave = dpptr(dd)->newplot;
2448,2449c2448,2449
< 	gpnewsave = gpptr(dd)->new;
< 	dpnewsave = dpptr(dd)->new;
---
> 	gpnewsave = gpptr(dd)->newplot;
> 	dpnewsave = dpptr(dd)->newplot;
2499,2500c2499,2500
< 	gpptr(dd)->new = gpnewsave;
< 	dpptr(dd)->new = dpnewsave;
---
> 	gpptr(dd)->newplot = gpnewsave;
> 	dpptr(dd)->newplot = dpnewsave;
2781c2781
< 		error(_("invalid a=, b= specification"));
---
> 		error(_("invalid '%s' specification"), "a=, b=");
2790c2790
< 	    error(_("'a' and 'b' must be finite"));
---
> 	    error(_("'a' and 'b' arguments must be finite"));
2997c2997
< 	    error(_("invalid number of points in %s"), "locator()");
---
> 	    error(_("invalid number of points in '%s' function"), "locator()");
3137c3137
< 	    error(_("invalid number of points in %s"), "identify()");
---
> 	    error(_("invalid number of points in '%s' function"), "identify()");
3153c3153
< 	    warning(_("more 'labels' than points"));
---
> 	    warning(_("more labels than points"));
3208c3208
< 		    REprintf(_("warning: nearest point already identified\n"));
---
> 		    REprintf(_("warning: nearest point is already identified\n"));
3970c3970
< 	error("unable to allocate memory (in xspline)");
---
> 	error(_("unable to allocate memory (in 'xspline()')"));
4022c4022
<     if(!R_FINITE(x1)) error("invalid '%s' argument", "x1");
---
>     if(!R_FINITE(x1)) error(_("invalid '%s' argument"), "x1");
4025c4025
<     if(!R_FINITE(x2)) error("invalid '%s' argument", "x2");
---
>     if(!R_FINITE(x2)) error(_("invalid '%s' argument"), "x2");
4028c4028
<     if(!R_FINITE(y1)) error("invalid '%s' argument", "y1");
---
>     if(!R_FINITE(y1)) error(_("invalid '%s' argument"), "y1");
4031c4031
<     if(!R_FINITE(y2)) error("invalid '%s' argument", "y2");
---
>     if(!R_FINITE(y2)) error(_("invalid '%s' argument"), "y2");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/graphics/src/plot3d.c R/src/library/graphics/src/plot3d.c
25a26
> #include "localization.h"
37c38
< 	error("invalid type passed to graphics function");
---
> 	error(_("invalid type passed to graphics function"));
1137c1138
< 	error(_("'xlab' must be a character vector of length 1"));
---
> 	error(_("'%s' argument must be a character vector of length 1"), "xlab");
1139c1140
< 	error(_("'ylab' must be a character vector of length 1"));
---
> 	error(_("'%s' argument must be a character vector of length 1"), "ylab");
1141c1142
< 	error(_("'zlab' must be a character vector of length 1"));
---
> 	error(_("'%s' argument must be a character vector of length 1"), "zlab");
1939c1940
< 	    error(_("missing 'x' values"));
---
> 	    error(_("missing '%s' values"), "x");
1941c1942
< 	    error(_("increasing 'x' values expected"));
---
> 	    error(_("increasing '%s' values expected"), "x");
1946c1947
< 	    error(_("missing 'y' values"));
---
> 	    error(_("missing '%s' values"), "y");
1948c1949
< 	    error(_("increasing 'y' values expected"));
---
> 	    error(_("increasing '%s' values expected"), "y");
1965c1966
< 	    warning(_("all z values are equal"));
---
> 	    warning(_("all 'z' values are equal"));
1967c1968
< 	    warning(_("all z values are NA"));
---
> 	    warning(_("all 'z' values are NA"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/graphics/src/stem.c R/src/library/graphics/src/stem.c
35,40c35
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("graphics", String)
< #else
< #define _(String) (String)
< #endif
---
> #include "localization.h"
110d104
<     Rprintf("  The decimal point is ");
112c106,110
< 	Rprintf("at the |\n\n");
---
> 	Rprintf(_("  The decimal point is at the |\n\n"));
>     else
> 	{
> 	if(pdigits > 0)
> 		Rprintf(n_("  The decimal point is %d digit to the right of the |\n\n", "  The decimal point is %d digits to the right of the |\n\n", pdigits), pdigits);
114,115c112,113
< 	Rprintf("%d digit(s) to the %s of the |\n\n",abs(pdigits),
< 		(pdigits > 0) ? "right" : "left");
---
> 		Rprintf(n_("  The decimal point is %d digit to the left of the |\n\n", "  The decimal point is %d digits to the left of the |\n\n", -pdigits), -pdigits);
> 	}
152c150
<     if(TYPEOF(x) != REALSXP || TYPEOF(scale) != REALSXP) error("invalid input");
---
>     if(TYPEOF(x) != REALSXP || TYPEOF(scale) != REALSXP) error(_("invalid input"));
194c192
< 		    error("count for a bin exceeds INT_MAX");
---
> 		    error(_("count for a bin exceeds INT_MAX"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grid/R/components.R R/src/library/grid/R/components.R
42c42
<       stop("invalid 'at' location in 'axis'")
---
>       stop(gettextf("invalid '%s' component of argument 'x'", "at"))
48c48
<       stop("invalid to specify axis labels when 'at' is NULL")
---
>       stop(gettextf("invalid to specify axis labels when 'at' component of argument 'x' is NULL", "at"))
53c53
<       stop("'labels' and 'at' locations must have same length")
---
>       stop(gettextf("'%s' and '%s' components of argument 'x' must have same length", "labels", "at"))
171c171
< 	stop("logical 'label' supplied of length 0")
---
> 	stop("'label' argument must be of length > 0")
299c299
< 	stop("logical 'label' supplied of length 0")
---
> 	stop("'label' argument must be of length > 0")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grid/R/curve.R R/src/library/grid/R/curve.R
443c443
<         stop("'x1', 'y1', 'x2', and 'y2' must be units")
---
>         stop(gettextf("'%s', '%s', '%s', and '%s' components of argument 'x' must be objects of class %s", "x1", "y1", "x2", "y2", dQuote("unit")))
448c448
<         stop("'shape' must be between -1 and 1")
---
>         stop(gettextf("'%s' component of argument 'x' must be between -1 and 1", "shape"))
451c451
<         stop("'squareShape' must be between -1 and 1")
---
>         stop(gettextf("'%s' component of argument 'x' must be between -1 and 1", "squareShape"))
454c454
<         stop("'arrow' must be an arrow object or NULL")
---
>         stop(gettextf("'%s' component of argument 'x' must be an object of class %s or NULL", "arror", dQuote("arrow")))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grid/R/edit.R R/src/library/grid/R/edit.R
35c35
<       stop("invalid 'edit' information")
---
>       stop(gettextf("'%s' argument is not an object of class %s", "edit", dQuote("gEdit")))
50c50
<     stop("'gEditList' can only contain 'gEdit' objects")
---
>     stop("'gEditList()' can only contain objects of class \"gEdit\"")
67c67
<         stop("invalid 'edit' information")
---
>         stop(gettextf("'%s' argument is not an object of class %s", "edits", dQuote("gEditList")))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grid/R/frames.R R/src/library/grid/R/frames.R
136c136
<     stop("invalid 'frame'")
---
>     stop(gettextf("'%s' argument is not an object of class %s", "frame", dQuote("frame")))
138c138
<     stop("invalid 'grob'")
---
>     stop(gettextf("'%s' argument is not an object of class %s", "grob", dQuote("grob")))
150c150
<     stop("invalid 'row' and/or 'col' (no such cell in frame layout)")
---
>     stop("invalid 'row' and/or 'col' arguments (no such cell in frame layout)")
327c327
<     stop("invalid 'frame'")
---
>     stop(gettextf("'%s' argument is not an object of class %s", "frame", dQuote("frame")))
329c329
<     stop("invalid 'grob'")
---
>     stop(gettextf("'%s' argument is not an object of class %s", "grob", dQuote("grob")))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grid/R/function.R R/src/library/grid/R/function.R
22c22
<         stop("invalid 'n'")
---
>         stop(gettextf("invalid '%s' component of argument 'x'", "n"))
26c26
<         stop("invalid 'f'")
---
>         stop(gettextf("invalid '%s' component of argument 'x'", "f"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grid/R/gpar.R R/src/library/grid/R/gpar.R
42,43c42
<       stop(gettextf("'gpar' element '%s' must not be length 0", gparname),
<            domain = NA)
---
>       stop(gettextf("'gpar' element '%s' must not be length 0", gparname), domain = "R-grid")
106c105
<       stop("invalid 'linemitre' value")
---
>       stop(gettextf("invalid '%s' value", "linemitre"))
111c110
<       stop("invalid 'alpha' value")
---
>       stop(gettextf("invalid '%s' value", "alpha"))
185c184
<     stop("argument must be a 'gpar' object")
---
>     stop(gettextf("'%s' argument is not an object of class %s", "gp", dQuote("gpar")))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grid/R/grid.R R/src/library/grid/R/grid.R
98c98
<     stop("must specify at least one viewport")
---
>     stop("'pushViewport()' must specify at least one viewport")
152c152
<             stop("Down viewport failed to record on display list")
---
>             stop("down viewport failed to record on display list")
158c158
<         warning("Down viewport incorrectly recorded on display list")
---
>         warning("down viewport incorrectly recorded on display list")
274c274
<         stop("Invalid number of generations")
---
>         stop("invalid number of generations")
279c279
<             stop("Invalid number of generations")
---
>             stop("invalid number of generations")
530c530
<         stop("'expr' must return a grob or gList")
---
>         stop(gettextf("'%s' component of argument 'x' must return an object of class %s or class %s", "expr", dQuote("grob"), dQuote("gList")))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grid/R/grob.R R/src/library/grid/R/grob.R
44c44
<             stop("invalid 'grob' argument")
---
>             stop(gettextf("'%s' argument is not an object of class %s", "grob", dQuote("grob")))
61c61
<       stop("invalid 'vp' slot")
---
>       stop(gettextf("invalid '%s' argument", "vp"))
113c113
<     stop("invalid 'grob' class")
---
>     stop(gettextf("invalid %s class", dQuote("grob")))
141,142c141
<       stop(ngettext(sum(bad), "invalid grob name", "invalid grob names"),
<            domain = NA)
---
>       stop(ngettext(sum(bad), "invalid grob name", "invalid grob names", domain = "R-grid"), domain = NA)
182c181
<         stop("unable to coerce to \"gList\"")
---
>         stop("unable to coerce 'x' argument to an object of class \"gList\"")
210c209
<     stop("invalid element to add to \"gList\"")
---
>     stop("invalid element to add to an object of class \"gList\"")
255c254
<     stop("can only set 'children' for a \"gTree\"")
---
>     stop(gettextf("'%s' argument is not an object of class %s", "x", dQuote("gTree")))
258c257
<     stop("'children' must be a \"gList\"")
---
>     stop(gettextf("'%s' argument is not an object of class %s", "children", dQuote("gList")))
279c278
<     stop("it is only valid to get 'children' from a \"gTree\"")
---
>     stop(gettextf("'%s' argument is not an object of class %s", "gTree", dQuote("gTree")))
306c305
<     stop("invalid \"gTree\" class")
---
>     stop(gettextf("invalid %s class", dQuote("gTree")))
352c351
<     stop("'allDevices' not yet implemented")
---
>     stop("'allDevices' argument is not yet implemented")
356c355
<     stop("invalid 'gPath'")
---
>     stop(gettextf("'%s' argument is not an object of class %s", "gPath", dQuote("gPath")))
358c357
<     stop("invalid 'grep' value")
---
>     stop(gettextf("invalid '%s' value", "grep"))
373c372
<     stop("it is only valid to get a child from a \"gTree\"")
---
>     stop(gettextf("'%s' argument is not an object of class %s", "gTree", dQuote("gTree")))
377c376
<     stop("invalid 'gPath'")
---
>     stop(gettextf("'%s' argument is not an object of class %s", "gPath", dQuote("gPath")))
382c381
<       stop("invalid 'grep' value")
---
>       stop(gettextf("invalid '%s' value", "grep"))
395c394
<     stop("invalid 'gPath'")
---
>     stop(gettextf("'%s' argument is not an object of class %s", "gPath", dQuote("gPath")))
397c396
<     stop("invalid 'grep' value")
---
>     stop(gettextf("invalid '%s' value", "grep"))
420c419
<     stop("it is only valid to set a child of a \"gTree\"")
---
>     stop(gettextf("'%s' argument is not an object of class %s", "gTree", dQuote("gTree")))
422c421
<     stop("it is only valid to set a 'grob' as child of a \"gTree\"")
---
>     stop(gettextf("'%s' argument is not an object of class %s", "newGrob", dQuote("grob")))
426c425
<     stop("invalid 'gPath'")
---
>     stop(gettextf("'%s' argument is not an object of class %s", "gPath", dQuote("gPath")))
428c427
<     stop("invalid 'grep' value")
---
>     stop(gettextf("invalid '%s' value", "grep"))
437,438c436
<           stop(gettextf("New 'grob' name (%s) does not match 'gPath' (%s)",
<                         newGrob$name, gPath), domain = NA)
---
>           stop(gettextf("New 'grob' name (%s) does not match 'gPath' (%s)", newGrob$name, gPath), domain = "R-grid")
456c454
<     stop("'allDevices' not yet implemented")
---
>     stop("'allDevices' argument is not yet implemented")
460c458
<     stop("invalid 'gPath'")
---
>     stop(gettextf("'%s' argument is not an object of class %s", "gPath", dQuote("gPath")))
462c460
<     stop("invalid 'grep' value")
---
>     stop(gettextf("invalid '%s' value", "grep"))
471c469
<         stop("it is only valid to add a 'grob' to a \"gTree\"")
---
>         stop(gettextf("'%s' argument is not an object of class %s", "child", dQuote("grob")))
479c477
<             stop("it is only valid to add a child to a \"gTree\"")
---
>             stop(gettextf("'%s' argument is not an object of class %s", "gTree", dQuote("gTree")))
481c479
<             stop("invalid 'grep' value")
---
>             stop(gettextf("invalid '%s' value", "grep"))
487,489c485
<                 warning(gettextf("'gPath' (%s) not found",
<                                  as.character(gPath)),
<                         domain = NA)
---
>                 warning(gettextf("'gPath' (%s) was not found", as.character(gPath)), domain = "R-grid")
502c498
<     stop("'allDevices' not yet implemented")
---
>     stop("'allDevices' argument is not yet implemented")
506c502
<     stop("invalid 'gPath'")
---
>     stop(gettextf("'%s' argument is not an object of class %s", "gPath", dQuote("gPath")))
508c504
<     stop("invalid 'grep' value")
---
>     stop(gettextf("invalid '%s' value", "grep"))
532c528
<         stop("it is only valid to remove a child from a \"gTree\"")
---
>         stop(gettextf("'%s' argument is not an object of class %s", "gTree", dQuote("gTree")))
536c532
<         stop("invalid 'gPath'")
---
>         stop(gettextf("'%s' argument is not an object of class %s", "gPath", dQuote("gPath")))
538c534
<         stop("invalid 'grep' value")
---
>         stop(gettextf("invalid '%s' value", "grep"))
554,555c550
<             warning(gettextf("'gPath' (%s) not found", as.character(gPath)),
<                     domain = NA)
---
>             warning(gettextf("'gPath' (%s) was not found", as.character(gPath)), domain = "R-grid")
567c562
<     stop("'allDevices' not yet implemented")
---
>     stop("'allDevices' argument is not yet implemented")
571c566
<     stop("invalid 'gPath'")
---
>     stop(gettextf("'%s' argument is not an object of class %s", "gPath", dQuote("gPath")))
573c568
<     stop("invalid 'grep' value")
---
>     stop(gettextf("invalid '%s' value", "grep"))
596c591
<             stop("it is only valid to edit a child of a \"gTree\"")
---
>             stop(gettextf("'%s' argument is not an object of class %s", "grob", dQuote("gTree")))
598c593
<             stop("invalid 'grep' value")
---
>             stop(gettextf("invalid '%s' value", "grep"))
604,606c599
<                 warning(gettextf("'gPath' (%s) not found",
<                                  as.character(gPath)),
<                         domain = NA)
---
>                 warning(gettextf("'gPath' (%s) was not found", as.character(gPath)), domain = "R-grid")
740c733
<     stop("invalid 'result'")
---
>     stop(gettextf("invalid '%s' argument", "result"))
1051c1044
<         warning(gettextf("slot '%s' not found", i), domain = NA)
---
>         warning(gettextf("slot '%s' was not found", i), domain = "R-grid")
1198c1191
<     stop(gettextf("'gPath' (%s) not found", as.character(gPath)), domain = NA)
---
>     stop(gettextf("'gPath' (%s) was not found", as.character(gPath)), domain = "R-grid")
1210c1203
<     stop("it is only valid to add a child to a \"gTree\"")
---
>     stop(gettextf("'%s' argument is not an object of class %s", "gTree", dQuote("gTree")))
1362c1355
<     stop(gettextf("'gPath' (%s) not found", gPath), domain = NA)
---
>     stop(gettextf("'gPath' (%s) was not found", gPath), domain = "R-grid")
1373c1366
<     stop("it is only valid to remove a child from a \"gTree\"")
---
>     stop(gettextf("'%s' argument is not an object of class %s", "gTree", dQuote("gTree")))
1538,1540c1531
<     stop(gettextf("gPath (%s) not found",
<                   paste(gPath, name, sep=.grid.pathSep)),
<                   domain = NA)
---
>     stop(gettextf("'gPath' (%s) was not found", paste(gPath, name, sep=.grid.pathSep)), domain = "R-grid")
1634c1625
<         stop(gettextf("gPath (%s) not found", name), domain = NA)
---
>         stop(gettextf("'gPath' (%s) was not found", name), domain = "R-grid")
1666c1657
<     stop(gettextf("grob '%s' not found", name), domain = NA)
---
>     stop(gettextf("'grob' (%s) was not found", name), domain = "R-grid")
1679c1670
<     stop(gettextf("grob '%s' not found", name), domain = NA)
---
>     stop(gettextf("'grob' (%s) was not found", name), domain = "R-grid")
1964,1965c1955
<     warning("this function is redundant and will disappear in future versions",
<             domain = NA)
---
>     warning("this function is redundant and will disappear in future versions", domain = "R-grid")
2232c2222
<         stop("can only reorder 'children' for a \"gTree\"")
---
>         stop(gettextf("'%s' argument is not an object of class %s", "x", dQuote("gTree")))
2243c2233
<             stop("Invalid 'order'")
---
>             stop(gettextf("invalid '%s' value", "order"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grid/R/highlevel.R R/src/library/grid/R/highlevel.R
102c102
<     for (i in 1L:nplots) {
---
>     for (i in seq_len(nplots)) {
138c138
<     stop("'l' must be a layout")
---
>     stop("'l' argument must be a layout")
148,149c148,149
<   for (i in 1L:l$nrow)
<     for (j in 1L:l$ncol) {
---
>   for (i in seq_len(l$nrow))
>     for (j in seq_len(l$ncol)) {
272c272
<     stop("'pch' and 'labels' not the same length")
---
>     stop("'pch' and 'labels' arguments are not of the same length")
282c282
<   for (i in 1L:nkeys) {
---
>   for (i in seq_len(nkeys)) {
319c319
<     if (length(hgap) != 1) stop("'hgap' must be single unit")
---
>     if (length(hgap) != 1) stop("'hgap' argument must be single unit")
322c322
<     if (length(vgap) != 1) stop("'vgap' must be single unit")
---
>     if (length(vgap) != 1) stop("'vgap' argument must be single unit")
329,330c329,330
<     if(nrow < 1) stop("'nrow' must be >= 1")
<     if(ncol < 1) stop("'ncol' must be >= 1")
---
>     if(nrow < 1) stop("'nrow' argument must be >= 1")
>     if(ncol < 1) stop("'ncol' argument must be >= 1")
406c406
<   pch <- 1L:3
---
>   pch <- seq_len(3)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grid/R/ls.R R/src/library/grid/R/ls.R
64c64
<         stop("invalid 'print' argument")
---
>         stop(gettextf("invalid '%s' argument", "print"))
695c695
<         stop("invalid listing")
---
>         stop(gettextf("'%s' argument is not an object of class %s", "x", dQuote("flatGridListing")))
723c723
<         stop("invalid 'listing'")
---
>         stop(gettextf("'%s' argument is not an object of class %s", "x", dQuote("flatGridListing")))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grid/R/origin.R R/src/library/grid/R/origin.R
24c24
<     stop("invalid 'origin'")
---
>     stop(gettextf("invalid '%s' value", "origin"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grid/R/primitives.R R/src/library/grid/R/primitives.R
26c26
<         stop("'length' must be a 'unit' object")
---
>         stop(gettextf("'%s' argument is not an object of class %s", "length", dQuote("unit")))
74c74
<     stop("'x' and 'y' must be units")
---
>     stop(gettextf("'%s' and '%s' components of argument 'x' must be units", "x", "y"))
77c77
<     stop("'x' and 'y' must have length 1")
---
>     stop(gettextf("'%s' and '%s' components of argument 'x' must be of length 1", "x", "y"))
109c109
<     stop("'x' and 'y' must be units")
---
>     stop(gettextf("'%s' and '%s' components of argument 'x' must be units", "x", "y"))
112c112
<     stop("'x' and 'y' must have length 1")
---
>     stop(gettextf("'%s' and '%s' components of argument 'x' must be of length 1", "x", "y"))
114c114
<       stop("invalid 'arrow' argument")
---
>       stop(gettextf("invalid '%s' component of argument 'x'", "arrow"))
151c151
<     stop("'x' and 'y' must be units")
---
>     stop(gettextf("'%s' and '%s' components of argument 'x' must be units", "x", "y"))
153c153
<       stop("invalid 'arrow' argument")
---
>       stop(gettextf("invalid '%s' component of argument 'x'", "arrow"))
231c231
<       stop("'x' and 'y' must be units")
---
>       stop(gettextf("'%s' and '%s' components of argument 'x' must be units", "x", "y"))
233c233
<       stop("it is invalid to specify both 'id' and 'id.lengths'")
---
>       stop("it is invalid to specify both 'id' and 'id.lengths' components of argument 'x'")
235c235
<       stop("'x' and 'y' must be same length")
---
>       stop(gettextf("'%s' and '%s' components of argument 'x' must be same length", "x", "y"))
237c237
<       stop("'x' and 'y' and 'id' must all be same length")
---
>       stop(gettextf("'%s' and '%s' and '%s' components of argument 'x' must all be same length", "x", "y", "id"))
241c241
<       stop("'x' and 'y' and 'id.lengths' must specify same overall length")
---
>       stop(gettextf("'%s' and '%s' and '%s' components of argument 'x' must specify same overall length", "x", "y", "id.lengths"))
245c245
<       stop("invalid 'arrow' argument")
---
>       stop(gettextf("invalid '%s' component of argument 'x'", "arrow"))
326c326
<       stop("invalid 'arrow' argument")
---
>       stop(gettextf("invalid '%s' component of argument 'x'", "arrow"))
417c417
<     stop("'x' and 'y' must be units or NULL")
---
>     stop(gettextf("'%s' and '%s' components of argument 'x' must be objects of class %s or NULL", "x", "y", dQuote("unit")))
419c419
<     stop("'length' must be a 'unit' object")
---
>     stop(gettextf("'%s' component of argument 'x' must be an object of class %s", "length", dQuote("unit")))
532c532
<     .Defunct(msg="'arrowsGrob' is defunct; use 'arrow' arguments to line drawing functions")
---
>     .Defunct(msg="'arrowsGrob()' is defunct; use 'arrow' arguments to line drawing functions")
541c541
<     .Defunct(msg="'grid.arrows' is defunct; use 'arrow' arguments to line drawing functions")
---
>     .Defunct(msg="'grid.arrows()' is defunct; use 'arrow' arguments to line drawing functions")
551c551
<     stop("'x' and 'y' must be units")
---
>     stop(gettextf("'%s' and '%s' components of argument 'x' must be units", "x", "y"))
553c553
<     stop("it is invalid to specify both 'id' and 'id.lengths'")
---
>     stop("it is invalid to specify both 'id' and 'id.lengths' components of argument 'x'")
555c555
<     stop("'x' and 'y' must be same length")
---
>     stop(gettextf("'%s' and '%s' components of argument 'x' must be same length", "x", "y"))
557c557
<     stop("'x' and 'y' and 'id' must all be same length")
---
>     stop(gettextf("'%s' and '%s' and '%s' components of argument 'x' must all be same length", "x", "y", "id"))
561c561
<     stop("'x' and 'y' and 'id.lengths' must specify same overall length")
---
>     stop(gettextf("'%s' and '%s' and '%s' components of argument 'x' must specify same overall length", "x", "y", "id.lengths"))
647c647
<         stop("'x' and 'y' must be units")
---
>         stop(gettextf("'%s' and '%s' components of argument 'x' must be units", "x", "y"))
649c649
<         stop("it is invalid to specify both 'id' and 'id.lengths'")
---
>         stop("it is invalid to specify both 'id' and 'id.lengths' components of argument 'x'")
651c651
<         stop("'x' and 'y' must be same length")
---
>         stop(gettextf("'%s' and '%s' components of argument 'x' must be same length", "x", "y"))
653c653
<         stop("'x' and 'y' and 'id' must all be same length")
---
>         stop(gettextf("'%s' and '%s' and '%s' components of argument 'x' must all be same length", "x", "y", "id"))
657c657
<         stop("'x' and 'y' and 'id.lengths' must specify same overall length")
---
>         stop(gettextf("'%s' and '%s' and '%s' components of argument 'x' must specify same overall length", "x", "y", "id.lengths"))
740c740
<     stop("x and y must be units")
---
>     stop(gettextf("'%s' and '%s' components of argument 'x' must be objects of class %s", "x", "y", dQuote("unit")))
742c742
<     stop("it is invalid to specify both 'id' and 'id.lengths'")
---
>     stop("it is invalid to specify both 'id' and 'id.lengths' components of argument 'x'")
746c746
<     stop("'x' and 'y' must be same length")
---
>     stop(gettextf("'%s' and '%s' components of argument 'x' must have same length", "x", "y"))
748c748
<     stop("'x' and 'y' and 'id' must all be same length")
---
>     stop(gettextf("'%s' and '%s' and '%s' components of argument 'x' must all be same length", "x", "y", "id"))
752c752
<     stop("'x' and 'y' and 'id.lengths' must specify same overall length")
---
>     stop(gettextf("'%s' and '%s' and '%s' components of argument 'x' must specify same overall length", "x", "y", "id.lengths"))
756c756
<       stop("invalid 'arrow' argument")
---
>       stop(gettextf("invalid '%s' component of argument 'x'", "arrow"))
758c758
<     stop("'shape' must be between -1 and 1")
---
>     stop(gettextf("'%s' component of argument 'x' must be between -1 and 1", "shape"))
916c916
<         stop("x and y must be units")
---
>         stop(gettextf("'%s' and '%s' components of argument 'x' must be objects of class %s", "x", "y", dQuote("unit")))
918c918
<         stop("it is invalid to specify both 'id' and 'id.lengths'")
---
>         stop("it is invalid to specify both 'id' and 'id.lengths' components of argument 'x'")
922c922
<         stop("'x' and 'y' must be same length")
---
>         stop(gettextf("'%s' and '%s' components of argument 'x' must be same length", "x", "y"))
924c924
<         stop("'x' and 'y' and 'id' must all be same length")
---
>         stop(gettextf("'%s' and '%s' and '%s' components of argument 'x' must all be same length", "x", "y", "id"))
928c928
<         stop("'x' and 'y' and 'id.lengths' must specify same overall length")
---
>         stop(gettextf("'%s' and '%s' and '%s' components of argument 'x' must specify same overall length", "x", "y", "id.lengths"))
937c937
<             id <- rep(1L:n, x$id.lengths)
---
>             id <- rep(seq_len(n), x$id.lengths)
946c946
<         stop("invalid 'arrow' argument")
---
>         stop(gettextf("invalid '%s' component of argument 'x'", "arrow"))
1003c1003
<     stop("'x', 'y', and 'r' must be units")
---
>     stop(gettextf("'%s', '%s' and '%s' components must be units", "x", "y", "r"))
1074c1074
<     stop("'x', 'y', 'width', and 'height' must be units")
---
>     stop(gettextf("'%s', '%s', '%s', and '%s' components of argument 'x' must be units", "x", "y", "width", "height"))
1176c1176
<         stop("'x', 'y', 'width', and 'height' must be units")
---
>         stop(gettextf("'%s', '%s', '%s', and '%s' components of argument 'x' must be units", "x", "y", "width", "height"))
1350c1350
<     stop("'x' and 'y' must be units")
---
>     stop(gettextf("'%s' and '%s' components of argument 'x' must be units", "x", "y"))
1353c1353
<     stop("invalid 'rot' value")
---
>     stop(gettextf("invalid '%s' component of argument 'x'", "rot"))
1471c1471
<     stop("zero-length 'pch'")
---
>     stop("zero-length 'pch' argument")
1483c1483
<     stop("'x', 'y' and 'size' must be units")
---
>     stop(gettextf("'%s', '%s' and '%s' components must be units", "x", "y", "size"))
1485c1485
<     stop("'x' and 'y' must be 'unit' objects and have the same length")
---
>     stop(gettextf("'%s' and '%s' components of argument 'x' must be objects of class %s and have the same length", "x", "y", dQuote("unit")))
1562c1562
<     stop("'x', 'y', 'width', and 'height' must be units")
---
>     stop(gettextf("'%s', '%s', '%s', and '%s' components of argument 'x' must be units", "x", "y", "width", "height"))
1565c1565
<     stop("'x', 'y', 'width', and 'height' must all be units of length 1")
---
>     stop(gettextf("'%s', '%s', '%s', and '%s' components of argument 'x' must all be units of length 1", "x", "y", "width", "height"))
1610c1610
<     stop("'x' and 'y' must be units")
---
>     stop(gettextf("'%s' and '%s' components of argument 'x' must be units", "x", "y"))
1612c1612
<     stop("'x' and 'y' must all be units of length 1")
---
>     stop(gettextf("'%s' and '%s' components of argument 'x' must all be units of length 1", "x", "y"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grid/R/roundRect.R R/src/library/grid/R/roundRect.R
47c47
<         stop("'x', 'y', 'width', and 'height' must be units")
---
>         stop(gettextf("'%s', '%s', '%s', and '%s' components of argument 'x' must be objects of class %s", "x", "y", "width", "height", dQuote("unit")))
49c49
<         stop("'r' must be a 'unit' object")
---
>         stop(gettextf("'%s' component of argument 'x' must be an object of class %s", "r", dQuote("unit")))
54c54
<         stop("'x', 'y', 'width', and 'height' must have length 1")
---
>         stop(gettextf("'%s', '%s', '%s', and '%s' components of argument 'x' must have length 1", "x", "y", "width", "height"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grid/R/unit.R R/src/library/grid/R/unit.R
32c32
<         stop("'x' and 'units' must have length > 0")
---
>         stop("'x' and 'units' arguments must be of length > 0")
60c60
<     stop("'x' argument must be a unit object")
---
>     stop(gettextf("'%s' argument is not an object of class %s", "x", dQuote("unit")))
228,229c228
<     stop(gettextf("operator '%s' not meaningful for units", .Generic),
<          domain = NA)
---
>     stop(gettextf("operator '%s' not meaningful for units", .Generic), domain = "R-grid")
266,267c265
<     stop(gettextf("'Summary' function '%s' not meaningful for units",
<                   .Generic), domain = NA)
---
>     stop(gettextf("'Summary' function '%s' not meaningful for units", .Generic), domain = "R-grid")
483c481
<     cat("Class 'unit.arithmetic' [1:", length(object), "] ", sep="")
---
>     cat(gettextf("Class 'unit.arithmetic' [1:%d] ", length(object), domain = "R-grid"))
543c541
<         stop("invalid 'unit' object")
---
>         stop(gettextf("invalid '%s' argument", "x"))
553c551
<   warning("'unit.rep' has been deprecated in favour of a unit method for the generic rep function", domain = NA)
---
>   warning("'unit.rep()' has been deprecated in favour of a unit method for the generic 'rep()' function", domain = "R-grid")
581c579
<    warning("'unit.length' has been deprecated in favour of a unit method for the generic length function", domain = NA)
---
>    warning("'unit.length()' has been deprecated in favour of a unit method for the generic 'length()' function", domain = "R-grid")
645c643
<                stop("invalid 'theta'"))
---
>                stop(gettextf("invalid '%s' value", "theta")))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grid/R/viewport.R R/src/library/grid/R/viewport.R
40c40
<     stop("'x', 'y', 'width', and 'height' must all be units of length 1")
---
>     stop(gettextf("'%s', '%s', '%s' and '%s' arguments must all be units of length 1", "x", "y", "width", "height"))
42c42
<     stop("invalid 'gp' value")
---
>     stop(gettextf("invalid '%s' value", "gp"))
48c48
<                    stop("invalid 'clip' value"))
---
>                    stop(gettextf("invalid '%s' value", "clip")))
54c54
<     stop("invalid 'xscale' in viewport")
---
>     stop(gettextf("invalid '%s' argument in viewport", "xscale"))
57c57
<     stop("invalid 'yscale' in viewport")
---
>     stop(gettextf("invalid '%s' argument in viewport", "yscale"))
60c60
<     stop("invalid 'angle' in viewport")
---
>     stop(gettextf("invalid '%s' argument in viewport", "angle"))
62c62
<     stop("invalid 'layout' in viewport")
---
>     stop(gettextf("invalid '%s' argument in viewport", "layout"))
66c66
<       stop("invalid 'layout.pos.row' in viewport")
---
>       stop(gettextf("invalid '%s' argument in viewport", "layout.pos.row"))
71c71
<       stop("invalid 'layout.pos.col' in viewport")
---
>       stop(gettextf("invalid '%s' argument in viewport", "layout.pos.col"))
289c289
<     stop("'parent' must be a viewport and 'children' must be a 'vpList' in 'vpTree'")
---
>     stop("'parent' argument must be a viewport and 'children' argument must be a 'vpList' in 'vpTree'")
326c326
<                     "invalid viewport names"),
---
>                     "invalid viewport names", domain = "R-grid"),
403c403
<             stop("must specify at least one of 'x' or 'xscale'")
---
>             stop(gettextf("at least one of '%s' or '%s' arguments must be specified", "x", "xscale"))
408c408
<             stop("must specify at least one of 'y' or 'yscale'")
---
>             stop(gettextf("at least one of '%s' or '%s' arguments must be specified", "y", "yscale"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grid/src/grid.c R/src/library/grid/src/grid.c
23a24
> #include "localization.h"
517c518
<         snprintf(msg, 1024, "Viewport '%s' was not found", 
---
>         snprintf(msg, 1024, _("Viewport '%s' was not found"), 
661c662
<         snprintf(msg, 1024, "Viewport '%s' was not found", 
---
>         snprintf(msg, 1024, _("Viewport '%s' was not found"), 
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grid/src/grid.h R/src/library/grid/src/grid.h
29,34d28
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("grid", String)
< #else
< #define _(String) (String)
< #endif
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grid/src/layout.c R/src/library/grid/src/layout.c
21a22
> #include "localization.h"
Only in R/src/library/grid/src: localization.h
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grid/src/matrix.c R/src/library/grid/src/matrix.c
21a22
> #include "localization.h"
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grid/src/state.c R/src/library/grid/src/state.c
21a22
> #include "localization.h"
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grid/src/unit.c R/src/library/grid/src/unit.c
21a22
> #include "localization.h"
85c86
< 	warning("unit attribute 'data' is of incorrect type");
---
> 	warning(_("unit attribute 'data' is of incorrect type"));
1702c1703
<             error(_("Viewport has zero dimension(s)"));
---
>             error(_("Viewport has zero dimensions"));
1733c1734
<             error(_("Viewport has zero dimension(s)"));
---
>             error(_("Viewport has zero dimensions"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grid/src/util.c R/src/library/grid/src/util.c
21a22
> #include "localization.h"
272c273
< 	error("grid grob object is empty");
---
> 	error(_("grid grob object is empty"));
284c285
< 	error("grid grob object is empty");
---
> 	error(_("grid grob object is empty"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/grid/src/viewport.c R/src/library/grid/src/viewport.c
21a22
> #include "localization.h"
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/methods/R/BasicClasses.R R/src/library/methods/R/BasicClasses.R
159c159
<             warning(gettextf("OOPS: something wrong with line %d in '.OldClassesPrototypes'", i), domain = NA)
---
>             warning(gettextf("OOPS: something wrong with line %d in '.OldClassesPrototypes'", i), domain = "R-methods")
163,164c163
<     setMethod("slotsFromS3", "oldClass", function(object) getClass("oldClass")@slots,
<               where = envir)
---
>     setMethod("slotsFromS3", "oldClass", function(object) getClass("oldClass")@slots, where = envir)
166,167c165
<     setClass("ts", contains = "structure", representation(tsp = "numeric"),
<              prototype = prototype(NA, tsp = rep(1,3)), where = envir)
---
>     setClass("ts", contains = "structure", representation(tsp = "numeric"), prototype = prototype(NA, tsp = rep(1,3)), where = envir)
207c205
< 		     return("factor levels must be \"character\"")
---
> 		     return(gettext("factor levels must be \"character\""))
209c207
< 		     return(sprintf("duplicated level [%d] in factor", d))
---
> 		     return(gettextf("duplicated level [%d] in factor", d))
226c224
<         cat("Object of class \"", cl, "\"\n", sep = "")
---
>         cat(gettextf("An object of class %s", dQuote(cl), domain = "R-methods"), "\n", sep = "")
232c230
<             cat('Slot "', what, '":\n', sep = "")
---
>             cat(gettextf("Slot %s:", dQuote(what), domain = "R-methods"), "\n", sep = "")
264c262
<                   stop(gettextf("unnamed argument to initialize() for S3 class must have a class definition; %s does not",
---
>                   stop(gettextf("unnamed argument passed to 'initialize()' for S3 class must have a class definition; %s does not",
266c264
<                        domain = NA)
---
>                        domain = "R-methods")
278c276
<                 else stop(gettextf("unnamed argument must extend either the S3 class or the class of the data part; not true of class %s", dQuote(Classi)), domain = NA)
---
>                 else stop(gettextf("unnamed argument must extend either the S3 class or the class of the data part; not true of class %s", dQuote(Classi)), domain = "R-methods")
354c352
<                               domain = NA),
---
>                               domain = "R-methods"),
367,369c365
<                         stop(gettextf("class %s is VIRTUAL; not meaningful to create an S4 object from this class",
<                                       dQuote(cl)),
<                              domain = NA)
---
>                         stop(gettextf("class %s is VIRTUAL; not meaningful to create an S4 object from this class", dQuote(cl)), domain = "R-methods")
377c373
<                                  domain = NA)
---
>                                  domain = "R-methods")
440c436
<                   stop("cannot specify matrix() arguments when specifying '.Data'")
---
>                   stop("cannot specify arguments for 'matrix()' method when specifying '.Data'")
482c478
<                   stop("cannot specify array() arguments when specifying '.Data'")
---
>                   stop("cannot specify arguments for 'array()' method when specifying '.Data'")
598c594
<         cat("An object of class ", dQuote(class(object)), "\n")
---
>         cat(gettextf("An object of class %s", dQuote(class(object)), domain = "R-methods"), "\n", sep = "")
626c622
<                               stop("unnamed argument to new() must be an environment for the new object")
---
>                               stop("unnamed argument passed to 'new()' method must be an environment for the new object")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/methods/R/BasicFunsList.R R/src/library/methods/R/BasicFunsList.R
127c127
< #        stop(gettextf("methods may not be defined for primitive function %s in this version of R", sQuote(f)), domain = NA)
---
> #        stop(gettextf("methods may not be defined for primitive function %s in this version of R", sQuote(f)), domain = "R-methods")
135c135
<              domain = NA)
---
>              domain = "R-methods")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/methods/R/ClassExtensions.R R/src/library/methods/R/ClassExtensions.R
87c87
<           stop(gettextf("S3Part() is only defined for classes set up by setOldCLass(), basic classes or subclasses of these:  not true of class %s", dQuote(class(object))), domain = NA)
---
>           stop(gettextf("'S3Part()' method is only defined for classes set up by 'setOldCLass()' method, basic classes or subclasses of these: not true of class %s", dQuote(class(object))), domain = "R-methods")
98c98
<       stop(gettextf("the 'S3Class' argument must be a superclass of %s:  not true of class %s", dQuote(class(object)), dQuote(S3Class)), domain = NA)
---
>       stop(gettextf("the 'S3Class' argument must be a superclass of %s: not true of class %s", dQuote(class(object)), dQuote(S3Class)), domain = "R-methods")
118c118
<       stop(gettextf("replacement value must extend class %s, got %s", dQuote(needClass), dQuote(S3Class[[1L]])), domain = NA)
---
>       stop(gettextf("replacement value must extend class %s, got %s", dQuote(needClass), dQuote(S3Class[[1L]])), domain = "R-methods")
160c160
<                   to, dQuote(class(from))), domain = NA)
---
>                   to, dQuote(class(from))), domain = "R-methods")
226c226
<                        dQuote(class(coerce))), domain = NA)
---
>                        dQuote(class(coerce))), domain = "R-methods")
268c268
<                                  TO, dQuote(FROM), TO, dQuote(class(value))), domain = NA)
---
>                                  TO, dQuote(FROM), TO, dQuote(class(value))), domain = "R-methods")
302c302
<                              to, dQuote(Class)), domain = NA)
---
>                              to, dQuote(Class)), domain = "R-methods")
317c317
<                       dQuote(class(replace))), domain = NA)
---
>                       dQuote(class(replace))), domain = "R-methods")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/methods/R/ClassUnion.R R/src/library/methods/R/ClassUnion.R
26c26
<                      "Class must be an empty virtual class with NULL prototype"
---
>                      gettext("Class must be an empty virtual class with NULL prototype")
40c40
<             stop(gettextf("the member classes must be defined: not true of %s",
---
>             stop(sprintf(gettext("the member classes must be defined: not true of %s", domain = "R-methods"),
65c65
<         stop(gettextf("unable to create union class:  could not set members %s",
---
>         stop(sprintf(gettext("unable to create union class: could not set members %s", domain = "R-methods"),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/methods/R/Methods.R R/src/library/methods/R/Methods.R
39c39
<                       .isSingleName(name)), domain = NA)
---
>                       .isSingleName(name)), domain = "R-methods")
54c54
<             stop(msg, domain = NA)
---
>             stop(msg, domain = "R-methods")
111c111
<                           name), domain = NA)
---
>                           name), domain = "R-methods")
129c129
<         stop(gettextf("must supply a function skeleton for %s, explicitly or via an existing function", sQuote(name)), domain = NA)
---
>         stop(gettextf("must supply a function skeleton for %s, explicitly or via an existing function", sQuote(name)), domain = "R-methods")
170,171c170,171
<                 thisPName <- if(identical(thisPackage, ".GlobalEnv"))
<                     "the global environment" else paste("package", sQuote(thisPackage))
---
> #                thisPName <- if(identical(thisPackage, ".GlobalEnv"))
> #                    gettext("the global environment") else gettextf("package %s", sQuote(thisPackage))
174,177c174,179
<                     message(gettextf(
<                        "Creating a generic function for %s from %s in %s\n    (from the saved implicit definition)",
<                                      sQuote(name), sQuote(package),
<                                      thisPName), domain = NA)
---
> 		  if(identical(thisPackage, ".GlobalEnv"))
>                     message(gettextf("Creating a generic function for %s from %s in the global environment (from the saved implicit definition)",
>                                      sQuote(name), sQuote(package), domain = "R-methods"), domain = NA)
> 		  else 
>                     message(gettextf("Creating a generic function for %s from %s in package %s (from the saved implicit definition)",
>                                      sQuote(name), sQuote(package), sQuote(thisPackage), domain = "R-methods"), domain = NA)
181,184c183,186
<                     message(gettextf(
<                          "Creating a new generic function for %s in %s",
<                                      sQuote(name), thisPName),
<                         domain = NA)
---
> 		  if(identical(thisPackage, ".GlobalEnv"))
>                     message(gettextf("Creating a new generic function for %s in the global environment", sQuote(name)), domain = "R-methods")
> 		  else
>                     message(gettextf("Creating a new generic function for %s in package %s", sQuote(name), sQuote(thisPackage)), domain = "R-methods")
189,193c191,196
<                 warning(gettextf(
< 			"no generic version of %s on package %s is allowed;\n   a new generic will be assigned for %s",
<                                  sQuote(name), sQuote(package),
<                                  thisPName),
<                         domain = NA)
---
> 	      if(identical(thisPackage, ".GlobalEnv"))
>                 warning(gettextf("no generic version of %s on package %s is allowed; a new generic will be assigned for the global environment",
>                                  sQuote(name), sQuote(package)), domain = "R-methods")
> 	      else
>                 warning(gettextf("no generic version of %s on package %s is allowed; a new generic will be assigned for package %s",
>                                  sQuote(name), sQuote(package), sQuote(thisPackage)), domain = "R-methods")
291,293c294
<         warning(gettextf("function %s appears to be a generic function, but with generic name %s",
<                          sQuote(f), sQuote(gen)),
<                 domain = NA)
---
>         warning(gettextf("function %s appears to be a generic function, but with generic name %s", sQuote(f), sQuote(gen)), domain = "R-methods")
327c328
<                 domain = NA)
---
>                 domain = "R-methods")
416c417
<              domain = NA)
---
>              domain = "R-methods")
483c484
<              domain = NA)
---
>              domain = "R-methods")
506c507
<                                   getPackageName(where)), domain = NA)
---
>                                   getPackageName(where)), domain = "R-methods")
512c513
<                 message(strwrap(msg), domain = NA)
---
>                 message(strwrap(msg), domain = "R-methods")
523c524
<              domain = NA)
---
>              domain = "R-methods")
529,530c530,531
<         thisPName <- if(identical(thisPackage, ".GlobalEnv"))
<             "the global environment" else paste("package", sQuote(thisPackage))
---
> #        thisPName <- if(identical(thisPackage, ".GlobalEnv"))
> #            gettext("the global environment") else gettextf("package %s", sQuote(thisPackage))
532,533c533,534
<           message(gettextf("Creating a generic function from function %s in %s",
<                            sQuote(f), thisPName), domain = NA)
---
> 	 if(identical(thisPackage, ".GlobalEnv"))
>           message(gettextf("Creating a generic function from function %s in the global environment", sQuote(f)), domain = "R-methods")
535,537c536,544
<           message(gettextf("Creating a generic function for %s from package %s in %s",
<                            sQuote(f), sQuote(fdef@package), thisPName),
<                   domain = NA)
---
>           message(gettextf("Creating a generic function from function %s in package %s", sQuote(f), sQuote(thisPackage)), domain = "R-methods")
>         else {
> 	 if(identical(thisPackage, ".GlobalEnv"))
>           message(gettextf("Creating a generic function for %s from package %s in the global environment",
>                            sQuote(f), sQuote(fdef@package), domain = "R-methods"), domain = NA)
> 	 else
>           message(gettextf("Creating a generic function for %s from package %s in package %s",
>                            sQuote(f), sQuote(fdef@package), sQuote(thisPackage), domain = "R-methods"), domain = NA)
> 	}
543c550
<                           f, getPackageName(where)), domain = NA)
---
>                           f, getPackageName(where)), domain = "R-methods")
551c558
<              domain = NA)
---
>              domain = "R-methods")
567c574
<                                domain = NA, call. = FALSE)
---
>                                domain = "R-methods", call. = FALSE)
598c605
< 			 dQuote(class(definition))), domain = NA)
---
> 			 dQuote(class(definition))), domain = "R-methods")
645c652
<                 domain = NA)
---
>                 domain = "R-methods")
649c656
<         warning(gettextf("no method found for function %s and signature %s",
---
>         warning(sprintf(gettext("no method found for function %s and signature %s", domain = "R-methods"),
665c672
<                 domain = NA)
---
>                 domain = "R-methods")
682c689
<                 domain = NA)
---
>                 domain = "R-methods")
714c721
<                deparse(where)), domain = NA)
---
>                deparse(where)), domain = "R-methods")
731c738
< 	stop(gettextf("no generic function found for '%s'", f), domain = NA)
---
> 	stop(gettextf("no generic function found for %s", sQuote(f)), domain = "R-methods")
744,745c751,752
< 	    stop(gettextf("no method found for function '%s' and signature %s",
< 			  f, paste(signature, collapse = ", ")))
---
> 	    stop(sprintf(gettext("no method found for function '%s' and signature %s", domain = "R-methods"),
> 			  f, paste(signature, collapse = ", ")), domain = NA)
753c760
<     message("Warning: using defunct methods list search", domain = NA)
---
>     message("Warning: using defunct methods list search", domain = "R-methods")
764c771
<                  domain = NA)
---
>                  domain = "R-methods")
785c792
<                  domain = NA)
---
>                  domain = "R-methods")
793c800
<         stop(sprintf("no method defined in methods list object for function %s and signature %s",
---
>         stop(gettextf("no method defined in methods list object for function %s and signature %s",
795c802
<              domain = NA)
---
>              domain = "R-methods")
863c870
<             cat("* mlist environment with", length(mlist),"potential methods\n")
---
>             cat(gettextf("* mlist environment with %d potential methods", length(mlist), domain = "R-methods"), "\n", sep = "")
870,872c877
<               stop(gettextf("no method for %s matches class %s",
<                             sQuote("..."), dQuote(signature)),
<                    domain = NA)
---
>               stop(gettextf("no method for %s matches class %s", sQuote("..."), dQuote(signature)), domain = "R-methods")
881,882c886,887
< 	    if(verbose) cat("  no direct match found to signature (",
< 			    paste(signature, collapse=", "),")\n", sep="")
---
> 	    if(verbose) cat(sprintf(gettext("  no direct match found to signature (%s)", domain = "R-methods"),
> 			    paste(signature, collapse = ", "), domain = NA), "\n", sep = "")
885,886c890
< 		    allmethods <- .getMethodsTable(fdef, fenv, check=FALSE,
<                                                    inherited=TRUE)
---
> 		    allmethods <- .getMethodsTable(fdef, fenv, check=FALSE, inherited=TRUE)
900,901c904,905
< 	    else stop(gettextf("no method found for signature %s",
< 			       paste(signature, collapse=", ")))
---
> 	    else stop(sprintf(gettext("no method found for signature %s", domain = "R-methods"),
> 			       paste(signature, collapse=", ")), domain = NA)
912c916
<                  domain = NA)
---
>                  domain = "R-methods")
916c920
< 	     "** should no longer happen!", domain = NA)
---
> 	     "** should no longer happen!", domain = "R-methods")
959c963
<             stop(gettextf("bad class specified for element %d (should be a single character string)", i), domain = NA)
---
>             stop(gettextf("bad class specified for element %d (should be a single character string)", i), domain = "R-methods")
999c1003
<                       dQuote(class(f))), domain = NA)
---
>                       dQuote(class(f))), domain = "R-methods")
1004c1008
< 	cat(file = con, "no applicable functions\n")
---
> 	cat(file = con, gettext("no applicable functions", domain = "R-methods"), "\n", sep = "")
1022d1025
<         out <- paste0("\nFunction \"", f, "\":\n")
1024c1027
<             cat(file = con, out, "<not an S4 generic function>\n")
---
>             cat(file = con, "\n", gettextf("Function %s:\n<not an S4 generic function>", sQuote(f), domain = "R-methods"), "\n", sep = "")
1065c1068
<                 domain = NA)
---
>                 domain = "R-methods")
1087c1090
<                         domain = NA)
---
>                         domain = "R-methods")
1112c1115
<                             domain = NA)
---
>                             domain = "R-methods")
1136c1139
<                  domain = NA)
---
>                  domain = "R-methods")
1158c1161
<                         domain = NA)
---
>                         domain = "R-methods")
1165c1168
<               stop(MSG, domain = NA),
---
>               stop(MSG, domain = "R-methods"),
1317c1320
<         stop(gettextf('expected a non-empty character string for argument name'), domain = NA)
---
>         stop(gettextf("expected a non-empty character string for argument name"), domain = "R-methods")
1319c1322
<         stop(gettextf('generic function supplied was not created for %s',
---
>         stop(gettextf("generic function supplied was not created for %s",
1321c1324
<              domain = NA)
---
>              domain = "R-methods")
1334c1337
<                        domain = NA)
---
>                        domain = "R-methods")
1366c1369
<                 domain = NA)
---
>                 domain = "R-methods")
1389c1392
<                       dQuote(class(what))), domain = NA)
---
>                       dQuote(class(what))), domain = "R-methods")
1454c1457
< 	    return(gettextf("formal arguments differ: (%s), (%s)",
---
> 	    return(sprintf(gettext("formal arguments differ: (%s), (%s)", domain = "R-methods"),
1465c1468
< 	return(gettextf("signatures differ:  (%s), (%s)",
---
> 	return(sprintf(gettext("signatures differ:  (%s), (%s)", domain = "R-methods"),
1519c1522
<              domain = NA)
---
>              domain = "R-methods")
1526c1529
<                 domain = NA)
---
>                 domain = "R-methods")
1535c1538
<           stop(gettextf("only FALSE is meaningful for 'inherited', when 'where' is supplied (got %s)", inherited), domain = NA)
---
>           stop(gettextf("only FALSE is meaningful for 'inherited', when 'where' is supplied (got %s)", inherited))
1599c1602
<                       .notSingleString(f)), domain = NA)
---
>                       .notSingleString(f)), domain = "R-methods")
1615c1618
< 		     domain = NA)
---
> 		     domain = "R-methods")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/methods/R/MethodsList.R R/src/library/methods/R/MethodsList.R
61c61
<     if(anyDuplicated(mnames))
---
>     if(anyDuplicated(mnames)) {
63,64c63
<              level, paste("\"", unique(mnames[duplicated(mnames)]), "\"",
<                           collapse=", ")), domain = NA)
---
>              level, paste(dQuote(unique(mnames[duplicated(mnames)])), collapse = ", "), domain = "R-methods"), domain = NA) }
75c74
<                  domain = NA)
---
>                  domain = "R-methods")
119c118
<                 domain = NA)
---
>                 domain = "R-methods")
128,130c127
<         stop(gettextf("inserting method into non-methods-list object (class %s)",
<                       dQuote(.class1(mlist))),
<              domain = NA)
---
>         stop(gettextf("inserting method into non-methods-list object (class %s)", dQuote(.class1(mlist))), domain = "R-methods")
225c222
<                  domain = NA)
---
>                  domain = "R-methods")
231c228
<              domain = NA)
---
>              domain = "R-methods")
390c387
<                domain = NA)
---
>                domain = "R-methods")
462c459
<              domain = NA)
---
>              domain = "R-methods")
490c487
<                      i), domain = NA)
---
>                      i), domain = "R-methods")
496c493
<              domain = NA)
---
>              domain = "R-methods")
512c509
< 	    else function(...) warning(..., call. = FALSE)
---
> 	    else function(...) warning(..., call. = FALSE, domain = NA)
516,518c513,514
< 				 "no definition for classes %s"),
< 			paste(dQuote(unknown), collapse = ", ")),
< 		domain = NA)
---
> 				 "no definition for classes %s", domain = "R-methods"),
> 			paste(dQuote(unknown), collapse = ", ")))
527c523
<              domain = NA)
---
>              domain = "R-methods")
532c528
< 	       length(which), length(anames), sQuote(fun@generic)), domain = NA)
---
> 	       length(which), length(anames), sQuote(fun@generic)), domain = "R-methods")
558c554
<                               "in the method signature for function %s invalid argument names in the signature: %s"),
---
>                               "in the method signature for function %s invalid argument names in the signature: %s", domain = "R-methods"),
560,561c556
<                      paste(snames[is.na(which)], collapse = ", ")),
<              domain = NA)
---
>                      paste(snames[is.na(which)], collapse = ", ")), domain = NA)
613c608
<     cat(file=con, "<Empty Methods List>\n")
---
>     cat(file=con, gettext("<Empty Methods List>", domain = "R-methods"), "\n", sep = "")
620,621c615
<         labels[[i]] <- paste(args[[i]], " = \"", sigi, "\"",
<                              sep = "", collapse = ", ")
---
>         labels[[i]] <- paste(args[[i]], " = \"", sigi, "\"", sep = "", collapse = ", ")
629c623
<       cat(file=con, (if(includeDefs) "## Signature:" else ""), labels[[i]])
---
>       cat(file=con, (if(includeDefs) gettext("## Signature:", domain = "R-methods") else ""), labels[[i]])
643,645c637
<               paste(names(defFrom), " = \"", as.character(defFrom),
<                     "\"", sep = "", collapse = ", "),
<                ")", if(includeDefs) "\n", sep="")
---
>               paste(names(defFrom), " = \"", as.character(defFrom), "\"", sep = "", collapse = ", "), ")", if(includeDefs) "\n", sep = "")
674c666
< 	     domain = NA)
---
> 	     domain = "R-methods")
734,735c726,735
<     .message("A shell of methods documentation has been written",
<              .fileDesc(filename), ".\n")
---
>     if(is.character(filename)) {
>         if(nzchar(filename))
>             .message(gettextf("A shell of methods documentation has been written to the file %s.\n", sQuote(filename)), domain = "R-methods")
>         else
>             .message("A shell of methods documentation has been written to the standard output connection.\n", domain = "R-methods")
>     }
>     else if(inherits(filename, "connection"))
>             .message(gettextf("A shell of methods documentation has been written to the connection %s.\n", sQuote(summary(filename)$description)), domain = "R-methods")
>     else # what, indeed?
>     .message("A shell of methods documentation has been written.\n", domain = "R-methods")
778c778
<                 warning(gettextf("skipping methods list element %s of unexpected class %s\n\n",
---
>                 warning(sprintf(gettext("skipping methods list element %s of unexpected class %s\n\n", domain = "R-methods"),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/methods/R/MethodsListClass.R R/src/library/methods/R/MethodsListClass.R
97,99c97
<                stop(gettextf("invalid object for formal method definition: type %s",
<                              dQuote(typeof(def))),
<                     domain = NA)
---
>                stop(gettextf("invalid object for formal method definition: type %s", dQuote(typeof(def))), domain = "R-methods")
157c155
<                                 domain = NA)
---
>                                 domain = "R-methods")
164c162
<                     stop(gettextf("'initialize' method returned an object of class %s instead of the required class %s",
---
>                     stop(sprintf(gettext("'initialize' method returned an object of class %s instead of the required class %s", domain = "R-methods"),
217c215
<                   cat("An object of class \"", class(object), "\":\n", sep="")
---
>                   cat(gettextf("An object of class %s:", dQuote(class(object)), domain = "R-methods"), "\n", sep = "")
220c218
<                       cat("(All from \"", unique(pkg), "\")\n", sep="")
---
>                       cat(gettextf("(All objects are from package %s)", unique(sQuote(pkg)), domain = "R-methods"), "\n", sep = "")
224,225c222
< 		      dimnames(mat) <- list(c("Object:", "Package:"),
< 					    rep("", length(data)))
---
> 		      dimnames(mat) <- list(c(gettext("Object:", domain = "R-methods"), gettext("Package:", domain = "R-methods")), rep("", length(data)))
234,236c231,233
<                                        "Reported %d ambiguous selection out of %d for function %s\n",
<                                        "Reported %d ambiguous selections out of %d for function %s\n"),
<                               nreport, length(object@allSelections), object@generic))
---
>                                        "Reported %d ambiguous selection out of %d for function %s",
>                                        "Reported %d ambiguous selections out of %d for function %s", domain = "R-methods"),
>                               nreport, length(object@allSelections), sQuote(object@generic)), "\n", sep = "")
242,244c239,240
<                       cat(gettextf(
<                                    '%d: target "%s": chose "%s" (others: %s)',
<                                    i,target[[i]], selected[[i]], paste0('"', these, '"', collapse =", ")))
---
>                       cat(sprintf(gettext("%d: target %s: chose %s (others: %s)", domain = "R-methods"),
>                                    i, dQuote(target[[i]]), dQuote(selected[[i]]), paste(dQuote(these), collapse = ", ")))
246c242
<                           cat(gettextf("\n    Notes: %s.\n", notei))
---
>                           cat("\n    ", gettextf("Notes: %s.", notei, domain = "R-methods"), "\n", sep = "")
254c250
<                   cat(gettextf("class generator function for class %s from package %s\n",
---
>                   cat(gettextf("class generator function for class %s from package %s",
256c252
<                                sQuote(object@package)))
---
>                                sQuote(object@package), domain = "R-methods"), "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/methods/R/NextMethod.R R/src/library/methods/R/NextMethod.R
64c64
<                  domain = NA)
---
>                  domain = "R-methods")
98c98
<                       dQuote(class(method))), domain = NA)
---
>                       dQuote(class(method))), domain = "R-methods")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/methods/R/RClassUtils.R R/src/library/methods/R/RClassUtils.R
151c151
<                      domain = NA)
---
>                      domain = "R-methods")
168c168
<         warning(gettextf("in constructing the prototype for class %s, slots in prototype and not in class: %s",
---
>         warning(sprintf(gettext("in constructing the prototype for class %s, slots in prototype and not in class: %s", domain = "R-methods"),
190c190
<         stop(gettextf("in making the prototype for class %s elements of the prototype failed to match the corresponding slot class: %s",
---
>         stop(sprintf(gettext("in making the prototype for class %s elements of the prototype failed to match the corresponding slot class: %s", domain = "R-methods"),
192,196c192
<                       paste(pnames[check],
<                             "(class",
<                             .dQ(slotDefs[match(pnames[check], slotNames)]),
<                             ")",
<                             collapse = ", ")),
---
>                       paste(pnames[check], gettextf("(class %s)", .dQ(slotDefs[match(pnames[check], slotNames)])), collapse = ", ")),
248c244
<         warning(gettextf("potential cycle in class inheritance: %s has duplicates in superclasses and subclasses (%s)",
---
>         warning(sprintf(gettext("potential cycle in class inheritance: %s has duplicates in superclasses and subclasses (%s)", domain = "R-methods"),
287c283
< #                                 "): coercion to some may fail")
---
> #                                 "): coercion to some may fail", domain = NA)
298c294
< #                                paste0(c(Class, ext)[dupClasses], collapse = ", ")))
---
> #                                paste0(c(Class, ext)[dupClasses], collapse = ", ")), domain = NA)
409c405
<                  domain = NA)
---
>                  domain = "R-methods")
415c411
<                         domain = NA)
---
>                         domain = "R-methods")
448c444
<     else stop("'Class' must be a valid class definition or class")
---
>     else stop("'Class' argument must be a valid class definition or class")
507c503
<                domain = NA)
---
>                domain = "R-methods")
513c509
<                domain = NA)
---
>                domain = "R-methods")
609c605
<                        stop("'externalptr' objects cannot be initialized from new()")
---
>                        stop("'externalptr' objects cannot be initialized from function 'new()'")
629,630c625
<                           msg <- paste("Calling new() on an undefined and non-basic class (\"",
<                                Class, "\")", sep="")
---
>                           msg <- gettextf("Calling function 'new()' on an undefined and non-basic class (\"%s\")", Class)
633,634c628
<                               gettextf("initializing objects from class %s with these arguments is not supported",
<                                        dQuote(Class))
---
>                               gettextf("initializing objects from class %s with these arguments is not supported", dQuote(Class))
640c634
<       stop(msg, domain = NA)
---
>       stop(msg, domain = "R-methods")
680c674
<                domain = NA)
---
>                domain = "R-methods")
691c685
<                      domain = NA)
---
>                      domain = "R-methods")
710c704
<                        domain = NA)
---
>                        domain = "R-methods")
740c734
<                                domain = NA)
---
>                                domain = "R-methods")
746c740
<                            domain = NA)
---
>                            domain = "R-methods")
770c764
<                            domain = NA)
---
>                            domain = "R-methods")
778c772
<                    domain = NA)
---
>                    domain = "R-methods")
800c794
<                    domain = NA)
---
>                    domain = "R-methods")
805c799
<                   warning("prototype is a list with named elements (could be ambiguous):  better to use function prototype() to avoid trouble.")
---
>                   warning("prototype is a list with named elements (could be ambiguous): better to use function 'prototype()' to avoid trouble.")
817,820c811,812
<                                     "named elements of prototype do not correspond to slot names: %s"),
<                            paste(.dQ(pnames[is.na(match(pnames, slots))]),
<                                  collapse =", ")),
<                    domain = NA)
---
>                                     "named elements of prototype do not correspond to slot names: %s", domain = "R-methods"),
>                            paste(.dQ(pnames[is.na(match(pnames, slots))]), collapse = ", ")), domain = NA)
872c864
<     function(Class, complete = TRUE, propertiesAreCalled = "Slots")
---
>     function(Class, complete = TRUE)
882,887c874,887
<     cat(if(identical(ClassDef@virtual, TRUE)) "Virtual ",
< 	"Class ", .dQ(Class),
< 	## Show the package if that is non-trivial:
< 	if(nzchar(pkg <- ClassDef@package))
< 	c(" [", if(pkg != ".GlobalEnv") "package" else "in", " \"", pkg,"\"]"),
< 	"\n", sep="")
---
>      pkg <- ClassDef@package
>     if(identical(ClassDef@virtual, TRUE) && nzchar(pkg) && pkg != ".GlobalEnv")
>      cat(gettextf("Virtual Class %s [package in %s]", .dQ(Class), sQuote(pkg), domain = "R-methods"))
>     else if(!identical(ClassDef@virtual, TRUE) && nzchar(pkg) && pkg != ".GlobalEnv")
>      cat(gettextf("Class %s [package in %s]", .dQ(Class), sQuote(pkg), domain = "R-methods"))
>     else if(identical(ClassDef@virtual, TRUE) && nzchar(pkg) && pkg == ".GlobalEnv")
>      cat(gettextf("Virtual Class %s [in %s]", .dQ(Class), sQuote(pkg), domain = "R-methods"))
>     else if(!identical(ClassDef@virtual, TRUE) && nzchar(pkg) && pkg == ".GlobalEnv")
>      cat(gettextf("Class %s [in %s]", .dQ(Class), sQuote(pkg), domain = "R-methods"))
>     else if(identical(ClassDef@virtual, TRUE) && !nzchar(pkg))
>      cat(gettextf("Virtual Class %s", .dQ(Class), domain = "R-methods"))
>     else if(!identical(ClassDef@virtual, TRUE) && !nzchar(pkg))
>      cat(gettextf("Class %s", .dQ(Class), domain = "R-methods"))
>     cat("\n") 
890c890,891
<         printPropertiesList(x, propertiesAreCalled)
---
> 	cat("\n", gettext("Slots:", domain = "R-methods"), "\n", sep = "")
>         printPropertiesList(x)
893,894c894
<         cat("\nNo ", propertiesAreCalled, ", prototype of class \"",
<             .class1(ClassDef@prototype), "\"\n", sep="")
---
>         cat("\n", gettextf("No slots, prototype of class %s", dQuote(.class1(ClassDef@prototype)), domain = "R-methods"), "\n", sep = "")
897c897
<         cat("\nExtends: ")
---
>         cat("\n", gettextf("Class %s consists of following classes: ", .dQ(Class), domain = "R-methods"), sep = "")
902c902
<         cat("\nKnown Subclasses: ")
---
>         cat("\n", gettext("Known Subclasses: ", domain = "R-methods"), sep = "")
907c907
< printPropertiesList <- function(x, propertiesAreCalled) {
---
> printPropertiesList <- function(x) {
910c910
<         cat("\n",propertiesAreCalled, ":\n", sep="")
---
> #        cat("\n", gettext("Slots:", domain = "R-methods"), "\n", sep = "")
913c913
<         dimnames(text) <- list(c("Name:", "Class:"), rep.int("", n))
---
>         dimnames(text) <- list(c(gettext("Name:", domain = "R-methods"), gettext("Class:", domain = "R-methods")), rep.int("", n))
924a925
>     directly <- logical(length(ext))
928,943c929,960
<             how[i] <-
<                 if(length(eli@by))
< 		    paste("by class", paste0("\"", eli@by, "\", distance ",
< 					     eli@distance, collapse = ", "))
<                 else if(identical(eli@dataPart, TRUE))
<                     "from data part"
<                 else "directly"
<             if(!eli@simple) {
<                 if(is.function(eli@test) && !identical(body(eli@test), TRUE)) {
<                     how[i] <-
<                         paste(how[i], if(is.function(eli@coerce))
<                               ", with explicit test and coerce" else
<                               ", with explicit test", sep="")
<                 }
<                 else if(is.function(eli@coerce))
<                     how[i] <- paste0(how[i], ", with explicit coerce")
---
> 	   if(!eli@simple && is.function(eli@test) && !identical(body(eli@test), TRUE) && is.function(eli@coerce) && length(eli@by)) { #1
> 		tmp_N <- paste(dQuote(eli@by), ", ", gettextf("distance %d", eli@distance), sep = "", collapse = ", ")
> 		how[i] <- gettextf("Class %s, by class %s, with explicit test and coerce", dQuote(what[i]), tmp_N, domain = "R-methods")
> 	   } else if(!eli@simple && is.function(eli@test) && !identical(body(eli@test), TRUE) && is.function(eli@coerce) && identical(eli@dataPart, TRUE)) { #2
> 		how[i] <- gettextf("Class %s, from data part, with explicit test and coerce", dQuote(what[i]), domain = "R-methods")
> 	   } else if(!eli@simple && is.function(eli@test) && !identical(body(eli@test), TRUE) && is.function(eli@coerce)) { #3
> 		how[i] <- gettextf("Class %s, directly, with explicit test and coerce", dQuote(what[i]), domain = "R-methods");
> 		directly[i] <- TRUE
> 	   } else if(!eli@simple && is.function(eli@test) && !identical(body(eli@test), TRUE) && !is.function(eli@coerce) && length(eli@by)) { #4
> 		tmp_N <- paste(dQuote(eli@by), ", ", gettextf("distance %d", eli@distance), sep = "", collapse = ", ")
> 		how[i] <- gettextf("Class %s, by class %s, with explicit test", dQuote(what[i]), tmp_N, domain = "R-methods")
> 	   } else if(!eli@simple && is.function(eli@test) && !identical(body(eli@test), TRUE) && !is.function(eli@coerce) && identical(eli@dataPart, TRUE)) { #5
> 		how[i] <- gettextf("Class %s, from data part, with explicit test", dQuote(what[i]), domain = "R-methods")
> 	   } else if(!eli@simple && is.function(eli@test) && !identical(body(eli@test), TRUE) && !is.function(eli@coerce)) { #6
> 		how[i] <- gettextf("Class %s, directly, with explicit test", dQuote(what[i]), domain = "R-methods");
> 		directly[i] <- TRUE
> 	   } else if(!eli@simple && !(is.function(eli@test) && !identical(body(eli@test), TRUE)) && is.function(eli@coerce) && length(eli@by)) { #7
> 		tmp_N <- paste(dQuote(eli@by), ", ", gettextf("distance %d", eli@distance), sep = "", collapse = ", ")
> 		how[i] <- gettextf("Class %s, by class %s, with explicit coerce", dQuote(what[i]), tmp_N, domain = "R-methods")
> 	   } else if(!eli@simple && !(is.function(eli@test) && !identical(body(eli@test), TRUE)) && is.function(eli@coerce) && identical(eli@dataPart, TRUE)) { #8
> 		how[i] <- gettextf("Class %s, from data part, with explicit coerce", dQuote(what[i]), domain = "R-methods")
> 	   } else if(!eli@simple && !(is.function(eli@test) && !identical(body(eli@test), TRUE)) && is.function(eli@coerce)) { #9
> 		how[i] <- gettextf("Class %s, directly, with explicit coerce", dQuote(what[i]), domain = "R-methods");
> 		directly[i] <- TRUE
> 	   } else if(length(eli@by)) { #12
> 		tmp_N <- paste(dQuote(eli@by), ", ", gettextf("distance %d", eli@distance), sep = "", collapse = ", ")
>                 how[i] <- gettextf("Class %s, by class %s", dQuote(what[i]), tmp_N, domain = "R-methods")
> 	   } else if(identical(eli@dataPart, TRUE)) { #11
> 		how[i] <- gettextf("Class %s, from data part", dQuote(what[i]), domain = "R-methods")
> 	   } else { # 10
> 		how[i] <- gettextf("Class %s, directly", dQuote(what[i]), domain = "R-methods");
> 		directly[i] <- TRUE
949,950c966,967
<     else if(all(!nzchar(how)) ||  all(how == "directly")) {
<         what <- paste0('"', what, '"')
---
>     else if(all(!nzchar(how)) ||  all(directly == TRUE)) {
>         what <- dQuote(what)
952c969
<             what <- c(paste0(what[-length(what)], ","), what[[length(what)]])
---
>             what <- c(paste(what[-length(what)], collapse = ", "), what[[length(what)]])
955,956c972
<     else cat(file = printTo, "\n",
< 	     paste0("Class \"", what, "\", ", how, "\n"), sep = "")
---
>     else { cat(file = printTo, "\n"); cat(file = printTo, how, sep = "\n") }
963c979
<   showClass(x, propertiesAreCalled="Slots")
---
>   showClass(x)
992,993c1008
<             if(!.identC(class(ClassDef2), "classRepresentation") &&
<                isClassUnion(ClassDef2))
---
>             if(!.identC(class(ClassDef2), "classRepresentation") && isClassUnion(ClassDef2))
995,996c1010
< 		i <- as.logical(anyDuplicated(c(class1, unique(nm1),
< 						names(ext))))
---
> 		i <- as.logical(anyDuplicated(c(class1, unique(nm1), names(ext))))
1138c1152
<                  domain = NA)
---
>                  domain = "R-methods")
1149c1163,1167
<                     whatError <-  "contain itself"
---
>                 stop(gettextf("class %s may not contain itself: it contains class %s, with a circular relation back to %s",
>                              dQuote(className),
>                              dQuote(exti@by),
>                              dQuote(className)),
>                      domain = "R-methods")
1152,1156c1170,1171
<                     whatError <- "have itself as a subclass"
<                 }
<                 ## this is not translatable
<                 stop(sprintf("class %s may not %s: it contains class %s, with a circular relation back to %s",
<                              dQuote(className), whatError,
---
>                 stop(gettextf("class %s may not have itself as a subclass: it contains class %s, with a circular relation back to %s",
>                              dQuote(className),
1159c1174,1175
<                      domain = NA)
---
>                      domain = "R-methods")
>                 }
1183c1199
<                 warning(gettextf("class %s is inheriting an inconsistent superclass structure from class %s, inconsistent with %s",
---
>                 warning(sprintf(gettext("class %s is inheriting an inconsistent superclass structure from class %s, inconsistent with %s", domain = "R-methods"),
1193c1209
<           warning(gettextf("unable to find a consistent ordering of superclasses for class %s: order chosen is inconsistent with the superclasses of %s",
---
>           warning(sprintf(gettext("unable to find a consistent ordering of superclasses for class %s: order chosen is inconsistent with the superclasses of %s", domain = "R-methods"),
1310c1326
<     message <- paste("for function", f, message)
---
>     message <- gettextf("for function %s: %s", f, message)
1314,1315c1330
<         message <- paste("Required method", message, "not defined for signature",
<                          target)
---
>         message <- gettextf("Required method %s not defined for signature %s", message, target)
1317c1332
<             message <- paste(message, ", required for signature", defined)
---
>             message <- gettextf("Required method %s not defined for signature %s, required for signature %s", message, target, defined)
1319c1334
<     else message <- paste("Required method not defined", message)
---
>     else message <- gettextf("Required method not defined: %s", message)
1337c1352
<         stop("\"class\" is a reserved slot name and cannot be redefined")
---
>         stop("'class' is a reserved slot name and cannot be redefined")
1349c1364
<               stop("Data part is undefined for general S4 object")
---
>               stop("Data part ('.Data' slot) is undefined for general S4 object")
1362c1377
<             domain = NA)
---
>             domain = "R-methods")
1407c1422
<                domain = NA)
---
>                domain = "R-methods")
1460c1475
<                   .dQ(prevDataPartClass), .dQ(value)), domain = NA)
---
>                   .dQ(prevDataPartClass), .dQ(value)), domain = "R-methods")
1504c1519
< ###    if(!strictBy) message("Extends: ",from, ": ", paste(what, collapse = ", "))
---
> ###    if(!strictBy) message(gettextf("Extends: %s: ",from),  paste(what, collapse = ", "), domain = NA)
1517c1532
< ###    if(!strictBy) message("Subclasses: ",by, ": ", paste(what, collapse = ", "))
---
> ###    if(!strictBy) message(gettextf("Subclasses: %s: ",by), paste(what, collapse = ", "), domain = NA)
1705,1707c1720,1721
<             stop(sprintf("trying to change the argument list of %s with %d arguments to have arguments (%s)",
<                          functionName, n, paste(newArgs, collapse = ", ")),
<                  domain = NA)
---
>             stop(sprintf(gettext("trying to change the argument list of %s with %d arguments to have arguments (%s)", domain = "R-methods"),
>                          functionName, n, paste(newArgs, collapse = ", ")), domain = NA)
1713,1716c1727,1728
<             stop(sprintf("get rid of variables in definition %s (%s); they conflict with the needed change to argument names (%s)",
<                          functionName,
<                          paste(checkFor[!is.na(match(checkFor, locals))], collapse = ", "),
<                          paste(newArgs, collapse = ", ")), domain = NA)
---
>             stop(sprintf(gettext("get rid of variables in definition %s (%s); they conflict with the needed change to argument names (%s)", domain = "R-methods"),
>                          functionName, paste(checkFor[!is.na(match(checkFor, locals))], collapse = ", "), paste(newArgs, collapse = ", ")), domain = NA)
1726c1738
<                 sprintf("NOTE: arguments in definition %s changed from (%s) to (%s)",
---
>                 message(sprintf(gettext("NOTE: arguments in definition %s changed from (%s) to (%s)", domain = "R-methods"),
1729,1730c1741
<                         paste(newArgs, collapse = ", "))
<             message(msg, domain = NA)
---
>                         paste(newArgs, collapse = ", ")), domain = NA)
1741,1742c1752,1753
<                  domain = NA)
<         validity <- substituteFunctionArgs(validity, "object", functionName = sprintf("validity method for class '%s'", Class))
---
>                  domain = "R-methods")
>         validity <- substituteFunctionArgs(validity, "object", functionName = gettextf("validity method for class \"%s\"", Class))
1813c1824
<                domain = NA)
---
>                domain = "R-methods")
1876c1887
<                  domain = NA)
---
>                  domain = "R-methods")
1981c1992
<                     domain = NA)
---
>                     domain = "R-methods")
1995c2006
<                     domain = NA)
---
>                     domain = "R-methods")
2016c2027
<         message(gettextf("Note: the specification for class %s in package %s seems equivalent to one from package %s: not turning on duplicate class definitions for this class.",
---
>         message(gettextf("Note: the specification for class %s in package %s seems equivalent to one from package %s and is not turning on duplicate class definitions for this class",
2020c2031
<                     domain = NA)
---
>                     domain = "R-methods")
2117c2128
<                   call. = FALSE, domain = NA)
---
>                   call. = FALSE, domain = "R-methods")
2124c2135
<                   call. = FALSE, domain = NA)
---
>                   call. = FALSE, domain = "R-methods")
2309c2320
<                               length(nodes), length(short)), domain = NA)
---
>                               length(nodes), length(short)), domain = "R-methods")
2427c2438
< ##                 "\n\n(Warnings generated once per package per session)")
---
> ##                 "\n\n(Warnings generated once per package per session)", domain = NA)
2438c2449
< ##             className, "\" have apparent S3 methods.\n\nThese will be hidden by the S3 class that this class contains. (See ?Methods)\n\n", msg)
---
> ##             className, "\" have apparent S3 methods.\n\nThese will be hidden by the S3 class that this class contains. (See ?Methods)\n\n", msg, domain = NA)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/methods/R/RMethodUtils.R R/src/library/methods/R/RMethodUtils.R
39c39
<                     domain = NA)
---
>                     domain = "R-methods")
49c49
<                  domain = NA)
---
>                  domain = "R-methods")
75c75
<              domain = NA)
---
>              domain = "R-methods")
87,89c87,88
<                               "non-arguments found in the signature: %s"),
<                      paste(signature[is.na(match(signature, args))], collapse = ", ")),
<              domain = NA)
---
>                               "non-arguments found in the signature: %s", domain = "R-methods"),
>                      paste(signature[is.na(match(signature, args))], collapse = ", ")), domain = NA)
108c107
<                                   "the formal arguments of the generic function for %s (%s) differ from those of the non-generic to be used as the default (%s)"),
---
>                                   "the formal arguments of the generic function for %s (%s) differ from those of the non-generic to be used as the default (%s)", domain = "R-methods"),
110,111c109
<                           paste(formalArgs(fdefault), collapse = ", ")),
<                  domain = NA)
---
>                           paste(formalArgs(fdefault), collapse = ", ")), domain = NA)
166c164
<                               "non-arguments found in the signature: %s"),
---
>                               "non-arguments found in the signature: %s", domain = "R-methods"),
209,211c207
<             stop(gettextf("special function %s is not permitted to have methods",
<                           sQuote(f)),
<                  domain = NA)
---
>             stop(gettextf("special function %s is not permitted to have methods", sQuote(f)), domain = "R-methods")
213,215c209
<             warning(gettextf("special function %s has no known argument list; will assume '(x, ...)'",
<                              sQuote(f)),
<                     domain = NA)
---
>             warning(gettextf("special function %s has no known argument list; will assume '(x, ...)'", sQuote(f)), domain = "R-methods")
220,222c214
<             message(gettextf("making a generic for special function %s",
<                              sQuote(f)),
<                     domain = NA)
---
>             message(gettextf("making a generic for special function %s", sQuote(f), domain = "R-methods"), domain = NA)
243c235
<         body(fdefault) <- substitute(stop(MESSAGE, domain = NA), list(MESSAGE=
---
>         body(fdefault) <- substitute(stop(MESSAGE, domain = "R-methods"), list(MESSAGE=
294c286
<     cat("called doPrimitiveMethod\n\n")
---
>     cat(gettext("called 'doPrimitiveMethod()'", domain = "R-methods"), "\n\n", sep = "")
310c302
<     msig <- paste0(nm, '"', as.vector(signature), '"')
---
>     msig <- paste0(nm, dQuote(as.vector(signature)))
312c304
<     gettextf("in method for %s with signature %s: ", sQuote(f), sQuote(msig))
---
>     gettextf("In method for %s with signature %s: ", sQuote(f), msig, domain = "R-methods")
337c329
<     ##         warning(gettextf("%s function arguments omitted from method arguments, (%s), were found in method definition",
---
>     ##         warning(sprintf(gettext("%s function arguments omitted from method arguments, (%s), were found in method definition", domain = "R-methods"),
347c339
<              call. = TRUE, domain = NA)
---
>              call. = TRUE, domain = "R-methods")
352c344
<                  gettextf("expanding the signature to include omitted arguments in definition: %s",
---
>                  sprintf(gettext("expanding the signature to include omitted arguments in definition: %s", domain = "R-methods"),
406c398
< 	    stop(gettextf("arguments (%s) after '...' in the generic must appear in the method, in the same place at the end of the argument list",
---
> 	    stop(sprintf(gettext("arguments (%s) after '...' in the generic must appear in the method, in the same place at the end of the argument list", domain = "R-methods"),
462,463c454
<                 stop(gettextf("methods cannot be defined for the primitive function %s",
<                               sQuote(f)), domain = NA)
---
>                 stop(gettextf("methods cannot be defined for the primitive function %s", sQuote(f)), domain = "R-methods")
484,485c475
<             stop(gettextf("no generic function found for %s", sQuote(f)),
<                  domain = NA)
---
>             stop(gettextf("no generic function found for %s", sQuote(f)), domain = "R-methods")
503c493
<             message("Empty function name in .getGeneric")
---
>             message("Empty function name in .getGeneric", domain = "R-methods")
722c712
<         warning(sprintf("Methods list objects are not maintained in this version of R:  request for function %s may return incorrect information",
---
>         warning(gettextf("Methods list objects are not maintained in this version of R:  request for function %s may return incorrect information",
724c714
<                 domain = NA)
---
>                 domain = "R-methods")
810,811c800
<         warning(sprintf("package %s seems to have out-of-date methods; need to reinstall from source",
<                          sQuote(getPackageName(where[[1L]]))))
---
>         warning(gettextf("package %s seems to have out-of-date methods; need to reinstall from source", sQuote(getPackageName(where[[1L]]))))
909c898
< 		domain = NA)
---
> 		domain = "R-methods")
959c948
<                 sprintf(" found on: %s; using the first one",
---
>                 sprintf(gettext(" found on: %s; using the first one", domain = "R-methods"),
1081c1070
<         stop(gettextf("invalid value from generic function %s, class %s, expected %s",
---
>         stop(gettextf("invalid value from generic function %s, class %s, expected one of %s",
1084,1085c1073,1074
<                       paste(dQuote(classes), collapse = " or ")),
<              domain = NA)
---
>                       paste(dQuote(classes), collapse = ", ")),
>              domain = "R-methods")
1178,1180c1167
<                                  sQuote(fname),
<                                  paste(as.character(x[[2L]]), collapse = "\n")),
<                         domain = NA)
---
>                                  sQuote(fname), paste(as.character(x[[2L]]), collapse = "\n")), domain = "R-methods")
1225,1227c1212
<             stop(sprintf("internal error: Bad methods list object in fixing methods for primitive function %s",
<                           sQuote(f)),
<                  domain = NA)
---
>             stop(gettextf("internal error: Bad methods list object in fixing methods for primitive function %s", sQuote(f)), domain = "R-methods")
1252c1237
< .ChangeFormals <- function(def, defForArgs, msg = "<unidentified context>")
---
> .ChangeFormals <- function(def, defForArgs, msg = "<unidentified context>") #IVORY: basically untranslatable due to 'msg' argument
1256,1257c1241
<                       msg, dQuote(class(def))),
<              domain = NA)
---
>                       msg, dQuote(class(def))), domain = "R-methods")
1260,1261c1244
<                       msg, dQuote(class(def))),
<              domain = NA)
---
>                       msg, dQuote(class(def))), domain = "R-methods")
1265,1268c1248,1249
<         stop(gettextf("trying to change the formal arguments in %s, but the number of existing arguments is less than the number of new arguments: (%s) vs (%s)",
<                       msg, paste0("\"", old, "\"", collapse=", "),
<                       paste0("\"", new, "\"", collapse=", ")),
<              domain = NA)
---
>         stop(sprintf(gettext("trying to change the formal arguments in %s, but the number of existing arguments is less than the number of new arguments: (%s) vs (%s)", domain = "R-methods"),
>                       msg, paste(dQuote(old), collapse = ", "), paste(dQuote(new), collapse = ", ")), domain = NA)
1270,1273c1251,1252
<         warning(gettextf("trying to change the formal arguments in %s, but the number of existing arguments is greater than the number of new arguments (the extra arguments won't be used): (%s) vs (%s)",
<                          msg, paste0("\"", old, "\"", collapse=", "),
<                          paste0("\"", new, "\"", collapse=", ")),
<                 domain = NA)
---
>         warning(sprintf(gettext("trying to change the formal arguments in %s, but the number of existing arguments is greater than the number of new arguments (the extra arguments won't be used): (%s) vs (%s)", domain = "R-methods"),
>                          msg, paste(dQuote(old), collapse = ", "), paste(dQuote(new), collapse = ", ")), domain = NA)
1285,1287c1264,1265
< 	stop(gettextf("in changing formal arguments in %s, some of the old names are not in fact arguments: %s",
< 		      msg, paste0("\"", old[is.na(match(old, names(dlist)))], "\"", collapse=", ")),
< 	     domain = NA)
---
> 	stop(sprintf(gettext("in changing formal arguments in %s, some of the old names are not in fact arguments: %s", domain = "R-methods"),
> 		      msg, paste(dQuote(old[is.na(match(old, names(dlist)))]), collapse = ", ")), domain = NA)
1303c1281
<                 stop("botched namespace: failed to find 'base' namespace in its parents", domain = NA)
---
>                 stop("botched namespace: failed to find 'base' namespace in its parents", domain = "R-methods")
1450,1452c1428
<         warning(gettextf("%s is not a generic function (or not visible here)",
<                          sQuote(f)),
<                 domain = NA)
---
>         warning(gettextf("%s is not a generic function (or not visible here)", sQuote(f)), domain = "R-methods")
1475,1477c1451
< 		    stop(gettextf("invalid element in the \"groupMembers\" slot (class %s)",
< 				  dQuote(class(x))),
<                          domain = NA)
---
> 		    stop(gettextf("invalid element in the \"groupMembers\" slot (class %s)", dQuote(class(x))), domain = "R-methods")
1583c1557
<                       deparse(sys.call(sys.parent()), nlines = 1)), domain = NA)
---
>                       deparse(sys.call(sys.parent()), nlines = 1)), domain = "R-methods")
1614c1588
<             warning(gettextf("multiple direct matches: %s; using the first of these", .pasteC(classes)), domain = NA)
---
>             warning(gettextf("multiple direct matches: %s; using the first of these", .pasteC(classes)), domain = "R-methods")
1660,1661c1634
<             warning(gettextf("multiple equivalent inherited matches: %s; using the first of these",
<                              .pasteC(classes)), domain = NA)
---
>             warning(gettextf("multiple equivalent inherited matches: %s; using the first of these", .pasteC(classes)), domain = "R-methods")
1678c1651
<         "non-empty string; got \"\""
---
>         gettext("non-empty string; got \"\"")
1680c1653
<         paste("single string; got a character vector of length", length(what))
---
>         gettextf("single string; got a character vector of length %d", length(what))
1682,1683c1655
<         gettextf("single string; got an object of class %s",
<                  dQuote(class(what)[[1L]]))
---
>         gettextf("single string; got an object of class %s", dQuote(class(what)[[1L]]))
1742,1744c1714,1715
<                           gettextf("multiple definitions exist for class %s, but the supplied package (%s) is not one of them (%s)",
<                                    dQuote(classi), sQuote(pkgi),
<                                    paste(dQuote(get(classi, envir = .classTable)), collapse = ", ")))
---
>                           sprintf(gettext("multiple definitions exist for class %s, but the supplied package (%s) is not one of them (%s)", domain = "R-methods"),
>                                    dQuote(classi), sQuote(pkgi), paste(dQuote(get(classi, envir = .classTable)), collapse = ", ")))
1749,1751c1720,1721
<                           gettextf("multiple definitions exist for class %s; should specify one of them (%s), e.g. by className()",
<                                    dQuote(classi),
<                                    paste(dQuote(get(classi, envir = .classTable)), collapse = ", ")))
---
>                           sprintf(gettext("multiple definitions exist for class %s; should specify one of them (%s), e.g. by className()", domain = "R-methods"),
>                                    dQuote(classi), paste(dQuote(get(classi, envir = .classTable)), collapse = ", ")))
1764,1765c1734
<                 msgi <- gettextf("no definition found for class %s",
<                                  dQuote(classi))
---
>                 msgi <- gettextf("no definition found for class %s", dQuote(classi), domain = "R-methods")
1850,1852c1819
<             stop(gettextf("non-function action: %s",
<                           sQuote(fname)),
<                  domain = NA)
---
>             stop(gettextf("non-function action: %s", sQuote(fname)), domain = "R-methods")
1854,1856c1821
<             stop(gettextf("action function %s has no arguments, should have at least 1",
<                           sQuote(fname)),
<                  domain = NA)
---
>             stop(gettextf("action function %s has no arguments, should have at least 1", sQuote(fname)), domain = "R-methods")
1905c1870
<             warning(gettextf("some actions are missing: %s",
---
>             warning(sprintf(gettext("some actions are missing: %s", domain = "R-methods"),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/methods/R/SClasses.R R/src/library/methods/R/SClasses.R
29,31c29
<         stop(gettextf("%s has a sealed class definition and cannot be redefined",
<                       dQuote(Class)),
<              domain = NA)
---
>         stop(gettextf("Class %s has a sealed class definition and cannot be redefined", dQuote(Class)), domain = "R-methods")
36c34
<             stop("Argument \"representation\" cannot be used if argument \"slots\" is supplied")
---
>             stop("Argument 'representation' cannot be used if argument 'slots' is supplied")
47c45
<             stop("only arguments 'Class' and 'where' can be supplied when argument 'representation' is a 'classRepresentation' object")
---
>             stop("only arguments 'Class' and 'where' can be supplied when argument 'representation' is a \"classRepresentation\" object")
80c78
<                        domain = NA)
---
>                        domain = "R-methods")
89c87
<                      domain = NA)
---
>                      domain = "R-methods")
94c92
<                      domain = NA)
---
>                      domain = "R-methods")
99c97
<                      domain = NA)
---
>                      domain = "R-methods")
104c102
<                      domain = NA)
---
>                      domain = "R-methods")
132c130
<             stop(gettextf("element %d of the representation was not a single character string", i), domain = NA)
---
>             stop(gettextf("element %d of the representation was not a single character string", i), domain = "R-methods")
136,138c134,135
<         stop(gettextf("duplicate class names among superclasses: %s",
<                       paste(.dQ(includes[duplicated(includes)]),
<                             collapse = ", ")),
---
>         stop(sprintf(gettext("duplicate class names among superclasses: %s", domain = "R-methods"),
>                       paste(.dQ(includes[duplicated(includes)]),  collapse = ", ")),
145c142
<                               "duplicated slot names: %s"),
---
>                               "duplicated slot names: %s", domain = "R-methods"),
165c162
<             stop("only one data object (unnamed argument to prototype) allowed")
---
>             stop("only one data object (unnamed argument passed to 'prototype()' function) allowed")
271c268
<                      domain = NA)
---
>                      domain = "R-methods")
310c307
<              domain = NA)
---
>              domain = "R-methods")
321c318
<             domain = NA)
---
>             domain = "R-methods")
336c333
<              domain = NA)
---
>              domain = "R-methods")
346c343
<             domain = NA)
---
>             domain = "R-methods")
385c382
<                     domain = NA)
---
>                     domain = "R-methods")
391c388
<                     domain = NA)
---
>                     domain = "R-methods")
471,472c468,469
< 	      paste("slots in class definition but not in object:",
< 		    paste0('"', slotNames[badSlots], '"', collapse = ", ")))
---
> 	      paste(gettext("slots in class definition but not in object:"),
> 		    paste0("'", slotNames[badSlots], "'", collapse = ", ")))
481,482c478
< 			paste0("undefined class for slot \"", slotNames[[i]],
< 			       "\" (\"", classi, "\")"))
---
> 			gettextf("undefined class for slot '%s' (\"%s\")", slotNames[[i]], classi))
500,503c496,497
< 			paste0("invalid object for slot \"", slotNames[[i]],
< 			       "\" in class \"", Class,
< 			       "\": got class \"", class(sloti),
< 			       "\", should be or extend class \"", classi, "\""))
---
> 			gettextf("invalid object for slot '%s' in class \"%s\": got class \"%s\", should be or extend class \"%s\"", slotNames[[i]],
> 			       Class, class(sloti), classi))
510,511c504
< 	    errori <- paste0("In slot \"", slotNames[[i]],
< 			     "\" of class \"", class(sloti), "\": ", errori)
---
> 	    errori <- gettextf("In slot '%s' of class \"%s\": %s", slotNames[[i]], class(sloti), errori)
524,525c517
< 			paste0("superclass \"", superClass,
< 			       "\" not defined in the environment of the object's class"))
---
> 			gettextf("superclass \"%s\" not defined in the environment of the object's class", superClass))
543d534
< 	    msg <- gettextf("invalid class %s object", dQuote(Class))
545c536
< 		stop(paste(paste0(msg, ":"),
---
> 		stop(paste(gettextf("invalid class %s object:", dQuote(Class), domain = "R-methods"), " ", 
548c539
< 	    else stop(msg, ": ", errors, domain = NA)
---
> 	    else stop(gettextf("invalid class %s object:", dQuote(Class), domain = "R-methods"), " ", errors, domain = NA)
600c591
<                             domain = NA)
---
>                             domain = "R-methods")
607c598
<                      domain = NA)
---
>                      domain = "R-methods")
613c604
<                     domain = NA)
---
>                     domain = "R-methods")
677c668
<                              domain = NA)
---
>                              domain = "R-methods")
684,686c675,676
<                 stop(gettextf("duplicated slot names: %s",
<                               paste(sQuote(snames[duplicated(snames)]),
<                                     collapse = ", ")), domain = NA)
---
>                 stop(sprintf(ngettext(length(duplicated(snames)), "duplicated slot name: %s", "duplicated slot names: %s", domain = "R-methods"),
>                               paste(sQuote(snames[duplicated(snames)]), collapse = ", ")), domain = NA)
691c681
<                                       "invalid names for slots of class %s: %s"),
---
>                                       "invalid names for slots of class %s: %s", domain = "R-methods"),
759c749
<                      domain = NA)
---
>                      domain = "R-methods")
764c754
<                      domain = NA)
---
>                      domain = "R-methods")
779c769
<                                          "multiple definitions of class %s visible (%s); using the definition\n   in package %s for %s"),
---
>                                          "multiple definitions of class %s visible (%s); using the definition\n   in package %s for %s", domain = "R-methods"),
829,830c819,820
<     stop(gettextf("class definition cannot extend more than one of these data types: %s",
< 		  paste0('"',type, '"', collapse = ", ")),
---
>     stop(gettext("class definition cannot extend more than one of these data types:", domain = "R-methods"),
> 		  paste0(dQuote(type), collapse = ", "),
836c826
<          domain = NA)
---
>          domain = "R-methods")
840c830
<   ##                 type, class), domain = NA)
---
>   ##                 type, class), domain = "R-methods")
921c911
<                 warning(gettextf("multiple class definitions for %s from packages: %s; picking the first",
---
>                 warning(sprintf(gettext("multiple class definitions for class %s from packages: %s; picking the first", domain = "R-methods"),
928c918
<                 stop(gettextf("no package name supplied and no class definition found for %s",
---
>                 stop(gettextf("no package name supplied and no class definition found for class %s",
930c920
<                      domain = NA)
---
>                      domain = "R-methods")
980c970
<                  domain = NA, call. = FALSE)
---
>                  domain = "R-methods", call. = FALSE)
982c972
<             stop(gettextf("All %s names must be nonempty in:\n(%s)", what,
---
>             stop(sprintf(gettext("All %s names must be nonempty in:\n(%s)", domain = "R-methods"), what,
986c976
<             stop(gettextf("All %s names must be distinct in:\n(%s)", what,
---
>             stop(sprintf(gettext("All %s names must be distinct in:\n(%s)", domain = "R-methods"), what,
1011c1001
<              domain = NA)
---
>              domain = "R-methods")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/methods/R/addedFunctions.R R/src/library/methods/R/addedFunctions.R
45c45
<         stop(gettextf('expected a non-empty character string for argument name'), domain = NA)
---
>         stop(gettextf("expected a non-empty character string for argument 'name'"), domain = "R-methods")
64c64
< 	     domain = NA)
---
> 	     domain = "R-methods")
87,89c87
<             stop(gettextf("%s is not one of the element names",
<                           sQuote(name)),
<                  domain = NA)
---
>             stop(gettextf("%s is not one of the element names", sQuote(name)), domain = "R-methods")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/methods/R/as.R R/src/library/methods/R/as.R
54c54
<                     stop(sprintf("internal problem in as(): %s is(object, \"%s\") is TRUE, but the metadata asserts that the 'is' relation is FALSE",
---
>                     stop(sprintf("internal problem in 'as()' function: %s is(object, \"%s\") is TRUE, but the metadata asserts that the 'is' relation is FALSE",
56c56
<                          domain = NA)
---
>                          domain = "R-methods")
80c80
< 		stop(gettextf("no method or default for coercing %s to %s",
---
> 		stop(gettextf("no method or default scheme for coercing %s to %s",
83c83
<                      domain = NA)
---
>                      domain = "R-methods")
86,87c86
< 		cacheMethod("coerce", sig, asMethod, fdef = coerceFun,
< 			    inherited = inherited)
---
> 		cacheMethod("coerce", sig, asMethod, fdef = coerceFun, inherited = inherited)
191c190
<         stop(gettextf("no method or default for as() replacement of %s with Class=\"%s\"",
---
>         stop(gettextf("no method or default for 'as()' function replacement of %s with class=\"%s\"",
194c193
<              domain = NA)
---
>              domain = "R-methods")
215,217c214
<             stop(gettextf("trying to set an 'as' relation from %s to itself",
<                           dQuote(.class1(from))),
<                  domain = NA)
---
>             stop(gettextf("trying to set an 'as' relation from %s to itself", dQuote(.class1(from))), domain = "R-methods")
222,224c219
<             stop(gettextf("class %s is not defined in this environment",
<                           dQuote(to)),
<                  domain = NA)
---
>             stop(gettextf("class %s is not defined in this environment", dQuote(to)), domain = "R-methods")
226,228c221
<             stop(gettextf("class %s is a class union: 'coerce' relations to a class union are not meaningful",
<                           dQuote(to)),
<                  domain = NA)
---
>             stop(gettextf("class %s is a class union: 'coerce' relations to a class union are not meaningful", dQuote(to)), domain = "R-methods")
238,240c231,232
<                stop(gettextf("'as' method should have one argument, or match the arguments of coerce(): got  (%s)",
<                            paste(formalArgs(def), collapse = ", ")),
<                   domain = NA)
---
>                stop(sprintf(gettext("'as' method should have one argument, or match the arguments of 'coerce()' function: got (%s)", domain = "R-methods"),
>                            paste(formalArgs(def), collapse = ", ")), domain = NA)
254c246
<                     stop(gettextf("a 'replace' method definition in 'setAs' must be a function of two arguments, got %d", length(args)), domain = NA)
---
>                     stop(gettextf("a 'replace' method definition in 'setAs' function must be a function of two arguments, got %d", length(args)), domain = "R-methods")
260,261c252,253
<                     warning(gettextf("argument names in 'replace' changed to agree with 'coerce<-' generic:\n%s", paste(deparse(replace), sep="\n    ")),
<                             domain = NA)
---
>                     warning(gettextf("argument names in 'replace' method changed to agree with 'coerce<-' generic function:\n%s", paste(deparse(replace), sep="\n    ")),
>                             domain = "R-methods")
276c268
<           warning("direct use of coerce() is deprecated:  use as(from, class(to)) instead", domain = NA)
---
>           warning("direct use of 'coerce()' method is deprecated: use 'as(from, class(to))' instead", domain = "R-methods")
284c276
<           warning("direct use of coerce() is deprecated:  use as(from, class(to)) <- value instead", domain = NA)
---
>           warning("direct use of 'coerce()' method is deprecated: use 'as(from, class(to)) <- value' instead", domain = "R-methods")
367,368c359
<         value <- substitute(if(strict) EXPR else from,
<                            list(EXPR = expr))
---
>         value <- substitute(if(strict) EXPR else from, list(EXPR = expr))
385,386c376
<     prevCoerce <- !is.null(selectMethod("coerce", sig, TRUE, FALSE,
<                                         fdef = cdef))
---
>     prevCoerce <- !is.null(selectMethod("coerce", sig, TRUE, FALSE, fdef = cdef))
390,391c380
<     prevRepl <- !is.null(selectMethod("coerce<-", sig, TRUE, FALSE,
<                                       fdef = rdef))
---
>     prevRepl <- !is.null(selectMethod("coerce<-", sig, TRUE, FALSE, fdef = rdef))
397c386
<                     domain = NA)
---
>                     domain = "R-methods")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/methods/R/fixPrevious.R R/src/library/methods/R/fixPrevious.R
32,34c32
<             warning(gettextf("object %s not found",
<                              sQuote(what)),
<                     domain = NA)
---
>             warning(gettextf("object %s was not found", sQuote(what)), domain = "R-methods")
58c56
<                             domain = NA)
---
>                             domain = "R-methods")
61,64c59
<                 warning(gettextf("no definition for the class of %s (class %s) found",
<                                  sQuote(what),
<                                  dQuote(class)),
<                         domain = NA)
---
>                 warning(gettextf("no definition for the class of %s (class %s) found", sQuote(what), dQuote(class)), domain = "R-methods")
67,69c62
<             warning(gettextf("object %s not changed (it does not appear to be from a version of R earlier than 1.8.0)",
<                              sQuote(what)),
<                     domain = NA)
---
>             warning(gettextf("object %s not changed (it does not appear to be from a version of R earlier than 1.8.0)", sQuote(what)), domain = "R-methods")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/methods/R/is.R R/src/library/methods/R/is.R
140c140
<              domain = NA)
---
>              domain = "R-methods")
154c154
<              domain = NA)
---
>              domain = "R-methods")
158c158
<              domain = NA)
---
>              domain = "R-methods")
212c212
<                 call. = FALSE, domain = NA)
---
>                 call. = FALSE, domain = "R-methods")
237c237
<                                           "class %s is missing slots from class %s (%s), and no coerce method was supplied"),
---
>                                           "class %s is missing slots from class %s (%s), and no coerce method was supplied", domain = "R-methods"),
249c249
<                                           "slots in class %s must extend corresponding slots in class %s: fails for %s"),
---
>                                           "slots in class %s must extend corresponding slots in class %s: fails for %s", domain = "R-methods"),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/methods/R/methodsTable.R R/src/library/methods/R/methodsTable.R
91c91
<            domain = NA)
---
>            domain = "R-methods")
271c271
<            domain = NA)
---
>            domain = "R-methods")
340c340
<                          domain = NA)
---
>                          domain = "R-methods")
395,398c395,397
<         stop("package slot missing from signature for generic ",
<              sQuote(method@generic), "\n",
<              "and classes ", paste(sig, collapse = ", "), "\n",
<              "cannot use with duplicate class names (the package may need to be re-installed)",
---
>         stop(sprintf(gettext("package slot missing from signature for generic %s\n and classes %s\ncannot use with duplicate class names (the package may need to be re-installed)", domain = "R-methods"),
>              sQuote(method@generic), 
>              paste(sig, collapse = ", ")), 
429c428
<                  domain = NA)
---
>                  domain = "R-methods")
469c468
<           stop(gettextf("invalid or unset methods table in generic function %s", sQuote(fdef@generic)), damain = NA)
---
>           stop(gettextf("invalid or unset methods table in generic function %s", sQuote(fdef@generic)), damain = "R-methods")
481,484c480,481
< 	    if(hasGroup) paste0(" Group generics: ",
< 				plist(vapply(groupGenerics, slot,
< 					     character(1), "generic")), "\n"),
< 	    sep='')
---
> 	    if(hasGroup) paste0(gettext(" Group generics: ", domain = "R-methods"),
> 				plist(vapply(groupGenerics, slot, character(1), "generic")), "\n"), sep = '')
544,545c541
<         if(verbose) cat(" .fI> #{additional group methods}:",
<                         length(groupmethods),"\n")
---
>         if(verbose) cat(" .fI> #{additional group methods}:", length(groupmethods),"\n")
578,579c574
<         if(verbose) cat(" .fI> length(methods) = ", length(methods),
<                         " --> ambiguity\n")
---
>         if(verbose) cat(" .fI> length(methods) = ", length(methods), " --> ambiguity\n")
593c588
<                    domain = NA)
---
>                    domain = "R-methods")
610c605
<                   domain = NA)
---
>                   domain = "R-methods")
667c662
<     message(gettextf("Note: method with signature %s chosen for function %s,\n target signature %s.\n %s would also be valid",
---
>     message(sprintf(gettext("Note: method with signature %s chosen for function %s,\n target signature %s.\n %s would also be valid", domain = "R-methods"),
671,672c666
< 		     paste0('"', possible[is.na(match(possible, selected))], '"',
< 			    collapse=", ")),
---
> 		     paste0(dQuote(possible[is.na(match(possible, selected))]), collapse = ", ")),
733c727
<                                  "found %d equally good next methods"),
---
>                                  "found %d equally good next methods", domain = "R-methods"),
754c748
<          domain = NA)
---
>          domain = "R-methods")
757c751
<     stop("Internal error in finding inherited methods; didn't return a unique method", domain = NA)
---
>     stop("Internal error in finding inherited methods; didn't return a unique method", domain = "R-methods")
800c794
<     for(j in 1L:n) {
---
>     for(j in seq_len(n)) {
806c800
<     if(verbose) { cat("** individual arguments' distances:\n"); print(containsDist) }
---
>     if(verbose) { cat(gettext("** individual arguments' distances:", domain = "R-methods"), "\n", sep = ""); print(containsDist) }
808c802
<     for(i in 1L:nArg) {
---
>     for(i in seq_len(nArg)) {
815,816c809,810
<     if(verbose) cat("** final methods' distances: (",
< 		    paste(formatC(dist), collapse= ", "), ")\n", sep='')
---
>     if(verbose) cat(sprintf(gettext("** final methods' distances: (%s)", domain = "R-methods"),
> 		    paste(formatC(dist), collapse = ", ")), "\n", sep = "")
830c824
<     for(i in 1:n) {
---
>     for(i in seq_len(n)) {
833,834c827
< 	if(verbose) cat(sprintf(" .. method %d: length(sig) = %d < nArg = %d\n",
< 				i, length(sig), nArg))
---
> 	if(verbose) cat(gettextf(" .. method %d: length(sig) = %d < nArg = %d\n", i, length(sig), nArg, domain = "R-methods"))
860,863c853,854
< 	cat(if(any(best)) paste(" have best ones",
< 				paste(format(seqn[best]),collapse=","))
< 	    else if(any(dominated)) paste(" can eliminate dominated ones,",
< 				    paste(format(seqn[dominated]),collapse=",")),
---
> 	cat(if(any(best)) paste(gettext(" have best ones", domain = "R-methods"), paste(format(seqn[best]), collapse = ", "))
> 	    else if(any(dominated)) paste(gettext(" can eliminate dominated ones,", domain = "R-methods"), paste(format(seqn[dominated]),collapse = ", ")),
887c878
<                                "Selecting %d methods of minimum distance"),
---
>                                "Selecting %d methods of minimum distance", domain = "R-methods"),
896c887
<                                       "Selecting %d non-group methods"),
---
>                                       "Selecting %d non-group methods", domain = "R-methods"),
908c899
<                                        "Selecting %d partially exact-matching methods"),
---
>                                        "Selecting %d partially exact-matching methods", domain = "R-methods"),
919c910
<                           "Choosing method %s from %d ambiguous possibilities"),
---
>                           "Choosing method %s from %d ambiguous possibilities", domain = "R-methods"),
931,932c922
<   if(verbose) cat("   .disambiguateM*(): notes =\n\t",
< 		  attr(condObject, "notes"), "\n")
---
>   if(verbose) cat("   .disambiguateM*(): notes =\n\t", attr(condObject, "notes"), "\n")
1040c1030
<     doFun <- function(func, pkg) cf("Function: ", func, " (package ", pkg, ")\n")
---
>     doFun <- function(func, pkg) cf(gettextf("Function: %s (package %s)", func, pkg, domain = "R-methods"), "\n")
1057c1047
< 	    cf("<No methods>\n\n")
---
> 	    cf(gettext("<No methods>\n\n", domain = "R-methods"))
1070c1060,1061
<                 cf("  (", length(pkgs), " methods defined for this signature, with different packages)\n")
---
>                 cf(sprintf(ngettext(length(pkgs), "  (%d methods defined for this signature, with different packages)\n",
> 				 "  (%d methods defined for this signature, with different packages)\n", domain = "R-methods"), length(pkgs)))
1081,1084c1072,1074
< 		cf("    (inherited from: ", sigString(d), ")\n")
<             if(!.identC(m@generic, f) && length(m@generic) == 1L &&
<                nzchar(m@generic))
< 		cf("    (definition from function \"", m@generic, "\")\n")
---
> 		cf("    ", gettextf("(inherited from: %s)", sigString(d), domain = "R-methods"), "\n")
>             if(!.identC(m@generic, f) && length(m@generic) == 1L && nzchar(m@generic))
> 		cf("    ", gettextf("(definition from function %s)", sQuote(m@generic), domain = "R-methods"), "\n")
1111,1112c1101
<                                stop("failed to find expected group generic function: ",
<                                     what)
---
>                                stop("failed to find expected group generic function: ", what)
1134c1123
<            domain = NA)
---
>            domain = "R-methods")
1175,1176c1164
<       warning(gettextf("trying to check signature length of group generic '%s', but it is not a group generic", what),
<               domain = NA)
---
>       warning(gettextf("trying to check signature length of group generic %s, but it is not a group generic", sQuote(what)), domain = "R-methods")
1201,1202c1189,1190
<       warning(gettextf("trying to check signature length of generic '%s', but it is not a generic function: i = %d, funs = %s, gnames = %s",
<                        what,  i, paste(unlist(funs), collapse = ", "),
---
>       warning(sprintf(gettext("trying to check signature length of generic %s, but it is not a generic function: i = %d, funs = %s, gnames = %s", domain = "R-methods"),
>                        sQuote(what),  i, paste(unlist(funs), collapse = ", "),
1434,1435c1422
<         warning("something weird:  inconsistent number of args in methods table strings:", paste(nargs,collapse = ", ")," (using the largest value)",
<                 domain = NA)
---
>         warning(sprintf(gettext("something weird: inconsistent number of args in methods table strings: %s (using the largest value)", domain = "R-methods"), paste(nargs,collapse = ", ")), domain = NA)
1465c1452
<            domain = NA)
---
>            domain = "R-methods")
1563,1564c1550,1551
<       ##         warning(gettextf("No eligible subclasses for argument '%s' found, so no contribution to analysis",
<       ##                          colnames(sigs)[[j]]), domain  = NA)
---
>       ##         warning(gettextf("No eligible subclasses for argument %s found, so no contribution to analysis",
>       ##                          sQuote(colnames(sigs)[[j]])), domain  = NA)
1579,1581c1566,1568
<         warning(gettextf("undefined classes (%s) will be ignored for argument '%s'",
<                          paste0('"',unique(.undefClasses),'"', collapse=", "),
<                          colnames(sigs)[[j]]), domain = NA)
---
>         warning(sprintf(gettext("undefined classes (%s) will be ignored for argument %s", domain = "R-methods"),
>                          paste0(dQuote(unique(.undefClasses)), collapse = ", "),
>                          sQuote(colnames(sigs)[[j]])), domain = NA)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/methods/R/oldClass.R R/src/library/methods/R/oldClass.R
40c40
<                    domain = NA)
---
>                    domain = "R-methods")
79c79
<                        domain = NA)
---
>                        domain = "R-methods")
100c100
<                   stop(gettextf('the S3 class of the prototype, "%s", is undefined; only allowed when this is the S3 class being registered ("%s")', .class1(prototype), mainClass), domain = NA)
---
>                   stop(gettextf('the S3 class of the prototype, "%s", is undefined; only allowed when this is the S3 class being registered ("%s")', .class1(prototype), mainClass), domain = "R-methods")
121c121
<             domain = NA)
---
>             domain = "R-methods")
184c184
<                       domain = NA)
---
>                       domain = "R-methods")
189c189
<                gettextf("invalid S4 class corresponding to S3 class: slots in  S4 version must extend corresponding slots in S3 version: fails for %s",
---
>                sprintf(gettext("invalid S4 class corresponding to S3 class: slots in  S4 version must extend corresponding slots in S3 version: fails for %s", domain = "R-methods"),
206c206
<         stop(gettextf("explicit coercion of old-style class (%s) is not defined", paste(class(from), collapse = ", ")), domain = NA)
---
>         stop(sprintf(gettext("explicit coercion of old-style class (%s) is not defined", domain = "R-methods"), paste(class(from), collapse = ", ")), domain = NA)
212c212
<          domain = NA)
---
>          domain = "R-methods")
221c221
<         stop(gettextf("argument 'Classes' must be a vector of two classes; got an argument of length %d", length(Classes)), domain = NA)
---
>         stop(gettextf("argument 'Classes' must be a vector of two classes; got an argument of length %d", length(Classes)), domain = "R-methods")
226c226
<                                  dQuote(cl)), domain = NA)
---
>                                  dQuote(cl)), domain = "R-methods")
254c254
<                      domain = NA)
---
>                      domain = "R-methods")
283c283
<                     domain = NA)
---
>                     domain = "R-methods")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/methods/R/packageName.R R/src/library/methods/R/packageName.R
63c63
< #              warning("The package name \"", pkg, "\" was inferred, but not found in that package")
---
> #              warning(gettextf("The package name \"%s\" was inferred, but not found in that package", pkg))
70c70
<                 domain = NA)
---
>                 domain = "R-methods")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/methods/R/promptClass.R R/src/library/methods/R/promptClass.R
96c96
<                           dQuote(clName)), domain = NA)
---
>                           dQuote(clName)), domain = "R-methods")
101c101
<                                  dQuote(clName), whereClass), domain = NA)
---
>                                  dQuote(clName), whereClass), domain = "R-methods")
109c109
<                                           "no definition of class %s in the specified position, %s, definitions on : %s"),
---
>                                           "no definition of class %s in the specified position, %s, definitions on : %s", domain = "R-methods"),
268,269c268,277
<     .message("A shell of class documentation has been written",
<              .fileDesc(filename), ".\n")
---
>     if(is.character(filename)) {
>         if(nzchar(filename))
>     	    .message(gettextf("A shell of class documentation has been written to the file %s.\n", sQuote(filename), domain = "R-methods"))
>         else
>     	    .message("A shell of class documentation has been written to the standard output connection.\n", domain = "R-methods")
>     }
>     else if(inherits(filename, "connection"))
>     	    .message(gettextf("A shell of class documentation has been written to the connection %s.\n", sQuote(summary(filename)$description)), domain = "R-methods")
>     else # what, indeed?
>     .message("A shell of class documentation has been written.\n", domain = "R-methods")
274,285c282
< .fileDesc <- function(file) {
<     if(is.character(file)) {
< 	if(nzchar(file))
< 	    paste(" to the file", sQuote(file))
< 	else
< 	    " to the standard output connection"
<     }
<     else if(inherits(file, "connection"))
< 	paste(" to the connection",
<               sQuote(summary(file)$description))
<     else "" # what, indeed?
< }
---
> #R-ELS UPDATE: functionality of .fileDesc() is now incorporated in above methods
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/methods/R/refClass.R R/src/library/methods/R/refClass.R
44c44
<                  domain = NA)
---
>                  domain = "R-methods")
53c53
<                 domain = NA)
---
>                 domain = "R-methods")
74c74
<                  domain = NA)
---
>                  domain = "R-methods")
114,115c114,115
<             warning(gettextf("methods declared in usingMethods() but not found: %s",
<                 paste0(declared[! declared %in% allMethods], collapse = ", ")))
---
>             warning(sprintf(gettext("methods declared in usingMethods() but not found: %s", domain = "R-methods"),
>                 paste0(declared[! declared %in% allMethods], collapse = ", ")), domain = NA)
129,131c129
<         stop(gettextf("%s is not a reference class",
<                       dQuote(Class)),
<              domain = NA)
---
>         stop(gettextf("%s is not a reference class", dQuote(Class)), domain = "R-methods")
142c140
<              domain = NA)
---
>              domain = "R-methods")
210c208
<                         domain = NA)
---
>                         domain = "R-methods")
244c242
<              domain = NA)
---
>              domain = "R-methods")
262,265c260
<              '
< Returns the result of coercing the object to
< Class.  No effect on the object itself.
< '
---
>              'Returns the result of coercing the object to Class. No effect on the object itself.'
281c276
<                               domain = NA)
---
>                               domain = "R-methods")
291c286
<                       domain = NA)
---
>                       domain = "R-methods")
296,302c291
<              '
< Imports value, replacing the part of the current object
< corresponding to Class (if argument Class is missing
< it is taken to be class(value)).  The Class must be one
< of the reference superclasses of the current class (or
< that class itself, but then you could just overrwite the object).
< '
---
>              'Imports value, replacing the part of the current object corresponding to Class (if argument Class is missing it is taken to be class(value)).  The Class must be one of the reference superclasses of the current class (or that class itself, but then you could just overrwite the object).'
318c307
<                               domain = NA)
---
>                               domain = "R-methods")
324,326c313
<                  stop(gettextf("%s is not one of the reference super classes for this object",
<                                dQuote(Class)),
<                       domain = NA)
---
>                  stop(gettextf("Class %s is not one of the reference super classes for this object", dQuote(Class)), domain = "R-methods")
328c315
<          callSuper = function(...) stop("direct calls to callSuper() are invalid:  should only be called from another method"),
---
>          callSuper = function(...) stop("direct calls to 'callSuper()' are invalid: should only be called from another method"),
356c343
<                       domain = NA)
---
>                       domain = "R-methods")
360,367c347
<              ' Insert trace debugging for the specified method.  The arguments are
<  the same as for the trace() function in package "base".  The first argument
<  should be the name of the method to be traced, quoted or not.
< 
<  The additional argument classMethod= can be supplied as TRUE (by name only)
<  in order to trace a method in a generator object (e.g., "new") rather than
<  in the objects generated from that class.
< '
---
>              gettext(" Insert trace debugging for the specified method.  The arguments are the same as for the trace() function in package \"base\".  The first argument should be the name of the method to be traced, quoted or not.\n\n The additional argument classMethod= can be supplied as TRUE (by name only) in order to trace a method in a generator object (e.g., \"new\") rather than in the objects generated from that class.")
371,372c351
<              ' Untrace the method given as the first argument.
< '
---
>              "Untrace the method given as the first argument."
377c356
< 		 cat('Prototypical reference class object\n')
---
> 		 cat(gettext("Prototypical reference class object", domain = "R-methods"), "\n", sep = "")
379,380c358
< 		 cat('Reference class object of class ', classLabel(cl), '\n',
< 		     sep = "")
---
>              cat(gettextf("Reference class object of class %s", classLabel(class(.self)), domain = "R-methods"), "\n", sep = "")
383c361
< 		     cat('Field "', fi, '":\n', sep = "")
---
>                  cat(gettextf("Field %s:", dQuote(fi), domain = "R-methods"), "\n", sep = "")
389,395c367
<              ' Reference methods used by this method are named as the arguments
<  either quoted or unquoted.  In the code analysis phase of installing the
<  the present method, the declared methods will be included.  It is essntial
<  to declare any methods used in a nonstandard way (e.g., via an apply function).
<  Methods called directly do not need to be declared, but it is harmless to do so.
<  $usingMethods() does nothing at run time.
< '
---
>              gettext(" Reference methods used by this method are named as the arguments  either quoted or unquoted.  In the code analysis phase of installing the  the present method, the declared methods will be included.  It is essntial  to declare any methods used in a nonstandard way (e.g., via an apply function). Methods called directly do not need to be declared, but it is harmless to do so. $usingMethods() does nothing at run time.")
485,486c457
<               function(object) showRefClassDef(object$def, "Generator for class"),
<               where = envir)
---
>               function(object) showRefClassDef(object$def, gettext("Generator for class", domain = "R-methods")), where = envir)
524c495
<              domain = NA)
---
>              domain = "R-methods")
531c502
<         stop("arguments to methods() must be named, or one named list")
---
>         stop("arguments to 'methods()' must be named, or one named list")
564,569c535
<     '
< Returns the named vector of classes
< for the fields in this class.  Fields
< defined with accessor functions have
< class "activeBindingFunction".
< '
---
>     'Returns the named vector of classes for the fields in this class. Fields defined with accessor functions have class "activeBindingFunction".'
576,581c542
<     '
< Prints simple documentation for the method or field
< specified by argument topic, which should be the name
< of the method or field, quoted or not.  With no topic,
< prints the definition of the class.
< '
---
>     'Prints simple documentation for the method or field specified by argument topic, which should be the name of the method or field, quoted or not.  With no topic, prints the definition of the class.'
584,585c545
< c('Usage:  $help(topic) where topic is the name of a method (quoted or not)',
<   paste('The definition of class', className, 'follows.')))
---
> gettext("Usage:  $help(topic) where topic is the name of a method (quoted or not)"), gettextf("The definition of class %s follows.", dQuote(className)))
599,600c559
<                          sQuote(topic),
<                          dQuote(className)))
---
>                          sQuote(topic), dQuote(className), domain = "R-methods"))
619c578
<              domain = NA)
---
>              domain = "R-methods")
633c592
<                  domain = NA)
---
>                  domain = "R-methods")
697c656
<                      domain = NA)
---
>                      domain = "R-methods")
779c738
<                                               domain = NA)
---
>                                               domain = "R-methods")
783c742
<             stop(gettextf("no definition found for inherited class: %s",
---
>             stop(sprintf(gettext("no definition found for inherited class: %s", domain = "R-methods"),
822c781
<                      domain = NA)
---
>                      domain = "R-methods")
827c786
<                      domain = NA)
---
>                      domain = "R-methods")
845c804
<                  domain = NA)
---
>                  domain = "R-methods")
906c865
<                 , domain = NA)
---
>                 , domain = "R-methods")
968c927
<                  domain = NA)
---
>                  domain = "R-methods")
973c932
<              domain = NA)
---
>              domain = "R-methods")
990c949
<              domain = NA)
---
>              domain = "R-methods")
998,999c957
<         stop(gettextf("not a reference class: %s", ClassDef@name),
<              domain = NA)
---
>         stop(gettextf("not a reference class: %s", ClassDef@name), domain = "R-methods")
1008,1011c966,970
<     cat("Class method definition")
<     if(!.identC(cl, "refMethodDef"))
<         cat(sprintf(" (class %s)", dQuote(cl)))
<     cat(sprintf(" for method %s()\n", object@name))
---
>     if(!.identC(cl, "refMethodDef")) {
>      cat(gettextf("Class method definition (class %s) for method %s", dQuote(cl), sQuote(paste(object@name, "()", collapse = "")), domain = "R-methods"), "\n", sep = "")
>     } else {
>     cat(gettextf("Class method definition for method %s", sQuote(paste(object@name, "()", collapse = "")), domain = "R-methods"), "\n", sep = "")
>     }
1014c973
<         .printNames("\nMethods used: ", object@mayCall)
---
>         .printNames(gettext("Methods used: ", domain = "R-methods"), object@mayCall)
1018c977
<     names <- paste0('"', names, '"')
---
>     names <- sQuote(names)
1020c979
<         cat(header, "\n", sep = "")
---
>         cat("\n", header, "\n    ", sep = "")
1023c982
<         cat(header, ": ", sep = "")
---
>         cat("\n", header, ": ", sep = "")
1029,1030c988,989
< showRefClassDef <- function(object, title = "Reference Class") {
<     cat(title," \"", object@className,"\":\n", sep="")
---
> showRefClassDef <- function(object, title = gettext("Reference Class", domain = "R-methods")) {
>     cat(title," ", dQuote(object@className),":\n", sep = "")
1033c992,993
<         printPropertiesList(fields, "Class fields")
---
>         cat("\n", gettext("Class fields:", domain = "R-methods"), "\n", sep = "")
> 	printPropertiesList(fields)
1036c996
<             .printNames("Locked Fields", locked, FALSE)
---
>             .printNames(gettext("Locked Fields", domain = "R-methods"), locked, FALSE)
1039c999
<         cat("\nNo fields defined\n")
---
>         cat("\n", gettext("No fields defined", domain = "R-methods"), "\n", sep = "")
1042c1002
<         .printNames("\nClass Methods: ", methods)
---
>         .printNames(gettext("Class Methods: ", domain = "R-methods"), methods)
1044c1004
<         cat ("\nNo Class Methods\n")
---
>         cat ("\n", gettext("No Class Methods", domain = "R-methods"), "\n", sep = "")
1047c1007
<         .printNames("Reference Superclasses: ", supers)
---
>         .printNames(gettext("Reference Superclasses: ", domain = "R-methods"), supers)
1056c1016
<     nt <- sort(objects(target, all.names = TRUE))
---
>         .printNames("Methods used: ", object@mayCall)
1131c1091
<                 domain = NA)
---
>                 domain = "R-methods")
1139c1099
<                 domain = NA)
---
>                 domain = "R-methods")
1144c1104
<                 domain = NA)
---
>                 domain = "R-methods")
1187c1147
<              domain = NA)
---
>              domain = "R-methods")
1193c1153
<                     domain = NA)
---
>                     domain = "R-methods")
1201c1161
<                  domain = NA)
---
>                  domain = "R-methods")
1210c1170
<                      domain = NA)
---
>                      domain = "R-methods")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/methods/R/show.R R/src/library/methods/R/show.R
24c24
<         cat("An object of class ", cl, "\n", sep="")
---
>         cat(gettextf("An object of class %s", cl, domain = "R-methods"), "\n", sep = "")
37c37
< 	    cat("Slot ", deparse(what), ":\n", sep="")
---
>             cat(gettextf("Slot %s:", deparse(what), domain = "R-methods"), "\n", sep = "")
71c71
<         ## NBB:  This relies on the delicate fact
---
>         ## NBB:  This relies on the delicate fact (as of version 1.7 at least)
84c84
<            domain = NA)
---
>            domain = "R-methods")
87c87
<         cat("Slot ",s, ":\n", sep="")
---
>         cat(gettextf("Slot %s:", dQuote(s), domain = "R-methods"), "\n", sep = "")
104d103
< 		  nonStandard <-
106,107c105,106
< 			  "" else paste0(" (Class ", classLabel(cl),")")
<                   cat("Method Definition",nonStandard,":\n\n", sep = "")
---
>                   	cat(gettext("Method Definition:", domain = "R-methods"), "\n\n", sep = "")
> 		      else cat(gettextf("Method Definition (Class %s):", dQuote(classLabel(cl)), domain = "R-methods"), "\n\n", sep = "")
110c109
<                   cat("\nSignatures:\n")
---
>                   cat("\n", gettext("Signatures:", domain = "R-methods"), "\n", sep = "")
117c116
<                   cat("\nExcluded from nextMethod:\n")
---
>                   cat("\n", gettext("Excluded from nextMethod:", domain = "R-methods"), "\n", sep = "")
123,131c122,130
<                   cat(class(object)," for \"", object@generic,
<                       "\" defined from package \"", object@package,
<                       "\"\n", sep = "")
<                   if(length(object@group))
<                       cat("  belonging to group(s):",
<                           paste(unlist(object@group), collapse =", "), "\n")
<                   if(length(object@valueClass))
<                       cat("  defined with value class: \"", object@valueClass,
<                           "\"\n", sep="")
---
> 		if(length(object@group) && length(object@valueClass))
>                   cat(sprintf(gettext("Class %s for generic %s defined from package %s\n  belonging to group(s): %s\n  defined with value class: %s\n", domain = "R-methods"), dQuote(class(object)), dQuote(object@generic), sQuote(object@package), paste(unlist(object@group), collapse =", "), dQuote(object@valueClass)))
> 		else if(!length(object@group) && length(object@valueClass))
>                   cat(gettextf("Class %s for generic %s defined from package %s\n  defined with value class: %s\n", dQuote(class(object)), dQuote(object@generic), sQuote(object@package), dQuote(object@valueClass), domain = "R-methods"))
> 		else if(length(object@group) && !length(object@valueClass))
>                   cat(sprintf(gettext("Class %s for generic %s defined from package %s\n  belonging to group(s): %s\n", domain = "R-methods"), dQuote(class(object)), dQuote(object@generic), sQuote(object@package), paste(unlist(object@group), collapse =", ")))
> 		else
>                   cat(gettextf("Class %s for generic %s defined from package %s", dQuote(class(object)), dQuote(object@generic), sQuote(object@package), domain = "R-methods"), "\n", sep = "")
> 
134,137c133
<                   cat("Methods may be defined for arguments: ",
<                       paste(object@signature, collapse=", "), "\n",
< 			    "Use  showMethods(\"", object@generic,
< 			    "\")  for currently available ones.\n", sep="")
---
>                   cat(sprintf(gettext("Methods may be defined for arguments: %s\nUse 'showMethods(\"%s\")' for currently available ones.", domain = "R-methods"), paste(object@signature, collapse=", "), object@generic), "\n", sep = "")
139c135
<                       cat("(This generic function excludes non-simple inheritance; see ?setIs)\n");
---
>                       cat(gettext("(This generic function excludes non-simple inheritance; see '?setIs')"), "\n", sep = "");
145,146c141
<                     cat("Extended class definition (", classLabel(class(object)),
<                         ")\n")
---
>                     cat(gettextf("Extended class definition (%s)", classLabel(class(object)), domain = "R-methods"), "\n", sep = "")
153,154c148
<         message(gettextf("An object of class %s", dQuote(class(object))),
<                 domain = NA)
---
>         message(gettextf("An object of class %s", dQuote(class(object))), domain = "R-methods")
181c175
<         else stop(gettextf("invalid call to 'classLabel': expected a name or a class definition, got an object of class %s", classLabel(class(Class))), domain = NA)
---
>         else stop(gettextf("invalid call passed to 'classLabel': expected a name or a class definition, got an object of class %s", classLabel(class(Class))), domain = "R-methods")
184d177
< 	packageName <-
186c179
< 		" (from the global environment)"
---
> 		gettextf("Class %s (from the global environment)", dQuote(className))
188,189c181
< 		paste0(" (from package \"", packageName, "\")")
<        paste0('"', className, '"', packageName)
---
> 		gettextf("Class %s (from package %s)", dQuote(className), sQuote(packageName))
192c184
<        paste0('"', className, '"')
---
>        dQuote(className)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/methods/R/trace.R R/src/library/methods/R/trace.R
86c86
<                  domain = NA)
---
>                  domain = "R-methods")
141c141
<         message(".TraceWithMethods: after computing what, whereF", domain = NA)
---
>         message(".TraceWithMethods: after computing what, whereF", domain = "R-methods")
149,151c149
<             stop(gettextf("no function definition for %s found",
<                           sQuote(what)),
<                  domain = NA)
---
>             stop(gettextf("no function definition for %s found", sQuote(what)), domain = "R-methods")
165c163
<             warning(gettextf("cannot untrace method for %s; no method defined for this signature: %s",
---
>             warning(sprintf(gettext("cannot untrace method for %s; no method defined for this signature: %s", domain = "R-methods"),
176c174
<             message(".TraceWithMethods: untrace case", domain = NA)
---
>             message(".TraceWithMethods: untrace case", domain = "R-methods")
196c194
<                         domain = NA)
---
>                         domain = "R-methods")
243c241
<         message(".TraceWithMethods: about to assign or setMethod", domain = NA)
---
>         message(".TraceWithMethods: about to assign or setMethod", domain = "R-methods")
296,298c294,295
<             untcall<- paste("untrace(\"", what, "\", where = getNamespace(\"",
<                             pname, "\"))", sep="")
<             .message("Warning: Tracing only in the namespace; to untrace you will need:\n    ",untcall, "\n")
---
>             untcall<- paste("untrace(\"", what, "\", where = getNamespace(\"", pname, "\"))", sep="")
>             .message(gettext("Warning: Tracing only in the namespace; to untrace you will need:", domain = "R-methods"), "\n    ", untcall, "\n")
340c337
<                  domain = NA)
---
>                  domain = "R-methods")
430,431c427
<         cat("Object with tracing code, class \"", class(object),
<         "\"\nOriginal definition: \n", sep="")
---
>         cat(gettextf("An object with tracing code, class %s\nOriginal definition:\n", dQuote(class(object)), domain = "R-methods"), sep = "")
433c429
<         cat("\n## (to see the tracing code, look at body(object))\n")
---
>         cat("\n## ", gettext("(to see the tracing code, look at body(object))", domain = "R-methods"), "\n", sep = "")
436,437c432
<         cat("Object of class \"", class(object),
<             "\", from source\n", sep = "")
---
>         cat(gettextf("An object of class %s, from source:", dQuote(class(object)), domain = "R-methods"), "\n", sep = "")
439c434
<         cat("\n## (to see original from package, look at object@original)\n")
---
>         cat("\n## ", gettext("(to see original from package, look at object@original)", domain = "R-methods"), "\n", sep = "")
461,462c456,457
<     cat("Object of class \"", class(object), "\"\n", sep = "")
<     cat("Source environment created ", format(object@dateCreated), "\n")
---
>     cat(gettextf("An object of class %s", dQuote(class(object)), domain = "R-methods"), "\n", sep = "")
>     cat(gettextf("Source environment created %s", format(object@dateCreated), domain = "R-methods"), "\n", sep = "")
464c459
<         cat("For package \"",object@packageName, "\"\n", sep = "")
---
>         cat(gettextf("For package %s", sQuote(object@packageName), domain = "R-methods"), "\n", sep = "")
466c461
<         cat("From source file \"", object@sourceFile, "\"\n", sep = "")
---
>         cat(gettextf("From source file %s", sQuote(object@sourceFile), domain = "R-methods"), "\n", sep = "")
473c468
<     cat("Tracing", call, msg, "\n")
---
>     cat(gettext("Tracing ", domain = "R-methods"), call, " ", msg, "\n", sep = "")
487c482
<         message(strwrap(msg), domain = NA)
---
>         message(strwrap(msg), domain = "R-methods")
517c512
<                 domain = NA)
---
>                 domain = "R-methods")
568,569c563
<     message(sprintf("Constructing traceable class %s", dQuote(traceClassName)),
<             domain = NA)
---
>     message(sprintf("Constructing traceable class %s", dQuote(traceClassName)), domain = "R-methods")
572,574c566
<     message(gettextf("Environment of class %s is locked; using global environment for new class",
<                      dQuote(className)),
<             domain = NA)
---
>     message(gettextf("Environment of class %s is locked; using global environment for new class", dQuote(className)), domain = "R-methods")
631c623
<             warning(gettextf("objects found in multiple packages: using %s and ignoring %s",
---
>             warning(sprintf(gettext("objects found in multiple packages: using %s and ignoring %s", domain = "R-methods"),
658c650
<                  domain = NA)
---
>                  domain = "R-methods")
671c663
<              domain = NA)
---
>              domain = "R-methods")
718,719c710,711
<                      "cannot find an environment corresponding to package name \'%s\"",
<                      package), domain = NA)
---
>                      "cannot find an environment corresponding to package name '%s'",
>                      package), domain = "R-methods")
735c727
<                 domain = NA)
---
>                 domain = "R-methods")
744c736
<             warning(gettextf("cannot insert these (not found in source): %s",
---
>             warning(sprintf(gettext("cannot insert these (not found in source): %s", domain = "R-methods"),
755c747
<             warning(gettextf("cannot insert methods for these functions (methods table not found in source): %s",
---
>             warning(sprintf(gettext("cannot insert methods for these functions (methods table not found in source): %s", domain = "R-methods"),
778c770
<     ##                 domain = NA)
---
>     ##                 domain = "R-methods")
812c804
<         message(gettextf("Non-function objects are not currently inserted (not traceable): %s",
---
>         message(sprintf(gettext("Non-function objects are not currently inserted (not traceable): %s", domain = "R-methods"),
815c807
<         message(gettextf("New functions are not currently inserted (not untraceable): %s",
---
>         message(sprintf(gettext("New functions are not currently inserted (not untraceable): %s", domain = "R-methods"),
818c810
<         message(gettextf("Modified functions inserted through trace(): %s",
---
>         message(sprintf(gettext("Modified functions inserted through trace(): %s", domain = "R-methods"),
844c836
<                          f), domain = NA)
---
>                          f), domain = "R-methods")
864c856
<             message(gettextf("Methods inserted for function %s(): %s",
---
>             message(sprintf(gettext("Methods inserted for function %s(): %s", domain = "R-methods"),
871c863
<     message("Pretend we inserted class ", class, domain = NA)
---
>     message(gettextf("Pretend we inserted class %s", class), domain = "R-methods")
881c873
<                  domain = NA)
---
>                  domain = "R-methods")
894c886
<                 , domain = NA)
---
>                 , domain = "R-methods")
900c892
<                  domain = NA)
---
>                  domain = "R-methods")
907c899
<                domain = NA)
---
>                domain = "R-methods")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/methods/R/zzz.R R/src/library/methods/R/zzz.R
31c31
<     cat("initializing class and method definitions ...")
---
>     cat(gettext("initializing class and method definitions ...", domain = "R-methods"))
87c87
<     cat(" done\n")
---
>     cat(gettext(" done", domain = "R-methods"), "\n", sep = "")
138,139c138
<           warning("apparently bad method or class metadata in saved environment;\n",
<                   "move the file or remove the class/method")
---
>           warning("apparently bad method or class metadata in saved environment;\nmove the file or remove the class/method")
153c152,153
< .dQ <- function (x) paste0('"', x, '"')
---
> #.dQ <- function (x) paste0('"', x, '"')
> .dQ <- function (x) dQuote(x)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/methods/man/RClassUtils.Rd R/src/library/methods/man/RClassUtils.Rd
98c98
< showClass(Class, complete=TRUE, propertiesAreCalled="Slots")
---
> showClass(Class, complete=TRUE)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/methods/src/class_support.c R/src/library/methods/src/class_support.c
28a29
> #include "localization.h"
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/methods/src/do_substitute_direct.c R/src/library/methods/src/do_substitute_direct.c
23d22
< #define NO_NLS
26a26
> #include "localization.h"
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/methods/src/init.c R/src/library/methods/src/init.c
24a25
> #include "localization.h"
Only in R/src/library/methods/src: localization.h
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/methods/src/methods.h R/src/library/methods/src/methods.h
21,26d20
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("methods", String)
< #else
< #define _(String) (String)
< #endif
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/methods/src/methods_list_dispatch.c R/src/library/methods/src/methods_list_dispatch.c
29,30c29
< #undef _
< 
---
> #include "localization.h"
215c214
< 	error(_("no \"allMethods\" slot found in object of class \"%s\" used as methods list for function '%s'"),
---
> 	error(_("no 'allMethods' slot found in object of class \"%s\" used as methods list for function '%s'"),
368c367
< 	error("S language method selection got an error when called from internal dispatch for function '%s'",
---
> 	error(_("S language method selection got an error when called from internal dispatch for function '%s'"),
370c369
< 				     "Function name for method selection called internally"));
---
> 				     _("Function name for method selection called internally")));
404c403
< 		  check_single_string(gpackage, FALSE, "The \"package\" slot in generic function object");
---
> 		  check_single_string(gpackage, FALSE, _("The 'package' slot in generic function object"));
425c424
< 		check_single_string(gpackage, FALSE, "The \"package\" slot in generic function object");
---
> 		check_single_string(gpackage, FALSE, _("The 'package' slot in generic function object"));
437,438c436,437
<     else check_single_string(name, TRUE, "The argument \"f\" to getGeneric");
<     check_single_string(package, FALSE, "The argument \"package\" to getGeneric");
---
>     else check_single_string(name, TRUE, _("The argument 'f' passed to getGeneric"));
>     check_single_string(package, FALSE, _("The argument 'package' passed to getGeneric"));
467c466
< 	const char *fname = check_single_string(fsym, TRUE, "The function name in the call to standardGeneric");
---
> 	const char *fname = check_single_string(fsym, TRUE, _("The function name in the call to standardGeneric"));
540c539
<     if (!isSymbol(symbol)) error("'symbol' must be a SYMSXP");
---
>     if (!isSymbol(symbol)) error(_("'symbol' must be a SYMSXP expression"));
672c671
< 	error("internal error in 'callNextMethod': '.nextMethod' was not assigned in the frame of the method call");
---
> 	error(_("internal error in 'callNextMethod': '.nextMethod' was not assigned in the frame of the method call"));
850c849
< 				       "The internal prefix (e.g., \"C\") for a meta-data object");
---
> 				       _("The internal prefix (e.g., \"C\") for a meta-data object"));
852c851
< 				     "The name of the object (e.g,. a class or generic function) to find in the meta-data");
---
> 				     _("The name of the object (e.g,. a class or generic function) to find in the meta-data"));
854c853
< 				   "The name of the package for a meta-data object");
---
> 				   _("The name of the package for a meta-data object"));
990c989
< 	error("generic \"%s\" seems not to have been initialized for table dispatch---need to have '.SigArgs' and '.AllMtable' assigned in its environment");
---
> 	error(_("generic \"%s\" seems not to have been initialized for table dispatch---need to have '.SigArgs' and '.AllMtable' assigned in its environment"));
994c993
< 	error("'.SigArgs' is shorter than '.SigLength' says it should be");
---
> 	error(_("'.SigArgs' is shorter than '.SigLength' says it should be"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/methods/src/utils.c R/src/library/methods/src/utils.c
21a22
> #include "localization.h"
31c32
< 	error("'R_get_primname' called on a non-primitive");
---
> 	error(_("'R_get_primname' called on a non-primitive"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/methods/tests/basicRefClass.R R/src/library/methods/tests/basicRefClass.R
307c307
<     message("Plotting to ", viewerFile)
---
>     message(gettextf("Plotting to %s", viewerFile))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/methods/tests/mixinInitialize.R R/src/library/methods/tests/mixinInitialize.R
36c36
<       "elements of slot \"a\" must be positive"
---
>       gettext("elements of slot \"a\" must be positive")
47c47
<           message("muststop reports: ", value)
---
>           message(gettextf("muststop reports: %s", value))
51,52c51,52
<       stop(gettextf("The expression  %s should have thrown an error, but instead returned an object of class \"%s\"",
<            deparse(substitute(expr))[[1]], class(value)))
---
>       stop(gettextf("The expression %s should have thrown an error, but instead returned an object of class %s",
>            sQuote(deparse(substitute(expr))[[1]]), dQuote(class(value))))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/parallel/R/clusterApply.R R/src/library/parallel/R/clusterApply.R
100c100
<     if (length(args) == 0) stop("need at least one argument")
---
>     if (length(args) == 0) stop("at least one argument is needed")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/parallel/R/detectCores.R R/src/library/parallel/R/detectCores.R
56c56
<         msg <- sprintf("%d simultaneous processes spawned", nc)
---
>         msg <- sprintf(ngettext(nc, "%d simultaneous process spawned", "%d simultaneous processes spawned", domain = "R-parallel"), nc)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/parallel/R/snow.R R/src/library/parallel/R/snow.R
27c27
<     if(is.null(cl)) stop("no cluster 'cl' supplied and none is registered")
---
>     if(is.null(cl)) stop("no cluster 'cl' argument supplied and none is registered")
43c43
<     if (!inherits(cl, "cluster")) stop("not a valid cluster");
---
>     if (!inherits(cl, "cluster")) stop("'cl' argument is not a valid object of class \"cluster\"");
195,199c195,199
<     ## These will not translate
<     if (count == 1)
<         stop("one node produced an error: ", firstmsg, domain = NA)
<     else if (count > 1)
<         stop(count, " nodes produced errors; first error: ", firstmsg, domain = NA)
---
>     if(count > 0)
>     stop(sprintf(ngettext(count,
> 		"%d node produced an error: %s",
> 		"%d nodes produced errors; first error: %s", domain = "R-parallel"),
> 		count, firstmsg), domain = NA)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/parallel/R/snowSOCK.R R/src/library/parallel/R/snowSOCK.R
67c67
<         cat("Manually start worker on", machine, "with\n    ", cmd, "\n")
---
>         cat(gettextf("Manually start 'worker' on %s with\n    %s\n", machine, cmd, domain = "R-parallel"))
141,143c141,149
<     msg <- sprintf(ngettext(length(hosts),
<                             "socket cluster with %d nodes on host %s",
<                             "socket cluster with %d nodes on hosts %s"),
---
>     if(length(hosts) == 1)
>     msg <- sprintf(ngettext(nc,
>                             "socket cluster with %d node on host %s",
>                             "socket cluster with %d nodes on host %s", domain = "R-parallel"),
>                    nc, sQuote(hosts))
>     else
>     msg <- sprintf(ngettext(nc,
>                             "socket cluster with %d node on hosts %s",
>                             "socket cluster with %d nodes on hosts %s", domain = "R-parallel"),
154,156c160
<     msg <- gettextf("node of a socket cluster on host %s with pid %d",
<                     sQuote(x[["host"]]), pid)
<     cat(msg, "\n", sep = "")
---
>     cat(gettextf("node of a socket cluster on host %s with pid %d", sQuote(x[["host"]]), pid, domain = "R-parallel"), "\n", sep = "")
192c196
<     if (is.na(port)) stop("PORT must be specified")
---
>     if (is.na(port)) stop("'port' argument must be specified")
198c202
<     msg <- sprintf("starting worker pid=%d on %s at %s\n",
---
>     msg <- gettextf("starting worker pid=%d on %s at %s\n",
200c204
<                    format(Sys.time(), "%H:%M:%OS3"))
---
>                    format(Sys.time(), "%H:%M:%OS3"), domain = "R-parallel")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/parallel/R/unix/forkCluster.R R/src/library/parallel/R/unix/forkCluster.R
22c22
<     if(is.na(nnodes) || nnodes < 1L) stop("'nnodes' must be >= 1")
---
>     if(is.na(nnodes) || nnodes < 1L) stop(gettextf("'%s' argument must be >= 1", "nnodes"))
54c54
<         msg <- sprintf("starting worker pid=%d on %s at %s\n",
---
>         msg <- gettextf("starting worker pid=%d on %s at %s\n",
56c56
<                        format(Sys.time(), "%H:%M:%OS3"))
---
>                        format(Sys.time(), "%H:%M:%OS3"), domain = "R-parallel")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/parallel/R/unix/mcfork.R R/src/library/parallel/R/unix/mcfork.R
44c44
<     if (!is.numeric(child)) stop("invalid 'child' argument")
---
>     if (!is.numeric(child)) stop(gettextf("invalid '%s' argument", "child"))
55c55
<         else stop("'children' must be a list of processes or a single process")))
---
>         else stop("'children' argument must be a list of processes or a single process")))
57c57
<         stop("'children' must be a list of processes or a single process")
---
>         stop("'children' argument must be a list of processes or a single process")
64c64
<     if (!is.numeric(child)) stop("invalid 'child' argument")
---
>     if (!is.numeric(child)) stop(gettextf("invalid '%s' argument", "child"))
88,89c88
<     else stop(gettextf("'process' must be of class %s", dQuote("process")),
<               domain = NA)
---
>     else stop(gettextf("'process' argument must be of class %s", dQuote("process")), domain = "R-parallel")
97c96
<         stop("'child' must be a valid child process")
---
>         stop("'child' argument must be a valid child process")
100c99
<     if (!is.raw(what)) stop("'what' must be a character or raw vector")
---
>     if (!is.raw(what)) stop("'what' argument must be a character or raw vector")
136c135
<         warning("closeAll() is a no-op in the master process", domain = NA)
---
>         warning("'closeAll()' is a no-op in the master process", domain = "R-parallel")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/parallel/R/unix/mclapply.R R/src/library/parallel/R/unix/mclapply.R
26c26
<     if(is.na(cores) || cores < 1L) stop("'mc.cores' must be >= 1")
---
>     if(is.na(cores) || cores < 1L) stop(gettextf("'%s' argument must be >= 1", "mc.cores"))
133c133
<             on.exit(mcexit(1L, structure("fatal error in wrapper code", class="try-error")))
---
>             on.exit(mcexit(1L, structure(gettext("fatal error in wrapper code"), class="try-error")))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/parallel/R/unix/mcparallel.R R/src/library/parallel/R/unix/mcparallel.R
29c29
<         on.exit(mcexit(1L, structure("fatal error in wrapper code",
---
>         on.exit(mcexit(1L, structure(gettext("fatal error in wrapper code"),
66c66
<         if (!is.numeric(pids)) stop("invalid 'jobs' argument")
---
>         if (!is.numeric(pids)) stop(gettextf("invalid '%s' argument", "jobs"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/parallel/R/unix/pvec.R R/src/library/parallel/R/unix/pvec.R
24c24
<     if (!is.vector(v)) stop("'v' must be a vector")
---
>     if (!is.vector(v)) stop("'v' argument must be a vector")
27c27
<     if(cores < 1L) stop("'mc.cores' must be >= 1")
---
>     if(cores < 1L) stop(gettextf("'%s' argument must be >= 1", "mc.cores"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/parallel/R/windows/mcdummies.R R/src/library/parallel/R/windows/mcdummies.R
24,25c24,25
<     if(cores < 1L) stop("'mc.cores' must be >= 1")
<     if(cores > 1L) stop("'mc.cores' > 1 is not supported on Windows")
---
>     if(cores < 1L) stop(gettextf("'%s' argument must be >= 1", "mc.cores"))
>     if(cores > 1L) stop("'mc.cores' argument > 1 is not supported on Windows")
32c32
<     if (!is.vector(v)) stop("'v' must be a vector")
---
>     if (!is.vector(v)) stop("'v' argument must be a vector")
34,35c34,35
<     if(cores < 1L) stop("'mc.cores' must be >= 1")
<     if(cores > 1L) stop("'mc.cores' > 1 is not supported on Windows")
---
>     if(cores < 1L) stop(gettextf("'%s' argument must be >= 1", "mc.cores"))
>     if(cores > 1L) stop("'mc.cores' argument > 1 is not supported on Windows")
45,46c45,46
<     if(cores < 1L) stop("'mc.cores' must be >= 1")
<     if(cores > 1L) stop("'mc.cores' > 1 is not supported on Windows")
---
>     if(cores < 1L) stop(gettextf("'%s' argument must be >= 1", "mc.cores"))
>     if(cores > 1L) stop("'mc.cores' argument > 1 is not supported on Windows")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/parallel/src/fork.c R/src/library/parallel/src/fork.c
30d29
< #define NO_NLS
34c33
< 
---
> #include "localization.h"
81c80
<     Dprintf("removing child %d\n", pid);
---
>     Dprintf(_("removing child %d\n"), pid);
99c98
<     Dprintf("WARNING: child %d was to be removed but it doesn't exist\n", pid);
---
>     Dprintf(_("WARNING: child %d was to be removed but it doesn't exist\n"), pid);
154,155c153
< 	Dprintf("child process %d got SIGUSR1; child_exit_status=%d\n", 
< 		getpid(), child_exit_status);
---
> 	Dprintf(_("child process %d got SIGUSR1; child_exit_status=%d\n"), getpid(), child_exit_status);
170c168
< 		Dprintf("child %d terminated with %d\n", pid, WEXITSTATUS(wstat));
---
> 		Dprintf(_("child %d terminated with %d\n"), pid, WEXITSTATUS(wstat));
172c170
< 		Dprintf("child %d terminated by signal %d\n", pid, WTERMSIG(wstat));
---
> 		Dprintf(_("child %d terminated by signal %d\n"), pid, WTERMSIG(wstat));
205c203
< 			    Dprintf("child %d terminated with %d\n", pid, WEXITSTATUS(wstat));
---
> 			    Dprintf(_("child %d terminated with %d\n"), pid, WEXITSTATUS(wstat));
207c205
< 			    Dprintf("child %d terminated by signal %d\n", pid, WTERMSIG(wstat));
---
> 			    Dprintf(_("child %d terminated by signal %d\n"), pid, WTERMSIG(wstat));
259c257
< 	Dprintf("parent[%d] created pipes: comm (%d->%d), sir (%d->%d)\n",
---
>     Dprintf(_("parent[%d] created pipes: comm (%d->%d), sir (%d->%d)\n"),
301c299
< 	Dprintf("child process %d started\n", getpid());
---
> 	Dprintf(_("child process %d started\n"), getpid());
316c314
< 	Dprintf("parent registers new child %d\n", pid);
---
> 	Dprintf(_("parent registers new child %d\n"), pid);
361c359
<     if (TYPEOF(sFDS) != INTSXP) error("descriptors must be integers");
---
>     if (TYPEOF(sFDS) != INTSXP) error(_("descriptors must be integers"));
381c379
<     Dprintf("child %d: send_master (%d bytes)\n", getpid(), len);
---
>     Dprintf(_("child %d: send_master (%d bytes)\n"), getpid(), len);
407c405
<     if (TYPEOF(what) != RAWSXP) error("what must be a raw vector");
---
>     if (TYPEOF(what) != RAWSXP) error(_("what must be a raw vector"));
501c499
<     Dprintf(" - read select %d children: ", maxfd);
---
>     Dprintf(_(" - read select %d children: "), maxfd);
524c522
<     Dprintf(" read_child_ci(%d) - read length returned %d\n", ci->pid, n);
---
>     Dprintf(_(" read_child_ci(%d) - read length returned %d\n"), ci->pid, n);
539c537
< 	    Dprintf(" read_child_ci(%d) - read %d at %d returned %d\n", ci->pid, len-i, i, n);
---
> 	    Dprintf(_(" read_child_ci(%d) - read %d at %d returned %d\n"), ci->pid, len-i, i, n);
572c570
<     if (!ci) Dprintf("read_child(%d) - pid is not in the list of children\n", pid);
---
>     if (!ci) Dprintf(_("read_child(%d) - pid is not in the list of children\n"), pid);
707c705
<     Dprintf("child %d: 'mcexit' called\n", getpid());
---
>     Dprintf(_("child %d: 'mcexit' called\n"), getpid());
721c719
< 	Dprintf("child %d is waiting for permission to exit\n", getpid());
---
> 	Dprintf(_("child %d is waiting for permission to exit\n"), getpid());
727c725
<     Dprintf("child %d: exiting\n", getpid());
---
>     Dprintf(_("child %d: exiting\n"), getpid());
730c728
<     error(_("'mcexit' failed"));
---
>     error(_("'mcexit()' function failed"));
Only in R/src/library/parallel/src: localization.h
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/parallel/src/ncpus.c R/src/library/parallel/src/ncpus.c
21a22
> #include "localization.h"
76c77
< 	warning("GetLogicalProcessorInformation is not supported on this OS.");
---
> 	warning(_("GetLogicalProcessorInformation is not supported on this OS."));
86,87c87,88
<                 if (!buffer) error("allocation failure");
<             } else error("in reading processor information, probable cause: %d", GetLastError());
---
>                 if (!buffer) error(_("allocation failure"));
>             } else error(_("in reading processor information, probable cause: %d"), GetLastError());
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/parallel/src/parallel.h R/src/library/parallel/src/parallel.h
24,29d23
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("parallel", String)
< #else
< #define _(String) (String)
< #endif
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/profile/Common.R R/src/library/profile/Common.R
64,65c64
<             warning(gettextf('package %s in options("defaultPackages") was not found', sQuote(pkg)),
<                     call.=FALSE, domain = NA)
---
>             warning(gettextf("package %s in options(\"defaultPackages\") was not found", sQuote(pkg)), call.=FALSE, domain = "R-profile")
75c74
<             warning('package "methods" in options("defaultPackages") was not found', call.=FALSE)
---
>             warning("package 'methods' in options(\"defaultPackages\") was not found", call.=FALSE)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/splines/R/splineClasses.R R/src/library/splines/R/splineClasses.R
54,56c54
<         stop(gettextf("need at least %s (=%d) knots",
<                       "2*ord -1", 2*ord -1),
<              domain = NA)
---
>         stop(gettextf("need at least %s (=%d) knots", "2*ord -1", 2*ord -1, domain = "R-splines"), domain = NA)
72,75c70
< 		      knots[ord],
<                       knots[nk - o1],
<                       "outer.ok = TRUE"),
<              domain = NA)
---
> 		      knots[ord], knots[nk - o1], "outer.ok = TRUE", domain = "R-splines"), domain = NA)
89,90c84
<                           "splineDesign(*, sparse=TRUE)"),
<                  domain = NA)
---
>                           "splineDesign(*, sparse=TRUE)", domain = "R-splines"), domain = NA)
367,368c361
< 	stop(gettextf("'deriv' must be between 0 and %d", ord - 1),
<              domain = NA)
---
> 	stop(gettextf("'deriv' must be between 0 and %d", ord - 1), domain = "R-splines")
389,390c382
< 	stop(gettextf("'deriv' must be between 0 and %d", ord - 1),
<              domain = NA)
---
> 	stop(gettextf("'deriv' must be between 0 and %d", ord - 1), domain = "R-splines")
526d517
<     cat("polynomial representation of spline")
528c519,521
< 	cat(" for", deparse(as.vector(form)))
---
>     cat(gettextf("polynomial representation of spline for %s", deparse(as.vector(form)), domain = "R-splines"))
>     else
>     cat(gettext("polynomial representation of spline", domain = "R-splines"))
538c531
<     cat("\nPeriod:", format(x[["period"]]), "\n")
---
>     cat("\n", gettext("Period:", domain = "R-splines"), " ", format(x[["period"]]), "\n", sep = "")
546d538
<     cat("bSpline representation of spline")
548c540,542
< 	cat(" for", deparse(as.vector(form)))
---
>     cat(gettextf("bSpline representation of spline for %s", deparse(as.vector(form)), domain = "R-splines"))
>     else
>     cat(gettext("bSpline representation of spline", domain = "R-splines"))
Only in R/src/library/splines/src: localization.h
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/splines/src/splines.c R/src/library/splines/src/splines.c
27,32c27
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("splines", String)
< #else
< #define _(String) (String)
< #endif
---
> #include "localization.h"
147c142
< 	error(_("'ord' must be a positive integer"));
---
> 	error(_("'%s' argument must be a positive integer"), "ord");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/ARMAtheory.R R/src/library/stats/R/ARMAtheory.R
33c33
<             ind <- as.matrix(expand.grid(1L:(p + 1), 1L:(p+1)))[, 2L:1L]
---
>             ind <- as.matrix(expand.grid(seq_len(p + 1), seq_len(p+1)))[, 2L:1L]
36c36
<             A[,  1L:p] <- A[, 1L:p] + A[, (2L * p + 1L):(p + 2L)]
---
>             A[,  seq_len(p)] <- A[, seq_len(p)] + A[, (2L * p + 1L):(p + 2L)]
51c51
<         Acf <- c(1, Acf[1L:lag.max])
---
>         Acf <- c(1, Acf[seq_len(lag.max)])
54c54
<         Acf <- filter(c(x, rep(0, q)), rev(x), sides=1)[-(1L:q)]
---
>         Acf <- filter(c(x, rep(0, q)), rev(x), sides=1)[-seq_len(q)]
66c66
<     if(order.max <= 0) stop("'acf' must be of length two or more")
---
>     if(order.max <= 0) stop(gettextf("'%s' argument must have length >= %d", "acf", 2))
70,71c70,71
<     nm <- paste0("ar(",1L:order.max, ")")
<     matrix(z$coefs, order.max, order.max, dimnames=list(nm, 1L:order.max))
---
>     nm <- paste0("ar(",seq_len(order.max), ")")
>     matrix(z$coefs, order.max, order.max, dimnames=list(nm, seq_len(order.max)))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/C.R R/src/library/stats/R/C.R
22c22
<     if(!nlevels(object)) stop("object not interpretable as a factor")
---
>     if(!nlevels(object)) stop("'object' argument is not interpretable as a factor")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/HoltWinters.R R/src/library/stats/R/HoltWinters.R
74,75c74
<         st <- decompose(ts(x[1L:wind], start = start(x), frequency = f),
<                         seasonal)
---
>         st <- decompose(ts(x[seq_len(wind)], start = start(x), frequency = f), seasonal)
88c87
<     if (is.na(lenx)) stop("invalid length(x)")
---
>     if (is.na(lenx)) stop(gettextf("invalid '%s' value", "length(x)"))
131,132c130
<                         warning(gettextf("optimization difficulties: %s",
<                                          sol$message), domain = NA)
---
>                         warning(gettextf("optimization difficulties: %s", sol$message), domain = "R-stats")
148,149c146
<                         warning(gettextf("optimization difficulties: %s",
<                                          sol$message), domain = NA)
---
>                         warning(gettextf("optimization difficulties: %s", sol$message), domain = "R-stats")
167,168c164
<                         warning(gettextf("optimization difficulties: %s",
<                                          sol$message), domain = NA)
---
>                         warning(gettextf("optimization difficulties: %s", sol$message), domain = "R-stats")
194,195c190
<                         warning(gettextf("optimization difficulties: %s",
<                                          sol$message), domain = NA)
---
>                         warning(gettextf("optimization difficulties: %s", sol$message), domain = "R-stats")
226c221
<                            final.fit$seasonal[1L:len]),
---
>                            final.fit$seasonal[seq_len(len)]),
243c238
<                                     s = if (!is.logical(gamma) || gamma) final.fit$seasonal[len + 1L:f]),
---
>                                     s = if (!is.logical(gamma) || gamma) final.fit$seasonal[len + seq_len(f)]),
264c259
<             sum(1, (h > 1) * sapply(1L:(h-1), function(j) crossprod(psi(j))))
---
>             sum(1, ifelse(h > 1, sapply(seq_len(h-1), function(j) crossprod(psi(j))), 0))
276c271
<         fit <- fit + as.vector((1L:n.ahead)*object$coefficients[2L])
---
>         fit <- fit + as.vector(seq_len(n.ahead)*object$coefficients[2L])
280,281c275
<             fit <- fit + rep(object$coefficients[-(1L:(1+(!is.logical(object$beta) || object$beta)))],
<                              length.out=length(fit))
---
>             fit <- fit + rep(object$coefficients[-(seq_len(1+(!is.logical(object$beta) || object$beta)))], length.out=length(fit))
283,284c277
<             fit <- fit * rep(object$coefficients[-(1L:(1+(!is.logical(object$beta) || object$beta)))],
<                              length.out=length(fit))
---
>             fit <- fit * rep(object$coefficients[-(seq_len(1+(!is.logical(object$beta) || object$beta)))], length.out=length(fit))
288c281
<       int <- qnorm((1 + level) / 2) * sqrt(sapply(1L:n.ahead,vars))
---
>       int <- qnorm((1 + level) / 2) * sqrt(sapply(seq_len(n.ahead), vars))
294,295c287
<        start = end(lag(fitted(object)[,1], k = -1)),
<        frequency  = frequency(fitted(object)[,1])
---
>        start = end(lag(fitted(object)[,1], k = -1)), frequency  = frequency(fitted(object)[,1])
305c297
<               ylab = "Observed / Fitted", main = "Holt-Winters filtering",
---
>               ylab = gettext("Observed / Fitted"), main = gettext("Holt-Winters filtering"),
342,348c334,352
<     cat("Holt-Winters exponential smoothing",
<         if (is.logical(x$beta) && !x$beta) "without" else "with", "trend and",
<         if (is.logical(x$gamma) && !x$gamma) "without" else
<         paste0(if (is.logical(x$beta) && !x$beta) "with ", x$seasonal),
<         "seasonal component.")
<     cat("\n\nCall:\n", deparse (x$call), "\n\n", sep = "")
<     cat("Smoothing parameters:\n")
---
>     if (is.logical(x$beta) && !x$beta)
>      if (is.logical(x$gamma) && !x$gamma)
>       cat(gettext("Holt-Winters exponential smoothing without trend and without seasonal component.", domain = "R-stats"))
>      else
> 	if (x$seasonal == "additive")
>          cat(gettext("Holt-Winters exponential smoothing without trend and with additive seasonal component.", domain = "R-stats"))
> 	else
>          cat(gettext("Holt-Winters exponential smoothing without trend and with multiplicative seasonal component.", domain = "R-stats"))
>     else
>      if (is.logical(x$gamma) && !x$gamma)
>       cat(gettext("Holt-Winters exponential smoothing with trend and without seasonal component.", domain = "R-stats"))
>      else
> 	if (x$seasonal == "additive")
>          cat(gettext("Holt-Winters exponential smoothing with trend and additive seasonal component.", domain = "R-stats"))
> 	else
>          cat(gettext("Holt-Winters exponential smoothing with trend and multiplicative seasonal component.", domain = "R-stats"))
> 
>     cat("\n\n", gettext("Call:", domain = "R-stats"), "\n", deparse (x$call), "\n\n", sep = "")
>     cat(gettext("Smoothing parameters:", domain = "R-stats"), "\n", sep = "")
353c357
<     cat("Coefficients:\n")
---
>     cat(gettext("Coefficients:", domain = "R-stats"), "\n", sep = "")
386c390
<     for (i in 1L:f)
---
>     for (i in seq_len(f))
394,395c398
<     seasonal <- ts(rep(figure, periods+1)[seq_len(l)],
<                    start = start(x), frequency = f)
---
>     seasonal <- ts(rep(figure, periods+1)[seq_len(l)], start = start(x), frequency = f)
421c424
<          main = paste("Decomposition of", x$type, "time series"),
---
>          main = if (x$type == "additive") gettext("Decomposition of additive time series") else gettext("Decomposition of multiplicative time series"),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/StructTS.R R/src/library/stats/R/StructTS.R
85c85
<         stop("'x' must be numeric")
---
>         stop(gettextf("'%s' argument must be numeric", "x"))
113,114c113
<             warning(gettextf("possible convergence problem: 'optim' gave code = %d and message %s",
<                              res$convergence, sQuote(res$message)), domain = NA)
---
>             warning(gettextf("possible convergence problem: 'optim' gave code = %d and message %s", res$convergence, sQuote(res$message)), domain = "R-stats")
152,153c151,152
<     cat("\nCall:", deparse(x$call, width.cutoff = 75L), "", sep = "\n")
<     cat("Variances:\n")
---
>     cat("\n", gettext("Call:", domain = "R-stats"), "\n", deparse(x$call, width.cutoff = 75L), "\n\n", sep = "")
>     cat(gettext("Variances:", domain = "R-stats"), "\n", sep = "")
178c177
<     plot(stdres, type = "h", main = "Standardized Residuals", ylab = "")
---
>     plot(stdres, type = "h", main = gettext("Standardized Residuals"), ylab = "")
180c179
<     acf(object$residuals, plot = TRUE, main = "ACF of Residuals",
---
>     acf(object$residuals, plot = TRUE, main = gettext("ACF of Residuals"),
185,186c184,185
<     plot(1L:nlag, pval, xlab = "lag", ylab = "p value", ylim = c(0,1),
<          main = "p values for Ljung-Box statistic")
---
>     plot(1L:nlag, pval, xlab = gettext("Lag"), ylab = gettext("p-value"), ylim = c(0,1),
>          main = gettext("p-values for Ljung-Box statistic"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/TukeyHSD.R R/src/library/stats/R/TukeyHSD.R
87,89c87,88
<     cat("  Tukey multiple comparisons of means\n")
<     cat("    ", format(100*attr(x, "conf.level"), 2),
<         "% family-wise confidence level\n", sep = "")
---
>     cat("  ", gettext("Tukey multiple comparisons of means", domain = "R-stats"), "\n", sep = "")
>     cat("    ", gettextf("%s%% family-wise confidence level", format(100*attr(x, "conf.level"), 2), domain = "R-stats"), "\n", sep = "")
91,92c90,91
<         cat("    factor levels have been ordered\n")
<     cat("\nFit: ", deparse(attr(x, "orig.call"), 500L), "\n\n", sep = "")
---
>         cat("    ", gettext("factor levels have been ordered", domain = "R-stats"), "\n", sep = "")
>     cat("\n", gettext("Fit: ", domain = "R-stats"), deparse(attr(x, "orig.call"), 500L), "\n\n", sep = "")
118,120c117,118
<         title(main = paste0(format(100 * attr(x, "conf.level"), digits = 2L),
<                             "% family-wise confidence level\n"),
<               xlab = paste("Differences in mean levels of", names(x)[i]))
---
>         title(main = paste(gettextf("%s%% family-wise confidence level", format(100 * attr(x, "conf.level"), digits = 2L), domain = "R-stats"), "\n", sep = ""),
>               xlab = gettextf("Differences in mean levels of %s", names(x)[i], domain = "R-stats"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/acf.R R/src/library/stats/R/acf.R
36c36
<         stop("'x' must be numeric")
---
>         stop(gettextf("'%s' argument must be numeric", "x"))
40c40
<         stop("'sampleT' and 'nser' must be integer")
---
>         stop("'sampleT' and 'nser' arguments must be integer")
45c45
<         stop("'lag.max' must be at least 0")
---
>         stop(gettextf("'%s' argument must be at least %d", "lag.max", 0))
68c68
<     if(!is.numeric(x)) stop("'x' must be numeric")
---
>     if(!is.numeric(x)) stop(gettextf("'%s' argument must be numeric", "x"))
75c75
<     if (lag.max < 1) stop("'lag.max' must be at least 1")
---
>     if (lag.max < 1) stop(gettextf("'%s' argument must be at least %d", "lag.max", 1))
78c78
<         if(anyNA(x)) stop("NAs in 'x'")
---
>         if(anyNA(x)) stop("NA values in 'x'")
84c84
<         lag <- outer(1L:lag.max, lag/x.freq)
---
>         lag <- outer(seq_len(lag.max), lag/x.freq)
91c91
<         lag <- array((1L:lag.max)/x.freq, dim=c(lag.max,1L,1L))
---
>         lag <- array(seq_len(lag.max)/x.freq, dim=c(lag.max,1L,1L))
105c105
<     function (x, ci = 0.95, type = "h", xlab = "Lag", ylab = NULL,
---
>     function (x, ci = 0.95, type = "h", xlab = gettext("Lag", domain = "R-stats"), ylab = NULL,
119c119
<     if((nser <- ncol(x$lag)) < 1L) stop("x$lag must have at least 1 column")
---
>     if((nser <- ncol(x$lag)) < 1L) stop("'x$lag' must have at least 1 column")
122,124c122,124
<                        correlation = "ACF",
<                        covariance = "ACF (cov)",
<                        partial = "Partial ACF")
---
>                        correlation = gettext("ACF", domain = "R-stats"),
>                        covariance = gettext("ACF (cov)", domain = "R-stats"),
>                        partial = gettext("Partial ACF", domain = "R-stats"))
126c126,127
<         snames <- paste("Series ", if (nser == 1L) x$series else 1L:nser)
---
>         if(nser == 1L) snames <- gettextf("Series %s", x$series)
> 	else snames <- gettextf("Series %s", seq_len(nser))
131c132
<         warning("can use ci.type=\"ma\" only if first lag is 0")
---
>         warning("can use 'ci.type=\"ma\"' only if first lag is 0")
160c161
<         ylim <- range(x$acf[, 1L:nser, 1L:nser], na.rm = TRUE)
---
>         ylim <- range(x$acf[, seq_len(nser), seq_len(nser)], na.rm = TRUE)
163c164
< 	    for (i in 1L:nser) {
---
> 	    for (i in seq_len(nser)) {
170c171
<     for (I in 1L:Npgs) for (J in 1L:Npgs) {
---
>     for (I in seq_len(Npgs)) for (J in seq_len(Npgs)) {
173,174c174,175
<         iind <- (I-1)*nr + 1L:nr
<         jind <- (J-1)*nr + 1L:nr
---
>         iind <- (I-1)*nr + seq_len(nr)
>         jind <- (J-1)*nr + seq_len(nr)
176c177
<             message(gettextf("Page [%d,%d]: i =%s; j =%s", I, J, paste(iind,collapse=","), paste(jind,collapse=",")), domain = NA)
---
>             message(gettextf("Page [%d,%d]: i =%s; j =%s", I, J, paste(iind,collapse=","), paste(jind,collapse=",")), domain = "R-stats")
219,220c220
<     acf.out <- acf(X, lag.max = lag.max, plot = FALSE, type = type,
<                    na.action = na.action)
---
>     acf.out <- acf(X, lag.max = lag.max, plot = FALSE, type = type, na.action = na.action)
245,247c245,247
<     msg <- c("Autocorrelations", "Autocovariances", "Partial autocorrelations")
<     cat("\n", msg[type]," of series ", sQuote(x$series), ", by lag\n\n",
<         sep = "")
---
>     if(type == 1) cat("\n", gettextf("Autocorrelations of series %s, by lag", sQuote(x$series), domain = "R-stats"), "\n\n", sep = "")
>     else if(type == 2) cat("\n", gettextf("Autocovariances of series %s, by lag", sQuote(x$series), domain = "R-stats"), "\n\n", sep = "")
>     else cat("\n", gettextf("Partial autocorrelations of series %s, by lag", sQuote(x$series), domain = "R-stats"), "\n\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/add.R R/src/library/stats/R/add.R
60c60
< 	    cat("trying +", tt, "\n", sep = "")
---
> 	    cat(gettextf("trying +%s", tt, domain = "R-stats"), "\n", sep = "")
63,64c63
< 	nfit <- update(object, as.formula(paste("~ . +", tt)),
<                        evaluate = FALSE)
---
> 	nfit <- update(object, as.formula(paste("~ . +", tt)), evaluate = FALSE)
81c80
< 	aod[, c("LRT", "Pr(>Chi)")] <- list(dev, P)
---
> 	aod[, c("LRT", gettext("Pr(>Chi)", domain = NA))] <- list(dev, P)
83,84c82,83
<     head <- c("Single term additions", "\nModel:", deparse(formula(object)),
< 	      if(scale > 0) paste("\nscale: ", format(scale), "\n"))
---
>     head <- paste(gettext("Single term additions", domain = "R-stats"), "\n\n", gettext("Model:", domain = "R-stats"), "\n", paste(deparse(formula(object)), collapse = ""),
> 	      if(scale > 0) paste("\n", gettext("scale: ", domain = "R-stats"), format(scale), "\n", sep = ""), sep = "", collapse = "")
104,105c103
< 	warning("attempting model selection on an essentially perfect fit is nonsense",
< 		call. = FALSE)
---
> 	warning("attempting model selection on an essentially perfect fit is nonsense", call. = FALSE)
111a110
> 	#dev <- table[[which(names(table) == gettext("Sum of Sq", domain = "R-stats"))]]
157c156
<                                      "using the %d/%d rows from a combined fit"),
---
>                                      "using the %d/%d rows from a combined fit", domain = "R-stats"),
196c195
<     if(scale > 0) names(aod) <- c("Df", "Sum of Sq", "RSS", "Cp")
---
>     if(scale > 0) names(aod) <- c(gettext("Df", domain = NA), gettext("Sum of Sq", domain = NA), gettext("RSS", domain = NA), gettext("Cp", domain = NA))
198a198
> 	#dev <- aod[[which(names(aod) == gettext("Sum of Sq", domain = "R-stats"))]]
208c208
<         aod[, "Pr(>Chi)"] <- dev
---
>         aod[, gettext("Pr(>Chi)", domain = NA)] <- dev
211c211
< 	aod[, c("F value", "Pr(>F)")] <- Fstat(aod, aod$RSS[1L], rdf)
---
> 	aod[, c(gettext("F value", domain = NA), gettext("Pr(>F)", domain = NA))] <- Fstat(aod, aod$RSS[1L], rdf)
213,214c213,214
<     head <- c("Single term additions", "\nModel:", deparse(formula(object)),
< 	      if(scale > 0) paste("\nscale: ", format(scale), "\n"))
---
>     head <- paste(gettext("Single term additions", domain = "R-stats"), "\n\n", gettext("Model:", domain = "R-stats"), "\n", paste(deparse(formula(object)), collapse = ""),
> 	      if(scale > 0) paste("\n", gettext("scale: ", domain = "R-stats"), format(scale), "\n", sep = ""), sep = "", collapse = "")
220,221c220
< add1.glm <- function(object, scope, scale = 0, test=c("none", "Rao", "LRT",
<                                                  "Chisq", "F"),
---
> add1.glm <- function(object, scope, scale = 0, test=c("none", "Rao", "LRT", "Chisq", "F"),
276c275
<                                      "using the %d/%d rows from a combined fit"),
---
>                                      "using the %d/%d rows from a combined fit", domain = "R-stats"),
337c336
<         aod[, "Pr(>Chi)"] <- dev
---
>         aod[, gettext("Pr(>Chi)", domain = NA)] <- dev
346c345
<         aod[, "Pr(>Chi)"] <- dev
---
>         aod[, gettext("Pr(>Chi)", domain = NA)] <- dev
349,350c348
<             warning(gettextf("F test assumes quasi%s family", fam),
<                     domain = NA)
---
>             warning(gettextf("F test assumes 'quasi%s' family", fam), domain = "R-stats")
352c350
< 	aod[, c("F value", "Pr(>F)")] <- Fstat(aod, rdf)
---
> 	aod[, c(gettext("F value", domain = NA), gettext("Pr(>F)", domain = NA))] <- Fstat(aod, rdf)
354,355c352,353
<     head <- c("Single term additions", "\nModel:", deparse(formula(object)),
< 	      if(scale > 0) paste("\nscale: ", format(scale), "\n"))
---
>     head <- paste(gettext("Single term additions", domain = "R-stats"), "\n\n", gettext("Model:", domain = "R-stats"), "\n", paste(deparse(formula(object)), collapse = ""),
> 	      if(scale > 0) paste("\n", gettext("scale: ", domain = "R-stats"), format(scale), "\n", sep = ""), sep = "", collapse = "")
386c384
< 	    cat("trying -", tt, "\n", sep = "")
---
> 	    cat(gettextf("trying - %s", tt, domain = "R-stats"), "\n", sep = "")
407c405
<         aod[, c("LRT", "Pr(>Chi)")] <- list(dev, P)
---
>         aod[, c("LRT", gettext("Pr(>Chi)", domain = NA))] <- list(dev, P)
409,410c407,408
<     head <- c("Single term deletions", "\nModel:", deparse(formula(object)),
< 	      if(scale > 0) paste("\nscale: ", format(scale), "\n"))
---
>     head <- paste(gettext("Single term deletions", domain = "R-stats"), "\n\n", gettext("Model:", domain = "R-stats"), "\n", paste(deparse(formula(object)), collapse = ""),
> 	      if(scale > 0) paste("\n", gettext("scale: ", domain = "R-stats"), format(scale), "\n", sep = ""), sep = "", collapse = "")
461c459
<     if(scale > 0) names(aod) <- c("Df", "Sum of Sq", "RSS", "Cp")
---
>     if(scale > 0) names(aod) <- c(gettext("Df", domain = NA), gettext("Sum of Sq", domain = NA), gettext("RSS", domain = NA), gettext("Cp", domain = NA))
463a462
> 	#dev <- aod[[which(names(aod) == gettext("Sum of Sq", domain = "R-stats"))]]
473c472
<         aod[, "Pr(>Chi)"] <- dev
---
>         aod[, gettext("Pr(>Chi)", domain = NA)] <- dev
474a474
> 	#dev <- aod[[which(names(aod) == gettext("Sum of Sq", domain = "R-stats"))]]
484c484
< 	aod[, c("F value", "Pr(>F)")] <- list(Fs, P)
---
> 	aod[, c(gettext("F value", domain = NA), gettext("Pr(>F)", domain = NA))] <- list(Fs, P)
486,487c486,487
<     head <- c("Single term deletions", "\nModel:", deparse(formula(object)),
< 	      if(scale > 0) paste("\nscale: ", format(scale), "\n"))
---
>     head <- paste(gettext("Single term deletions", domain = "R-stats"), "\n\n", gettext("Model:", domain = "R-stats"), "\n", paste(deparse(formula(object)), collapse = ""),
> 	      if(scale > 0) paste("\n", gettext("scale: ", domain = "R-stats"), format(scale), "\n", sep = ""), sep = "", collapse = "")
573c573
<         aod[, "Pr(>Chi)"] <- dev
---
>         aod[, gettext("Pr(>Chi)", domain = NA)] <- dev
581c581
<         aod[, "Pr(>Chi)"] <- dev
---
>         aod[, gettext("Pr(>Chi)", domain = NA)] <- dev
584,585c584
<             warning(gettextf("F test assumes 'quasi%s' family", fam),
<                     domain = NA)
---
>             warning(gettextf("F test assumes 'quasi%s' family", fam), domain = "R-stats")
596c595
< 	aod[, c("F value", "Pr(>F)")] <- list(Fs, P)
---
> 	aod[, c(gettext("F value", domain = NA), gettext("Pr(>F)", domain = NA))] <- list(Fs, P)
598c597
<     head <- c("Single term deletions", "\nModel:", deparse(formula(object)),
---
>     head <- paste(gettext("Single term deletions", domain = "R-stats"), "\n\n", gettext("Model:", domain = "R-stats"), "\n", paste(deparse(formula(object)), collapse = ""),
600c599
< 	      paste("\nscale: ", format(scale), "\n"))
---
> 	      paste("\n", gettext("scale: ", domain = "R-stats"), format(scale), "\n", xep = ""), sep = "", collapse = "")
639c638
< 	    if(any(!where))
---
> 	    if(any(!where)) {
642c641
<                                       "lower scope has terms %s not included in model"),
---
>                                       "lower scope has terms %s not included in model", domain = "R-stats"),
644a644
> 		}
669c669
< 	    if(any(!where))
---
> 	    if(any(!where)) {
672c672
<                                       "upper scope has terms %s not included in model"),
---
>                                       "upper scope has terms %s not included in model", domain = "R-stats"),
674a675
> 		}
723,728c724,728
< 	heading <- c("Stepwise Model Path \nAnalysis of Deviance Table",
< 		     "\nInitial Model:", deparse(formula(object)),
< 		     "\nFinal Model:", deparse(formula(fit)),
< 		     "\n")
< 	aod <- data.frame(Step = I(change), Df = ddf, Deviance = dd,
<                           "Resid. Df" = rdf, "Resid. Dev" = rd, AIC = AIC,
---
> 	heading <- paste(gettext("Stepwise Model Path", domain = "R-stats"), "\n", gettext("Analysis of Deviance Table", domain = "R-stats"),
> 		     "\n", gettext("Initial Model: ", domain = "R-stats"), paste(deparse(formula(object)), collapse = ""),
> 		     "\n", gettext("Final Model: ", domain = "R-stats"), paste(deparse(formula(fit)), collapse = ""),
> 		     "\n", sep = "", collapse = "")
> 	aod <- data.frame(Step = I(change), Df = ddf, Deviance = dd, "Resid. Df" = rdf, "Resid. Dev" = rd, AIC = AIC,
729a730
> 	names(aod) <- c(gettext("Step", domain = NA), gettext("Df", domain = NA), gettext("Deviance", domain = NA), gettext("Resid. Df", domain = NA), gettext("Resid. Dev", domain = NA), gettext("AIC", domain = NA))
732c733
<             cn[cn == "AIC"] <- "Cp"
---
>             cn[cn == gettext("AIC", domain = NA)] <- gettext("Cp", domain = NA)
780,781c781
< 	cat("Start:  AIC=", format(round(bAIC, 2)), "\n",
< 	    cut.string(deparse(formula(fit))), "\n\n", sep = "")
---
> 	cat(gettextf("Start:  AIC=%s", format(round(bAIC, 2)), domain = "R-stats"), "\n", cut.string(deparse(formula(fit))), "\n\n", sep = "")
844,845c844
< 	    cat("\nStep:  AIC=", format(round(bAIC, 2)), "\n",
< 		cut.string(deparse(formula(fit))), "\n\n", sep = "")
---
> 	    cat("\n", gettextf("Step:  AIC=%s", format(round(bAIC, 2)), domain = "R-stats"), "\n", cut.string(deparse(formula(fit))), "\n\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/addmargins.R R/src/library/stats/R/addmargins.R
34c34
<     if(is.null(dim(A))) stop("'A' must be an array or table")
---
>     if(is.null(dim(A))) stop(gettextf("'%s' argument must be an array or table", "A"))
79,80c79
< 	    stop(gettextf("length of FUN, %d,\n does not match the length of the margins, %d",
< 			  length(FUN), n.sid), domain = NA)
---
> 	    stop(gettextf("length of FUN, %d, does not match the length of the margins, %d", length(FUN), n.sid), domain = "R-stats")
100,101c99
< 		    paste("Margin ", margin[i], ".", fnames[[i]][blank],
< 			  sep = "")
---
> 		    paste("Margin ", margin[i], ".", fnames[[i]][blank], sep = "")
139c137
< 	skip <- prod(d[1L:margin])
---
> 	skip <- prod(d[seq_len(margin)])
141,142c139
< 	apos <- rep(c(rep_len(TRUE, skip), rep_len(FALSE, n.mar*runl)),
< 		    n.new/(skip+n.mar*runl))
---
> 	apos <- rep(c(rep(TRUE, skip), rep(FALSE, n.mar*runl)), n.new/(skip+n.mar*runl))
151c148
< 	for(i in 1L:n.mar) {
---
> 	for(i in seq_len(n.mar)) {
153c150
< 		apply(A, (1L:n.dim)[-margin], FUN[[i]])
---
> 		apply(A, seq_len(n.dim)[-margin], FUN[[i]])
156c153
< 	    select <- rep_len(FALSE, n.mar)
---
> 	    select <- rep(FALSE, n.mar)
160,161c157
< 	    mpos <- rep(c(rep_len(FALSE, skip), rep(select, each=runl)),
< 			prod(dim(A))/skip)
---
> 	    mpos <- rep(c(rep(FALSE, skip), rep(select, each=runl)), prod(dim(A))/skip)
176,178c172,173
<     for(i in 1L:n.sid)
< 	new.A <- expand.one(A = new.A, margin = margin[i], FUN = FUN[[i]],
< 			    fnames = fnames[[i]])
---
>     for(i in seq_len(n.sid))
> 	new.A <- expand.one(A = new.A, margin = margin[i], FUN = FUN[[i]], fnames = fnames[[i]])
183c178
< 	cat("Margins computed over dimensions\nin the following order:\n")
---
> 	cat(gettext("Margins computed over dimensions in the following order:", domain = "R-stats"), "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/aggregate.R R/src/library/stats/R/aggregate.R
45c45
<         stop("'by' must be a list")
---
>         stop(gettextf("'%s' argument must be a list", "by"))
47c47
<         names(by) <- paste("Group", seq_along(by), sep = ".")
---
>         names(by) <- gettextf("Group.%d", seq_along(by))
51c51
<         names(by)[ind] <- paste("Group", ind, sep = ".")
---
>         names(by)[ind] <- gettextf("Group.%d", ind)
57c57
<         stop("arguments must have same length")
---
>         stop("arguments must have the same length")
124c124
<         stop("'formula' missing or incorrect")
---
>         stop(gettextf("'%s' argument is missing or incorrect", "formula"))
142,143c142,143
<         ##lhs <- sprintf("cbind(%s)",
<         ##              paste(setdiff(names(data), rhs), collapse = ","))
---
>         ## tmp_N <- paste(setdiff(names(data), rhs), collapse = ",")
>         ##lhs <- sprintf("cbind(%s)", tmp_N)
199,200c199
<         stop(gettextf("cannot change frequency from %g to %g",
<                       ofrequency, nfrequency), domain = NA)
---
>         stop(gettextf("cannot change frequency from %g to %g", ofrequency, nfrequency), domain = "R-stats")
217c216
<     x <- apply(array(c(x[1 : nend, ]),
---
>     x <- apply(array(c(x[seq_len(nend), ]),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/anova.R R/src/library/stats/R/anova.R
26,28c26,29
<     dev.col <- match("Deviance", colnames(table))
<     if (test == "Rao") dev.col <- match("Rao", colnames(table))
<     if (is.na(dev.col)) dev.col <- match("Sum of Sq", colnames(table))
---
>     dev.col <- match(gettext("Deviance", domain = NA), colnames(table))
>     if (test == "Rao") dev.col <- match(gettext("Rao", domain = NA), colnames(table))
>     if (is.na(dev.col)) dev.col <- match(gettext("Sum of Sq", domain = NA), colnames(table))
> #     oldnames <- names(table)
31c32
<                dfs <- table[, "Df"]
---
>                dfs <- table[, gettext("Df", domain = NA)]
35c36
< 	       cbind(table,
---
> 	       xx <- cbind(table,
37a39
> #	      names(xx) <- c(oldnames, gettext("Pr(>Chi)", domain = NA))
40c42
<                dfs <- table[, "Df"]
---
>                dfs <- table[, gettext("Df", domain = NA)]
44c46
< 	       cbind(table,
---
> 	       xx <- cbind(table,
47a50
> #	      names(xx) <- c(oldnames, gettext("F", domain = NA), gettext("Pr(>F)", domain = NA))
50,52c53,55
<                if ("RSS" %in% names(table)) { # an lm object
<                    cbind(table, Cp = table[, "RSS"] +
<                          2*scale*(n - table[, "Res.Df"]))
---
>                if (!is.na(match(gettext("RSS", domain = NA), names(table)))) { # an lm object
>                    xx <- cbind(table, Cp = table[, gettext("RSS", domain = NA)] +
>                          2*scale*(n - table[, gettext("Res.Df", domain = NA)]))
54,55c57,58
<                    cbind(table, Cp = table[, "Resid. Dev"] +
<                          2*scale*(n - table[, "Resid. Df"]))
---
>                    xx <- cbind(table, Cp = table[, gettext("Resid. Dev", domain = NA)] +
>                          2*scale*(n - table[, gettext("Resid. Df", domain = NA)]))
56a60
> #	      names(xx) <- c(oldnames, gettext("Cp", domain = NA))
57a62
> 	xx
65c70
< 	     cs.ind = 1:k, tst.ind = k+1, zap.ind = integer(),
---
> 	     cs.ind = seq_len(k), tst.ind = k+1, zap.ind = integer(),
77c82
<     ##	  columns {cs.ind}= numbers, such as coefficients & std.err  [def.: 1L:k]
---
>     ##	  columns {cs.ind}= numbers, such as coefficients & std.err  [def.: seq_len(k)]
81c86
< 	stop("'x' must be coefficient matrix/data frame")
---
> 	stop("'x' argument must be coefficient matrix or data frame")
86c91
<             warning("option \"show.coef.Pvalues\" is invalid: assuming TRUE")
---
>             warning(gettextf("option \"%s\" is invalid: assuming TRUE", "show.coef.Pvalues"))
92c97
< 	stop("'P.values' is TRUE, but 'has.Pvalue' is not")
---
> 	stop("'P.values' argument is TRUE, but 'has.Pvalue' argument is not")
101c106
<     if(!missing(cs.ind) && length(cs.ind) > k) stop("wrong k / cs.ind")
---
>     if(!missing(cs.ind) && length(cs.ind) > k) stop("wrong 'cs.ind' argument")
121c126
<     if(any(r.ind <- !((1L:nc) %in% c(cs.ind, tst.ind, if(has.Pvalue) nc))))
---
>     if(any(r.ind <- !((seq_len(nc)) %in% c(cs.ind, tst.ind, if(has.Pvalue) nc))))
140c145
<             warning("option \"show.signif.stars\" is invalid: assuming TRUE")
---
>             warning(gettextf("option \"%s\" is invalid: assuming TRUE", "show.signif.stars"))
161,162c166
< 	cat("---\nSignif. codes:  ", sleg, sep = "",
< 	    fill = w+4 + max(nchar(sleg,"bytes") - nchar(sleg)))# +4: "---" 
---
> 	cat("---\n", gettext("Signif. codes:  ", domain = "R-stats"), sleg, sep = "", fill = w+4 + max(nchar(sleg,"bytes") - nchar(sleg)))# +4: "---" 
173c177
<     if(is.null(cn <- colnames(x))) stop("'anova' object must have colnames")
---
>     if(is.null(cn <- colnames(x))) stop("an object of class \"anova\" must have colnames")
175c179
<     zap.i <- 1L:(if(has.P) nc-1 else nc)
---
>     zap.i <- if(has.P) seq_len(nc-1) else seq_len(nc)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/aov.R R/src/library/stats/R/aov.R
30,31c30,31
<                               "there are %d Error terms: only 1 is allowed",
<                               "there are %d Error terms: only 1 is allowed"),
---
>                               "there is %d Error term: only 1 is allowed",
>                               "there are %d Error terms: only 1 is allowed", domain = "R-stats"),
73c73
<         nmstrata <- c("(Intercept)", nmstrata)
---
>         nmstrata <- c(gettext("(Intercept)", domain = NA), nmstrata)
80c80
<         asgn.e <- er.fit$assign[qr.e$pivot[1L:rank.e]]
---
>         asgn.e <- er.fit$assign[qr.e$pivot[seq_len(rank.e)]]
109c109
<             if(is.null(dny)) dny <- paste0("Y", 1L:nc)
---
>             if(is.null(dny)) dny <- paste0("Y", seq_len(nc))
153c153
<         cat("Call:\n   ")
---
>         cat(gettext("Call:", domain = "R-stats"), "\n   ", sep = "")
157c157
<     asgn <- x$assign[qrx$pivot[1L:x$rank]]
---
>     asgn <- x$assign[qrx$pivot[seq_len(x$rank)]]
167c167
<     nmeffect <- c("(Intercept)", attr(x$terms, "term.labels"))[1+uasgn]
---
>     nmeffect <- c(gettext("(Intercept)", domain = NA), attr(x$terms, "term.labels"))[1+uasgn]
186c186
<     cat("\nTerms:\n")
---
>     cat("\n", gettext("Terms:", domain = "R-stats"), "\n", sep = "")
197,198c197,198
<             } else rn <- "Sum of Squares"
<             dimnames(tmp) <- list(c(rn, "Deg. of Freedom"), "Residuals")
---
>             } else rn <- gettext("Sum of Squares", domain = "R-stats")
>             dimnames(tmp) <- list(c(rn, gettext("Deg. of Freedom", domain = NA)), gettext("Residuals", domain = NA))
202,203c202
<             cat(if(length(rs) > 1L) "Residual standard errors:"
<                  else "Residual standard error:", sapply(rs, format))
---
>             cat(ngettext(length(rs), "Residual Standard Error:", "Residual Standard Errors:", domain = "R-stats"), sapply(rs, format))
207c206
<                      list(c("Sum of Squares", "Deg. of Freedom"), "<empty>")))
---
>                      list(c(gettext("Sum of Squares", domain = NA), gettext("Deg. of Freedom", domain = NA)), gettext("<empty>", domain = NA))))
213c212
<             nmeffect <- c(nmeffect, "Residuals")
---
>             nmeffect <- c(nmeffect, gettext("Residuals", domain = NA))
220,221c219,220
<         } else rn <- "Sum of Squares"
<         dimnames(tmp) <- list(c(rn, "Deg. of Freedom"), nmeffect)
---
>         } else rn <- gettext("Sum of Squares", domain = NA)
>         dimnames(tmp) <- list(c(rn, gettext("Deg. of Freedom", domain = NA)), nmeffect)
229,230c228
<             cat(if(length(rs) > 1L) "Residual standard errors:"
<                 else "Residual standard error:", sapply(rs, format))
---
>             cat(ngettext(length(rs), "Residual Standard Error:", "Residual Standard Errors:", domain = "R-stats"), sapply(rs, format))
235c233
<         R <- R[1L:min(dim(R)), , drop=FALSE]
---
>         R <- R[seq_len(min(dim(R))), , drop=FALSE]
238,239c236,237
<             cat(paste(nc - rank, "out of", nc, "effects not estimable\n"))
<             R <- R[, 1L:rank, drop = FALSE]
---
>             cat(gettextf("%d out of %d effects not estimable", nc - rank, nc, domain = "R-stats"), "\n", sep = "")
>             R <- R[, seq_len(rank), drop = FALSE]
244,245c242,243
<             cat("Estimated effects may be unbalanced\n")
<         else cat("Estimated effects are balanced\n")
---
>             cat(gettext("Estimated effects may be unbalanced", domain = "R-stats"), "\n", sep = "")
>         else cat(gettext("Estimated effects are balanced", domain = "R-stats"), "\n", sep = "")
293c291
<     asgn <- object$assign[object$qr$pivot[1L:object$rank]]
---
>     asgn <- object$assign[object$qr$pivot[seq_len(object$rank)]]
300c298
<     nmeffect <- c("(Intercept)", attr(object$terms, "term.labels"))
---
>     nmeffect <- c(gettext("(Intercept)", domain = NA), attr(object$terms, "term.labels"))
309c307
<         for (y in 1L:nresp) {
---
>         for (y in seq_len(nresp)) {
312c310
<             names(ans)[y] <- paste(" Response", cn)
---
>             names(ans)[y] <- gettextf("Response %s", cn, domain = "R-stats")
320c318
<                 stop("the 'split' argument must be a list")
---
>                 stop(gettextf("'%s' argument must be a list", "split"))
322a321
> 		tmp_N <- paste(sQuote(ns[na]), collapse = ", ")
325,326c324,325
<                                       "unknown names %s in the 'split' list"),
<                              paste(sQuote(ns[na]), collapse = ", ")),
---
>                                       "unknown names %s in the 'split' list", domain = "R-stats"),
>                              tmp_N),
332,333c331
<             split <- splitInteractions(split, attr(Terms, "factors"),
<                                        nmeffect, asgn, df.names)
---
>             split <- splitInteractions(split, attr(Terms, "factors"), nmeffect, asgn, df.names)
338c336
<     for (y in 1L:nresp) {
---
>     for (y in seq_len(nresp)) {
366c364
<             nmrows <- c(nmrows,  "Residuals")
---
>             nmrows <- c(nmrows,  gettext("Residuals", domain = NA))
370d367
<         x <- list(Df = df, "Sum Sq" = ss, "Mean Sq" = ms)
371a369,370
>             x <- list(Df = df, "Sum Sq" = ss, "Mean Sq" = ms, "F value" = 0, "Pr(>F)" = 0)
> 	    names(x) <- c(gettext("Df", domain = NA), gettext("Sum Sq", domain = NA), gettext("Mean Sq", domain = NA), gettext("F value", domain = NA), gettext("Pr(>F)", domain = NA))
374a374
> 	    #x[[which(names(x) == gettext("F value", domain = NA))]] <- TT
375a376
> 	    #x[[which(names(x) == gettext("Pr(>F)", domain = NA))]] <- TP
377a379,381
>         } else {
>          x <- list(Df = df, "Sum Sq" = ss, "Mean Sq" = ms)
> 	 names(x) <- c(gettext("Df", domain = NA), gettext("Sum Sq", domain = NA), gettext("Mean Sq", domain = NA))
382c386
<         pm <- pmatch("(Intercept)", row.names(x), 0L)
---
>         pm <- pmatch(gettext("(Intercept)", domain = NA), row.names(x), 0L)
397,398c401
<         print(x[[1L]], digits = digits, symbolic.cor = symbolic.cor,
<               signif.stars = signif.stars)
---
>         print(x[[1L]], digits = digits, symbolic.cor = symbolic.cor, signif.stars = signif.stars)
436c439
<         else 1L:ncol(x)
---
>         else seq_len(ncol(x))
445c448
<     R <- R[1L:min(dim(R)), , drop=FALSE]
---
>     R <- R[seq_len(min(dim(R))), , drop=FALSE]
453c456
<                 p1 <- 1L:rank
---
>                 p1 <- seq_len(rank)
480c483
<         cat("\nCall:\n")
---
>         cat("\n", gettext("Call:", domain = "R-stats"), "\n", sep = "")
484c487
<         cat("Note: The results below are on the weighted scale\n")
---
>         cat(gettext("Note: The results below are on the weighted scale", domain = "R-stats"), "\n", sep = "")
486c489
<     if(nx[1L] == "(Intercept)") {
---
>     if(nx[1L] == gettext("(Intercept)", domain = NA)) {
489c492
<             cat("\nGrand Means:\n")
---
>             cat("\n", gettext("Grand Means:", domain = "R-stats"), "\n", sep = "")
491c494
<         } else cat("\nGrand Mean: ", format(mn[1L]), "\n", sep = "")
---
>         } else cat("\n", gettext("Grand Mean: ", domain = "R-stats"), format(mn[1L]), "\n", sep = "")
496c499
<         cat("\nStratum ", ii, ": ", i, "\n", sep = "")
---
>         cat("\n", gettextf("Stratum %d: %s", ii, i, domain = "R-stats"), "\n", sep = "")
506c509
<         cat("Note: The results below are on the weighted scale\n")
---
>         cat(gettext("Note: The results below are on the weighted scale", domain = "R-stats"), "\n", sep = "")
509c512
<     if(strata[1L] == "(Intercept)") {
---
>     if(strata[1L] == gettext("(Intercept)", domain = NA)) {
513,514c516
<     x <- setNames(vector(length = length(strata), mode = "list"),
< 		  paste("Error:", strata))
---
>     x <- setNames(vector(length = length(strata), mode = "list"), gettextf("Error: %s", strata, domain = "R-stats"))
549c551
<         asgn <- object$assign[qro$pivot[1L:object$rank]]
---
>         asgn <- object$assign[qro$pivot[seq_len(object$rank)]]
552,553c554
<         nmeffect <- c("(Intercept)",
<                       attr(object$terms, "term.labels"))[1L + uasgn]
---
>         nmeffect <- c(gettext("(Intercept)", domain = NA), attr(object$terms, "term.labels"))[1L + uasgn]
555,556c556
<         res <- matrix(0, nrow = nterms, ncol = ncol(effects),
<                       dimnames = list(nmeffect, colnames(contrast)))
---
>         res <- matrix(0, nrow = nterms, ncol = ncol(effects), dimnames = list(nmeffect, colnames(contrast)))
568c568
<                 stop("'coef' must define a contrast, i.e., sum to 0")
---
>                 stop("'coef' argument must define a contrast, i.e., sum to 0")
570c570
<                 stop("'coef' must have same length as 'contrast.obj'")
---
>                 stop(gettextf("'%s' and '%s' arguments must have the same length", "coef", "contrast.obj"))
576,578c576
<                        stop(gettextf("each element of '%s' must be logical",
<                                      substitute(contrasts.list)),
<                             domain = NA)
---
>                        stop(gettextf("each element of '%s' must be logical", substitute(contrasts.list)), domain = "R-stats")
611c609
<             stop("'object' does not include an error 'qr' component")
---
>             stop("'object' argument does not include an error 'qr' component")
623c621
<                 asgn <- strata$assign[strata$qr$pivot[1L:strata$rank]]
---
>                 asgn <- strata$assign[strata$qr$pivot[seq_len(strata$rank)]]
625c623
<                 nm <- c("(Intercept)", attr(strata$terms, "term.labels"))
---
>                 nm <- c(gettext("(Intercept)", domain = NA), attr(strata$terms, "term.labels"))
663c661
<                 stop("'coef' must define a contrast, i.e., sum to 0")
---
>                 stop("'coef' argument must define a contrast, i.e., sum to 0")
665c663
<                 stop("'coef' must have same length as 'contrast.obj'")
---
>                 stop(gettextf("'%s' and '%s' arguments must have the same length", "coef", "contrast.obj"))
671,673c669
<                            stop(gettextf("each element of '%s' must be logical",
<                                          substitute(contrasts.obj)),
<                                 domain = NA)
---
>                            stop(gettextf("each element of '%s' must be logical", substitute(contrasts.obj)), domain = "R-stats")
685c681
<             colnames(contrast) <- paste("Contrast", seq(ncol(contrast)))
---
>             colnames(contrast) <- gettextf("Contrast %s", seq(ncol(contrast)), domain = "R-stats")
688c684
<     weights <- weights[-match("(Intercept)", names(weights))]
---
>     weights <- weights[-match(gettext("(Intercept)", domain = NA), names(weights))]
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/approx.R R/src/library/stats/R/approx.R
64c64
<     if (is.na(nx)) stop("invalid length(x)")
---
>     if (is.na(nx)) stop(gettextf("invalid '%s' value", "length(x)"))
67c67
< 	    stop("need at least two non-NA values to interpolate")
---
> 	    stop("at least two non-NA values to interpolate are needed")
77c77
< 	if (n <= 0) stop("'approx' requires n >= 1")
---
> 	if (n <= 0) stop(gettextf("'%s' argument must be at least %d", "n", 1))
97c97
<     if (is.na(n)) stop("invalid length(x)")
---
>     if (is.na(n)) stop(gettextf("invalid '%s' value", "length(x)"))
101c101
< 	    stop("need at least two non-NA values to interpolate")
---
> 	    stop("at least two non-NA values to interpolate are needed")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/ar.R R/src/library/stats/R/ar.R
53,54c53,54
<         stop("'x' must be numeric")
<     if(anyNA(x)) stop("NAs in 'x'")
---
>         stop(gettextf("'%s' argument must be numeric", "x"))
>     if(anyNA(x)) stop("NA values in 'x'")
63,64c63,64
<     if (order.max < 1L) stop("'order.max' must be >= 1")
<     else if (order.max >= n.used) stop("'order.max' must be < 'n.used'")
---
>     if (order.max < 1L) stop(gettextf("'%s' argument must be >= %d", "order.max", 1))
>     else if (order.max >= n.used) stop("'order.max' argument must be < 'n.used' argument")
168c168
<     cat("\nCall:\n", deparse(x$call), "\n\n", sep = "")
---
>     cat("\n", gettext("Call:", domain = "R-stats"), "\n", deparse(x$call), "\n\n", sep = "")
176c176
<             cat("Coefficients:\n")
---
>             cat(gettext("Coefficients:", domain = "R-stats"), "\n", sep = "")
181,182c181
<         if(!is.null(xint <- x$x.intercept) && !is.na(xint))
<             cat("\nIntercept: ", format(xint, digits = digits),
---
>         if(!is.null(xint <- x$x.intercept) && !is.na(xint)) {
184,187c183,185
<                 " (", format(x$asy.se.coef$x.mean, digits = digits),
<                 ") ", "\n", sep = "")
<         cat("\nOrder selected", x$order, " sigma^2 estimated as ",
<             format(x$var.pred, digits = digits))
---
>             cat("\n", gettext("Intercept: ", domain = "R-stats"), format(xint, digits = digits), " (", format(x$asy.se.coef$x.mean, digits = digits), ") ", "\n", sep = "")
> 	}
>         cat("\n", gettextf("Order selected %s sigma^2 estimated as %s", x$order, format(x$var.pred, digits = digits), domain = "R-stats"), sep = "")
195c193
<     if (n.ahead < 1L) stop("'n.ahead' must be at least 1")
---
>     if (n.ahead < 1L) stop(gettextf("'%s' argument must be at least %d", "n.ahead", 1))
228c226
<             warning("'se.fit' not yet implemented for multivariate models")
---
>             warning("'se.fit()' not yet implemented for multivariate models")
264c262
<     if(anyNA(x)) stop("NAs in 'x'")
---
>     if(anyNA(x)) stop("NA values in 'x'")
266c264
<         stop("'x' must be numeric")
---
>         stop(gettextf("'%s' argument must be numeric", "x"))
275,276c273,274
<     if (order.max < 0L) stop ("'order.max' must be >= 0")
<     else if (order.max >= n.used) stop("'order.max' must be < 'n.used'")
---
>     if (order.max < 0L) stop(gettextf("'%s' argument must be >= %d", "order.max", 0))
>     else if (order.max >= n.used) stop("'order.max' argument must be < 'n.used' argument")
339c337
<     if(anyNA(x)) stop("NAs in 'x'")
---
>     if(anyNA(x)) stop("NA values in 'x'")
344c342
<         stop("'x' must be numeric")
---
>         stop(gettextf("'%s' argument must be numeric", "x"))
356,357c354,355
<     if (order.max < 0L)	     stop("'order.max' must be >= 0")
<     if (order.max >= n.used) stop("'order.max' must be < 'n.used'")
---
>     if (order.max < 0L)	     stop(gettextf("'%s' argument must be >= %d", "order.max", 0))
>     if (order.max >= n.used) stop("'order.max' argument must be < 'n.used' argument")
388,391c386,387
<             warning(paste("model order: ", m,
<                           "singularities in the computation of the projection matrix",
<                           "results are only valid up to model order", m - 1L),
<                     domain = NA)
---
>             warning(gettextf("model order: %d singularities in the computation of the projection matrix results are only valid up to model order %d", m, m - 1L),
>                     domain = "R-stats")
478c474
<     if (anyNA(x)) stop("NAs in 'x'")
---
>     if (anyNA(x)) stop("NA values in 'x'")
491c487
<         stop("'order.max' must be >= 1")
---
>         stop(gettextf("'%s' argument must be >= %d", "order.max", 1))
511,513c507,509
<         for (i in 1L:order)
<             resid[-(1L:order), ] <- resid[-(1L:order),] - x[(order - i + 1L):(n.used - i), ] %*% t(ar[i, , ])
<         resid[1L:order, ] <- NA
---
>         for (i in seq_len(order))
>             resid[-seq_len(order), ] <- resid[-seq_len(order),] - x[(order - i + 1L):(n.used - i), ] %*% t(ar[i, , ])
>         resid[seq_len(order), ] <- NA
525c521
<     dimnames(partialacf) <- list(1L:order.max, snames, snames)
---
>     dimnames(partialacf) <- list(seq_len(order.max), snames, snames)
543c539
<     if(anyNA(x)) stop("NAs in 'x'")
---
>     if(anyNA(x)) stop("NA values in 'x'")
555,556c551,552
<     if (order.max < 1L) stop("'order.max' must be >= 1")
<     else if (order.max >= n.used) stop("'order.max' must be < 'n.used'")
---
>     if (order.max < 1L) stop(gettextf("'%s' argument must be >= %d", "order.max", 1))
>     else if (order.max >= n.used) stop("'order.max' argument must be < 'n.used' argument")
568c564
<     ar <- if (order) coefs[order, 1L:order] else numeric()
---
>     ar <- if (order) coefs[order, seq_len(order)] else numeric()
599c595
<         stop("NAs in 'x'")
---
>         stop("NA values in 'x'")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/arima.R R/src/library/stats/R/arima.R
38c38
<         if(p > 0) mod$T[1L:p, 1L] <- phi
---
>         if(p > 0) mod$T[seq_len(p), 1L] <- phi
40c40
< 	    mod$Pn[1L:r, 1L:r] <-
---
> 	    mod$Pn[seq_len(r), seq_len(r)] <-
64c64
<         if(ncxreg > 0) x <- x - xreg %*% par[narma + (1L:ncxreg)]
---
>         if(ncxreg > 0) x <- x - xreg %*% par[narma + seq_len(ncxreg)]
76c76
<         if(ncxreg > 0) x <- x - xreg %*% par[narma + (1L:ncxreg)]
---
>         if(ncxreg > 0) x <- x - xreg %*% par[narma + seq_len(ncxreg)]
86c86
<         all(Mod(polyroot(c(1, -ar[1L:p]))) > 1)
---
>         all(Mod(polyroot(c(1, -ar[seq_len(p)]))) > 1)
95c95
<         roots <- polyroot(c(1, ma[1L:q0]))
---
>         roots <- polyroot(c(1, ma[seq_len(q0)]))
107c107
<         stop("only implemented for univariate time series")
---
>         stop("'arima()' method is implemented only for univariate time series")
112c112
<         stop("'x' must be numeric")
---
>         stop(gettextf("'%s' argument must be numeric", "x"))
119c119
<             stop("'order' must be a non-negative numeric vector of length 3")
---
>             stop("'order' argument must be a non-negative numeric vector of length 3")
123c123
<                 stop("'seasonal' must be a list with component 'order'")
---
>                 stop("'seasonal' argument must be a list with component 'order'")
126c126
<                 stop("'seasonal$order' must be a non-negative numeric vector of length 3")
---
>                 stop("'seasonal$order' component must be a non-negative numeric vector of length 3")
129,130c129,130
<             else ("'seasonal' is of the wrong length")
<         } else stop("'seasonal' must be a list with component 'order'")
---
>             else ("'seasonal' argument is of the wrong length")
>         } else stop("'seasonal' argument must be a list with component 'order'")
134,136c134,135
<     arma <- as.integer(c(order[-2L], seasonal$order[-2L], seasonal$period,
<                          order[2L], seasonal$order[2L]))
<     narma <- sum(arma[1L:4L])
---
>     arma <- as.integer(c(order[-2L], seasonal$order[-2L], seasonal$period, order[2L], seasonal$order[2L]))
>     narma <- sum(arma[seq_len(4)])
151c150
<         if (NROW(xreg) != n) stop("lengths of 'x' and 'xreg' do not match")
---
>         if (NROW(xreg) != n) stop(gettextf("lengths of '%s' and '%s' arguments must match", "x", "xreg"))
159c158
<             if(ncxreg == 1L) nmxreg else paste0(nmxreg, 1L:ncxreg)
---
>             if(ncxreg == 1L) nmxreg else paste0(nmxreg, seq_len(ncxreg))
178c177
<     else if(length(fixed) != narma + ncxreg) stop("wrong length for 'fixed'")
---
>     else if(length(fixed) != narma + ncxreg) stop(gettextf("'%s' argument is of the wrong length", "fixed"))
186c185
<             warning("some AR parameters were fixed: setting transform.pars = FALSE")
---
>             warning("some AR parameters were fixed: setting 'transform.pars = FALSE'")
194c193
<         orig.xreg <- (ncxreg == 1L) || any(!mask[narma + 1L:ncxreg])
---
>         orig.xreg <- (ncxreg == 1L) || any(!mask[narma + seq_len(ncxreg)])
225c224
<             stop("'init' is of the wrong length")
---
>             stop(gettextf("'%s' argument is of the wrong length", "init"))
230c229
<                 if(!arCheck(init[1L:arma[1L]]))
---
>                 if(!arCheck(init[seq_len(arma[1L])]))
233c232
<                 if(!arCheck(init[sum(arma[1L:2L]) + 1L:arma[3L]]))
---
>                 if(!arCheck(init[sum(arma[seq_len(2)]) + seq_len(arma[3L])]))
251,252c250
<             warning(gettextf("possible convergence problem: optim gave code = %d",
<                              res$convergence), domain = NA)
---
>             warning(gettextf("possible convergence problem: optim gave code = %d", res$convergence), domain = "R-stats")
257c255
<         if(ncxreg > 0) x <- x - xreg %*% coef[narma + (1L:ncxreg)]
---
>         if(ncxreg > 0) x <- x - xreg %*% coef[narma + seq_len(ncxreg)]
273c271
<                 if(!arCheck(init[1L:arma[1L]]))
---
>                 if(!arCheck(init[seq_len(arma[1L])]))
276c274
<                 if(!arCheck(init[sum(arma[1L:2L]) + 1L:arma[3L]]))
---
>                 if(!arCheck(init[sum(arma[seq_len(2)]) + seq_len(arma[3L])]))
284c282
<                 ind <- arma[1L] + 1L:arma[2L]
---
>                 ind <- arma[1L] + seq_len(arma[2L])
288c286
<                 ind <- sum(arma[1L:3L]) + 1L:arma[4L]
---
>                 ind <- sum(arma[seq_len(3)]) + seq_len(arma[4L])
302,303c300
<             warning(gettextf("possible convergence problem: optim gave code = %d",
<                              res$convergence), domain = NA)
---
>             warning(gettextf("possible convergence problem: optim gave code = %d", res$convergence), domain = "R-stats")
308c305
<                 ind <- arma[1L] + 1L:arma[2L]
---
>                 ind <- arma[1L] + seq_len(arma[2L])
313c310
<                 ind <- sum(arma[1L:3L]) + 1L:arma[4L]
---
>                 ind <- sum(arma[seq_len(3)]) + seq_len(arma[4L])
337c334
<             arimaSS(x - xreg %*% coef[narma + (1L:ncxreg)], mod)
---
>             arimaSS(x - xreg %*% coef[narma + seq_len(ncxreg)], mod)
344,347c341,344
<     if (arma[1L] > 0L) nm <- c(nm, paste0("ar", 1L:arma[1L]))
<     if (arma[2L] > 0L) nm <- c(nm, paste0("ma", 1L:arma[2L]))
<     if (arma[3L] > 0L) nm <- c(nm, paste0("sar", 1L:arma[3L]))
<     if (arma[4L] > 0L) nm <- c(nm, paste0("sma", 1L:arma[4L]))
---
>     if (arma[1L] > 0L) nm <- c(nm, paste0("ar", seq_len(arma[1L])))
>     if (arma[2L] > 0L) nm <- c(nm, paste0("ma", seq_len(arma[2L])))
>     if (arma[3L] > 0L) nm <- c(nm, paste0("sar", seq_len(arma[3L])))
>     if (arma[4L] > 0L) nm <- c(nm, paste0("sma", seq_len(arma[4L])))
351c348
<             ind <- narma + 1L:ncxreg
---
>             ind <- narma + seq_len(ncxreg)
375c372
<     cat("\nCall:", deparse(x$call, width.cutoff = 75L), "", sep = "\n")
---
>     cat("\n", gettext("Call:", domain = "R-stats"), "\n", deparse(x$call, width.cutoff = 75L), "\n\n", sep = "")
377c374
<         cat("Coefficients:\n")
---
>         cat(gettext("Coefficients:", domain = "R-stats"), "\n", sep = "")
390,392c387
<         cat("\nsigma^2 estimated as ", format(x$sigma2, digits = digits),
<             ":  log likelihood = ", format(round(x$loglik, 2L)),
<             ",  aic = ", format(round(x$aic, 2L)), "\n", sep = "")
---
>         cat("\n", gettextf("sigma^2 estimated as %s:  log likelihood = %s,  aic = %s", format(x$sigma2, digits = digits), format(round(x$loglik, 2L)), format(round(x$aic, 2L)), domain = "R-stats"), "\n", sep = "")
394,397c389
<         cat("\nsigma^2 estimated as ",
<             format(x$sigma2, digits = digits),
<             ":  part log likelihood = ", format(round(x$loglik,2)),
<             "\n", sep = "")
---
>         cat("\n", gettextf("sigma^2 estimated as %s:  part log likelihood = %s", format(x$sigma2, digits = digits), format(round(x$loglik,2)), domain = "R-stats"), "\n", sep = "")
417c409
<     narma <- sum(arma[1L:4L])
---
>     narma <- sum(arma[seq_len(4)])
425c417
<         else drop(as.matrix(newxreg) %*% coefs[-(1L:narma)])
---
>         else drop(as.matrix(newxreg) %*% coefs[-seq_len(narma)])
429c421
<         ma <- coefs[arma[1L] + 1L:arma[2L]]
---
>         ma <- coefs[arma[1L] + seq_len(arma[2L])]
434c426
<         ma <- coefs[sum(arma[1L:3L]) + 1L:arma[4L]]
---
>         ma <- coefs[sum(arma[seq_len(3)]) + seq_len(arma[4L])]
455,456c447,448
<     if(anyNA(phi))   warning(gettextf("NAs in '%s'", "phi"), domain=NA)
<     if(anyNA(theta)) warning(gettextf("NAs in '%s'", "theta"), domain=NA)
---
>     if(anyNA(phi))   warning(gettextf("NA values in '%s'", "phi"), domain = "R-stats")
>     if(anyNA(theta)) warning(gettextf("NA values in '%s'", "theta"), domain = "R-stats")
462c454
<     if(p > 0) T[1L:p, 1L] <- phi
---
>     if(p > 0) T[seq_len(p), 1L] <- phi
481c473
<         Pn[1L:r, 1L:r] <- switch(match.arg(SSinit),
---
>         Pn[seq_len(r), seq_len(r)] <- switch(match.arg(SSinit),
484c476
<                                  stop("invalid 'SSinit'"))
---
>                                  stop(gettextf("invalid '%s' argument", "SSinit")))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/arma0.R R/src/library/stats/R/arma0.R
37c37
<         all(Mod(polyroot(c(1, -ar[1L:p]))) > 1)
---
>         all(Mod(polyroot(c(1, -ar[seq_len(p)]))) > 1)
46c46
<         roots <- polyroot(c(1, ma[1L:q0]))
---
>         roots <- polyroot(c(1, ma[seq_len(q0)]))
63c63
<         stop("'x' must be numeric")
---
>         stop(gettextf("'%s' argument must be numeric", "x"))
74,75c74
<             if(!is.numeric(seasonal$order) || length(seasonal$order) != 3L
<                || any(seasonal$order < 0))
---
>             if(!is.numeric(seasonal$order) || length(seasonal$order) != 3L || any(seasonal$order < 0))
79c78
<             else ("'seasonal' is of the wrong length")
---
>             else gettextf("'%s' argument is of the wrong length", "seasonal")
86c85
<     narma <- sum(arma[1L:4L])
---
>     narma <- sum(arma[seq_len(4)])
102c101
<         if(NROW(xreg) != n) stop("lengths of 'x' and 'xreg' do not match")
---
>         if(NROW(xreg) != n) stop(gettextf("lengths of '%s' and '%s' arguments must match", "x", "xreg"))
108c107
<             colnames(xreg) <- paste0("xreg", 1L:ncxreg)
---
>             colnames(xreg) <- paste0("xreg", seq_len(ncxreg))
114c113
<     else if(length(fixed) != narma + ncxreg) stop("wrong length for 'fixed'")
---
>     else if(length(fixed) != narma + ncxreg) stop(gettextf("'%s' argument is of the wrong length", "fixed"))
117c116
<     if(transform.pars && any(!mask[1L:narma])) {
---
>     if(transform.pars && any(!mask[seq_len(narma)])) {
126c125
<         if(qr(na.omit(xreg))$rank < ncol(xreg)) stop("'xreg' is collinear")
---
>         if(qr(na.omit(xreg))$rank < ncol(xreg)) stop("'xreg' argument is collinear")
128c127
<             cn <- paste0("xreg", 1L:ncxreg)
---
>             cn <- paste0("xreg", seq_len(ncxreg))
133c132
<             warning("NAs present: setting 'delta' to -1")
---
>             warning("NA values are present: setting 'delta' to -1")
140c139
<         orig.xreg <- (ncxreg == 1) || any(!mask[narma + 1L:ncxreg])
---
>         orig.xreg <- (ncxreg == 1) || any(!mask[narma + seq_len(ncxreg)])
160c159
<             stop("'init' is of the wrong length")
---
>             stop(gettextf("'%s' argument is of the wrong length", "init"))
163c162
<             if(any(!mask[1L:narma]))
---
>             if(any(!mask[seq_len(narma)]))
167c166
<                 if(!arCheck(init[1L:arma[1L]]))
---
>                 if(!arCheck(init[seq_len(arma[1L])]))
170c169
<                 if(!arCheck(init[sum(arma[1L:2]) + 1L:arma[3L]]))
---
>                 if(!arCheck(init[sum(arma[seq_len(2)]) + seq_len(arma[3L])]))
174c173
<                 ind <- arma[1L] + 1L:arma[2L]
---
>                 ind <- arma[1L] + seq_len(arma[2L])
178c177
<                 ind <- sum(arma[1L:3]) + 1L:arma[4L]
---
>                 ind <- sum(arma[seq_len(3)]) + seq_len(arma[4L])
192,193c191
<         warning(gettextf("possible convergence problem: optim gave code = %d",
<                          code), domain = NA)
---
>         warning(gettextf("possible convergence problem: optim gave code = %d", code), domain = "R-stats")
213,216c211,214
<     if(arma[1L] > 0) nm <- c(nm, paste0("ar", 1L:arma[1L]))
<     if(arma[2L] > 0) nm <- c(nm, paste0("ma", 1L:arma[2L]))
<     if(arma[3L] > 0) nm <- c(nm, paste0("sar", 1L:arma[3L]))
<     if(arma[4L] > 0) nm <- c(nm, paste0("sma", 1L:arma[4L]))
---
>     if(arma[1L] > 0) nm <- c(nm, paste0("ar", seq_len(arma[1L])))
>     if(arma[2L] > 0) nm <- c(nm, paste0("ma", seq_len(arma[2L])))
>     if(arma[3L] > 0) nm <- c(nm, paste0("sar", seq_len(arma[3L])))
>     if(arma[4L] > 0) nm <- c(nm, paste0("sma", seq_len(arma[4L])))
221c219
<             ind <- narma + 1L:ncxreg
---
>             ind <- narma + seq_len(ncxreg)
246,247c244,246
<     cat("\nCall:", deparse(x$call, width.cutoff = 75L), "", sep = "\n")
<     cat("Coefficients:\n")
---
>     cat("\n")
>     cat(gettext("Call:", domain = "R-stats"), deparse(x$call, width.cutoff = 75L), "", sep = "\n")
>     cat(gettext("Coefficients:", domain = "R-stats"), "\n", sep = "")
258,262c257,258
<         cat("\nsigma^2 estimated as ",
<             format(x$sigma2, digits = digits),
<             ":  log likelihood = ", format(round(x$loglik,2)),
<             ",  aic = ", format(round(x$aic,2)),
<             "\n", sep = "")
---
>         cat("\n", gettextf("sigma^2 estimated as %s:  log likelihood = %s,  aic = %s", format(x$sigma2, digits = digits), format(round(x$loglik,2)),
>             format(round(x$aic,2)), domain = "R-stats"), "\n", sep = "")
264,266c260
<         cat("\nsigma^2 estimated as ",
<             format(x$sigma2, digits = digits),
<             ":  part log likelihood = ", format(round(x$loglik,2)),
---
>         cat("\n", gettextf("sigma^2 estimated as %s:  part log likelihood = %s", format(x$sigma2, digits = digits), format(round(x$loglik,2)), domain = "R-stats"),
286c280
<     narma <- sum(arma[1L:4L])
---
>     narma <- sum(arma[seq_len(4)])
293,294c287,288
<         data <- data - as.matrix(xreg) %*% coefs[-(1L:narma)]
<         xm <- drop(as.matrix(newxreg) %*% coefs[-(1L:narma)])
---
>         data <- data - as.matrix(xreg) %*% coefs[-seq_len(narma)]
>         xm <- drop(as.matrix(newxreg) %*% coefs[-seq_len(narma)])
298c292
<         ma <- coefs[arma[1L] + 1L:arma[2L]]
---
>         ma <- coefs[arma[1L] + seq_len(arma[2L])]
303c297
<         ma <- coefs[sum(arma[1L:3L]) + 1L:arma[4L]]
---
>         ma <- coefs[sum(arma[seq_len(3)]) + seq_len(arma[4L])]
338,339c332,333
<     for(i in 1L:nlag) pval[i] <- Box.test(rs, i, type="Ljung-Box")$p.value
<     plot(1L:nlag, pval, xlab = "lag", ylab = "p value", ylim = c(0,1),
---
>     for(i in seq_len(nlag)) pval[i] <- Box.test(rs, i, type="Ljung-Box")$p.value
>     plot(seq_len(nlag), pval, xlab = "lag", ylab = "p value", ylim = c(0,1),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/bandwidths.R R/src/library/stats/R/bandwidths.R
45,46c45,46
<     if (is.na(n)) stop("invalid length(x)")
<     if(!is.numeric(x)) stop("invalid 'x'")
---
>     if (is.na(n)) stop(gettextf("invalid '%s' value", "length(x)"))
>     if(!is.numeric(x)) stop(gettextf("invalid '%s' value", "x"))
48c48
<     if (is.na(nb) || nb <= 0L) stop("invalid 'nb'")
---
>     if (is.na(nb) || nb <= 0L) stop(gettextf("invalid '%s' value", "nb"))
64c64
<         stop("sample is too sparse to find TD", domain = NA)
---
>         stop("sample is too sparse to find TD", domain = "R-stats")
81,82c81
< 		message(gettextf("increasing bw.SJ() search interval (%d) to [%.4g,%.4g]",
<                                  itry, lower, upper), domain = NA)
---
> 		message(gettextf("increasing bw.SJ() search interval (%d) to [%.4g,%.4g]", itry, lower, upper), domain = "R-stats")
96,97c95,96
<     if (is.na(n)) stop("invalid length(x)")
<     if(!is.numeric(x)) stop("invalid 'x'")
---
>     if (is.na(n)) stop(gettextf("invalid '%s' value", "length(x)"))
>     if(!is.numeric(x)) stop(gettextf("invalid '%s' value", "x"))
99c98
<     if (is.na(nb) || nb <= 0L) stop("invalid 'nb'")
---
>     if (is.na(nb) || nb <= 0L) stop(gettextf("invalid '%s' value", "nb"))
116,117c115,116
<     if (is.na(n)) stop("invalid length(x)")
<     if(!is.numeric(x)) stop("invalid 'x'")
---
>     if (is.na(n)) stop(gettextf("invalid '%s' value", "length(x)"))
>     if(!is.numeric(x)) stop(gettextf("invalid '%s' value", "x"))
119c118
<     if (is.na(nb) || nb <= 0L) stop("invalid 'nb'")
---
>     if (is.na(nb) || nb <= 0L) stop(gettextf("invalid '%s' value", "nb"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/biplot.R R/src/library/stats/R/biplot.R
31c31
< 	if(is.null(xlabs)) xlabs <- 1L:n
---
> 	if(is.null(xlabs)) xlabs <- seq_len(n)
37c37
< 	if(is.null(ylabs)) ylabs <- paste("Var", 1L:p)
---
> 	if(is.null(ylabs)) ylabs <- paste("Var", seq_len(p))
84c84
<     if(length(choices) != 2L) stop("length of choices must be 2")
---
>     if(length(choices) != 2L) stop(gettextf("'%s' argument must be of length %d", "choices", 2))
86,87c86
< 	stop(gettextf("object '%s' has no scores", deparse(substitute(x))),
<              domain = NA)
---
> 	stop(gettextf("object '%s' has no scores", deparse(substitute(x))), domain = "R-stats")
91c90
<     if(scale < 0 || scale > 1) warning("'scale' is outside [0, 1]")
---
>     if(scale < 0 || scale > 1) warning(gettextf("'%s' argument is outside [0,1]", "scale"))
101c100
<     if(length(choices) != 2L) stop("length of choices must be 2")
---
>     if(length(choices) != 2L) stop(gettextf("'%s' argument must be of length %d", "choices", 2))
103,104c102
< 	stop(gettextf("object '%s' has no scores", deparse(substitute(x))),
<              domain = NA)
---
> 	stop(gettextf("object '%s' has no scores", deparse(substitute(x))), domain = "R-stats")
110c108
<     if(scale < 0 || scale > 1) warning("'scale' is outside [0, 1]")
---
>     if(scale < 0 || scale > 1) warning(gettextf("'%s' argument is outside [0,1]", "scale"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/birthday.R R/src/library/stats/R/birthday.R
24a25
>     if (k < 2) return(1)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/cancor.R R/src/library/stats/R/cancor.R
25c25
<     if((nr <- nrow(x)) != nrow(y)) stop("unequal number of rows in 'cancor'")
---
>     if((nr <- nrow(x)) != nrow(y)) stop("unequal number of rows in 'cancor()'")
28c28
<     if(!nr || !ncx || !ncy) stop("dimension 0 in 'x' or 'y'")
---
>     if(!nr || !ncx || !ncy) stop("dimension 0 in 'x' or 'y' argument")
53,54c53,54
<     dx <- qx$rank;	if(!dx) stop("'x' has rank 0")
<     dy <- qy$rank;	if(!dy) stop("'y' has rank 0")
---
>     dx <- qx$rank;	if(!dx) stop(gettextf("'%s' argument has rank 0", "x"))
>     dy <- qy$rank;	if(!dy) stop(gettextf("'%s' argument has rank 0", "y"))
56c56
<     z <- svd(qr.qty(qx, qr.qy(qy, diag(1, nr, dy)))[1L:dx,, drop = FALSE],
---
>     z <- svd(qr.qty(qx, qr.qy(qy, diag(1, nr, dy)))[seq_len(dx),, drop = FALSE],
58,63c58,62
<     xcoef <- backsolve((qx$qr)[1L:dx, 1L:dx, drop = FALSE], z$u)
<     rownames(xcoef) <- colnames(x)[qx$pivot][1L:dx]
<     ycoef <-  backsolve((qy$qr)[1L:dy, 1L:dy, drop = FALSE], z$v)
<     rownames(ycoef) <- colnames(y)[qy$pivot][1L:dy]
<     list(cor = z$d, xcoef = xcoef, ycoef = ycoef, xcenter = xcenter,
< 	 ycenter = ycenter)
---
>     xcoef <- backsolve((qx$qr)[seq_len(dx), seq_len(dx), drop = FALSE], z$u)
>     rownames(xcoef) <- colnames(x)[qx$pivot][seq_len(dx)]
>     ycoef <-  backsolve((qy$qr)[seq_len(dy), seq_len(dy), drop = FALSE], z$v)
>     rownames(ycoef) <- colnames(y)[qy$pivot][seq_len(dy)]
>     list(cor = z$d, xcoef = xcoef, ycoef = ycoef, xcenter = xcenter, ycenter = ycenter)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/cmdscale.R R/src/library/stats/R/cmdscale.R
22c22
< 	stop("NA values not allowed in 'd'")
---
> 	stop("NA values are not allowed in 'd' argument")
43c43
<     if(is.na(n) || n > 46340) stop("invalid value of 'n'")
---
>     if(is.na(n) || n > 46340) stop(gettextf("invalid '%s' value", "n"))
51c51
<         i2 <- n + (i <- 1L:n)
---
>         i2 <- n + (i <- seq_len(n))
69,70c69
<         warning(gettextf("only %d of the first %d eigenvalues are > 0", k1, k),
<                 domain = NA)
---
>         warning(gettextf("only %d of the first %d eigenvalues are > 0", k1, k), domain = "R-stats")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/contrast.R R/src/library/stats/R/contrast.R
35,37c35
< 		warning(sprintf(
< 		"contrast function '%s' does not support 'sparse = TRUE'",
< 				ctr), domain = NA)
---
> 		warning(gettextf("contrast function '%s' does not support 'sparse = TRUE'", ctr), domain = "R-stats")
69c67
< 	    cm[,1L:nc] <- value
---
> 	    cm[,seq_len(nc)] <- value
73c71
< 	} else cm <- value[, 1L:n1, drop=FALSE]
---
> 	} else cm <- value[, seq_len(n1), drop=FALSE]
91,93c89
< 	    stop(gettextf("%s needs package 'Matrix' correctly installed",
<                           "contr*(.., sparse=TRUE)"),
<                  domain = NA)
---
> 	    stop(gettextf("%s needs package 'Matrix' correctly installed", "contr*(.., sparse=TRUE)"), domain = "R-stats")
102,104c98
< 	stop(gettextf("%s needs package 'Matrix' correctly installed",
<                       "contr*(.., sparse=TRUE)"),
<              domain = NA)
---
> 	stop(gettextf("%s needs package 'Matrix' correctly installed", "contr*(.., sparse=TRUE)"), domain = "R-stats")
145,146c139
< 	    stop(gettextf("contrasts not defined for %d degrees of freedom",
<                           n - 1L), domain = NA)
---
> 	    stop(gettextf("contrasts not defined for %d degrees of freedom", n - 1L), domain = "R-stats")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/cor.R R/src/library/stats/R/cor.R
24,27c24,25
<     na.method <-
< 	pmatch(use, c("all.obs", "complete.obs", "pairwise.complete.obs",
< 		      "everything", "na.or.complete"))
<     if(is.na(na.method)) stop("invalid 'use' argument")
---
>     na.method <- pmatch(use, c("all.obs", "complete.obs", "pairwise.complete.obs", "everything", "na.or.complete"))
>     if(is.na(na.method)) stop(gettextf("invalid '%s' argument", "use"))
35c33
<     if(!(is.numeric(x) || is.logical(x))) stop("'x' must be numeric")
---
>     if(!(is.numeric(x) || is.logical(x))) stop(gettextf("'%s' argument must be numeric", "x"))
38c36
<         if(!(is.numeric(y) || is.logical(y))) stop("'y' must be numeric")
---
>         if(!(is.numeric(y) || is.logical(y))) stop(gettextf("'%s' argument must be numeric", "y"))
77c75
<              if(ncx == 0) stop("'x' is empty")
---
>              if(ncx == 0) stop("'x' argument is empty")
128,130c126,127
< 	pmatch(use, c("all.obs", "complete.obs", "pairwise.complete.obs",
< 		      "everything", "na.or.complete"))
<     if(is.na(na.method)) stop("invalid 'use' argument")
---
> 	pmatch(use, c("all.obs", "complete.obs", "pairwise.complete.obs", "everything", "na.or.complete"))
>     if(is.na(na.method)) stop(gettextf("invalid '%s' argument", "use"))
179,181c176,177
< 	pmatch(use, c("all.obs", "complete.obs", "pairwise.complete.obs",
< 		      "everything", "na.or.complete"))
<     if(is.na(na.method)) stop("invalid 'use' argument")
---
> 	pmatch(use, c("all.obs", "complete.obs", "pairwise.complete.obs", "everything", "na.or.complete"))
>     if(is.na(na.method)) stop(gettextf("invalid '%s' argument", "use"))
203c199
<     r[cbind(1L:p,1L:p)] <- 1 # exact in diagonal
---
>     r[cbind(seq_len(p), seq_len(p))] <- 1 # exact in diagonal
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/cpgram.R R/src/library/stats/R/cpgram.R
24c24
<              main = paste("Series: ", deparse(substitute(ts))),
---
>              main = paste(gettext("Series: ", domain = "R-stats"), deparse(substitute(ts))),
29c29
< 	stop("only implemented for univariate time series")
---
> 	stop("'cpgram()' is implemented only for univariate time series")
39,40c39,40
< 	y <- y[1L:n]
< 	x <- x[1L:n]
---
> 	y <- y[seq_len(n)]
> 	x <- x[seq_len(n)]
48c48
< 	 ylim=c(0, 1), xaxs="i", yaxs="i", xlab="frequency",
---
> 	 ylim=c(0, 1), xaxs="i", yaxs="i", xlab=gettext("frequency", domain = "R-stats"),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/cutree.R R/src/library/stats/R/cutree.R
22c22
<         stop("invalid 'tree' ('merge' component)")
---
>         stop("invalid 'tree' argument ('merge' component)")
33c33
<         if(getOption("verbose")) message("cutree(): k(h) = ", k, domain = NA)
---
>         if(getOption("verbose")) message("cutree(): k(h) = ", k, domain = "R-stats")
38,39c38
<             stop(gettextf("elements of 'k' must be between 1 and %d", n),
<                  domain = NA)
---
>             stop(gettextf("elements of 'k' must be between 1 and %d", n), domain = "R-stats")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/dendrogram.R R/src/library/stats/R/dendrogram.R
35c35
<     for (k in 1L:nMerge) {
---
>     for (k in seq_len(nMerge)) {
93,94c93,94
< 	    "dendrogram entries must be 1,2,..,%d (in any order), to be coercible to \"hclust\"",
< 	    n), domain=NA)
---
> 	    "dendrogram entries must be 1,2,..,%d (in any order), to be coercible to an object of class \"hclust\"",
> 	    n), domain = "R-stats")
195c195
< 	for(j in 1L:k) {
---
> 	for(j in seq_len(k)) {
200c200
< 	    warning("midcache() of non-binary dendrograms only partly implemented")
---
> 	    warning("'midcache()' of non-binary dendrograms only partly implemented")
213d212
<     cat("'dendrogram' ")
215c214
< 	cat("leaf '", format(attr(x, "label"), digits = digits),"'", sep = "")
---
> 	cat(gettextf("dendrogram leaf '%s', at height %s", format(attr(x, "label"), digits = digits), format(attr(x,"height"), digits = digits), domain = "R-stats"), "\n", sep = "")
217,218c216
< 	cat("with", length(x), "branches and",
< 	    attr(x,"members"), "members total")
---
> 	cat(gettextf("dendrogram with %d branches and %d members total, at height %s", length(x), attr(x,"members"), format(attr(x,"height"), digits = digits), domain = "R-stats"), "\n", sep = "")
220d217
<     cat(", at height", format(attr(x,"height"), digits = digits), "\n")
254,255c251,252
< 	cat("[dendrogram w/ ", le, " branches and ", memb, " members at h = ",
<             format(hgt, digits = digits.d), if(give.attr) at,
---
> 	cat("[", gettextf("dendrogram with %d branches and %d members, at height %s", le, memb,
>             format(hgt, digits = digits.d), domain = "R-stats"), if(give.attr) at,
259,260c256
< 	    for(i in 1L:le) {
< 		##cat(indent.str, nam.ob[i], ":", sep = "")
---
> 	    for(i in seq_len(le)) {
262c258
< 		    indent.str = paste(indent.str, if(i < le) " |" else "  "),
---
> 		    indent.str = paste(indent.str, if(i < le) "  |" else "   ", sep = ""),
269,271c265,266
< 	cat("leaf",
< 	    if(is.character(at$label)) paste("", at$label,"", sep = '"') else
< 	    format(object, digits = digits.d),"")
---
> 	if(is.character(at$label)) cat(gettextf("leaf %s", dQuote(at$label), domain = "R-stats"))
> 	else cat(gettextf("leaf %s", format(object, digits = digits.d), domain = "R-stats"))
359,363c354,357
< 	cat(if(inner)"inner node" else "leaf", ":")
< 	if(!is.null(nPar)) { cat(" with node pars\n"); str(nPar) }
< 	cat(if(inner )paste(" height", formatC(yTop),"; "),
< 	    "(x1,x2)= (", formatC(x1, width = 4), ",", formatC(x2, width = 4), ")",
< 	    "--> xTop=", formatC(xTop, width = 8), "\n", sep = "")
---
> 	if(inner) cat(gettext("inner node:", domain = "R-stats"))
> 	else cat(gettextf("leaf:", domain = "R-stats"))
> 	if(!is.null(nPar)) { cat(gettext(" with node pars", domain = "R-stats"), "\n", sep = ""); str(nPar) }
> 	cat(if(inner) paste(" height", formatC(yTop),"; "), "(x1,x2)= (", formatC(x1, width = 4), ",", formatC(x2, width = 4), ")", "--> xTop=", formatC(xTop, width = 8), "\n", sep = "")
441c435
< 		    cat('-- with "label"',format(nodeText))
---
> 		    cat("-- with \"label\"",format(nodeText))
452c446
< 		    cat('-- with "edgetext"',format(edgeText))
---
> 		    cat("-- with \"edgetext\"",format(edgeText))
509c503
< 	for(k in 1L:K) {
---
> 	for(k in seq_len(K)) {
535c529
< 	    for(k in 1L:K) {
---
> 	    for(k in seq_len(K)) {
604c598
<         for(j in 1L:k) {
---
>         for(j in seq_len(k)) {
626c620
<     for(j in 1L:k) ## recurse
---
>     for(j in seq_len(k)) ## recurse
657,660c651,654
<             msg <- ngettext(length(nms),
<                             "extra argument %s is not of class \"%s\"",
<                             "extra arguments %s are not of class \"%s\"s")
< 	    stop(sprintf(msg, paste(nms, collapse=", "), "dendrogram"),
---
> 	    stop(sprintf(ngettext(length(nms),
>                             "extra argument %s is not of class \"dendrogram\"",
>                             "extra arguments %s are not of class \"dendrogram\"", domain = "R-stats"),
> 			paste(nms, collapse = ", ")),
678c672
<         stop(msg, domain = NA)
---
>         stop(msg, domain = "R-stats")
752c746
<     else rowInd <- 1L:nr
---
>     else rowInd <- seq_len(nr)
759c753
< 		stop('Colv = "Rowv" but nrow(x) != ncol(x)')
---
> 		stop("Colv = \"Rowv\" but nrow(x) != ncol(x)")
771c765
<     else colInd <- 1L:nc
---
>     else colInd <- seq_len(nc)
778c772
< 	    if(is.null(rownames(x))) (1L:nr)[rowInd] else rownames(x)
---
> 	    if(is.null(rownames(x))) seq_len(nr)[rowInd] else rownames(x)
782c776
< 	    if(is.null(colnames(x))) (1L:nc)[colInd] else colnames(x)
---
> 	    if(is.null(colnames(x))) seq_len(nc)[colInd] else colnames(x)
802c796
< 	    stop("'ColSideColors' must be a character vector of length ncol(x)")
---
> 	    stop(gettextf("'%s' argument must be a character vector of length '%s'", "ColSideColors", "ncol(x)"))
808c802
< 	    stop("'RowSideColors' must be a character vector of length nrow(x)")
---
> 	    stop(gettextf("'%s' argument must be a character vector of length '%s'", "RowSideColors", "nrow(x)"))
814c808
< 	cat("layout: widths = ", lwid, ", heights = ", lhei,"; lmat=\n")
---
> 	cat(gettextf("layout: widths = %s, heights = %s; lmat=\n", paste(lwid, collapse = " "), paste(lhei, collapse = " "), domain = "R-stats"))
827c821
< 	image(rbind(if(revC) nr:1L else 1L:nr), col = RowSideColors[rowInd], axes = FALSE)
---
> 	image(rbind(if(revC) sort(seq_len(nr), decreasing = TRUE) else seq_len(nr)), col = RowSideColors[rowInd], axes = FALSE)
831c825
< 	image(cbind(1L:nc), col = ColSideColors[colInd], axes = FALSE)
---
> 	image(cbind(seq_len(nc)), col = ColSideColors[colInd], axes = FALSE)
841c835
<     } else iy <- 1L:nr
---
>     } else iy <- seq_len(nr)
843c837
<     image(1L:nc, 1L:nr, x, xlim = 0.5+ c(0, nc), ylim = 0.5+ c(0, nr),
---
>     image(seq_len(nc), seq_len(nr), x, xlim = 0.5+ c(0, nc), ylim = 0.5+ c(0, nr),
845c839
<     axis(1, 1L:nc, labels = labCol, las = 2, line = -0.5, tick = 0,
---
>     axis(1, seq_len(nc), labels = labCol, las = 2, line = -0.5, tick = 0,
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/density.R R/src/library/stats/R/density.R
46c46
<         stop("argument 'x' must be numeric")
---
>         stop(gettextf("'%s' argument must be numeric", "x"))
52c52
<         else stop("'x' contains missing values")
---
>         else stop("'x' argument contains missing values")
55c55
<     if(is.na(N)) stop("invalid value of length(x)")
---
>     if(is.na(N)) stop(gettextf("invalid '%s' value", "length(x)"))
69c69
<             stop("'x' and 'weights' have unequal length")
---
>             stop(gettextf("'%s' and '%s' arguments must have the same length", "x", "weights"))
71c71
<             stop("'weights' must all be finite")
---
>             stop("'weights' argument must all be finite")
73c73
<             stop("'weights' must not be negative")
---
>             stop("'weights' argument must not be negative")
82c82
<             warning("sum(weights) != 1  -- will not get true density")
---
>             warning("'sum(weights) != 1'  -- will not get true density")
109c109
<             stop("need at least 2 points to select a bandwidth automatically")
---
>             stop("at least 2 points are needed to select a bandwidth automatically")
119c119
<     if (!is.finite(bw)) stop("non-finite 'bw'")
---
>     if (!is.finite(bw)) stop(gettextf("non-finite '%s' argument", "bw"))
121c121
<     if (bw <= 0) stop("'bw' is not positive.")
---
>     if (bw <= 0) stop(gettextf("'%s' argument is not positive", "bw"))
127,128c127,128
<     if (!is.finite(from)) stop("non-finite 'from'")
<     if (!is.finite(to)) stop("non-finite 'to'")
---
>     if (!is.finite(from)) stop(gettextf("non-finite '%s' argument", "from"))
>     if (!is.finite(to)) stop(gettextf("non-finite '%s' argument", "to"))
160c160
<     kords <- pmax.int(0, Re(kords)[1L:n]/length(y))
---
>     kords <- pmax.int(0, Re(kords)[seq_len(n)]/length(y))
168c168
< plot.density <- function(x, main = NULL, xlab = NULL, ylab = "Density",
---
> plot.density <- function(x, main = NULL, xlab = NULL, ylab = gettext("Density", domain = "R-stats"),
172c172
< 	xlab <- paste("N =", x$n, "  Bandwidth =", formatC(x$bw))
---
> 	xlab <- gettextf("N = %s   Bandwidth = %s", x$n, formatC(x$bw), domain = "R-stats")
181,183c181,183
<     cat("\nCall:\n\t", deparse(x$call),
< 	"\n\nData: ", x$data.name, " (", x$n, " obs.);",
< 	"\tBandwidth 'bw' = ", formatC(x$bw, digits = digits), "\n\n", sep = "")
---
>     cat("\n", gettext("Call:", domain = "R-stats"), "\n\t", deparse(x$call),
> 	"\n\n", sprintf(ngettext(x$n, "Data: %s (%d observation);", "Data: %s (%d observations);", domain = "R-stats"), x$data.name, x$n),
> 	"\t", gettextf("Bandwidth 'bw' = %s", formatC(x$bw, digits = digits), domain = "R-stats"), "\n\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/deriv.R R/src/library/stats/R/deriv.R
28c28
<     else stop("invalid formula in deriv")
---
>     else stop("invalid formula in 'deriv()'")
42c42
<     else stop("invalid formula in deriv")
---
>     else stop("invalid formula in 'deriv()'")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/diffinv.R R/src/library/stats/R/diffinv.R
26c26
<     if (!is.vector(x)) stop ("'x' is not a vector")
---
>     if (!is.vector(x)) stop(gettextf("'%s' argument is not a vector", "x"))
28c28
<     if (lag < 1L || differences < 1L) stop ("bad value for 'lag' or 'differences'")
---
>     if (lag < 1L || differences < 1L) stop ("bad value for 'lag' or 'differences' argument")
36c36
<         if (is.na(n)) stop ("invalid value of length(x)")
---
>         if (is.na(n)) stop(gettextf("invalid '%s' value", "length(x)"))
44c44
< 		       lag, 1L, xi[1L:lag])
---
> 		       lag, 1L, xi[seq_len(lag)])
57c57
<             for (i in 1L:m)
---
>             for (i in seq_len(m))
65c65
<         stop ("'x' is not a vector or matrix")
---
>         stop(gettextf("'%s' argument is not a vector or matrix", "x"))
78c78
<     if(!is.vector(x)) stop("'x' is not a vector")
---
>     if(!is.vector(x)) stop(gettextf("'%s' argument is not a vector", "x"))
82,83c82,83
<                                  "extra argument %s will be disregarded",
<                                  "extra arguments %s will be disregarded"),
---
>                                  "extra argument %s is disregarded",
>                                  "extra arguments %s are be disregarded", domain = "R-stats"),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/dist.R R/src/library/stats/R/dist.R
73c73
<         if(ncol(m) != p) warning("non-square matrix")
---
>         if(ncol(m) != p) warning(gettextf("'%s' argument is not a square matrix", "m"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/distn.R R/src/library/stats/R/distn.R
155c155
<     if(length(x) != K) stop("x[] and prob[] must be equal length vectors.")
---
>     if(length(x) != K) stop("'x' and 'prob' arguments must be equal length vectors")
161c161
<     if(any(x < 0)) stop("'x' must be non-negative")
---
>     if(any(x < 0)) stop("'x' argument must be non-negative")
235c235
< 	if (!missing(prob)) stop("'prob' and 'mu' both specified")
---
> 	if (!missing(prob)) stop("'prob' and 'mu' arguments are both specified")
244c244
< 	if (!missing(prob)) stop("'prob' and 'mu' both specified")
---
> 	if (!missing(prob)) stop("'prob' and 'mu' arguments are both specified")
253c253
< 	if (!missing(prob)) stop("'prob' and 'mu' both specified")
---
> 	if (!missing(prob)) stop("'prob' and 'mu' arguments are both specified")
262c262
<         if (!missing(prob)) stop("'prob' and 'mu' both specified")
---
>         if (!missing(prob)) stop("'prob' and 'mu' arguments are both specified")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/dummy.coef.R R/src/library/stats/R/dummy.coef.R
81c81,83
< 	res <- c(list("(Intercept)" = coef[int]), res)
---
> 	aaa <- list(coef[int])
> 	names(aaa) <- gettext("(Intercept)", domain = "R-stats")
> 	res <- c(aaa, res)
132c134
<     tl <- c("(Intercept)", tl)
---
>     tl <- c(gettext("(Intercept)", domain = "R-stats"), tl)
145c147
< 		    structure(coef[asgn == j], names="(Intercept)")
---
> 		    structure(coef[asgn == j], names=gettext("(Intercept)", domain = "R-stats"))
183c185
<     cat(if(missing(title)) "Full coefficients are" else title, "\n")
---
>     cat(if(missing(title)) gettext("Full coefficients are:", domain = "R-stats") else title, "\n", sep = "")
191c193
< 	print.dummy_coef(x[[strata]], ..., title=paste("\n     Error:", strata))
---
> 	print.dummy_coef(x[[strata]], ..., title=paste("\n    ", gettext("Error:", domain = "R-stats"), strata, sep = " "))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/ecdf.R R/src/library/stats/R/ecdf.R
41c41
<     cat("Empirical CDF \nCall: ")
---
>     cat(gettext("Empirical CDF", domain = "R-stats"), "\n", gettext("Call: ", domain = "R-stats"), sep = "")
44c44
<     i1 <- 1L:min(3L,n)
---
>     i1 <- seq_len(min(3L,n))
54,57c54,55
<     header <- paste("Empirical CDF:	 ", n,
<                     "unique values with summary\n")
<     structure(summary(knots(object), ...),
<               header = header, class = "summary.ecdf")
---
>     header <- gettextf("Empirical CDF:	  %d unique values with summary\n", n, domain = "R-stats")
>     structure(summary(knots(object), ...), header = header, class = "summary.ecdf")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/embed.R R/src/library/stats/R/embed.R
39c39
<         data <- x[1L:m + rep.int(dimension:1L, rep.int(m, dimension)) - 1L]
---
>         data <- x[seq_len(m) + rep.int(dimension:1L, rep.int(m, dimension)) - 1L]
43c43
<         stop ("'x' is not a vector or matrix")
---
>         stop(gettextf("'%s' argument is not a vector or matrix", "x"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/factanal.R R/src/library/stats/R/factanal.R
98c98
<                               "%d factors are too many for %d variables"),
---
>                               "%d factors are too many for %d variables", domain = "R-stats"),
117c117
<                        "'start' must have %d rows"),
---
>                        "'start' must have %d rows", domain = "R-stats"),
120c120
<     if(nc < 1) stop("no starting values supplied")
---
>     if(nc < 1) stop("no starting values specified")
126,127c126
<             cat("start", i, "value:", format(nfit$criteria[1L]),
<                 "uniqs:", format(as.vector(round(nfit$uniquenesses, 4))), "\n")
---
>             cat(gettextf("start %d value: %s uniqs: %s", i, format(nfit$criteria[1L]), format(as.vector(round(nfit$uniquenesses, 4))), domain = "R-stats"), "\n", sep = "")
136c135
<                       "unable to optimize from these starting values"),
---
>                       "unable to optimize from these starting values", domain = "R-stats"),
249c248
<     cat("\nLoadings:\n")
---
>     cat("\n", gettext("Loadings:", domain = "R-stats"), "\n", sep = "")
268,269c267,268
<     cat("\nCall:\n", deparse(x$call), "\n\n", sep = "")
<     cat("Uniquenesses:\n")
---
>     cat("\n", gettext("Call:", domain = "R-stats"), "\n", deparse(x$call), "\n\n", sep = "")
>     cat(gettext("Uniquenesses:", domain = "R-stats"), "\n", sep = "")
282c281
<         cat("\nFactor Correlations:\n")
---
>         cat("\n", gettext("Factor Correlations:", domain = "R-stats"), "\n", sep = "")
291,295c290,297
<         cat("\nTest of the hypothesis that", factors, if(factors == 1)
<             "factor is" else "factors are", "sufficient.\n")
<         cat("The chi square statistic is", round(x$STATISTIC, 2), "on", x$dof,
<             if(x$dof == 1) "degree" else "degrees",
<             "of freedom.\nThe p-value is", signif(x$PVAL, 3), "\n")
---
>         cat("\n", sprintf(ngettext(factors,
> 				"Test of the hypothesis that %d factor is sufficient.",
> 				"Test of the hypothesis that %d factors are sufficient.", domain = "R-stats"),
> 				 factors), "\n", sep = "")
>         cat(sprintf(ngettext(x$dof,
> 			"The chi square statistic is %s on %d degree of freedom.",
> 			"The chi square statistic is %s on %d degrees of freedom.", domain = "R-stats"),
> 			round(x$STATISTIC, 2), x$dof), "\n", gettextf("The p-value is %s", signif(x$PVAL, 3), domain = "R-stats"), "\n", sep = "")
297,299c299,300
<         cat(paste("\nThe degrees of freedom for the model is",
<                   x$dof, "and the fit was", round(x$criteria["objective"], 4),
<                   "\n"))
---
>         cat("\n", gettextf("The degrees of freedom for the model is %d and the fit was %s", x$dof, round(x$criteria["objective"], 4), domain = "R-stats"),
>                   "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/family.R R/src/library/stats/R/family.R
23,24c23,24
<     cat("\nFamily:", x$family, "\n")
<     cat("Link function:", x$link, "\n\n")
---
>     cat("\n", gettext("Family: ", domain = "R-stats"), x$family, "\n", sep = "")
>     cat(gettext("Link function: ", domain = "R-stats"), x$link, "\n\n", sep = "")
31c31
<         stop("invalid argument 'lambda'")
---
>         stop(gettextf("invalid '%s' argument", "lambda"))
124,125c124
<            stop(gettextf("%s link not recognised", sQuote(link)),
<                 domain = NA)
---
>            stop(gettextf("%s link not recognised", sQuote(link)), domain = "R-stats")
150,152c149,150
<             stop(gettextf('link "%s" not available for poisson family; available links are %s',
< 			  linktemp, paste(sQuote(okLinks), collapse =", ")),
< 		 domain = NA)
---
> 		tmp_n <- paste(sQuote(okLinks), collapse =", ")
>             stop(gettextf("link %s not available for poisson family; available links are %s", sQuote(linktemp), tmp_n), domain = "R-stats")
167c165
< 	    stop("negative values not allowed for the 'Poisson' family")
---
> 	    stop(gettextf("negative values are not allowed for the '%s' family", "Poisson"))
211,213c209,210
< 	    stop(gettextf('link "%s" not available for quasipoisson family; available links are %s',
< 			  linktemp, paste(sQuote(okLinks), collapse =", ")),
< 		 domain = NA)
---
> 		tmp_n <- paste(sQuote(okLinks), collapse =", ")
> 	    stop(gettextf("link %s not available for quasipoisson family; available links are %s", sQuote(linktemp), tmp_n), domain = "R-stats")
228c225
< 	    stop("negative values not allowed for the 'quasiPoisson' family")
---
> 	    stop(gettextf("negative values are not allowed for the '%s' family", "quasiPoisson"))
262,264c259,260
< 	    stop(gettextf('link "%s" not available for gaussian family; available links are %s',
< 			  linktemp, paste(sQuote(okLinks), collapse =", ")),
< 		 domain = NA)
---
> 		tmp_n <- paste(sQuote(okLinks), collapse =", ")
> 	    stop(gettextf("link %s not available for gaussian family; available links are %s", sQuote(linktemp), tmp_n), domain = "R-stats")
309,311c305,306
< 	    stop(gettextf('link "%s" not available for binomial family; available links are %s',
< 			  linktemp, paste(sQuote(okLinks), collapse =", ")),
< 	     domain = NA)
---
> 		tmp_n <- paste(sQuote(okLinks), collapse =", ")
> 	    stop(gettextf("link %s not available for binomial family; available links are %s", sQuote(linktemp), tmp_n), domain = "R-stats")
335c330
<                 warning("non-integer #successes in a binomial glm!")
---
>                 warning("non-integer number of successes in a binomial glm!")
345c340
< 	else stop("for the 'binomial' family, y must be a vector of 0 and 1\'s\nor a 2 column matrix where col 1 is no. successes and col 2 is no. failures")
---
> 	else stop(gettextf("for the %s family, 'y' argument must be a vector of 0 and 1's or a 2 column matrix where first column is the number of successes and second column is the number of failures", sQuote("binomial")))
407,409c402,403
< 	    stop(gettextf('link "%s" not available for quasibinomial family; available links are %s',
< 			  linktemp, paste(sQuote(okLinks), collapse =", ")),
< 	     domain = NA)
---
> 		tmp_n <- paste(sQuote(okLinks), collapse =", ")
> 	    stop(gettextf("link %s not available for quasibinomial family; available links are %s", sQuote(linktemp), tmp_n), domain = "R-stats")
430c424
< 	else stop("for the 'quasibinomial' family, y must be a vector of 0 and 1\'s\nor a 2 column matrix where col 1 is no. successes and col 2 is no. failures")
---
> 	else stop(gettextf("for the %s family, 'y' argument must be a vector of 0 and 1's or a 2 column matrix where first column is the number of successes and second column is the number of failures", sQuote("quasibinomial")))
460,462c454,455
< 	    stop(gettextf('link "%s" not available for gamma family; available links are %s',
< 			  linktemp, paste(sQuote(okLinks), collapse =", ")),
< 	     domain = NA)
---
> 		tmp_n <- paste(sQuote(okLinks), collapse = ", ")
> 	    stop(gettextf("link %s not available for gamma family; available links are %s", sQuote(linktemp), tmp_n), domain = "R-stats")
518,520c511,512
< 	    stop(gettextf('link "%s" not available for inverse.gaussian family; available links are %s',
< 			  linktemp, paste(sQuote(okLinks), collapse =", ")),
<                  domain = NA)
---
> 		tmp_n <- paste(sQuote(okLinks), collapse = ", ")
> 	    stop(gettextf("link %s not available for inverse.gaussian family; available links are %s", sQuote(linktemp), tmp_n), domain = "R-stats")
564,565c556
<     if (linktemp %in% c("logit", "probit", "cloglog", "identity",
<                         "inverse", "log", "1/mu^2", "sqrt"))
---
>     if (linktemp %in% c("logit", "probit", "cloglog", "identity", "inverse", "log", "1/mu^2", "sqrt"))
621c612
<             stop(gettextf('\'variance\' "%s" is invalid: possible values are "mu(1-mu)", "mu", "mu^2", "mu^3" and "constant"', variance_nm), domain = NA)
---
>             stop(gettextf("'variance' \"%s\" is invalid: possible values are \"mu(1-mu)\", \"mu\", \"mu^2\", \"mu^3\" and \"constant\"", variance_nm), domain = "R-stats")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/filter.R R/src/library/stats/R/filter.R
27c27
<     if (is.na(n)) stop("invalid value of nrow(x)", domain = NA)
---
>     if (is.na(n)) stop(gettextf("invalid '%s' value", "nrow(x)"), domain = "R-stats")
31,32c31,32
<     if (is.na(n)) stop("invalid value of length(filter)", domain = NA)
<     if(anyNA(filter)) stop("missing values in 'filter'")
---
>     if (is.na(n)) stop(gettextf("invalid '%s' value", "length(filter)"), domain = "R-stats")
>     if(anyNA(filter)) stop(gettextf("missing values in '%s' argument", "filter"))
38c38
<             stop("argument 'sides' must be 1 or 2")
---
>             stop("'sides' argument must be 1 or 2")
40c40
<         if (is.na(circular)) stop("'circular' must be logical and not NA")
---
>         if (is.na(circular)) stop("'circular' argument must be logical and not NA")
53c53
<                 stop("length of 'init' must equal length of 'filter'")
---
>                 stop("length of 'init' argument must equal length of 'filter' argument")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/fivenum.R R/src/library/stats/R/fivenum.R
32c32,34
< 	0.5*(x[floor(d)] + x[ceiling(d)])
---
> 	qq <- 0.5*(x[floor(d)] + x[ceiling(d)])
> 	names(qq) <- c(gettext("Min.", domain = NA), gettext("L. hinge", domain = NA), gettext("Median", domain = NA), gettext("U. hinge", domain = NA), gettext("Max.", domain = NA))
> 	qq
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/ftable.R R/src/library/stats/R/ftable.R
43c43
< 		stop("incorrect specification for 'row.vars'")
---
> 		stop(gettextf("incorrect specification for '%s' argument", "row.vars"))
46c46
< 	    stop("incorrect specification for 'row.vars'")
---
> 	    stop(gettextf("incorrect specification for '%s' argument", "row.vars"))
52c52
< 	     stop("incorrect specification for 'col.vars'")
---
> 	     stop(gettextf("incorrect specification for '%s' argument", "col.vars"))
55c55
< 	    stop("incorrect specification for 'col.vars'")
---
> 	    stop(gettextf("incorrect specification for '%s' argument", "col.vars"))
57c57
<     i <- 1 : n
---
>     i <- seq_len(n)
89c89
<         stop("'formula' missing or incorrect")
---
>         stop(gettextf("'%s' argument is missing or incorrect", "formula"))
159c159
<         stop("'x' must be an \"ftable\" object")
---
>         stop(gettextf("'%s' argument must be an object of class %s", "x", dQuote("ftable")))
179c179
< 	stop("'x' must be an \"ftable\" object")
---
>         stop(gettextf("'%s' argument must be an object of class %s", "x", dQuote("ftable")))
281c281
<         stop("'file' must be a character string or connection")
---
>         stop(gettextf("'%s' argument must be a character string or connection", "file"))
324c324
<         z <- z[-(1 : (n.col.vars + 1))]
---
>         z <- z[-(seq_len(n.col.vars + 1))]
342c342
<             i <- 1 : n.row.vars
---
>             i <- seq_len(n.row.vars)
361c361
<                 stop("'col.vars' missing or incorrect")
---
>                 stop(gettextf("'%s' argument is missing or incorrect", "col.vars"))
413c413
< 	stop("'x' must be an \"ftable\" object")
---
> 	stop(gettextf("'%s' argument is not an object of class %s", "x", dQuote("ftable")))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/glm.R R/src/library/stats/R/glm.R
41c41
< 	stop("'family' not recognized")
---
> 	stop("'family' argument was not recognized")
47,48c47
<     m <- match(c("formula", "data", "subset", "weights", "na.action",
<                  "etastart", "mustart", "offset"), names(mf), 0L)
---
>     m <- match(c("formula", "data", "subset", "weights", "na.action", "etastart", "mustart", "offset"), names(mf), 0L)
56c55
<         stop("invalid 'method' argument")
---
>         stop(gettextf("invalid '%s' argument", "method"))
75c74
<         stop("'weights' must be a numeric vector")
---
>         stop(gettextf("'%s' argument must be a numeric vector", "weights"))
78c77
< 	stop("negative weights not allowed")
---
> 	stop("negative weights are not allowed")
83c82
<             stop(gettextf("number of offsets is %d should equal %d (number of observations)", length(offset), NROW(Y)), domain = NA)
---
>             stop(gettextf("number of offsets (%d) should be equal to number of observations (%d)", length(offset), NROW(Y)), domain = "R-stats")
109c108
<                       x = X[, "(Intercept)", drop=FALSE], y = Y,
---
>                       x = X[, gettext("(Intercept)", domain = NA), drop=FALSE], y = Y,
114c113
<             warning("fitting to calculate the null deviance did not converge -- increase 'maxit'?")
---
>             warning("fitting to calculate the null deviance did not converge -- increase 'maxit' value?")
203,205c202,204
<                 if (length(start) != nvars)
<                     stop(gettextf("length of 'start' should equal %d and correspond to initial coefs for %s", nvars, paste(deparse(xnames), collapse=", ")),
<                          domain = NA)
---
>                 if (length(start) != nvars) {
> 		    tmp_N <- paste(deparse(xnames), collapse=", ")
>                     stop(gettextf("length of 'start' should equal %d and correspond to initial coefs for %s", nvars, tmp_N), domain = "R-stats") }
234,235c233
<                 warning(gettextf("no observations informative at iteration %d",
<                                  iter), domain = NA)
---
>                 warning(gettextf("no observations informative at iteration %d", iter), domain = "R-stats")
245c243
<                 warning(gettextf("non-finite coefficients at iteration %d", iter), domain = NA)
---
>                 warning(gettextf("non-finite coefficients at iteration %d", iter), domain = "R-stats")
252c250
<                                       "X matrix has rank %d, but only %d observations"),
---
>                                       "X matrix has rank %d, but only %d observations", domain = "R-stats"),
260c258
<                 cat("Deviance = ", dev, " Iterations - ", iter, "\n", sep = "")
---
>                 cat(gettextf("Deviance = %s Iterations - %d\n", dev, iter, domain = "R-stats"), sep = "")
279c277
<                     cat("Step halved: new deviance = ", dev, "\n", sep = "")
---
>                     cat(gettextf("Step halved: new deviance = %s", dev, domain = "R-stats"), sep = "")
298c296
<                     cat("Step halved: new deviance = ", dev, "\n", sep = "")
---
>                     cat(gettextf("Step halved: new deviance = %s", dev, domain = "R-stats"))
385c383
<     cat("\nCall:  ",
---
>     cat("\n", gettext("Call:  ", domain = "R-stats"),
388d385
<         cat("Coefficients")
390,392c387,390
<             cat("  [contrasts: ",
<                 apply(cbind(names(co),co), 1L, paste, collapse = "="), "]")
<         cat(":\n")
---
>             cat(gettextf("Coefficients  [contrasts: %s]:", apply(cbind(names(co),co), 1L, paste, collapse = "="), domain = "R-stats"))
> 	else
>             cat(gettext("Coefficients:", domain = "R-stats"))
>         cat("\n")
395,397c393,394
<     } else cat("No coefficients\n\n")
<     cat("\nDegrees of Freedom:", x$df.null, "Total (i.e. Null); ",
<         x$df.residual, "Residual\n")
---
>     } else cat(gettext("No coefficients", domain = "R-stats"), "\n\n", sep = "")
>     cat("\n", gettextf("Degrees of Freedom: %d Total (i.e. Null); %d Residual", x$df.null, x$df.residual, domain = "R-stats"), "\n", sep = "")
399,402c396,398
<     cat("Null Deviance:	   ",	format(signif(x$null.deviance, digits)),
< 	"\nResidual Deviance:", format(signif(x$deviance, digits)),
< 	"\tAIC:", format(signif(x$aic, digits)))
<     cat("\n")
---
>     cat(gettextf("Null Deviance:	   %s\nResidual Deviance: %s\tAIC: %s",	format(signif(x$null.deviance, digits)),
> 	format(signif(x$deviance, digits)),
> 	format(signif(x$aic, digits)), domain = "R-stats"), "\n", sep = "")
413,415c409,412
<     if(any(named))
< 	warning("the following arguments to 'anova.glm' are invalid and dropped: ",
< 		paste(deparse(dotargs[named]), collapse=", "))
---
>     if(any(named)) {
> 	tmp_N <- paste(deparse(dotargs[named]), collapse=", ")
> 	warning("the following arguments to 'anova.glm' are invalid and dropped: ", tmp_N)
> 	}
514,515c511
<     dimnames(table) <- list(c("NULL", tl),
< 			    c("Df", "Deviance", "Resid. Df", "Resid. Dev"))
---
>     dimnames(table) <- list(c("NULL", tl), c(gettext("Df", domain = NA), gettext("Deviance", domain = NA), gettext("Resid. Df", domain = NA), gettext("Resid. Dev", domain = NA)))
518,521c514,517
<     title <- paste0("Analysis of Deviance Table", "\n\nModel: ",
<                     object$family$family, ", link: ", object$family$link,
<                     "\n\nResponse: ", as.character(varlist[-1L])[1L],
<                     "\n\nTerms added sequentially (first to last)\n\n")
---
>     title <- paste0(gettext("Analysis of Deviance Table", domain = "R-stats"), "\n\n", gettext("Model: ", domain = "R-stats"),
>                     object$family$family, ", ", gettext("link: ", domain = "R-stats"), object$family$link,
>                     "\n\n", gettext("Response: ", domain = "R-stats"), as.character(varlist[-1L])[1L],
>                     "\n\n", gettext("Terms added sequentially (first to last)", domain = "R-stats"), "\n\n", sep = "")
534,536c530
<                 warning(gettextf("using F test with a '%s' family is inappropriate",
<                                  fam),
<                         domain = NA)
---
>                 warning(gettextf("using F test with a '%s' family is inappropriate", fam), domain = "R-stats")
560,562c554
<         warning(gettextf("models with response %s removed because response differs from model 1",
<                          sQuote(deparse(responses[!sameresp]))),
<                 domain = NA)
---
>         warning(gettextf("models with response %s removed because response differs from model 1", sQuote(deparse(responses[!sameresp]))), domain = "R-stats")
606,607c598
<     dimnames(table) <- list(1L:nmodels, c("Resid. Df", "Resid. Dev", "Df",
< 					 "Deviance"))
---
>     dimnames(table) <- list(1L:nmodels, c(gettext("Resid. Df", domain = NA), gettext("Resid. Dev", domain = NA), gettext("Df", domain = NA), gettext("Deviance", domain = NA)))
611,613c602,603
<     title <- "Analysis of Deviance Table\n"
<     topnote <- paste("Model ", format(1L:nmodels),": ",
< 		     variables, sep = "", collapse = "\n")
---
>     title <- paste(gettext("Analysis of Deviance Table", domain = "R-stats"), "\n", sep = "")
>     topnote <- paste(gettextf("Model %s: %s", format(1L:nmodels), variables, domain = "R-stats"), collapse = "\n")
624,626c614
<                 warning(gettextf("using F test with a '%s' family is inappropriate",
<                                  fam),
<                         domain = NA, call. = FALSE)
---
>                 warning(gettextf("using F test with a '%s' family is inappropriate", fam), domain = "R-stats", call. = FALSE)
634,635c622
<     structure(table, heading = c(title, topnote),
< 	      class = c("anova", "data.frame"))
---
>     structure(table, heading = c(title, topnote), class = c("anova", "data.frame"))
662c649
<         p1 <- 1L:p
---
>         p1 <- seq_len(p)
676c663
<         dn <- c("Estimate", "Std. Error")
---
>         dn <- c(gettext("Estimate", domain = NA), gettext("Std. Error", domain = NA))
680,681c667
<             dimnames(coef.table) <- list(names(coef.p),
<                                          c(dn, "z value","Pr(>|z|)"))
---
>             dimnames(coef.table) <- list(names(coef.p), c(dn, gettext("z value", domain = NA), gettext("Pr(>|z|)", domain = NA)))
686c672
<                                          c(dn, "t value","Pr(>|t|)"))
---
>                                          c(dn, gettext("t value", domain = NA), gettext("Pr(>|t|)", domain = NA)))
690c676
<                                          c(dn, "t value","Pr(>|t|)"))
---
>                                          c(dn, gettext("t value", domain = NA), gettext("Pr(>|t|)", domain = NA)))
696c682
<             list(NULL, c("Estimate", "Std. Error", "t value", "Pr(>|t|)"))
---
>             list(NULL, c(gettext("Estimate", domain = NA), gettext("Std. Error", domain = NA), gettext("t value", domain = NA), gettext("Pr(>|t|)", domain = NA)))
730c716
<     cat("\nCall:\n",
---
>     cat("\n", gettext("Call:", domain = "R-stats"), "\n",
732c718
<     cat("Deviance Residuals: \n")
---
>     cat(gettext("Deviance Residuals:", domain = "R-stats"), "\n", sep = "")
734,735c720
< 	x$deviance.resid <- setNames(quantile(x$deviance.resid, na.rm = TRUE),
< 				     c("Min", "1Q", "Median", "3Q", "Max"))
---
> 	x$deviance.resid <- setNames(quantile(x$deviance.resid, na.rm = TRUE), c("Min", "1Q", "Median", "3Q", "Max"))
741c726
<         cat("\nNo Coefficients\n")
---
>         cat("\n", gettext("No coefficients", domain = "R-stats"), "\n", sep = "")
747,749c732,734
<             cat("\nCoefficients: (", nsingular,
<                 " not defined because of singularities)\n", sep = "")
<         else cat("\nCoefficients:\n")
---
>             cat("\n", sprintf(ngettext(nsingular, "Coefficients: (%d not defined because of singularity)",
> 			"Coefficients: (%d not defined because of singularities)", domain = "R-stats"), nsingular), "\n", sep = "")
>         else cat("\n", gettext("Coefficients:", domain = "R-stats"), "\n", sep = "")
761,768c746,748
<     cat("\n(Dispersion parameter for ", x$family$family,
< 	" family taken to be ", format(x$dispersion), ")\n\n",
< 	apply(cbind(paste(format(c("Null","Residual"), justify="right"),
<                           "deviance:"),
< 		    format(unlist(x[c("null.deviance","deviance")]),
< 			   digits = max(5L, digits + 1L)), " on",
< 		    format(unlist(x[c("df.null","df.residual")])),
< 		    " degrees of freedom\n"),
---
>     cat("\n", gettextf("(Dispersion parameter for %s family taken to be %s)", x$family$family, format(x$dispersion), domain = "R-stats"), "\n\n",
> 	apply(cbind(format(c(gettext("Null deviance:", domain = "R-stats"),gettext("Residual deviance:", domain = "R-stats")), justify="right"),
> 		    format(unlist(x[c("null.deviance","deviance")]), digits = max(5L, digits + 1L)), " on", format(unlist(x[c("df.null","df.residual")])), " degrees of freedom\n"),
771,772c751,752
<     cat("AIC: ", format(x$aic, digits = max(4L, digits + 1L)),"\n\n",
< 	"Number of Fisher Scoring iterations: ", x$iter,
---
>     cat(gettext("AIC: ", domain = "R-stats"), format(x$aic, digits = max(4L, digits + 1L)),"\n\n",
> 	gettext("Number of Fisher Scoring iterations: ", domain = "R-stats"), x$iter,
785c765
< 	    cat("\nCorrelation of Coefficients:\n")
---
> 	    cat("\n", gettext("Correlation of Coefficients:", domain = "R-stats"), "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/hclust.R R/src/library/stats/R/hclust.R
54c54
< 	message("The \"ward\" method has been renamed to \"ward.D\"; note new \"ward.D2\"")
---
> 	message("The 'ward()' method has been renamed to 'ward.D()'; note new 'ward.D2()'")
60c60
< 	stop("invalid clustering method", paste("", method))
---
> 	stop(gettextf("invalid clustering method %s", method))
62c62
< 	stop("ambiguous clustering method", paste("", method))
---
> 	stop(gettextf("ambiguous clustering method %s", method))
69c69
<         stop("must have n >= 2 objects to cluster")
---
>         stop("at least 2 objects are needed to cluster")
72,73c72,73
<         (if (length(d) < len) stop else warning
<          )("dissimilarities of improper length")
---
>         (if (length(d) < len) stop("dissimilarities are of improper length")
> 	 else warning("dissimilarities are of improper length"))
78c78
<         stop("invalid length of members")
---
>         stop(gettextf("invalid length of '%s' argument", "members"))
105,106c105,106
<     structure(list(merge = cbind(hcass$iia[1L:(n-1)], hcass$iib[1L:(n-1)]),
< 		   height = hcl$crit[1L:(n-1)],
---
>     structure(list(merge = cbind(hcass$iia[seq_len(n-1)], hcass$iib[seq_len(n-1)]),
> 		   height = hcl$crit[seq_len(n-1)],
123c123
< 	return("invalid dendrogram")
---
> 	return(gettext("invalid dendrogram", domain = "R-stats"))
126c126
< 	return("'merge' component in dendrogram must be integer")
---
> 	return(gettext("'merge' component in dendrogram must be integer", domain = "R-stats"))
129,130c129,130
<     if(length(x$height) != n1) return("'height' is of wrong length")
<     if(order && length(x$order ) != n ) return("'order' is of wrong length")
---
>     if(length(x$height) != n1) return(gettextf("'%s' argument is of the wrong length", "height", domain = "R-stats"))
>     if(order && length(x$order ) != n ) return(gettextf("'%s' argument is of the wrong length", "order", domain = "R-stats"))
134c134
< 	"'merge' matrix has invalid contents"
---
> 	gettext("'merge' matrix has invalid contents", domain = "R-stats")
140,141c140,141
<               main = "Cluster Dendrogram",
<               sub = NULL, xlab = NULL, ylab = "Height", ...)
---
>               main = gettext("Cluster Dendrogram"),
>               sub = NULL, xlab = NULL, ylab = gettext("Height"), ...)
184,185c184
< 	stop(gettextf("argument 'x' cannot be coerced to class %s",
<                       dQuote("hclust")),
---
> 	stop(gettextf("'%s' argument cannot be coerced to class %s", "x", dQuote("hclust")),
187,189c186
<              gettextf("\n Consider providing an as.hclust.%s() method",
<                       oldClass(x)[1L]),
<              domain = NA)
---
>              gettextf("\n Consider providing '%s' method", paste("as.hclust.", oldClass(x)[1L], "()", collapse = "")), domain = "R-stats")
209c206
<         cat("\nCall:\n", deparse(x$call), "\n\n", sep = "")
---
>         cat("\n", gettext("Call:", domain = "R-stats"), "\n", deparse(x$call), "\n\n", sep = "")
211c208
<         cat("Cluster method   :", x$method, "\n")
---
>         cat(gettext("Cluster method: ", domain = "R-stats"), x$method, "\n", sep = "")
213,214c210,211
<         cat("Distance         :", x$dist.method, "\n")
<     cat("Number of objects:", length(x$height)+1, "\n")
---
>         cat(gettext("Distance: ", domain = "R-stats"), x$dist.method, "\n", sep = "")
>     cat(gettext("Number of objects: ", domain = "R-stats"), length(x$height)+1, "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/htest.R R/src/library/stats/R/htest.R
24c24
<     cat("data:  ", x$data.name, "\n", sep = "")
---
>     cat(gettextf("data: %s", x$data.name, domain = "R-stats"), "\n", sep = "")
34c34
< 	out <- c(out, paste("p-value",
---
> 	out <- c(out, paste(gettext("p-value", domain = "R-stats"),
39c39
< 	cat("alternative hypothesis: ")
---
> 	cat(gettext("alternative hypothesis: ", domain = "R-stats"))
42,48c42
< 		alt.char <-
< 		    switch(x$alternative,
< 			   two.sided = "not equal to",
< 			   less = "less than",
< 			   greater = "greater than")
< 		cat("true ", names(x$null.value), " is ", alt.char, " ",
< 		    x$null.value, "\n", sep = "")
---
> 		   cat(x$alt.name, "\n", sep = "")
51c45
< 		cat(x$alternative, "\nnull values:\n", sep = "")
---
> 		cat(x$alternative, "\n", gettext("null values:", domain = "R-stats"), "\n", sep = "")
58,61c52,54
< 	cat(format(100 * attr(x$conf.int, "conf.level")),
< 	    " percent confidence interval:\n", " ",
< 	    paste(format(c(x$conf.int[1L], x$conf.int[2L])), collapse = " "),
<             "\n", sep = "")
---
>         cat(gettextf("%s percent confidence interval:", format(100 * attr(x$conf.int, "conf.level")), domain = "R-stats"), "\n ", sep = "")
>         cat(format(c(x$conf.int[1L], x$conf.int[2L])))
> 	cat("\n")
64c57
< 	cat("sample estimates:\n")
---
> 	cat(gettext("sample estimates:", domain = "R-stats"), "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/identify.hclust.R R/src/library/stats/R/identify.hclust.R
23c23
<         stop("'k' and 'h' must be a scalar")
---
>         stop("'k' and 'h' arguments must be a scalar")
36,37c36
<         stop(gettextf("k must be between 2 and %d", length(tree$height)),
<              domain = NA)
---
>         stop(gettextf("'%s' argument must be between %s and %s", "k", "2", length(tree$height)), domain = "R-stats")
59c58
<              domain = NA)
---
>              domain = "R-stats")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/integrate.R R/src/library/stats/R/integrate.R
27,28c27
<     if (limit < 1L || (abs.tol <= 0 &&
< 	rel.tol < max(50*.Machine$double.eps, 0.5e-28)))
---
>     if (limit < 1L || (abs.tol <= 0 && rel.tol < max(50*.Machine$double.eps, 0.5e-28)))
37c36
< 	if(is.na(lower) || is.na(upper)) stop("a limit is missing")
---
> 	if(is.na(lower) || is.na(upper)) stop("at least one integration limit is missing")
58,63c57,62
< 	       "maximum number of subdivisions reached",
< 	       "roundoff error was detected",
< 	       "extremely bad integrand behaviour",
< 	       "roundoff error is detected in the extrapolation table",
< 	       "the integral is probably divergent",
< 	       "the input is invalid")
---
> 	       gettext("maximum number of subdivisions reached"),
> 	       gettext("roundoff error was detected"),
> 	       gettext("extremely bad integrand behaviour"),
> 	       gettext("roundoff error is detected in the extrapolation table"),
> 	       gettext("the integral is probably divergent"),
> 	       gettext("the input is invalid"))
72,75c71,73
<     if(x$message == "OK") cat(format(x$value, digits = digits),
<        " with absolute error < ", format(x$abs.error, digits = 2L),
<        "\n", sep = "")
<     else cat("failed with message ", sQuote(x$message), "\n", sep = "")
---
>     if(x$message == "OK")
>        cat(gettextf("%s with absolute error < %s", format(x$value, digits = digits), format(x$abs.error, digits = 2L), domain = "R-stats"), "\n", sep = "")
>     else cat(gettextf("failed with message %s", sQuote(x$message), domain = "R-stats"), "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/isoreg.R R/src/library/stats/R/isoreg.R
51,55c51,57
<   cat("Isotonic regression from ", deparse(x$call), ",\n", sep = "")
<   cat("  with", length(x$iKnots), "knots / breaks at obs.nr.", x$iKnots, ";\n")
<   if(x$isOrd) cat("  initially ordered 'x'\n")
<   else { cat("  (x,y) ordering:"); str(x$ord) }
<   cat("  and further components ")
---
>   cat(sprintf(ngettext(length(x$iKnots),
> 		"Isotonic regression from %s\n  with %d knot / break at obs.nr. %s;\n",
> 		"Isotonic regression from %s\n  with %d knots / breaks at obs.nr. %s;\n", domain = "R-stats"),
> 		 deparse(x$call), length(x$iKnots), paste(x$iKnots, collapse = " ")),  sep = "")
>   if(x$isOrd) cat(gettext("  initially ordered 'x'", domain = "R-stats"), "\n", sep = "")
>   else { cat(gettextf("  (x,y) ordering: %s", str(x$ord), domain = "R-stats")) }
>   cat(gettext("  further components: ", domain = "R-stats"))
72,73c74,75
< 	     main = paste("Isotonic regression", deparse(x$call)),
< 	     main2 = "Cumulative Data and Convex Minorant",
---
> 	     main = gettextf("Isotonic regression %s", paste(deparse(x$call), collapse = ""), domain = "R-stats"),
> 	     main2 = gettext("Cumulative Data and Convex Minorant", domain = "R-stats"),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/kernel.R R/src/library/stats/R/kernel.R
53,54c53,54
<         if (r < 1L) stop ("'r' is less than 1")
<         if (m < 1L) stop ("'m' is less than 1")
---
>         if (r < 1L) stop(gettextf("'%s' argument is less than %d", "r", 1))
>         if (m < 1L) stop(gettextf("'%s' argument is less than %d", "m", 1))
66,67c66,67
<         if (r < 0) stop ("'r' is less than 0")
<         if (m < 1) stop ("'m' is less than 1")
---
>         if (r < 0) stop(gettextf("'%s' argument is less than %d", "r", 0))
>         if (m < 1) stop(gettextf("'%s' argument is less than %d", "m", 1))
79c79
< 	    stop("'m' must be numeric with non-negative integers")
---
> 	    stop("'m' argument must be numeric vector with non-negative integers")
90c90
<             stop ("'coef' must be a vector")
---
>             stop(gettextf("'%s' argument must be a vector", "coef"))
92c92
<             stop ("'coef' does not have the correct length")
---
>             stop(gettextf("'%s' argument is of the wrong length", "coef"))
153,154c153,154
<     if (!is.vector(x)) stop ("'x' is not a vector")
<     if (!is.tskernel(k)) stop ("'k' is not a kernel")
---
>     if (!is.vector(x)) stop(gettextf("'%s' argument is not a vector", "x"))
>     if (!is.tskernel(k)) stop(gettextf("'%s' argument is not a kernel", "k"))
195c195
<         stop ("'x' is not a kernel")
---
>         stop(gettextf("'%s' argument is not a kernel", "x"))
197c197
<         stop ("'k' is not a kernel")
---
>         stop(gettextf("'%s' argument is not a kernel", "k"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/kmeans.R R/src/library/stats/R/kmeans.R
71,72c71,72
< 				     "did not converge in %d iteration",
< 				     "did not converge in %d iterations"),
---
>                             "kmeans algorithm did not converge in %d iteration",
>                             "kmeans algorithm did not converge in %d iterations", domain = "R-stats"),
85c85
<     if(is.na(m)) stop("invalid nrow(x)")
---
>     if(is.na(m)) stop(gettextf("invalid '%s' value", "nrow(x)"))
87c87
<     if(is.na(p)) stop("invalid ncol(x)")
---
>     if(is.na(p)) stop(gettextf("invalid '%s' value", "ncol(x)"))
118c118
<     if(is.na(k)) stop("'invalid value of 'k'")
---
>     if(is.na(k)) stop(gettextf("invalid '%s' value", "k"))
120c120
<     if(is.na(iter.max) || iter.max < 1L) stop("'iter.max' must be positive")
---
>     if(is.na(iter.max) || iter.max < 1L) stop(gettextf("'%s' argument must be positive", "iter.max"))
151,153c151,154
<     cat("K-means clustering with ", length(x$size), " clusters of sizes ",
<         paste(x$size, collapse = ", "), "\n", sep = "")
<     cat("\nCluster means:\n")
---
>     tmp_N <- paste(x$size, collapse=", ")
>     cat(sprintf(ngettext(length(x$size), "K-means clustering with %d cluster of size %s",
> 				"K-means clustering with %d clusters of sizes %s", domain = "R-stats"), length(x$size), tmp_N), "\n", sep = "")
>     cat("\n", gettext("Cluster means:", domain = "R-stats"), "\n", sep = "")
155c156
<     cat("\nClustering vector:\n")
---
>     cat("\n", gettext("Clustering vector:", domain = "R-stats"), "\n", sep = "")
157c158
<     cat("\nWithin cluster sum of squares by cluster:\n")
---
>     cat("\n", gettext("Within cluster sum of squares by cluster:", domain = "R-stats"), "\n", sep = "")
159,162c160,161
<     ratio <- sprintf(" (between_SS / total_SS = %5.1f %%)\n",
<                      100 * x$betweenss/x$totss)
<     cat(sub(".", getOption("OutDec"), ratio, fixed = TRUE),
< 	"Available components:\n", sep = "\n")
---
>     ratio <- gettextf(" (between_SS / total_SS = %5.1f %%)", 100 * x$betweenss/x$totss, domain = "R-stats")
>     cat(sub(".", getOption("OutDec"), ratio, fixed = TRUE), "\n\n", gettext("Available components:", domain = "R-stats"), "\n\n", sep = "")
165c164
< 	cat("Warning: did *not* converge in specified number of iterations\n")
---
> 	cat(gettext("Warning: did *not* converge in specified number of iterations\n", domain = "R-stats"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/ksmooth.R R/src/library/stats/R/ksmooth.R
25c25
< 	stop("numeric y must be supplied.\nFor density estimation use density()")
---
> 	stop("numeric 'y' argument must be supplied.\nFor density estimation use 'density()'")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/lag.R R/src/library/stats/R/lag.R
25c25
<         warning("'k' is not an integer")
---
>         warning(gettextf("'%s' argument is not an integer", "k"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/lm.R R/src/library/stats/R/lm.R
38,39c38
< 	warning(gettextf("method = '%s' is not supported. Using 'qr'", method),
<                 domain = NA)
---
> 	warning(gettextf("method = '%s' is not supported. Using 'qr'", method), domain = "R-stats")
45c44
<         stop("'weights' must be a numeric vector")
---
>         stop(gettextf("'%s' argument must be a numeric vector", "weights"))
49,50c48
<             stop(gettextf("number of offsets is %d, should equal %d (number of observations)",
<                           length(offset), NROW(y)), domain = NA)
---
> 	    stop(gettextf("number of offsets (%d) should be equal to number of observations (%d)", length(offset), NROW(y)), domain = "R-stats")
92c90
<     if (is.null(n <- nrow(x))) stop("'x' must be a matrix")
---
>     if (is.null(n <- nrow(x))) stop(gettextf("'%s' argument must be a matrix", "x"))
110,111c108
< 	warning(gettextf("method = '%s' is not supported. Using 'qr'", method),
<                 domain = NA)
---
> 	warning(gettextf("method = '%s' is not supported. Using 'qr'", method), domain = "R-stats")
113,118c110,116
<     if(length(dots) > 1L)
< 	warning("extra arguments ", paste(sQuote(names(dots)), sep=", "),
<                 " are disregarded.", domain = NA)
<     else if(length(dots) == 1L)
< 	warning("extra argument ", sQuote(names(dots)),
<                 " is disregarded.", domain = NA)
---
> 	if(length(dots) > 0L) {
>      warning(sprintf(ngettext(length(dots),
> 		     "extra argument %s is disregarded",
> 		     "extra arguments %s are disregarded", domain = "R-stats"),
> 		     paste(sQuote(names(dots)), sep=", ")),
> 		     domain = NA)
> }
125c123
<     dn <- colnames(x); if(is.null(dn)) dn <- paste0("x", 1L:p)
---
>     dn <- colnames(x); if(is.null(dn)) dn <- paste0("x", seq_len(p))
156c154
<     if(is.null(n <- nrow(x))) stop("'x' must be a matrix")
---
>     if(is.null(n <- nrow(x))) stop(gettextf("'%s' argument must be a matrix", "x"))
169,170c167
< 	warning(gettextf("method = '%s' is not supported. Using 'qr'", method),
<                 domain = NA)
---
> 	warning(gettextf("method = '%s' is not supported. Using 'qr'", method), domain = "R-stats")
172,177c169,175
<     if(length(dots) > 1L)
< 	warning("extra arguments ", paste(sQuote(names(dots)), sep=", "),
<                 " are disregarded.", domain = NA)
<     else if(length(dots) == 1L)
< 	warning("extra argument ", sQuote(names(dots)),
<                 " is disregarded.", domain = NA)
---
> if(length(dots) >= 1L) {
>      warning(sprintf(ngettext(as.integer(length(dots)),
> 		     "extra argument %s is disregarded",
> 		     "extra arguments %s are disregarded", domain = "R-stats"),
> 		     paste(sQuote(names(dots)), sep=", ")),
> 		     domain = NA)
> }
211c209
<     dn <- colnames(x); if(is.null(dn)) dn <- paste0("x", 1L:p)
---
>     dn <- colnames(x); if(is.null(dn)) dn <- paste0("x", seq_len(p))
261c259
<     cat("\nCall:\n",
---
>     cat("\n", gettext("Call:", domain = "R-stats"), "\n",
264c262
<         cat("Coefficients:\n")
---
>         cat(gettext("Coefficients:", domain = "R-stats"), "\n", sep = "")
267c265
<     } else cat("No coefficients\n")
---
>     } else cat(gettext("No coefficients", domain = "R-stats"), "\n", sep = "")
294,295c292
<         dimnames(ans$coefficients) <-
<             list(NULL, c("Estimate", "Std. Error", "t value", "Pr(>|t|)"))
---
>         dimnames(ans$coefficients) <- list(NULL, c(gettext("Estimate", domain = NA), gettext("Std. Error", domain = NA), gettext("t value", domain = NA), gettext("Pr(>|t|)", domain = NA)))
329c326
<     p1 <- 1L:p
---
>     p1 <- seq_len(p)
339,340c336
< 	list(names(z$coefficients)[Qr$pivot[p1]],
< 	     c("Estimate", "Std. Error", "t value", "Pr(>|t|)"))
---
> 	list(names(z$coefficients)[Qr$pivot[p1]], c(gettext("Estimate", domain = NA), gettext("Std. Error", domain = NA), gettext("t value", domain = NA), gettext("Pr(>|t|)", domain = NA)))
368c364
<     cat("\nCall:\n", # S has ' ' instead of '\n'
---
>     cat("\n", gettext("Call:", domain = "R-stats"), "\n", # S has ' ' instead of '\n'
373,374c369,370
<     cat(if(!is.null(x$weights) && diff(range(x$weights))) "Weighted ",
<         "Residuals:\n", sep = "")
---
>     cat(if(!is.null(x$weights) && diff(range(x$weights))) gettext("Weighted Residuals:", domain = "R-stats") else
>         gettext("Residuals:", domain = "R-stats"), "\n", sep = "")
376c372
< 	nam <- c("Min", "1Q", "Median", "3Q", "Max")
---
> 	nam <- c(gettext("Min", domain = NA), gettext("1Q", domain = NA), gettext("Median", domain = NA), gettext("3Q", domain = NA), gettext("Max", domain = NA))
389c385,387
< 	cat("ALL", df[1L], "residuals are 0: no residual degrees of freedom!")
---
> 	cat(sprintf(ngettext(df[1L], "%d residual is 0: no residual degrees of freedom!",
> 				"ALL %d residuals are 0: no residual degrees of freedom!", domain = "R-stats"),
> 			 df[1L]))
393c391
<         cat("\nNo Coefficients\n")
---
>         cat("\n", gettext("No coefficients", domain = "R-stats"), "\n", sep = "")
396,398c394,397
<             cat("\nCoefficients: (", nsingular,
<                 " not defined because of singularities)\n", sep = "")
<         else cat("\nCoefficients:\n")
---
>             cat("\n", sprintf(ngettext(nsingular, "Coefficients: (%d not defined because of singularity)",
> 				"Coefficients: (%d not defined because of singularities)", domain = "R-stats"), nsingular),
>                 "\n", sep = "")
>         else cat("\n", gettext("Coefficients:", domain = "R-stats"), "\n", sep = "")
410,411c409
<     cat("\nResidual standard error:",
< 	format(signif(x$sigma, digits)), "on", rdf, "degrees of freedom")
---
>     cat("\n", gettextf("Residual standard error: %s on %d degrees of freedom", format(signif(x$sigma, digits)), rdf, domain = "R-stats"), sep = "")
415,419c413,415
< 	cat("Multiple R-squared: ", formatC(x$r.squared, digits = digits))
< 	cat(",\tAdjusted R-squared: ",formatC(x$adj.r.squared, digits = digits),
< 	    "\nF-statistic:", formatC(x$fstatistic[1L], digits = digits),
< 	    "on", x$fstatistic[2L], "and",
< 	    x$fstatistic[3L], "DF,  p-value:",
---
> 	cat(gettext("Multiple R-squared:", domain = "R-stats"), formatC(x$r.squared, digits = digits))
> 	cat(",\t", gettext("Adjusted R-squared: ", domain = "R-stats"), formatC(x$adj.r.squared, digits = digits),
> 	    "\n", gettextf("F-statistic: %s on %d and %d DF", formatC(x$fstatistic[1L], digits = digits), x$fstatistic[2L], x$fstatistic[3L], domain = "R-stats"), ",  ", gettext("p-value: ", domain = "R-stats"),
422c418
<                         digits = digits))
---
>                         digits = digits), sep = "")
429c425
< 	    cat("\nCorrelation of Coefficients:\n")
---
> 	    cat("\n", gettext("Correlation of Coefficients:", domain = "R-stats"), "\n", sep = "")
465,466c461
<         stop("lm object does not have a proper 'qr' component.
<  Rank zero or should not have used lm(.., qr=FALSE).")
---
>         stop("lm object does not have a proper 'qr' component. Rank zero or should not have used lm(.., qr=FALSE).")
496,497c491
<                   else stop(gettextf("family '%s' not implemented", fam),
<                             domain = NA)
---
>                   else stop(gettextf("family '%s' not implemented", fam), domain = "R-stats")
579c573
<         p1 <- 1L:p
---
>         p1 <- seq_len(p)
582c576
<         nmeffects <- c("(Intercept)", attr(object$terms, "term.labels"))
---
>         nmeffects <- c(gettext("(Intercept)", domain = NA), attr(object$terms, "term.labels"))
596,597c590
<     dimnames(table) <- list(c(tlabels, "Residuals"),
<                             c("Df","Sum Sq", "Mean Sq", "F value", "Pr(>F)"))
---
>     dimnames(table) <- list(c(tlabels, "Residuals"), c(gettext("Df", domain = NA), gettext("Sum Sq", domain = NA), gettext("Mean Sq", domain = NA), gettext("F value", domain = NA), gettext("Pr(>F)", domain = NA)))
599,600c592,593
<     structure(table, heading = c("Analysis of Variance Table\n",
< 		     paste("Response:", deparse(formula(object)[[2L]]))),
---
>     structure(table, heading = c(paste(gettext("Analysis of Variance Table", domain = "R-stats"), "\n", sep = ""),
> 		     paste(gettext("Response:", domain = "R-stats"), deparse(formula(object)[[2L]]))),
612,614c605
<         warning(gettextf("models with response %s removed because response differs from model 1",
<                          sQuote(deparse(responses[!sameresp]))),
<                 domain = NA)
---
>         warning(gettextf("models with response %s removed because response differs from model 1", sQuote(deparse(responses[!sameresp]))), domain = "R-stats")
637,638c628
<     dimnames(table) <- list(1L:nmodels,
<                             c("Res.Df", "RSS", "Df", "Sum of Sq"))
---
>     dimnames(table) <- list(seq_len(nmodels), c(gettext("Res.Df", domain = NA), gettext("RSS", domain = NA), gettext("Df", domain = NA), gettext("Sum of Sq", domain = NA)))
640,642c630,631
<     title <- "Analysis of Variance Table\n"
<     topnote <- paste("Model ", format(1L:nmodels),": ",
< 		     variables, sep = "", collapse = "\n")
---
>     title <- paste(gettext("Analysis of Variance Table", domain = "R-stats"), "\n", sep = "")
>     topnote <- paste(gettextf("Model %s: %s", format(seq_len(nmodels)), variables, domain = "R-stats"), collapse = "\n")
703c692
<             warning("predictions on current data refer to _future_ responses\n")
---
>             warning("predictions on current data refer to _future_ responses")
708c697
<                 warning("assuming prediction variance inversely proportional to weights used for fitting\n")
---
>                 warning("assuming prediction variance inversely proportional to weights used for fitting")
712c701
<             warning("Assuming constant prediction variance even though model fit is weighted\n")
---
>             warning("Assuming constant prediction variance even though model fit is weighted")
760c749
< 	if (hasintercept) ll <- c("(Intercept)", ll)
---
> 	if (hasintercept) ll <- c(gettext("(Intercept)", domain = NA), ll)
764c753,754
< 	    asgn$"(Intercept)" <- NULL
---
> 	    #asgn$"(Intercept)" <- NULL
> 	    asgn[[which(names(asgn) == gettext("(Intercept)", domain = NA))]] <- NULL
860c850
< 	    r <- 1L:dim(dd)[1L]
---
> 	    r <- seq_len(dim(dd)[1L])
915c905
<     asgn <- object$assign[qr.lm(object)$pivot[1L:object$rank]]
---
>     asgn <- object$assign[qr.lm(object)$pivot[seq_len(object$rank)]]
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/lm.influence.R R/src/library/stats/R/lm.influence.R
247c247
<     vn <- variable.names(model); vn[vn == "(Intercept)"] <- "1_"
---
>     vn <- variable.names(model); vn[vn == gettext("(Intercept)", domain = "R-stats")] <- "1_"
271c271
<     cat("Influence measures of\n\t", deparse(x$call),":\n\n")
---
>     cat(gettextf("Influence measures of\n\t%s:", paste(deparse(x$call), collapse = ""), domain = "R-stats"),"\n\n", sep = "")
288,289c288
<     cat("Potentially influential observations of\n\t",
< 	deparse(object$call),":\n")
---
>     cat(gettextf("Potentially influential observations of\n\t%s", paste(deparse(object$call), collapse = ""), domain = "R-stats"),"\n", sep = "")
302c301
< 	cat("NONE\n")
---
> 	cat(gettext("NONE", domain = "R-stats"), "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/loess.R R/src/library/stats/R/loess.R
48c48
<     if(!match(degree, 0L:2L, 0L)) stop("'degree' must be 0, 1 or 2")
---
>     if(!match(degree, 0L:2L, 0L)) stop(gettextf("'%s' argument must be 0, 1 or 2", "degree"))
61c61
<         stop("invalid 'control' argument")
---
>         stop(gettextf("invalid '%s' argument", "control"))
98c98
<     if (is.na(D)) stop("invalid NCOL(X)")
---
>     if (is.na(D)) stop(gettextf("invalid '%s' value", "NCOL(X)"))
101,103c101,103
<     if (is.na(N)) stop("invalid NCOL(X)")
<     if(!N || !D)	stop("invalid 'x'")
<     if(!length(y))	stop("invalid 'y'")
---
>     if (is.na(N)) stop(gettextf("invalid '%s' value", "NCOL(X)"))
>     if(!N || !D)	stop(gettextf("invalid '%s' argument", "x"))
>     if(!length(y))	stop(gettextf("invalid '%s' argument", "y"))
138,140c138,140
<         if (length(span) != 1L) stop("invalid argument 'span'")
<         if (length(cell) != 1L) stop("invalid argument 'cell'")
<         if (length(degree) != 1L) stop("invalid argument 'degree'")
---
>         if (length(span) != 1L) stop(gettextf("invalid '%s' argument", "span"))
>         if (length(cell) != 1L) stop(gettextf("invalid '%s' argument", "cell"))
>         if (length(degree) != 1L) stop(gettextf("invalid '%s' argument", "degree"))
176,177c176
< 	fit.kd <- list(parameter=pars, a=z$a[1L:pars[4L]], xi=z$xi[1L:pars[4L]],
< 		       vert=z$vert, vval=z$vval[1L:enough])
---
> 	fit.kd <- list(parameter=pars, a=z$a[seq_len(pars[4L])], xi=z$xi[seq_len(pars[4L])], vert=z$vert, vval=z$vval[seq_len(enough)])
234c233
< 	stop("first argument must be a \"loess\" object")
---
> 	stop(gettextf("'%s' argument is not an object of class %s", "object", dQuote("loess")))
384c383
< 	cat("Call:\n")
---
> 	cat(gettext("Call:", domain = "R-stats"), "\n", sep = "")
387,391c386,391
<     cat("\nNumber of Observations:", x$n, "\n")
<     cat("Equivalent Number of Parameters:", format(round(x$enp, 2L)), "\n")
<     cat("Residual",
< 	if(x$pars$family == "gaussian")"Standard Error:" else "Scale Estimate:",
< 	format(signif(x$s, digits)), "\n")
---
>     cat("\n", gettext("Number of Observations:", domain = "R-stats"), " ", x$n, "\n", sep = "")
>     cat(gettext("Equivalent Number of Parameters:", domain = "R-stats"), " ", format(round(x$enp, 2L)), sep = "", collapse = "\n")
>     if(x$pars$family == "gaussian")
>      cat(ngettext(1L, "Residual Standard Error:", "Residual Standard Errors:", domain = "R-stats"), " ", format(signif(x$s, digits)), "\n", sep = "")
>     else
>      cat(gettext("Residual Scale Estimate:", domain = "R-stats"), " ", format(signif(x$s, digits)), "\n", sep = "")
405c405
< 	cat("Call:\n")
---
> 	cat(gettext("Call:", domain = "R-stats"), "\n", sep = "")
408,409c408,409
<     cat("\nNumber of Observations:", x$n, "\n")
<     cat("Equivalent Number of Parameters:", format(round(x$enp, 2)), "\n")
---
>     cat("\n", gettext("Number of Observations:", domain = "R-stats"), " ", x$n, "\n", sep = "")
>     cat(gettext("Equivalent Number of Parameters:", domain = "R-stats"), " ", format(round(x$enp, 2L)), sep = "", collapse = "\n")
411,414c411,414
< 	cat("Residual Standard Error:", format(signif(x$s, digits)), "\n")
<     else cat("Residual Scale Estimate:", format(signif(x$s, digits)), "\n")
<     cat("Trace of smoother matrix:", format(round(x$trace.hat, 2L)), "\n")
<     cat("\nControl settings:\n")
---
>         cat(ngettext(1L, "Residual Standard Error:", "Residual Standard Errors:", domain = "R-stats"), " ", format(signif(x$s, digits)), "\n", sep = "")
>     else cat(gettext("Residual Scale Estimate:", domain = "R-stats"), " ", format(signif(x$s, digits)), "\n", sep = "")
>     cat(gettext("Trace of smoother matrix:", domain = "R-stats"), " ", format(round(x$trace.hat, 2L)), "\n", sep = "")
>     cat("\n", gettext("Control settings:", domain = "R-stats"), "\n", sep = "")
483,485c483
<         warning(gettextf("models with response %s removed because response differs from model 1",
<                          sQuote(deparse(responses[!sameresp]))),
<                 domain = NA)
---
>         warning(gettextf("models with response %s removed because response differs from model 1", sQuote(deparse(responses[!sameresp]))), domain = "R-stats")
490,491c488
<     descr <- paste("Model ", format(1L:nmodels), ": ", models,
< 		   sep = "", collapse = "\n")
---
>     descr <- paste(gettextf("Model %s: %s", format(seq_len(nmodels)), models, domain = "R-stats"), collapse = "\n")
505a503
>     colnames(ans) <- c(gettext("ENP", domain = NA), gettext("RSS", domain = NA), gettext("F-value", domain = NA), gettext("Pr(>F)", domain = NA))
507,508c505
< 	paste0(descr, "\n\n", "Analysis of Variance:   denominator df ",
<                format(round(dfden, 2L)), "\n")
---
> 	paste0(descr, "\n\n", gettextf("Analysis of Variance:   denominator df %s", format(round(dfden, 2L)), domain = "R-stats"), "\n")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/logLik.R R/src/library/stats/R/logLik.R
26,27c26
<     cat("'log Lik.' ", paste(format(c(x), digits = digits), collapse = ", "),
<         " (df=", format(attr(x,"df")), ")\n", sep = "")
---
>     cat(gettextf("'log Lik.' %s (df=%s)", paste(format(c(x), digits = digits), collapse = ", "), format(attr(x,"df")), domain = "R-stats"), "\n", sep = "")
37,42c36,42
<     cat("Class", if (length(cl) > 1L) "es",
< 	" '", paste(cl, collapse = "', '"), "' : ",
< 	paste
<         (format(co[seq_len(min(len,vec.len))], digits = digits),
< 	      collapse = ", "), if(cutl) ", ...",
< 	" (df=", format(attr(object,"df")), ")\n", sep = "")
---
>     if(cutl)
>     cat(sprintf(ngettext(length(cl), "Class %s: %s, ... (df=%s)\n", "Classes %s: %s, ... (df=%s)\n", domain = "R-stats"), paste(dQuote(cl), collapse = ", "),
> 	paste(format(co[seq_len(min(len,vec.len))], digits = digits), collapse = ", "), format(attr(object,"df"))))
>     else
>     cat(sprintf(ngettext(length(cl), "Class %s: %s (df=%s)\n", "Classes %s: %s (df=%s)\n", domain = "R-stats"), paste(dQuote(cl), collapse = ", "),
> 	paste(format(co[seq_len(min(len,vec.len))], digits = digits), collapse = ", "), format(attr(object,"df"))))
> 
56c56
<     if(!missing(...)) warning("extra arguments discarded")
---
>     if(!missing(...)) warning("extra arguments were discarded")
73c73
<         stop("'logLik.lm' does not support multiple responses")
---
>         stop("'logLik.lm()' does not support multiple responses")
135c135
<             warning("no 'nobs' method is available")
---
>             warning("no 'nobs()' method is available")
138c138
<     } else stop("no 'nobs' method is available") # or maybe NA_integer_
---
>     } else stop("no 'nobs()' method is available") # or maybe NA_integer_
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/loglin.R R/src/library/stats/R/loglin.R
39c39
<             stop("'margin' must contain names or numbers corresponding to 'table'")
---
>             stop("'margin' argument must contain names or numbers corresponding to 'table' argument")
45c45
<     if (length(start) != ntab ) stop("'start' and 'table' must be same length")
---
>     if (length(start) != ntab ) stop(gettextf("'%s' and '%s' arguments must have the same length", "start", "table"))
50c50
<         cat(z$nlast, "iterations: deviation", z$dev[z$nlast], "\n")
---
>         cat(sprintf(ngettext(z$nlast, "%d iteration: deviation %s", "%d iterations: deviation %s", domain = "R-stats"), z$nlast, z$dev[z$nlast]), "\n", sep = "")
89c89
<         varnames <- as.character(1 : ntab)
---
>         varnames <- as.character(seq_len(ntab))
109c109
<         parnam[1L] <- "(Intercept)"
---
>         parnam[1L] <- gettext("(Intercept)", domain = NA)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/lsfit.R R/src/library/stats/R/lsfit.R
29c29
< 	else xnames <- paste0("X", 1L:ncol(x))
---
> 	else xnames <- paste0("X", seq_len(ncol(x)))
33c33
< 	xnames <- c("Intercept", xnames)
---
> 	xnames <- c(gettext("Intercept", domain = NA), xnames)
38c38
<     if(is.null(yname) && ncol(y) > 1) yname <- paste0("Y", 1L:ncol(y))
---
>     if(is.null(yname) && ncol(y) > 1) yname <- paste0("Y", seq_len(ncol(y)))
47c47
<                                  "%d missing values deleted"),
---
>                                  "%d missing values deleted", domain = "R-stats"),
64c64
<                        "'X' matrix has %d cases (rows)"),
---
>                        "'X' matrix has %d cases (rows)", domain = "R-stats"),
68c68
<                        "'Y' has %d cases (rows)")),
---
>                        "'Y' has %d cases (rows)", domain = "R-stats")),
74c74
<                               "only %d cases"),
---
>                               "only %d cases", domain = "R-stats"),
78c78
<                               "but %d variables")),
---
>                               "but %d variables", domain = "R-stats")),
83c83
< 	if(any(wt < 0)) stop("negative weights not allowed")
---
> 	if(any(wt < 0)) stop("negative weights are not allowed")
85c85
<             stop(gettextf("number of weights = %d should equal %d (number of responses)", nwts, nry), domain = NA)
---
>             stop(gettextf("number of weights = %d should equal %d (number of responses)", nwts, nry), domain = "R-stats")
161c161
< 	warning("missing observations deleted")
---
> 	warning("missing observations were deleted")
169c169
< 	    warning("observations with 0 weight not used in calculating standard deviation")
---
> 	    warning("observations with 0 weight were not used in calculating standard deviation")
205c205
<     qr <- as.matrix(ls.out$qr$qr[1L:p, 1L:p])
---
>     qr <- as.matrix(ls.out$qr$qr[seq_len(p), seq_len(p)])
238c238
< 	    warning("observations with 0 weights not used")
---
> 	    warning("observations with 0 weight were not used in calculating standard deviation")
275,278c275,276
<     dimnames(summary) <- list(Ynames,
< 			      c("Mean Sum Sq", "R Squared",
< 				"F-value", "Df 1", "Df 2", "Pr(>F)"))
<     mat <- as.matrix(lsqr$qr[1L:p, 1L:p])
---
>     dimnames(summary) <- list(Ynames, c(gettext("Mean Sum Sq", domain = NA), gettext("R Squared", domain = NA), gettext("F-value", domain = NA), gettext("Df 1", domain = NA), gettext("Df 2", domain = NA), gettext("Pr(>F)", domain = NA)))
>     mat <- as.matrix(lsqr$qr[seq_len(p), seq_len(p)])
285c283
<     coef.table <- as.list(1L:m.y)
---
>     coef.table <- as.list(seq_len(m.y))
288c286
<     for(i in 1L:m.y) {
---
>     for(i in seq_len(m.y)) {
294,296c292
< 	dimnames(coef.table[[i]]) <-
< 	    list(colnames(lsqr$qr),
< 		 c("Estimate", "Std.Err", "t-value", "Pr(>|t|)"))
---
> 	dimnames(coef.table[[i]]) <- list(colnames(lsqr$qr), c(gettext("Estimate", domain = NA), gettext("Std.Err", domain = NA), gettext("t-value", domain = NA), gettext("Pr(>|t|)", domain = NA)))
302,308c298,302
< 		cat("Response:", Ynames[i], "\n\n")
< 	    cat(paste("Residual Standard Error=",
<                       format(round(resse[i], digits)), "\nR-Square=",
<                       format(round(rsquared[i], digits)), "\nF-statistic (df=",
< 		      format(degfree), ", ", format(n[i]-p), ")=",
< 		      format(round(fstat[i], digits)), "\np-value=",
< 		      format(round(pvalue[i], digits)), "\n\n", sep=""))
---
> 		cat(gettext("Response: ", domain = "R-stats"), Ynames[i], "\n\n", sep = "")
> 	    cat(gettextf("Residual Standard Error=%s", format(round(resse[i], digits)), domain = "R-stats"), "\n",
> 			gettextf("R-Square=%s", format(round(rsquared[i], digits)), domain = "R-stats"), "\n",
> 			gettextf("F-statistic (df=%s, %s)=%s", format(degfree), format(n[i]-p), format(round(fstat[i], digits)), domain = "R-stats"), "\n",
> 			gettextf("p-value=%s", format(round(pvalue[i], digits)), domain = "R-stats"), "\n\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/mad.R R/src/library/stats/R/mad.R
27c27
<             if(low && high) stop("'low' and 'high' cannot be both TRUE")
---
>             if(low && high) stop("'low' and 'high' arguments cannot be both TRUE")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/manova.R R/src/library/stats/R/manova.R
44,46c44
<         stop(gettextf("object must be of class %s or %s",
<                       dQuote("manova"), dQuote("maov")),
<              domain = NA)
---
>         stop(gettextf("object must be of class %s or %s", dQuote("manova"), dQuote("maov")), domain = "R-stats")
49c47
<     asgn <- object$assign[object$qr$pivot[1L:object$rank]]
---
>     asgn <- object$assign[object$qr$pivot[seq_len(object$rank)]]
56c54
<     nmeffect <- c("(Intercept)", attr(object$terms, "term.labels"))
---
>     nmeffect <- c(gettext("(Intercept)", domain = "R-stats"), attr(object$terms, "term.labels"))
78c76
<     pm <- pmatch("(Intercept)", nmrows, 0L)
---
>     pm <- pmatch(gettext("(Intercept)", domain = NA), nmrows, 0L)
92c90
<         names(ss)[nt] <- nmrows[nt] <- "Residuals"
---
>         names(ss)[nt] <- nmrows[nt] <- gettext("Residuals", domain = NA)
98,99c96
<                                  c(test, "approx F", "num Df", "den Df",
<                                    "Pr(>F)"))
---
>                                  c(test, gettext("approx F", domain = NA), gettext("num Df", domain = NA), gettext("den Df", domain = NA), gettext("Pr(>F)", domain = NA)))
108,109c105
<             stop(gettextf("residuals have rank %d < %d",
<                           rss.qr$rank, ncol(resid)), domain = NA)
---
>             stop(gettextf("residuals have rank %d < %d", rss.qr$rank, ncol(resid)), domain = "R-stats")
114c110
<                 stats[i, 1L:4] <-
---
>                 stats[i, seq_len(4)] <-
138c134
<         cat("No error degrees of freedom\n\n")
---
>         cat(gettext("No error degrees of freedom", domain = "R-stats"), "\n\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/medpolish.R R/src/library/stats/R/medpolish.R
49c49
<         if(trace.iter) cat("Final: ", newsum, "\n", sep = "")
---
>         if(trace.iter) cat(gettext("Final: ", domain = "R-stats"), newsum, "\n", sep = "")
53c53
<                              "medpolish() did not converge in %d iterations"),
---
>                              "medpolish() did not converge in %d iterations", domain = "R-stats"),
65,66c65,66
<     cat("\nMedian Polish Results (Dataset: \"", x$name, "\")\n", sep = "")
<     cat("\nOverall: ", x$overall, "\n\nRow Effects:\n", sep = "")
---
>     cat("\n", gettextf("Median Polish Results (Dataset: %s)", sQuote(x$name), domain = "R-stats"), "\n", sep = "")
>     cat("\n", gettext("Overall: ", domain = "R-stats"), x$overall, "\n\n", gettext("Row Effects:", domain = "R-stats"), "\n", sep = "")
68c68
<     cat("\nColumn Effects:\n")
---
>     cat("\n", gettext("Column Effects:", domain = "R-stats"), "\n", sep = "")
70c70
<     cat("\nResiduals:\n")
---
>     cat("\n", gettext("Residuals:", domain = "R-stats"), "\n", sep = "")
76c76
< plot.medpolish <- function(x, main = "Tukey Additivity Plot", ...)
---
> plot.medpolish <- function(x, main = gettext("Tukey Additivity Plot", domain = "R-stats"), ...)
79,80c79,80
< 	 main = main, xlab = "Diagnostic Comparison Values",
< 	 ylab = "Residuals", ...)
---
> 	 main = main, xlab = gettext("Diagnostic Comparison Values", domain = "R-stats"),
> 	 ylab = gettext("Residuals", domain = "R-stats"), ...)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/mlm.R R/src/library/stats/R/mlm.R
69c69
<         stop("'mlm' objects with weights are not supported")
---
>         stop("\"mlm\" objects with weights are not supported")
143c143
<             stop("X does not define a subspace of M")
---
>             stop("'X' does not define a subspace of 'M'")
163c163
<         c("\nContrast matrix", apply(format(T), 1L, paste, collapse=" "))
---
>         c("", gettextf("Contrast matrix %s", apply(format(T), 1L, paste, collapse=" "), domain = "R-stats"))
167,169c167,169
<           c("\nContrasts orthogonal to",
<             if (is.matrix(orig.X))  apply(format(X), 2L, paste, collapse=" ")
<             else deparse(formula(orig.X)),"",
---
>           c(
>             if (is.matrix(orig.X)) gettextf("Contrasts orthogonal to %s", apply(format(X), 2L, paste, collapse=" "), domain = "R-stats")
>             else gettextf("Contrasts orthogonal to %s", paste(deparse(formula(orig.X)), collapse = ""), domain = "R-stats"), "",
171,173c171,173
<             c("\nContrasts spanned by",
<               if (is.matrix(orig.M))  apply(format(M), 2L, paste, collapse=" ")
<               else deparse(formula(orig.M)),""
---
>             c(
>               if (is.matrix(orig.M)) gettextf("Contrasts spanned by %s" , apply(format(M), 2L, paste, collapse=" "), domain = "R-stats")
>               else gettextf("Contrasts spanned by %s", paste(deparse(formula(orig.M)), collapse = "") , domain = "R-stats"), ""
179,181c179,180
<                    method=c("Mauchly's test of sphericity", transformnote),
<                    data.name=paste("SSD matrix from",
<                    deparse(object$call), collapse=" "))
---
>                    method=c(gettext("Mauchly's test of sphericity"), transformnote),
>                    data.name=gettextf("SSD matrix from %s", paste(deparse(object$call), collapse = "")))
237c236
<         title <- "Analysis of Variance Table\n"
---
>         title <- paste(gettext("Analysis of Variance Table", domain = "R-stats"), "\n", sep = "")
239c238
<             c("\nContrast matrix", apply(format(T), 1L, paste, collapse=" "))
---
>         c("\n", gettextf("Contrast matrix %s", apply(format(T), 1L, paste, collapse=" "), domain = "R-stats"))
243,246c242,244
<               c("\nContrasts orthogonal to",
<                 if (is.matrix(orig.X))
<                 apply(format(X), 2L, paste, collapse=" ")
<                 else deparse(formula(orig.X)),"",
---
>           c("",
>             if (is.matrix(orig.X)) gettextf("Contrasts orthogonal to %s", apply(format(X), 2L, paste, collapse=" "), domain = "R-stats")
>             else gettextf("Contrasts orthogonal to %s", paste(deparse(formula(orig.X)), collapse = ""), domain = "R-stats"), "",
248,251c246,248
<                 c("\nContrasts spanned by",
<                   if (is.matrix(orig.M))
<                   apply(format(M), 2L, paste, collapse=" ")
<                   else deparse(formula(orig.M)),""
---
>             c("",
>               if (is.matrix(orig.M)) gettextf("Contrasts spanned by %s" , apply(format(M), 2L, paste, collapse=" "), domain = "R-stats")
>               else gettextf("Contrasts spanned by %s", paste(deparse(formula(orig.M)), collapse = ""), domain = "R-stats"), ""
261c258
<             p1 <- 1L:rk
---
>             p1 <- seq_len(rk)
264c261
<             nmeffects <- c("(Intercept)", attr(object$terms, "term.labels"))
---
>             nmeffects <- c(gettext("(Intercept)", domain = NA), attr(object$terms, "term.labels"))
282,283c279,280
<             epsnote <- c(paste(format(c("Greenhouse-Geisser epsilon:",
<                                         "Huynh-Feldt epsilon:")),
---
>             epsnote <- c(paste(format(c(gettext("Greenhouse-Geisser epsilon:", domain = "R-stats"),
>                                         gettext("Huynh-Feldt epsilon:", domain = "R-stats"))),
318,319c315
<                 stop(gettextf("residuals have rank %s < %s", rss.qr$rank, pp),
<                      domain = NA)
---
>                 stop(gettextf("residuals have rank %s < %s", rss.qr$rank, pp), domain = "R-stats")
436,438c432
<         warning(gettextf("models with response %s removed because response differs from model 1",
<                          sQuote(deparse(responses[!sameresp]))),
<                 domain = NA)
---
>         warning(gettextf("models with response %s removed because response differs from model 1", sQuote(deparse(responses[!sameresp]))), domain = "R-stats")
469,471c463,464
<     title <- "Analysis of Variance Table\n"
<     topnote <- paste("Model ", format(seq_len(nmodels)),": ",
< 		     variables, sep = "", collapse = "\n")
---
>     title <- paste(gettext("Analysis of Variance Table"), "\n", sep = "")
>     topnote <- paste(gettextf("Model %s: %s", format(seq_len(nmodels)), variables, domain = "R-stats"), collapse = "\n")
473c466
<         c("\nContrast matrix", apply(format(T), 1L, paste, collapse = " "))
---
>         c(gettextf("Contrast matrix %s", apply(format(T), 1L, paste, collapse=" "), domain = "R-stats"))
477,479c470,472
<           c("\nContrasts orthogonal to",
<             if (is.matrix(orig.X))  apply(format(X), 2L, paste, collapse = " ")
<             else deparse(formula(orig.X)),"",
---
>           c("",
>             if (is.matrix(orig.X)) gettextf("Contrasts orthogonal to %s", apply(format(X), 2L, paste, collapse=" "), domain = "R-stats")
>             else gettextf("Contrasts orthogonal to %s", paste(deparse(formula(orig.X)), collapse = ""), domain = "R-stats"), "",
481,484c474,477
<             c("\nContrasts spanned by",
<               if (is.matrix(orig.M))  apply(format(M), 2L, paste, collapse = " ")
<               else deparse(formula(orig.M)),
<               "")
---
>             c("",
>               if (is.matrix(orig.M)) gettextf("Contrasts spanned by %s" , apply(format(M), 2L, paste, collapse=" "), domain = "R-stats")
>               else gettextf("Contrasts spanned by %s", paste(deparse(formula(orig.M)), collapse = "") , domain = "R-stats"), ""
>               )
496,497c489,490
<         epsnote <- c(paste(format(c("Greenhouse-Geisser epsilon:",
<                            "Huynh-Feldt epsilon:")),
---
>         epsnote <- c(paste(format(c(gettext("Greenhouse-Geisser epsilon:"),
>                           gettext("Huynh-Feldt epsilon:"))),
539,540c532
<             stop(gettextf("residuals have rank %s < %s", rss.qr$rank, pp),
<                  domain = NA)
---
>             stop(gettextf("residuals have rank %s < %s", rss.qr$rank, pp), domain = "R-stats")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/models.R R/src/library/stats/R/models.R
170,172c170
<             stop(gettextf("'termobj' must be a object of class %s",
<                           dQuote("terms")),
<                  domain = NA)
---
>             stop(gettextf("'%s' argument must be an object of class %s", "termobj", dQuote("terms")), domain = "R-stats")
354,355c352,354
<                  call. = FALSE, domain = NA)
<         else
---
>                  call. = FALSE, domain = "R-stats")
>         else {
> 	    tmp_N <- paste(sQuote(names(old)[wrong]), collapse=", ")
358,359c357,358
<                  paste(sQuote(names(old)[wrong]), collapse=", ")),
<                  call. = FALSE, domain = NA)
---
>                  tmp_N),
>                  call. = FALSE, domain = "R-stats") }
461c460
<                                             "'newdata' had %d rows"),
---
>                                             "'newdata' had %d rows", domain = "R-stats"),
465c464
<                                            "but variables found have %d rows")),
---
>                                            "but variables found have %d rows", domain = "R-stats")),
489c488
<                             domain = NA)
---
>                             domain = "R-stats")
497c496
<                                               "factor %s has new levels %s"),
---
>                                               "factor %s has new levels %s", domain = "R-stats"),
514c513
< 		    warning(gettext(sprintf("contrasts dropped from factor %s due to missing levels", nm), domain = NA), 
---
> 		    warning(gettextf("contrasts dropped from factor %s due to missing levels", nm, domain = "R-stats"), 
526c525,531
< model.weights <- function(x) x$"(weights)"
---
> #model.weights <- function(x) x$"(weights)"
> model.weights <- function(x) {
>    idx <- which(names(x) == gettext("(weights)", domain = "R-stats"))
>    if(length(idx) > 0L) {
> 	x[[idx]]
>    } else x$"(weights)"
> }
532c537,541
< 	ans <- x$"(offset)"
---
> #		ans <- x$"(offset)"
> 	idx <- which(names(x) == gettext("(offset)", domain = "R-stats"))
> 	if(length(idx) > 0L) {
> 	 ans <- x[[idx]]
> 	} else ans <- x$"(offset)"
537,538c546,553
<     else ans <- x$"(offset)"
<     if(!is.null(ans) && !is.numeric(ans)) stop("'offset' must be numeric")
---
> #    else ans <- x$"(offset)"
>     else { 
> 	idx <- which(names(x) == gettext("(offset)", domain = "R-stats"))
> 	if(length(idx) > 0L) {
> 	 ans <- x[[idx]]
> 	} else ans <- x$"(offset)"
>     }
>     if(!is.null(ans) && !is.numeric(ans)) stop(gettextf("'%s' argument must be numeric", "offset"))
579c594
<                 stop("invalid 'contrasts.arg' argument")
---
>                 stop(gettextf("invalid '%s' argument", "contrasts.arg"))
582,583c597
<                     warning(gettextf("variable '%s' is absent, its contrast will be ignored", nn),
<                             domain = NA)
---
>                     warning(gettextf("variable '%s' is absent, its contrast will be ignored", nn), domain = "R-stats")
608c622
< 		warning('using type = "numeric" with a factor response will be ignored')
---
> 		warning("using type = \"numeric\" with a factor response will be ignored")
621c635
< 	} else stop("invalid 'data' argument")
---
> 	} else stop(gettextf("invalid '%s' argument", "data"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/nafns.R R/src/library/stats/R/nafns.R
31c31
<     if(all(ok)) object else stop("missing values in object")
---
>     if(all(ok)) object else stop(gettextf("missing values in '%s' argument", "object"))
149c149
< 	stop("invalid argument 'omit'")
---
> 	stop(gettextf("invalid '%s' argument", "omit"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/nlm.R R/src/library/stats/R/nlm.R
27c27
< 	stop("'print.level' must be in {0,1,2}")
---
> 	 stop(gettextf("'%s' argument must be 0, 1 or 2", "print.level"))
63c63
<         stop("'interval' must be a vector of length 2")
---
>         stop(gettextf("'%s' argument must be of length %d", "interval", 2))
66,67c66,67
<     if(is.na(f.lower)) stop("f.lower = f(lower) is NA")
<     if(is.na(f.upper)) stop("f.upper = f(upper) is NA")
---
>     if(is.na(f.lower)) stop("'f.lower = f(lower)' is NA")
>     if(is.na(f.upper)) stop("'f.upper = f(upper)' is NA")
73c73
< 		  stop("invalid 'extendInt'; please report"))
---
> 		  stop("invalid 'extendInt' argument; please report"))
82,84c82,87
< 	if(trace)
< 	    cat(sprintf("search in [%g,%g]%s", lower, upper,
< 			if(trace >= 2)"\n" else " ... "))
---
> 	if(trace) {
> 	  if(trace >= 2)
> 	    cat(gettextf("search in [%g,%g]\n", lower, upper, domain = "R-stats"))
> 	  else
> 	    cat(gettextf("search in [%g,%g] ... ", lower, upper, domain = "R-stats"))
> 	}
94,95c97
< 		    stop(gettextf("no sign change found in %d iterations", it-1),
< 			 domain=NA)
---
> 		    stop(gettextf("no sign change found in %d iterations", it-1), domain=NA)
119,120c121
< 		    stop(gettextf("no sign change found in %d iterations", it-1),
< 			 domain=NA)
---
> 		    stop(gettextf("no sign change found in %d iterations", it-1), domain=NA)
128,129c129
< 		    stop(gettextf("no sign change found in %d iterations", it-1),
< 			 domain=NA)
---
> 		    stop(gettextf("no sign change found in %d iterations", it-1), domain=NA)
142c142
< 	     else "f() values at end points not of opposite sign")
---
> 	     else "'f()' values at end points are not of opposite sign")
160,161c160,161
< 			     "_NOT_ converged in %d iteration",
< 			     "_NOT_ converged in %d iterations"),
---
> 			     "'uniroot()' method did _NOT_ converge in %d iteration",
> 			     "'uniroot()' method did _NOT_ converge in %d iterations", domain = "R-stats"),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/nlminb.R R/src/library/stats/R/nlminb.R
22,31c22,31
< 	   "3" = "X-convergence (3)",
< 	   "4" = "relative convergence (4)",
< 	   "5" = "both X-convergence and relative convergence (5)",
< 	   "6" = "absolute function convergence (6)",
< 
< 	   "7" = "singular convergence (7)",
< 	   "8" = "false convergence (8)",
< 	   "9" = "function evaluation limit reached without convergence (9)",
< 	   "10" = "iteration limit reached without convergence (10)",
< 	   "14" = "storage only has been allocated (14)",
---
> 	   "3" = gettext("X-convergence (3)"),
> 	   "4" = gettext("relative convergence (4)"),
> 	   "5" = gettext("both X-convergence and relative convergence (5)"),
> 	   "6" = gettext("absolute function convergence (6)"),
> 
> 	   "7" = gettext("singular convergence (7)"),
> 	   "8" = gettext("false convergence (8)"),
> 	   "9" = gettext("function evaluation limit reached without convergence (9)"),
> 	   "10" = gettext("iteration limit reached without convergence (10)"),
> 	   "14" = gettext("storage only has been allocated (14)"),
33,34c33,34
< 	   "15" = "LIV too small (15)",
< 	   "16" = "LV too small (16)",
---
> 	   "15" = gettext("LIV too small (15)"),
> 	   "16" = gettext("LV too small (16)"),
36,37c36,37
< 	   "63" = "fn cannot be computed at initial par (63)",
< 	   "65" = "gr cannot be computed at initial par (65)",
---
> 	   "63" = gettext("fn cannot be computed at initial par (63)"),
> 	   "65" = gettext("gr cannot be computed at initial par (65)"),
39c39
< 	   "300" = "initial par violates constraints",
---
> 	   "300" = gettext("initial par violates constraints"),
41c41
< 	   sprintf("See PORT documentation.  Code (%d)", iv1))
---
> 	   gettextf("See PORT documentation.  Code (%d)", iv1))
84a85
> 		tmp_n <- paste(sQuote(nms[nap]), collapse = ", ")
87,88c88,89
<                                      "unrecognized control elements named %s ignored"),
<                             paste(sQuote(nms[nap]), collapse = ", ")),
---
>                                      "unrecognized control elements named %s ignored", domain = "R-stats"),
>                             tmp_n),
132c133
< 		 sprintf("'control' component '%s' = %g, is out of range",
---
> 		 gettextf("'control' component '%s' = %g, is out of range",
135c136
< 		 sprintf("V[IV[1]] = V[%d] = %g is out of range (see PORT docu.)",
---
> 		 gettextf("V[IV[1]] = V[%d] = %g is out of range (see PORT docu.)",
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/nls-profile.R R/src/library/stats/R/nls-profile.R
57c57
<                              stop("'params' has wrong length")
---
>                              stop(gettextf("'%s' argument is of the wrong length", "params"))
63c63
<                                  stop("'varying' must be in seq_along(pars)")
---
>                                  stop("'varying' argument must be in 'seq_along(pars)'")
67c67
<                                  stop("'varying' has wrong length")
---
>                                  stop(gettextf("'%s' argument is of the wrong length", "varying"))
93c93
<                      } else stop("invalid argument to 'getProfile'")
---
>                      } else stop("invalid argument passed to 'getProfile()'")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/nls.R R/src/library/stats/R/nls.R
398a399
>             	tmp_n <- paste(nms[nap], collapse = ", ")
401,402c402,403
<                                      "unrecognized control elements named %s ignored"),
<                             paste(nms[nap], collapse = ", ")),
---
>                                      "unrecognized control elements named %s ignored", domain = "R-stats"),
>                             tmp_n),
503,506c504,507
<                 warning("No starting values specified for some parameters.\n",
<                         "Initializing ", paste(sQuote(nnn), collapse=", "),
<                         " to '1.'.\n",
<                         "Consider specifying 'start' or using a selfStart model", domain = NA)
---
> 		tmp_n <- paste(sQuote(nnn), collapse=", ")
>                 warning("No starting values specified for some parameters.", "\n",
>                         gettextf("Initializing %s to '1.'.", tmp_n), "\n",
>                         "Consider specifying 'start' or using a selfStart model", domain = "R-stats", sep = "")
511a513,514
> 		{
> 		tmp_n <- paste(nnn, collapse=", ")
513c516,517
<                               paste(nnn, collapse=", ")), domain = NA)
---
>                               tmp_n), domain = "R-stats")
> 		}
517a522
> 		tmp_n <- paste(sQuote(pnames[np == -1]), collapse=", ")
521,522c526,527
<                                      "fitting parameters %s without any variables"),
<                             paste(sQuote(pnames[np == -1]), collapse=", ")),
---
>                                      "fitting parameters %s without any variables", domain = "R-stats"),
>                             tmp_n),
541c546
<                 warning("argument 'subset' will be ignored")
---
>                 warning(gettextf("'%s' argument will be ignored", "subset"))
543c548
<                 warning("argument 'na.action' will be ignored")
---
>                 warning(gettextf("'%s' argument will be ignored", "na.action"))
598c603
< 	    warning('upper and lower bounds ignored unless algorithm = "port"')
---
> 	    warning("upper and lower bounds ignored unless 'algorithm = \"port\"'")
613c618
< 	    msg <- paste("Convergence failure:", msg.nls)
---
> 	    msg <- gettextf("Convergence failure: %s", msg.nls)
697,698c702
<                  cat("\nAlgorithm \"port\", convergence message: ",
<                      stopMessage, "\n", sep = "")
---
>                  cat("\n", gettext("Algorithm \"port\", convergence message: ", domain = "R-stats"), stopMessage, "\n", sep = "")
701,704c705,711
<                      cat("\nNumber of iterations",
<                          if(isConv) "to convergence:" else "till stop:", finIter,
<                          "\nAchieved convergence tolerance:",
<                          format(finTol, digits = digits))
---
> 		     cat("\n")
> 		     if(isConv)
> 			cat(gettext("Number of iterations to convergence:", domain = "R-stats"), finIter)
> 		     else
> 			cat(gettext("Number of iterations till stop:", domain = "R-stats"), finIter)
> 		     cat("\n")
> 		     cat(gettext("Achieved convergence tolerance:", domain = "R-stats"), format(finTol, digits = digits))
708c715
<                      cat("Reason stopped:", stopMessage)
---
>                      cat(gettext("Reason stopped:", domain = "R-stats"), stopMessage)
719,721c726,728
<     cat("Nonlinear regression model\n")
<     cat("  model: ", deparse(formula(x)), "\n", sep = "")
<     cat("   data: ", deparse(x$data), "\n", sep = "")
---
>     cat(gettext("Nonlinear regression model", domain = "R-stats"), "\n", sep = "")
>     cat("  ", gettext("Model:", domain = "R-stats"), " ", deparse(formula(x)), "\n", sep = "")
>     cat("   ", gettext("Data:", domain = "R-stats"), " ", deparse(x$data), "\n", sep = "")
723,725c730,733
<     cat(" ", if(!is.null(x$weights) && diff(range(x$weights))) "weighted ",
< 	"residual sum-of-squares: ", format(x$m$deviance(), digits = digits),
< 	"\n", sep = "")
---
>     if(!is.null(x$weights) && diff(range(x$weights)))
>     cat(" ", gettext("Weighted residual sum-of-squares:", domain = "R-stats"), " ", format(x$m$deviance(), digits = digits), "\n", sep = "")
>     else
>     cat(" ", gettext("Residual sum-of-squares:", domain = "R-stats"), " ", format(x$m$deviance(), digits = digits), "\n", sep = "")
735c743
<     cat("\nFormula: ",
---
>     cat("\n", gettext("Formula:", domain = "R-stats"), " ",
740c748
<     cat("\nParameters:\n")
---
>     cat("\n", gettext("Parameters:", domain = "R-stats"), "\n", sep = "")
743,744c751
<     cat("\nResidual standard error:",
<         format(signif(x$sigma, digits)), "on", rdf, "degrees of freedom")
---
>     cat("\n", gettextf("Residual standard error: %s on %d degrees of freedom", format(signif(x$sigma, digits)), rdf, domain = "R-stats"), sep = "")
750c757
<             cat("\nCorrelation of Parameter Estimates:\n")
---
>             cat("\n", gettext("Correlation of Parameter Estimates:", domain = "R-stats"), "\n", sep = "")
784c791
<     lab <- "Fitted values"
---
>     lab <- gettext("Fitted values")
800c807
<         attr(val, "label") <- "Standardized residuals"
---
>         attr(val, "label") <- gettext("Standardized residuals")
805c812
<         lab <- "Residuals"
---
>         lab <- gettext("Residuals")
848c855
<     stop("anova is only defined for sequences of \"nls\" objects")
---
>     stop(gettextf("'anova()' function is only defined for sequences of objects of class %s", dQuote("nls")))
861c868
<                 domain = NA)
---
>                 domain = "R-stats")
866c873
<         stop("'anova' is only defined for sequences of \"nls\" objects")
---
>         stop(gettextf("'anova()' function is only defined for sequences of objects of class %s", dQuote("nls")))
894,896c901,902
<     title <- "Analysis of Variance Table\n"
<     topnote <- paste("Model ", format(1L:nmodels),": ",
< 		     models, sep = "", collapse = "\n")
---
>     title <- paste(gettext("Analysis of Variance Table"), "\n", sep = "")
>     topnote <- paste(gettextf("Model %s:", format(1L:nmodels)), " ", models, sep = "", collapse = "\n")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/nlsFunc.R R/src/library/stats/R/nlsFunc.R
39c39
<                           deparse(as.vector(object))), domain = NA)
---
>                           deparse(as.vector(object))), domain = "R-stats")
50c50
<                         stop(gettextf("'%s' cannot be of mode '%s'",
---
>                         stop(gettextf("'%s' argument cannot be of mode '%s'",
52c52
<                              domain = NA)
---
>                              domain = "R-stats")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/optim.R R/src/library/stats/R/optim.R
51,52c51,54
<     if(length(noNms <- namc[!namc %in% nmsC]))
< 	warning("unknown names in control: ", paste(noNms,collapse=", "))
---
>     if(length(noNms <- namc[!namc %in% nmsC])) {
> 	tmp_N <- paste(noNms,collapse=", ")
> 	warning(gettextf("unknown names in control: %s"), tmp_N)
> 	}
63c65
< 	stop('method = "Brent" is only available for one-dimensional optimization')
---
> 	stop("method = \"Brent\" is only available for one-dimensional optimization")
68c70
<            stop("'lower' and 'upper' must be finite values")
---
>            stop("'lower' and 'upper' arguments must be finite values")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/pairwise.R R/src/library/stats/R/pairwise.R
25c25
<     DNAME <- paste(deparse(substitute(x)), "and", deparse(substitute(g)))
---
>     DNAME <- gettextf("%s and %s", paste(deparse(substitute(x)), collapse = ""), paste(deparse(substitute(g)), collapse = ""))
31c31
<         METHOD <- "t tests with pooled SD"
---
>         METHOD <- gettext("t tests with pooled SD", domain = "R-stats")
49,50c49,50
<         METHOD <- if (paired) "paired t tests"
<         else "t tests with non-pooled SD"
---
>         METHOD <- if (paired) gettext("Paired t-tests", domain = "R-stats")
>         else gettext("t tests with non-pooled SD", domain = "R-stats")
70c70
<     DNAME <- paste(deparse(substitute(x)), "and", deparse(substitute(g)))
---
>     DNAME <- gettextf("%s and %s", deparse(substitute(x)), deparse(substitute(g)), domain = "R-stats")
72,73c72,73
<     METHOD <- if (paired) "Wilcoxon signed rank test"
<         else "Wilcoxon rank sum test"
---
>     METHOD <- if (paired) gettext("Wilcoxon signed rank test", domain = "R-stats")
>         else gettext("Wilcoxon rank sum test", domain = "R-stats")
90c90
<     METHOD <- "Pairwise comparison of proportions"
---
>     METHOD <- gettext("Pairwise comparison of proportions", domain = "R-stats")
99c99
<         DNAME <- paste(DNAME, "out of", deparse(substitute(n)))
---
>         DNAME <- gettextf("%s out of %s", deparse(substitute(x)), deparse(substitute(n)), domain = "R-stats")
101c101
<             stop("'x' and 'n' must have the same length")
---
>             stop(gettextf("'%s' and '%s' arguments must have the same length", "x", "n"))
138,139c138,139
<     cat("\n\tPairwise comparisons using", x$method, "\n\n")
<     cat("data: ", x$data.name, "\n\n")
---
>     cat("\n\t", gettextf("Pairwise comparisons using %s", x$method, domain = "R-stats"), "\n\n", sep = "")
>     cat(gettext("Data: ", domain = "R-stats"), x$data.name, "\n\n", sep = "")
143c143
<     cat("\nP value adjustment method:", x$p.adjust.method, "\n")
---
>     cat("\n", gettext("P-value adjustment method: ", domain = "R-stats"), x$p.adjust.method, "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/power.R R/src/library/stats/R/power.R
26c26
< 	stop("exactly one of 'n', 'delta', 'sd', 'power', and 'sig.level' must be NULL")
---
> 	stop(gettextf("exactly one of '%s', '%s', '%s', '%s', and '%s' arguments must be NULL", "n", "delta", "sd", "power", "sig.level"))
29c29
< 	stop("'sig.level' must be numeric in [0, 1]")
---
> 	stop("'sig.level' argument must be numeric in [0, 1]")
66c66
< 	stop("internal error", domain = NA)
---
> 	stop("internal error", domain = "R-stats")
68,69c68,69
< 		   paired = "n is number of *pairs*, sd is std.dev. of *differences* within pairs",
< 		   two.sample = "n is number in *each* group", NULL)
---
> 		   paired = gettext("'n' is number of *pairs*, 'sd' is std.dev. of *differences* within pairs"),
> 		   two.sample = gettext("n is number in *each* group"), NULL)
71,75c71,74
<     METHOD <- paste(switch(type,
< 			   one.sample = "One-sample",
< 			   two.sample = "Two-sample",
< 			   paired = "Paired"),
< 		    "t test power calculation")
---
>     METHOD <- switch(type,
> 			   one.sample = gettext("One-sample t test power calculation"),
> 			   two.sample = gettext("Two-sample t test power calculation"),
> 			   paired = gettext("Paired t test power calculation"))
89c88
< 	stop("exactly one of 'n', 'p1', 'p2', 'power', and 'sig.level' must be NULL")
---
> 	stop(gettextf("exactly one of '%s', '%s', '%s', '%s', and '%s' arguments must be NULL", "n", "p1", "p2", "power", "sig.level"))
92c91
< 	stop("'sig.level' must be numeric in [0, 1]")
---
> 	stop("'sig.level' argument must be numeric in [0, 1]")
134c133
< 	stop("internal error", domain = NA)
---
> 	stop("internal error", domain = "R-stats")
136c135
<     NOTE <- "n is number in *each* group"
---
>     NOTE <- gettext("n is number in *each* group")
138c137
<     METHOD <-  "Two-sample comparison of proportions power calculation"
---
>     METHOD <-  gettext("Two-sample comparison of proportions power calculation")
152,154c151,152
<     cat(paste(format(names(x), width = 15L, justify = "right"),
< 	      format(x), sep = " = "), sep = "\n")
<     if(!is.null(note)) cat("\n", "NOTE: ", note, "\n\n", sep = "") else cat("\n")
---
>     cat(paste(format(names(x), width = 15L, justify = "right"), format(x), sep = " = "), sep = "\n")
>     if(!is.null(note)) cat("\n", gettext("NOTE: ", domain = "R-stats"), note, "\n\n", sep = "") else cat("\n")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/ppr.R R/src/library/stats/R/ppr.R
127c127
< 	cat("Call:\n")
---
> 	cat(gettext("Call:", domain = "R-stats"), "\n", sep = "")
131c131
<     cat("\nGoodness of fit:\n")
---
>     cat("\n", gettext("Goodness of fit:", domain = "R-stats"), "\n", sep = "")
147c147
<     cat("\nProjection direction vectors:\n")
---
>     cat("\n", gettext("Projection direction vectors:", domain = "R-stats"), "\n", sep = "")
149c149
<     cat("\nCoefficients of ridge terms:\n")
---
>     cat("\n", gettext("Coefficients of ridge terms:", domain = "R-stats"), "\n", sep = "")
152c152
< 	cat("\nEquivalent df for ridge terms:\n")
---
> 	cat("\n", gettext("Equivalent df for ridge terms:", domain = "R-stats"), "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/prcomp.R R/src/library/stats/R/prcomp.R
84c84
<     cat("Standard deviations:\n")
---
>     cat(gettext("Standard deviations:", domain = "R-stats"), "\n", sep = "")
86c86
<     cat("\nRotation:\n")
---
>     cat("\n", gettext("Rotation:", domain = "R-stats"), "\n", sep = "")
89c89
<         cat("\nRotated variables:\n")
---
>         cat("\n", gettext("Rotated variables:", domain = "R-stats"), "\n", sep = "")
111c111
<     cat("Importance of components:\n")
---
>     cat(gettext("Importance of components:", domain = "R-stats"), "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/princomp-add.R R/src/library/stats/R/princomp-add.R
52c52
<     cat("Importance of components:\n")
---
>     cat(gettext("Importance of components:", domain = "R-stats"), "\n", sep = "")
57c57
<         cat("\nLoadings:\n")
---
>         cat("\n", gettext("Loadings:", domain = "R-stats"), "\n", sep = "")
83c83
<                 ylab = "Variances", ...)
---
>                 ylab = gettext("Variances"), ...)
86c86
<              xlab = "", ylab = "Variances", ...)
---
>              xlab = "", ylab = gettext("Variances"), ...)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/princomp.R R/src/library/stats/R/princomp.R
119,120c119,120
<     cat("Call:\n"); dput(x$call, control=NULL)
<     cat("\nStandard deviations:\n")
---
>     cat(gettext("Call:", domain = "R-stats"), "\n", sep = ""); dput(x$call, control=NULL)
>     cat("\n", gettext("Standard deviations:", domain = "R-stats"), "\n", sep = "")
122,123c122
<     cat("\n", length(x$scale), " variables and ", x$n.obs,
<         "observations.\n")
---
>     cat("\n", sprintf(ngettext(length(x$scale), "%d variable and", "%d variables and", domain = "R-stats"), length(x$scale)), " ", sprintf(ngettext(x$n.obs, "%d observation.", "%d observations.", domain = "R-stats"), x$n.obs), "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/proj.R R/src/library/stats/R/proj.R
39c39
< 	stop("'proj' is not implemented for multiple responses")
---
> 	stop("'proj()' is not implemented for multiple responses")
49c49
< 	    nmeffect <- c("(Intercept)",
---
> 	    nmeffect <- c(gettext("(Intercept)", domain = "R-stats"),
93c93
< 	stop("'proj' is not implemented for multiple responses")
---
> 	stop("'proj()' is not implemented for multiple responses")
96c96
< 	if(!is.na(int <- match("(Intercept)", pnames)))
---
> 	if(!is.na(int <- match(gettext("(Intercept)", domain = "R-stats"), pnames)))
108c108,112
< 	if(!is.na(int)) result <- c("(Intercept)" = "(Intercept)", result)
---
> 	if(!is.na(int)) {
> 	  aaa <- gettext("(Intercept)", domain = "R-stats");
> 	  names(aaa) <- gettext("(Intercept)", domain = "R-stats");
> 	  result <- c(aaa, result)
> 	}
141c145
< 	if(!is.na(int <- match("(Intercept)", pnames))) pnames <- pnames[-int]
---
> 	if(!is.na(int <- match(gettext("(Intercept)", domain = "R-stats"), pnames))) pnames <- pnames[-int]
156,157c160,164
< 	if(!is.na(int))
< 	    result <- c("(Intercept)" = "(Intercept)", result)
---
> 	if(!is.na(int)) {
> 	    aaa <- gettext("(Intercept)", domain = "R-stats")
> 	    names(aaa) <- gettext("(Intercept)", domain = "R-stats")
> 	    result <- c(aaa, result)
> 	}
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/qqnorm.R R/src/library/stats/R/qqnorm.R
22,23c22,23
<     function(y, ylim, main = "Normal Q-Q Plot",
< 	     xlab = "Theoretical Quantiles", ylab = "Sample Quantiles",
---
>     function(y, ylim, main = gettext("Normal Q-Q Plot"),
> 	     xlab = gettext("Theoretical Quantiles"), ylab = gettext("Sample Quantiles"),
31c31
<         stop("y is empty or has only NAs")
---
>         stop("'y' argument is empty or has only NA values")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/quantile.R R/src/library/stats/R/quantile.R
39c39
< 	stop("'probs' outside [0,1]")
---
> 	stop(gettextf("'%s' argument is outside [0,1]", "probs"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/r2dtable.R R/src/library/stats/R/r2dtable.R
22c22
< 	stop("invalid argument 'n'")
---
> 	stop(gettextf("invalid '%s' argument", "n"))
24c24
< 	stop("invalid argument 'r'")
---
> 	stop(gettextf("invalid '%s' argument", "r"))
26c26
< 	stop("invalid argument 'c'")
---
> 	stop(gettextf("invalid '%s' argument", "c"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/relevel.R R/src/library/stats/R/relevel.R
31c31
<         stop("'ref' must be of length one")
---
>         stop(gettextf("'%s' argument must be of length %d", "ref", 1))
38c38
<         stop(gettextf("ref = %d must be in 1L:%d", ref, nlev), domain = NA)
---
>         stop(gettextf("ref = %d must be in 1L:%d", ref, nlev), domain = "R-stats")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/reshape.R R/src/library/stats/R/reshape.R
66c66
<             if (ll[1L] != length(times)) stop("'times' is wrong length")
---
>             if (ll[1L] != length(times)) stop(gettextf("'%s' argument is of the wrong length", "times"))
176c176,177
<             if (!all(really.constant))
---
>             if (!all(really.constant)) {
> 		tmp_N <- paste(names(rval)[!really.constant],collapse = ",")
178c179,180
<                                  paste(names(rval)[!really.constant],collapse = ",")), domain = NA)
---
>                                  tmp_N), domain = NA)
> 		}
188c190
<                 warning(sprintf("multiple rows match for %s=%s: first taken",
---
>                 warning(gettextf("multiple rows match for %s=%s: first taken",
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/runmed.R R/src/library/stats/R/runmed.R
28c28
<     if(is.na(n)) stop("invalid value of length(x)")
---
>     if(is.na(n)) stop(gettextf("invalid '%s' value", "length(x)"))
30,31c30,31
<     if(is.na(k)) stop("invalid value of 'k'")
<     if(k < 0L) stop("'k' must be positive")
---
>     if(is.na(k)) stop(gettextf("invalid '%s' value", "k"))
>     if(k < 0L) stop(gettextf("'%s' argument must be positive", "k"))
33,34c33
<         warning(gettextf("'k' must be odd!  Changing 'k' to %d",
<                          k <- as.integer(1+ 2*(k %/% 2))), domain = NA)
---
>         warning(gettextf("'k' must be odd!  Changing 'k' to %d", k <- as.integer(1+ 2*(k %/% 2))), domain = NA)
40,41c39
<         warning(gettextf("'k' is bigger than 'n'!  Changing 'k' to %d",
<                          k <- as.integer(1+ 2*((n - 1)%/% 2))), domain = NA)
---
>         warning(gettextf("'k' is bigger than 'n'!  Changing 'k' to %d", k <- as.integer(1+ 2*((n - 1)%/% 2))), domain = NA)
54,55c52
<         cat("runmed(*, endrule=", endrule,", algorithm=",algorithm,
<             ", iend=",iend,")\n")
---
>         cat("runmed(*, endrule=", endrule,", algorithm=",algorithm, ", iend=",iend,")\n")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/selfStart.R R/src/library/stats/R/selfStart.R
47c47
<                        "parameters %s do not occur in the model formula"),
---
>                        "parameters %s do not occur in the model formula", domain = "R-stats"),
106,107c106
<         stop("old-style self-starting model functions\n",
<              "are no longer supported.\n",
---
>         stop("old-style self-starting model functions are no longer supported.\n",
109,116c108,109
<              "Use\n",
<              "  SSfpl instead of fpl,\n",
<              "  SSfol instead of first.order.log,\n",
<              "  SSbiexp instead of biexp,\n",
<              "  SSlogis instead of logistic.\n",
<              "If writing your own selfStart model, see\n",
<              "  \"help(selfStart)\"\n",
<              "for the new form of the \"initial\" attribute.", domain = NA)
---
>              "Use\n  SSfpl instead of fpl,\n  SSfol instead of first.order.log,\n  SSbiexp instead of biexp,\n  SSlogis instead of logistic.\n",
>              "If writing your own selfStart model, see \"help(selfStart)\" for the new form of the \"initial\" attribute.", domain = "R-stats")
118,119c111
<     stop(gettextf("no 'getInitial' method found for \"%s\" objects",
<                   data.class(object)), domain = NA)
---
>     stop(gettextf("no 'getInitial' method found for %s objects", dQuote(data.class(object))), domain = "R-stats")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/smooth.R R/src/library/stats/R/smooth.R
29c29
<     if(is.na(iend <- pmatch(endrule, rules))) stop("invalid 'endrule' argument")
---
>     if(is.na(iend <- pmatch(endrule, rules))) stop(gettextf("invalid '%s' argument", "endrule"))
31c31
<     if(is.na(n)) stop("invalid length(x)")
---
>     if(is.na(n)) stop(gettextf("invalid '%s' value", "length(x)"))
59,63c59,71
<     cat(attr(x,"kind"), "Tukey smoother resulting from ",
< 	deparse(attr(x, "call")),"\n")
<     if(attr(x,"twiced"))		cat(" __twiced__ ")
<     if(!is.null(it <- attr(x,"iter")))		cat(" used", it, "iterations\n")
<     if(!is.null(ch <- attr(x,"changed")))	cat(if(!ch)"NOT", "changed\n")
---
>     cat(gettextf("%s Tukey smoother resulting from %s", attr(x,"kind"), sQuote(paste(deparse(attr(x, "call")), collapse = "")), domain = "R-stats"),"\n", sep = "")
>     if(attr(x,"twiced")) {
>       if(!is.null(it <- attr(x,"iter")))		cat(sprintf(ngettext(it, "__twiced__ used %d iteration", "__twiced__ used %d iterations", domain = "R-stats"), it), "\n", sep = "")
>       if(is.null(it <- attr(x,"iter")) && !is.null(ch <- attr(x,"changed"))) {
> 	 if(!ch) cat(gettext("__twiced__ NOT changed:", domain = "R-stats"), "\n", sep = "")
> 	 else cat(gettext("__twiced__ changed:", domain = "R-stats"), "\n", sep = "")
> 	 }
>     else if(!is.null(ch <- attr(x,"changed"))) if(!ch) cat(gettext("NOT changed:", domain = "R-stats"), "\n", sep = "") else cat(gettext("changed:", domain = "R-stats"), "\n", sep = "")
>     } else {
>      if(!is.null(it <- attr(x,"iter")))		cat(sprintf(ngettext(it, " used %d iteration", " used %d iterations", domain = "R-stats"), it), "\n", sep = "")
>      if(!is.null(ch <- attr(x,"changed")))	if(!ch) cat(gettext("NOT changed:", domain = "R-stats"), "\n", sep = "") else cat(gettext("changed:", domain = "R-stats"), "\n", sep = "")
>     }
> 
75,79c83,95
<     cat(attr(object,"kind"), "Tukey smoother resulting from\n",
< 	deparse(attr(object, "call")),";  n =", length(object),"\n")
<     if(attr(object,"twiced"))		cat(" __twiced__ ")
<     if(!is.null(it <- attr(object,"iter")))	cat(" used", it, "iterations\n")
<     if(!is.null(ch <- attr(object,"changed")))	cat(if(!ch)" NOT", "changed\n")
---
>     cat(gettextf("%s Tukey smoother resulting from %s", attr(object,"kind"), sQuote(paste(deparse(attr(object, "call")), collapse = "")), domain = "R-stats"), ";  n = ", length(object), "\n", sep = "")
>     if(attr(object,"twiced")) {
>       if(!is.null(it <- attr(object,"iter")))		cat(sprintf(ngettext(it, "__twiced__ used %d iteration", "__twiced__ used %d iterations", domain = "R-stats"), it), "\n", sep = "")
>       if(is.null(it <- attr(object,"iter")) && !is.null(ch <- attr(object,"changed"))) {
> 	 if(!ch) cat(gettext("__twiced__ NOT changed:", domain = "R-stats"), "\n", sep = "")
> 	 else cat(gettext("__twiced__ changed:", domain = "R-stats"), "\n", sep = "")
> 	 }
>     else if(!is.null(ch <- attr(object,"changed"))) if(!ch) cat(gettext("NOT changed:", domain = "R-stats"), "\n", sep = "") else cat(gettext("changed:", domain = "R-stats"), "\n", sep = "")
>     } else {
>      if(!is.null(it <- attr(object,"iter")))		cat(sprintf(ngettext(it, " used %d iteration", " used %d iterations", domain = "R-stats"), it), "\n", sep = "")
>      if(!is.null(ch <- attr(object,"changed")))	if(!ch) cat(gettext("NOT changed:", domain = "R-stats"), "\n", sep = "") else cat(gettext("changed:", domain = "R-stats"), "\n", sep = "")
>     }
> 
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/smspline.R R/src/library/stats/R/smspline.R
34c34
<     message(".nknots.smspl() is now exported; use it instead of n.knots()")
---
>     message("'.nknots.smspl()' is now exported; use it instead of 'n.knots()'")
52c52
<         stop("invalid 'control.spar'")
---
>         stop(gettextf("invalid '%s' value", "control.spar"))
64c64
< 	    if(n != length(w)) stop("lengths of 'x' and 'w' must match")
---
> 	    if(n != length(w)) stop(gettextf("lengths of '%s' and '%s' arguments must match", "x", "w"))
98c98
< 	stop("'cv' must not be NA when 'df' is specified")
---
> 	stop("'cv' argument must not be NA when 'df' argument is specified")
106c106
<             warning("'all.knots' is TRUE; 'nknots' specification is disregarded")
---
>             warning("'all.knots' argument is TRUE; 'nknots' specification is disregarded")
116c116
< 	    stop("'nknots' must be at least 1")
---
> 	    stop(gettextf("'%s' argument must be at least %d", "nknots", 1))
133c133
<     if(length(spar) != 1) stop("'spar' must be of length 1")
---
>     if(length(spar) != 1) stop(gettextf("'%s' argument must be of length %d", "spar", 1))
145c145
< 	} else warning("you must supply 1 < df <= n,  n = #{unique x} = ", nx)
---
> 	} else warning(gettextf("you must supply 1 < df <= n,  n = #{unique x} = %d", nx))
182c182
< 	    stop("NA lev[]; probably smoothing parameter 'spar' way too large!")
---
> 	    stop("NA lev[]; probably smoothing parameter 'spar' is way too large!")
186,187c186,189
< 	wtxt <- paste("smoothing parameter value too",
<                       if(sml) "small" else "large")
---
> 	if(sml)
> 	 wtxt <- gettext("smoothing parameter value is too small")
> 	else
> 	 wtxt <- gettext("smoothing parameter value is too large")
194c196
<             warning(wtxt,"\nsetting df = 1  __use with care!__")
---
>             warning(wtxt,"\n", "setting df = 1  __use with care!__", sep = "")
224c226
<         stop("need result of smooth.spline(keep.data = TRUE)")
---
>         stop("need result of 'smooth.spline(keep.data = TRUE)'")
235c237
<         stop("need result of smooth.spline(keep.data = TRUE)")
---
>         stop("need result of 'smooth.spline(keep.data = TRUE)'")
246c248
<         stop('type = "partial" is not yet implemented')
---
>         stop("'type = \"partial\"' is not yet implemented")
255c257
< 	cat("Call:\n")
---
> 	cat(gettext("Call:", domain = "R-stats"), "\n", sep = "")
261,263c263,267
<     cat("\nSmoothing Parameter  spar=", format(x$spar, digits=digits),
<         " lambda=", format(x$lambda, digits=digits),
<         if(ip["ispar"] != 1L) paste0("(", ip["iter"], " iterations)"))
---
>       if(ip["ispar"] != 1L) cat("\n", sprintf(ngettext(ip["iter"], "Smoothing Parameter  spar=%s lambda=%s (%d iteration)", "Smoothing Parameter  spar=%s lambda=%s (%d iterations)", domain = "R-stats"), format(x$spar, digits=digits),
> 			 format(x$lambda, digits=digits), ip["iter"]), sep = "")
>       else
>       cat("\n", gettextf("Smoothing Parameter  spar=%s lambda=%s", format(x$spar, digits=digits), format(x$lambda, digits=digits), domain = "R-stats"), sep = "")
>      
265c269
<     cat("Equivalent Degrees of Freedom (Df):", format(x$df,digits=digits))
---
>     cat(gettextf("Equivalent Degrees of Freedom (Df): %s", format(x$df,digits=digits), domain = "R-stats"))
267c271
<     cat("Penalized Criterion:", format(x$pen.crit, digits=digits))
---
>     cat(gettextf("Penalized Criterion: %s", format(x$pen.crit, digits=digits), domain = "R-stats"))
270,271c274
<         cat(if(cv) "PRESS: " else "GCV: ",
<             format(x$cv.crit, digits = digits), "\n", sep = "")
---
>         cat(if(cv) "PRESS: " else "GCV: ", format(x$cv.crit, digits = digits), "\n", sep = "")
283c286
<     if(is.null(fit)) stop("not a valid \"smooth.spline\" object")
---
>     if(is.null(fit)) stop(gettextf("'%s' argument is not an object of class %s", "object", dQuote("smooth.spline")))
335,336c338,339
<     if(!n || !is.numeric(y)) stop("'y' must be numeric vector")
<     if(length(x) != n) stop("number of observations in 'x' and 'y' must match.")
---
>     if(!n || !is.numeric(y)) stop(gettextf("'%s' argument must be a numeric vector", "y"))
>     if(length(x) != n) stop("number of observations in 'x' and 'y' arguments must match")
338,339c341,342
< 	stop("number of weights must match number of observations.")
<     if(span < 0 || span > 1) stop("'span' must be between 0 and 1.")
---
> 	stop("number of weights must match number of observations")
>     if(span < 0 || span > 1) stop(gettextf("'%s' argument must be between %s and %s", "span", "0", "1"))
356c359
<                                  "%d observations with NAs, NaNs and/or Infs deleted"),
---
>                                  "%d observations with NAs, NaNs and/or Infs deleted", domain = "R-stats"),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/spectrum.R R/src/library/stats/R/spectrum.R
33c33
<         stop("'p' must be between 0 and 0.5")
---
>         stop(gettextf("'%s' argument must be between %s and %s", "p", "0", "0.5"))
228c228
<         ylab <- if(log == "dB") "spectrum (dB)" else "spectrum"
---
>         ylab <- if(log == "dB") gettext("spectrum (dB)") else gettext("spectrum")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/spline.R R/src/library/stats/R/spline.R
35c35
<     if(is.na(nx)) stop("invalid value of length(x)")
---
>     if(is.na(nx)) stop(gettextf("invalid '%s' value", "length(x)"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/splinefun.R R/src/library/stats/R/splinefun.R
31c31
<     if(is.na(nx)) stop("invalid value of length(x)")
---
>     if(is.na(nx)) stop(gettextf("invalid '%s' value", "length(x)"))
67c67
< 	    stop("'deriv' must be between 0 and 3")
---
> 	    stop(gettextf("'%s' argument must be between %s and %s", "deriv", "0", "3"))
106c106
< 	    stop("'deriv' must be between 0 and 3")
---
> 	    stop(gettextf("'%s' argument must be between %s and %s", "deriv", "0", "3"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/stepfun.R R/src/library/stats/R/stepfun.R
33c33
<     if(n < 1) stop("'x' must have length >= 1")
---
>     if(n < 1) stop(gettextf("'%s' argument must have length >= %d", "x", 1))
62c62
<     cat("Step function\nCall: ")
---
>     cat(gettext("Step function", domain = "R-stats"), "\n", gettext("Call: ", domain = "R-stats"), sep = "")
66,67c66
<     cat(" x[1:", n, "] = ", numform(xx[i1(n)]),
< 	if(n > 3L) ", ", if(n > 5L) " ..., ", numform(xx[i2(n)]), "\n", sep = "")
---
>     cat(" x[1:", n, "] = ", numform(xx[i1(n)]), if(n > 3L) ", ", if(n > 5L) " ..., ", numform(xx[i2(n)]), "\n", sep = "")
69,71c68
<     cat(n+1L, " plateau levels = ", numform(y[i1(n+1L)]),
< 	if(n+1L > 3L) ", ", if(n+1L > 5L) " ..., ", numform(y[i2(n+1L)]), "\n",
< 	sep = "")
---
>     cat(n+1L, " plateau levels = ", numform(y[i1(n+1L)]), if(n+1L > 3L) ", ", if(n+1L > 5L) " ..., ", numform(y[i2(n+1L)]), "\n", sep = "")
79,81c76,80
<     cat("Step function with continuity 'f'=",
< 	format(eval(expression(f), envir = environment(object))),
< 	", ", n, if(n <= 6L) "knots at\n" else "knots with summary\n")
---
>     if(n <= 6L) {
>       cat(sprintf(ngettext(n, "Step function with continuity 'f'=%s, %d knot at:", "Step function with continuity 'f'=%s, %d knots at:", domain = "R-stats"), format(eval(expression(f), envir = environment(object))), n), "\n", sep = "")
>     } else {
>       cat(sprintf(ngettext(n, "Step function with continuity 'f'=%s, %d knot with summary:", "Step function with continuity 'f'=%s, %d knots with summary:", domain = "R-stats"), format(eval(expression(f), envir = environment(object))), n), "\n", sep = "")
>     }
84,86c83
<     cat(if(n > 6L) "\n" else "  ", "and	", n+1L,
<         " plateau levels (y) ", if(n <= 6L) "at\n" else "with summary\n",
<         sep  = "")
---
>     cat(if(n > 6L) "\n" else "  ", "and	", n+1L, " plateau levels (y) ", if(n <= 6L) "at\n" else "with summary\n", sep  = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/stl.R R/src/library/stats/R/stl.R
39c39
< 	if(deg < 0 || deg > 1) stop(gettextf("%s must be 0 or 1", degname), domain = NA)
---
> 	if(deg < 0 || deg > 1) stop(gettextf("%s must be 0 or 1", degname))
45c45
<     if (is.na(n)) stop("invalid length(x)")
---
>     if (is.na(n)) stop(gettextf("invalid '%s' value", "length(x)"))
52c52
< 	    stop("unknown string value for s.window")
---
> 	    stop("unknown string value for 's.window' argument")
99c99
<     cat(" Call:\n ")
---
>     cat(gettext(" Call:", domain = "R-stats"), "\n", sep = "")
101c101
<     cat("\nComponents\n")
---
>     cat("\n", gettext("Components", domain = "R-stats"), "\n", sep = "")
108c108
<     cat(" Call:\n ")
---
>     cat(gettext(" Call:", domain = "R-stats"), "\n", sep = "")
110c110
<     cat("\n Time.series components:\n")
---
>     cat("\n ", gettext("Time.series components:", domain = "R-stats"), "\n", sep = "")
112,120c112,116
<     cat(" IQR:\n")
<     iqr <- apply(cbind(STL = object$time.series,
<                        data = object$time.series %*% rep(1,3)),
< 		 2L, IQR)
<     print(rbind(format(iqr, digits = max(2L, digits - 3L)),
< 		"   %"= format(round(100 * iqr / iqr["data"], 1))),
< 	  quote = FALSE)
<     cat("\n Weights:")
<     if(all(object$weights == 1)) cat(" all == 1\n")
---
>     cat(gettext(" IQR:", domain = "R-stats"), "\n", sep = "")
>     iqr <- apply(cbind(STL = object$time.series, data = object$time.series %*% rep(1,3)), 2L, IQR)
>     print(rbind(format(iqr, digits = max(2L, digits - 3L)), "   %"= format(round(100 * iqr / iqr["data"], 1))), quote = FALSE)
>     cat("\n ", gettext("Weights:", domain = "R-stats"), sep = "")
>     if(all(object$weights == 1)) cat(gettext(" all == 1", domain = "R-stats"), "\n", sep = "")
122c118
<     cat("\n Other components: ")
---
>     cat("\n ", gettext("Other components: ", domain = "R-stats"), sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/symnum.R R/src/library/stats/R/symnum.R
42,44c42,46
< 	    stop(if(corr) gettext("'cutpoints' must be unique in 0 < cuts < 1, but are = ")
<                  else gettext("'cutpoints' must be unique, but are = "),
<                  paste(format(cutpoints), collapse="|"), domain = NA)
---
> 	    {
> 		tmp_n <- paste(format(cutpoints), collapse="|")
> 	     if(corr) stop(gettextf("'cutpoints' must be unique in 0 < cuts < 1, but are = %s", tmp_n), domain = "R-stats")
>              else stop(gettextf("'%s' must be unique, but are = %s", "cutpoints", tmp_n), domain = "R-stats")
> 	    }
48,50c50,51
< 	range.msg <- if(corr) gettext("'x' must be between -1 and 1")
<         else gettextf("'x' must be between %s and %s",
<                       format(minc), format(maxc))
---
> 	range.msg <- if(corr) gettextf("'%s' argument must be between %s and %s", "x", "-1", "1")
>         else gettextf("'%s' argument must be between %s and %s", "x", format(minc), format(maxc))
53,54c54,55
< 	    if(any(x < minc - eps, na.rm=TRUE)) stop(range.msg, domain = NA)
< 	if (   any(x > maxc + eps, na.rm=TRUE)) stop(range.msg, domain = NA)
---
> 	    if(any(x < minc - eps, na.rm=TRUE)) stop(range.msg, domain = "R-stats")
> 	if (   any(x > maxc + eps, na.rm=TRUE)) stop(range.msg, domain = "R-stats")
58,60c59,62
< 	if(anyDuplicated(symbols))
< 	    stop("'symbols' must be unique, but are = ",
<                  paste(symbols, collapse="|"), domain = NA)
---
> 	if(anyDuplicated(symbols)) {
> 		tmp_n <- paste(format(cutpoints), collapse="|")
> 	    stop(gettextf("'%s' must be unique, but are = %s", "symbols", tmp_n), domain = "R-stats")
> 	}
110c112
< 	else if(!is.logical(abbr.colnames)) stop("invalid 'abbr.colnames'")
---
> 	else if(!is.logical(abbr.colnames)) stop(gettextf("invalid '%s' value", "abbr.colnames'"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/termplot.R R/src/library/stats/R/termplot.R
51c51
<                 domain = NA, immediate. = TRUE)
---
>                 domain = "R-stats", immediate. = TRUE)
57c57
< 	ylabs <- paste("Partial for",nmt)
---
> 	ylabs <- gettextf("Partial for %s",nmt)
118c118
< 	ylabs <- paste("Partial for",nmt)
---
> 	ylabs <- gettextf("Partial for %s",nmt)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/ts-tests.R R/src/library/stats/R/ts-tests.R
31c31
<         METHOD <- "Box-Pierce test"
---
>         METHOD <- gettext("Box-Pierce test")
37c37
<         METHOD <- "Box-Ljung test"
---
>         METHOD <- gettext("Box-Ljung test")
41c41
<     names(STATISTIC) <- "X-squared"
---
>     names(STATISTIC) <- gettext("X-squared")
93,95c93,95
<     METHOD <- "Phillips-Perron Unit Root Test"
<     names(STAT) <- "Dickey-Fuller"
<     names(PARAMETER) <- "Truncation lag parameter"
---
>     METHOD <- gettext("Phillips-Perron Unit Root Test")
>     names(STAT) <- gettext("Dickey-Fuller")
>     names(PARAMETER) <- gettext("Truncation lag parameter")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/ts.R R/src/library/stats/R/ts.R
247c247
<         stop("bad value for 'lag' or 'differences'")
---
>         stop("bad value for 'lag' or 'differences' arguments")
289c289
<     if(anyNA(object)) stop("time series contains internal NAs")
---
>     if(anyNA(object)) stop("time series contains internal NA values")
372,374c372
<             cat("Time Series:\nStart =", deparse(start(x)),
<                 "\nEnd =", deparse(end(x)),
<                 "\nFrequency =", deparse(fr.x), "\n")
---
> 			cat(gettextf("Time Series:\nStart = %s\nEnd = %s\nFrequency = %s", deparse(start(x)), deparse(end(x)), deparse(fr.x), domain = "R-stats"), "\n", sep = "")
376,378c374
<             cat("Time Series:\nStart =", format(tsp(x)[1L]),
<                 "\nEnd =", format(tsp(x)[2L]),
<                 "\nFrequency =", deparse(fr.x), "\n")
---
> 		cat(gettextf("Time Series:\nStart = %s\nEnd = %s\nFrequency = %s", format(tsp(x)[1L]), format(tsp(x)[2L]), deparse(fr.x), domain = "R-stats"), "\n", sep = "")
395,396c391
<         warning(gettextf("series is corrupt: length %d with 'tsp' implying %d",
<                          NROW(x), nn), domain=NA, call.=FALSE)
---
>         warning(gettextf("series is corrupt: length %d with 'tsp' implying %d", NROW(x), nn), domain = "R-stats", call.=FALSE)
458c453
< 		  xlab = "Time", ylab, log = "", col = par("col"), bg = NA,
---
> 		  xlab = gettext("Time", domain = "R-stats"), ylab, log = "", col = par("col"), bg = NA,
629c624
<         stop("'frequency' and 'deltat' are both supplied and are inconsistent")
---
>         stop("'frequency' and 'deltat' arguments are both supplied and are inconsistent")
639c634
<         warning("'frequency' not changed")
---
>         warning("'frequency' argument was not changed")
649c644
< 	warning("'start' value not changed")
---
> 	warning("'start' argument was not changed")
657c652
< 		stop("bad value for 'end'"))
---
> 		stop("bad value for 'end' argument"))
660c655
< 	warning("'end' value not changed")
---
> 	warning("'end' argument was not changed")
764,765c759
<     pars <- c("xlab", "ylab", "xlim", "ylim", "col", "lty", "lwd",
<               "type", "main", "sub", "log")
---
>     pars <- c("xlab", "ylab", "xlim", "ylim", "col", "lty", "lwd", "type", "main", "sub", "log")
781,782c775,776
<     if(!is.list(model)) stop("'model' must be list")
<     if(n <= 0L) stop("'n' must be strictly positive")
---
>     if(!is.list(model)) stop(gettextf("'%s' argument must be a list", "model"))
>     if(n <= 0L) stop("'n' argument must be strictly positive")
803,804c797,798
<                               "'start.innov' is too short: need %d point",
<                               "'start.innov' is too short: need %d points"),
---
>                               "'start.innov' argument is too short: need %d point",
>                               "'start.innov' argument is too short: need %d points", domain = "R-stats"),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/R/xtabs.R R/src/library/stats/R/xtabs.R
29c29
< 	    stop("'formula' missing or incorrect")
---
> 	    stop(gettextf("'%s' argument is missing or incorrect", "formula"))
78c78
<                  domain = NA)
---
>                  domain = "R-stats")
83c83
<                  domain = NA)
---
>                  domain = "R-stats")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/man/contrast.Rd R/src/library/stats/man/contrast.Rd
18c18
< contr.poly(n, scores = 1:n, contrasts = TRUE, sparse = FALSE)
---
> contr.poly(n, scores = seq_len(n), contrasts = TRUE, sparse = FALSE)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/man/cpgram.Rd R/src/library/stats/man/cpgram.Rd
19c19
<        main = paste("Series: ", deparse(substitute(ts))),
---
>        main = paste(gettext("Series: ", domain = "R-stats"), deparse(substitute(ts))),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/man/hclust.Rd R/src/library/stats/man/hclust.Rd
20,21c20,21
<      main = "Cluster Dendrogram",
<      sub = NULL, xlab = NULL, ylab = "Height", \dots)
---
>      main = gettext("Cluster Dendrogram"),
>      sub = NULL, xlab = NULL, ylab = gettext("Height"), \dots)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/man/plot.HoltWinters.Rd R/src/library/stats/man/plot.HoltWinters.Rd
19,20c19,20
<         ylab = "Observed / Fitted",
<         main = "Holt-Winters filtering",
---
>         ylab = gettext("Observed / Fitted"),
>         main = gettext("Holt-Winters filtering"),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/man/plot.isoreg.Rd R/src/library/stats/man/plot.isoreg.Rd
16,17c16,17
<       main = paste("Isotonic regression", deparse(x$call)),
<       main2 = "Cumulative Data and Convex Minorant",
---
>       main = gettextf("Isotonic regression \%s", paste(deparse(x$call), collapse = ""), domain = "R-stats"),
>       main2 = gettext("Cumulative Data and Convex Minorant", domain = "R-stats"),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/man/printCoefmat.Rd R/src/library/stats/man/printCoefmat.Rd
21c21
<              cs.ind = 1L:k, tst.ind = k + 1L,
---
>              cs.ind = seq_len(k), tst.ind = k + 1L,
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/man/qqnorm.Rd R/src/library/stats/man/qqnorm.Rd
10,11c10,11
< \method{qqnorm}{default}(y, ylim, main = "Normal Q-Q Plot",
<        xlab = "Theoretical Quantiles", ylab = "Sample Quantiles",
---
> \method{qqnorm}{default}(y, ylim, main = gettext("Normal Q-Q Plot"),
>        xlab = gettext("Theoretical Quantiles"), ylab = gettext("Sample Quantiles"),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/Srunmed.c R/src/library/stats/src/Srunmed.c
24c24
< 
---
> #include "localization.h"
198c198
<     if (TYPEOF(x) != REALSXP) error("numeric 'x' required");
---
>     if (TYPEOF(x) != REALSXP) error(_("numeric 'x' required"));
205c205
< 	    error("long vectors are not supported for algorithm = \"Turlach\"");
---
> 	    error(_("long vectors are not supported for algorithm = \"Turlach\""));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/Trunmed.c R/src/library/stats/src/Trunmed.c
45a46
> #include "localization.h"
371c372
< 	Rprintf("After inittree():\n");
---
> 	Rprintf(_("After inittree():\n"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/ansari.c R/src/library/stats/src/ansari.c
27a28
> #include "localization.h"
116c117
< 	    error(_("probabilities outside [0,1] in qansari()"));
---
> 	    error(_("probabilities outside [0,1] in 'qansari()' function"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/approx.c R/src/library/stats/src/approx.c
28,34c28
< 
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("stats", String)
< #else
< #define _(String) (String)
< #endif
---
> #include "localization.h"
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/arima.c R/src/library/stats/src/arima.c
27a28
> #include <R_ext/Minmax.h>
29a31
> #include "localization.h"
31,36d32
< #ifndef max
< #define max(a,b) ((a < b)?(b):(a))
< #endif
< #ifndef min
< #define min(a,b) ((a < b)?(a):(b))
< #endif
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/bandwidths.c R/src/library/stats/src/bandwidths.c
24,36c24,25
< 
< // or include "stats.h"
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("stats", String)
< #else
< #define _(String) (String)
< #endif
< 
< #ifndef max
< #  define max(a,b) ((a) > (b) ? (a) : (b))
< #  define min(a,b) ((a) < (b) ? (a) : (b))
< #endif
---
> #include <R_ext/Minmax.h>
> #include "localization.h"
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/complete_cases.c R/src/library/stats/src/complete_cases.c
25a26
> #include "localization.h"
27,34d27
< 
< #undef _
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("stats", String)
< #else
< #define _(String) (String)
< #endif
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/cov.c R/src/library/stats/src/cov.c
33a34
> #include "localization.h"
35,41d35
< #undef _
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("stats", String)
< #else
< #define _(String) (String)
< #endif
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/deriv.c R/src/library/stats/src/deriv.c
30,36c30
< #undef _
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("stats", String)
< #else
< #define _(String) (String)
< #endif
---
> #include "localization.h"
386c380
< 		error("only single-argument calls are supported");
---
> 		error(_("only single-argument calls are supported"));
535,536c529
< 	    error(_("Function '%s' is not in the derivatives table"),
< 		  translateChar(STRING_ELT(u, 0)));
---
> 	    error(_("Function '%s' is not in the derivatives table"), translateChar(STRING_ELT(u, 0)));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/distance.c R/src/library/stats/src/distance.c
31a32
> #include "localization.h"
226c227
< 	    error(_("distance(): invalid p"));
---
> 	    error(_("'distance()': invalid 'p' argument"));
229c230
< 	error(_("distance(): invalid distance"));
---
> 	error(_("'distance()': invalid distance"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/distn.c R/src/library/stats/src/distn.c
29,36c29
< 
< #undef _
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("stats", String)
< #else
< #define _(String) (String)
< #endif
---
> #include "localization.h"
41,42c34,35
< #define R_MSG_NA	_("NaNs produced")
< #define R_MSG_NONNUM_MATH _("Non-numeric argument to mathematical function")
---
> #define R_MSG_NA	_("NaN values produced")
> #define R_MSG_NONNUM_MATH _("Non-numeric argument passed to mathematical function")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/family.c R/src/library/stats/src/family.c
28a29
> #include "localization.h"
65c66
< 	error(_("Argument %s must be a nonempty numeric vector"), "mu");
---
> 	error(_("'%s' argument must be a nonempty numeric vector"), "mu");
79c80
< 	error(_("Argument %s must be a nonempty numeric vector"), "eta");
---
> 	error(_("'%s' argument must be a nonempty numeric vector"), "eta");
97c98
< 	error(_("Argument %s must be a nonempty numeric vector"), "eta");
---
> 	error(_("'%s' argument must be a nonempty numeric vector"), "eta");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/fexact.c R/src/library/stats/src/fexact.c
35a36
> #include "localization.h"
204c205
< 	prterr(1, "NROW must be less than or equal to LDTABL.");
---
> 	prterr(1, _("NROW must be less than or equal to LDTABL."));
210c211
< 		prterr(2, "All elements of TABLE may not be negative.");
---
> 		prterr(2, _("All elements of TABLE may not be negative."));
215,216c216
< 	prterr(3, "All elements of TABLE are zero.\n"
< 	       "PRT and PRE are set to missing values.");
---
> 	prterr(3, _("All elements of TABLE are zero.\nPRT and PRE are set to missing values."));
347c347
<     const char* ch_err_5 =
---
> /*    const char* ch_err_5 =
352c352
< 
---
> */
392c392
< 	prterr(1, "NROW must be less than or equal to LDTABL.");
---
> 	prterr(1, _("NROW must be less than or equal to LDTABL."));
394c394
< 	prterr(4, "NCOL must be at least 2");
---
> 	prterr(4, _("NCOL must be at least 2"));
414c414
< 		prterr(2, "All elements of TABLE may not be negative.");
---
> 		prterr(2, _("All elements of TABLE may not be negative."));
421,422c421
< 	prterr(3, "All elements of TABLE are zero.\n"
< 	       "PRT and PRE are set to missing values.");
---
> 	prterr(3, _("All elements of TABLE are zero.\nPRT and PRE are set to missing values."));
465c464
< 	    prterr(5, ch_err_5);
---
> 	    prterr(5, _("The hash table key cannot be computed because the largest key\nis larger than the largest representable int.\nThe algorithm cannot proceed.\nReduce the workspace size or use another algorithm."));
474c473
< 	prterr(501, ch_err_5);
---
> 	prterr(501, _("The hash table key cannot be computed because the largest key\nis larger than the largest representable int.\nThe algorithm cannot proceed.\nReduce the workspace size or use another algorithm."));
657,658c656
< 	prterr(6, "LDKEY is too small for this problem.\n"
< 	       "Try increasing the size of the workspace.");
---
> 	prterr(6, _("LDKEY is too small for this problem.\nTry increasing the size of the workspace."));
1033c1031
< 	    PROBLEM "Bug in FEXACT: gave negative key" RECOVER(NULL_ENTRY);
---
> 	    PROBLEM _("Bug in FEXACT: gave negative key") RECOVER(NULL_ENTRY);
1054,1055c1052
< 	prterr(30, "Stack length exceeded in f3xact.\n"
< 	       "This problem should not occur.");
---
> 	prterr(30, _("Stack length exceeded in f3xact.\nThis problem should not occur."));
1401,1402c1398
< 	prterr(6, "LDKEY is too small for this problem.\n"
< 	       "Try increasing the size of the workspace.");
---
> 	prterr(6, _("LDKEY is too small for this problem.\nTry increasing the size of the workspace."));
1418,1419c1414
< 	    prterr(7, "LDSTP is too small for this problem.\n"
< 		   "Try increasing the size of the workspace.");
---
> 	    prterr(7, _("LDSTP is too small for this problem.\nTry increasing the size of the workspace."));
1456,1457c1451
< 	prterr(7, "LDSTP is too small for this problem.\n"
< 	       "Try increasing the size of the workspace.");
---
> 	prterr(7, _("LDSTP is too small for this problem.\nTry increasing the size of the workspace."));
1814c1808
<     PROBLEM "FEXACT error %d.\n%s", icode, mes RECOVER(NULL_ENTRY);
---
>     PROBLEM _("FEXACT error %d.\n%s"), icode, mes RECOVER(NULL_ENTRY);
1849c1843
< 	prterr(40, "Out of workspace.");
---
> 	prterr(40, _("Out of workspace."));
1928c1922
< 	prterr(20, "This should never occur.");
---
> 	prterr(20, _("This should never occur."));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/filter.c R/src/library/stats/src/filter.c
28a29,30
> #include "localization.h"
> #include <R_ext/Minmax.h>
30,33d31
< #ifndef min
< #define min(a, b) ((a < b)?(a):(b))
< #define max(a, b) ((a < b)?(b):(a))
< #endif
41c39
<        error("invalid input");
---
>        error(_("invalid input"));
44c42
<     if(sides == NA_INTEGER || circular == NA_LOGICAL)  error("invalid input");
---
>     if(sides == NA_INTEGER || circular == NA_LOGICAL)  error(_("invalid input"));
92c90
<        || TYPEOF(out) != REALSXP) error("invalid input");
---
>        || TYPEOF(out) != REALSXP) error(_("invalid input"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/fourier.c R/src/library/stats/src/fourier.c
29,37c29
< 
< #undef _
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("stats", String)
< #else
< #define _(String) (String)
< #endif
< 
---
> #include "localization.h"
87c79
< 		error("fft too large");
---
> 		error(_("fft is too large"));
111c103
< 		error("fft too large");
---
> 		error(_("fft is too large"));
178c170
< 	    error("fft too large");
---
> 	    error(_("fft is too large"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/integrate.c R/src/library/stats/src/integrate.c
25a26
> #include "localization.h"
52c53
< 	error("evaluation of function gave a result of wrong length");
---
> 	error(_("evaluation of function gave a result of wrong length"));
56c57
< 	error("evaluation of function gave a result of wrong type");
---
> 	error(_("evaluation of function gave a result of wrong type"));
60c61
< 	    error("non-finite function value");
---
> 	    error(_("non-finite function value"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/ksmooth.c R/src/library/stats/src/ksmooth.c
23,28c23
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("stats", String)
< #else
< #define _(String) (String)
< #endif
---
> #include "localization.h"
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/line.c R/src/library/stats/src/line.c
24a25
> #include "localization.h"
114c115
<     if (n < 2) error("insufficient observations");
---
>     if (n < 2) error(_("insufficient observations"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/lm.c R/src/library/stats/src/lm.c
25,31c25
< 
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("stats", String)
< #else
< #define _(String) (String)
< #endif
---
> #include "localization.h"
57c51
<     if(check && length(ans) != 2) error(_("'x' is not a matrix"));
---
>     if(check && length(ans) != 2) error(_("'x' argument is not a matrix"));
62,63c56
< 	error(_("dimensions of 'x' (%d,%d) and 'y' (%d) do not match"),
< 	      n,p, XLENGTH(y));
---
> 	error(_("dimensions of 'x' (%d,%d) and 'y' (%d) do not match"), n, p, XLENGTH(y));
83,84c76
<     const char *ansNms[] = {"qr", "coefficients", "residuals", "effects",
< 			    "rank", "pivot", "qraux", "tol", "pivoted", ""};
---
>     const char *ansNms[] = {"qr", "coefficients", "residuals", "effects", "rank", "pivot", "qraux", "tol", "pivoted", ""};
Only in R/src/library/stats/src: localization.h
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/loessc.c R/src/library/stats/src/loessc.c
28,34c28
< 
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("stats", String)
< #else
< #define _(String) (String)
< #endif
---
> #include "localization.h"
233c227
<     if(nf <= 0) error(_("span is too small"));
---
>     if(nf <= 0) error(_("'%s' argument is too small"), "span");
239c233
<     else error("workspace required is too large");
---
>     else error(_("workspace required is too large"));
342d335
< #define MSG(_m_)	msg = _(_m_) ; break ;
349,384c342,377
<  case 100:MSG("wrong version number in lowesd.   Probably typo in caller.")
<  case 101:MSG("d>dMAX in ehg131.  Need to recompile with increased dimensions.")
<  case 102:MSG("liv too small.    (Discovered by lowesd)")
<  case 103:MSG("lv too small.     (Discovered by lowesd)")
<  case 104:MSG("span too small.   fewer data values than degrees of freedom.")
<  case 105:MSG("k>d2MAX in ehg136.  Need to recompile with increased dimensions.")
<  case 106:MSG("lwork too small")
<  case 107:MSG("invalid value for kernel")
<  case 108:MSG("invalid value for ideg")
<  case 109:MSG("lowstt only applies when kernel=1.")
<  case 110:MSG("not enough extra workspace for robustness calculation")
<  case 120:MSG("zero-width neighborhood. make span bigger")
<  case 121:MSG("all data on boundary of neighborhood. make span bigger")
<  case 122:MSG("extrapolation not allowed with blending")
<  case 123:MSG("ihat=1 (diag L) in l2fit only makes sense if z=x (eval=data).")
<  case 171:MSG("lowesd must be called first.")
<  case 172:MSG("lowesf must not come between lowesb and lowese, lowesr, or lowesl.")
<  case 173:MSG("lowesb must come before lowese, lowesr, or lowesl.")
<  case 174:MSG("lowesb need not be called twice.")
<  case 175:MSG("need setLf=.true. for lowesl.")
<  case 180:MSG("nv>nvmax in cpvert.")
<  case 181:MSG("nt>20 in eval.")
<  case 182:MSG("svddc failed in l2fit.")
<  case 183:MSG("didnt find edge in vleaf.")
<  case 184:MSG("zero-width cell found in vleaf.")
<  case 185:MSG("trouble descending to leaf in vleaf.")
<  case 186:MSG("insufficient workspace for lowesf.")
<  case 187:MSG("insufficient stack space")
<  case 188:MSG("lv too small for computing explicit L")
<  case 191:MSG("computed trace L was negative; something is wrong!")
<  case 192:MSG("computed delta was negative; something is wrong!")
<  case 193:MSG("workspace in loread appears to be corrupted")
<  case 194:MSG("trouble in l2fit/l2tr")
<  case 195:MSG("only constant, linear, or quadratic local models allowed")
<  case 196:MSG("degree must be at least 1 for vertex influence matrix")
<  case 999:MSG("not yet implemented")
---
>  case 100:sprintf(msg, _("wrong version number in lowesd. Probably typo in caller.")); break ;
>  case 101:sprintf(msg, _("d>dMAX in ehg131.  Need to recompile with increased dimensions.")); break ;
>  case 102:sprintf(msg, _("'%s' argument is too small. (Discovered by 'lowesd()' function)"), "liv"); break ;
>  case 103:sprintf(msg, _("'%s' argument is too small. (Discovered by 'lowesd()' function)"), "lv"); break ;
>  case 104:sprintf(msg, _("'span' argument is too small. Fewer data values than degrees of freedom.")); break ;
>  case 105:sprintf(msg, _("k>d2MAX in ehg136.  Need to recompile with increased dimensions.")); break ;
>  case 106:sprintf(msg, _("'%s' argument is too small"), "lwork"); break ;
>  case 107:sprintf(msg, _("invalid '%s' value"), "kernel"); break ;
>  case 108:sprintf(msg, _("invalid '%s' value"), "ideg"); break ;
>  case 109:sprintf(msg, _("lowstt only applies when 'kernel=1'.")); break ;
>  case 110:sprintf(msg, _("not enough extra workspace for robustness calculation")); break ;
>  case 120:sprintf(msg, _("zero-width neighborhood. make span bigger")); break ;
>  case 121:sprintf(msg, _("all data on boundary of neighborhood. make span bigger")); break ;
>  case 122:sprintf(msg, _("extrapolation not allowed with blending")); break ;
>  case 123:sprintf(msg, _("ihat=1 (diag L) in 'l2fit()' function only makes sense if z=x (eval=data).")); break ;
>  case 171:sprintf(msg, _("'lowesd()' function must be called first.")); break ;
>  case 172:sprintf(msg, _("'lowesf()' function must not come between lowesb and lowese, lowesr, or lowesl.")); break ;
>  case 173:sprintf(msg, _("'lowesb()' function must come before lowese, lowesr, or lowesl.")); break ;
>  case 174:sprintf(msg, _("'lowesb()' function need not be called twice.")); break ;
>  case 175:sprintf(msg, _("need setLf=.true. for lowesl.")); break ;
>  case 180:sprintf(msg, _("nv>nvmax in 'cpvert()' function")); break ;
>  case 181:sprintf(msg, _("nt>20 in 'eval()' function")); break ;
>  case 182:sprintf(msg, _("svddc failed in 'l2fit()' function")); break ;
>  case 183:sprintf(msg, _("didnt find edge in 'vleaf()' function")); break ;
>  case 184:sprintf(msg, _("zero-width cell found in 'vleaf()' function")); break ;
>  case 185:sprintf(msg, _("trouble descending to leaf in 'vleaf()' function")); break ;
>  case 186:sprintf(msg, _("insufficient workspace for 'lowesf()' function")); break ;
>  case 187:sprintf(msg, _("insufficient stack space")); break ;
>  case 188:sprintf(msg, _("lv too small for computing explicit L")); break ;
>  case 191:sprintf(msg, _("computed trace L was negative; something is wrong!")); break ;
>  case 192:sprintf(msg, _("computed delta was negative; something is wrong!")); break ;
>  case 193:sprintf(msg, _("workspace in loread appears to be corrupted")); break ;
>  case 194:sprintf(msg, _("trouble in l2fit/l2tr")); break ;
>  case 195:sprintf(msg, _("only constant, linear, or quadratic local models allowed")); break ;
>  case 196:sprintf(msg, _("degree must be at least 1 for vertex influence matrix")); break ;
>  case 999:sprintf(msg, _("not yet implemented")); break ;
386c379
<      snprintf(msg2, 50, "Assert failed; error code %d\n",*i);
---
>      snprintf(msg2, 50, _("Assert failed; error code %d\n"),*i);
392d384
< #undef MSG
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/loglin.c R/src/library/stats/src/loglin.c
16a17
> #include "localization.h"
39c40
<     if (!nvar) error("no variables");  // not translated
---
>     if (!nvar) error(_("no variables"));
339,344d339
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("stats", String)
< #else
< #define _(String) (String)
< #endif
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/lowess.c R/src/library/stats/src/lowess.c
25,30c25
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("stats", String)
< #else
< #define _(String) (String)
< #endif
---
> #include "localization.h"
288c283
<     if(TYPEOF(x) != REALSXP || TYPEOF(y) != REALSXP) error("invalid input");
---
>     if(TYPEOF(x) != REALSXP || TYPEOF(y) != REALSXP) error(_("invalid input"));
290c285
<     if (nx == NA_INTEGER || nx == 0) error("invalid input");
---
>     if (nx == NA_INTEGER || nx == 0) error(_("invalid input"));
292c287
<     if (!R_FINITE(f) || f <= 0) error(_("'f' must be finite and > 0"));
---
>     if (!R_FINITE(f) || f <= 0) error(_("'%s' argument must be finite and > 0"), "f");
295c290
< 	error(_("'iter' must be finite and >= 0"));
---
> 	error(_("'%s' argument must be finite and >= 0"), "iter");
298c293
< 	error(_("'delta' must be finite and > 0"));
---
> 	error(_("'%s' argument must be finite and > 0"), "delta");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/mAR.c R/src/library/stats/src/mAR.c
23c23
< 
---
> #include "localization.h"
80c80
< 	error(("assert failed in src/library/ts/src/carray.c"));
---
> 	error(_("assert failed in src/library/ts/src/carray.c"));
321c321
< 	    printf("Unknown op in array_op");
---
> 	    printf(_("Unknown operator in array_op"));
351c351
< 	    printf("Unknown op in array_op");
---
> 	    printf(_("Unknown operator in array_op"));
467c467
< 	error(_("Singular matrix in qr_solve"));
---
> 	error(_("Singular matrix in '%s' function"), "qr_solve()");
510c510
< 	error(_("Singular matrix in ldet"));
---
> 	error(_("Singular matrix in '%s' function"), "ldet()");
697c697
< 	else error(_("Invalid vmethod"));
---
> 	else error(_("invalid '%s' argument"), "vmethod");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/massdist.c R/src/library/stats/src/massdist.c
33a34
> #include "localization.h"
41c42
<     if (n == NA_INTEGER || n <= 0) error("invalid '%s' argument", "n");
---
>     if (n == NA_INTEGER || n <= 0) error(_("invalid '%s' argument"), "n");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/model.c R/src/library/stats/src/model.c
28,34c28
< #undef _
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("stats", String)
< #else
< #define _(String) (String)
< #endif
---
> #include "localization.h"
572,573c566
< 	    warning(_("problem with term %d in model.matrix: no columns are assigned"),
< 		      j+1);
---
> 	    warning(_("problem with term %d in model.matrix(): no columns are assigned"), j+1);
659,660c652
< 			error(_("variables of type '%s' are not allowed in model matrices"),
< 			      type2char(TYPEOF(var_i)));
---
> 			error(_("variables of type '%s' are not allowed in model matrices"), type2char(TYPEOF(var_i)));
1183c1175
<     error(_("invalid model formula in ExtractVars"));
---
>     error(_("invalid model formula in '%s' function"), "ExtractVars()");
1518,1519c1510
< 			error(_("duplicated name '%s' in data frame using '.'"),
< 			      c);
---
> 			error(_("duplicated name '%s' in data frame using '.'"), c);
1576c1567
<     error(_("invalid model formula in EncodeVars"));
---
>     error(_("invalid model formula in '%s' function"), "EncodeVars()");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/modreg.h R/src/library/stats/src/modreg.h
26,31d25
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("stats", String)
< #else
< #define _(String) (String)
< #endif
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/monoSpl.c R/src/library/stats/src/monoSpl.c
19a20
> #include "localization.h"
34c35
< 	error(_("n must be at least two"));
---
> 	error(_("'%s' argument must be at least two"), "n");
67c68
< 	    error(_("Argument m must be numeric"));
---
> 	    error(_("'%s' argument must be numeric"), "m");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/nls.c R/src/library/stats/src/nls.c
28a29
> #include <R_ext/Minmax.h>
32,35c33
< 
< #ifndef MIN
< #define MIN(a,b) (((a)<(b))?(a):(b))
< #endif
---
> #include "localization.h"
65,66c63
<     const char *nms[] = {"isConv", "finIter", "finTol",
< 			 "stopCode", "stopMessage",  ""};
---
>     const char *nms[] = {"isConv", "finIter", "finTol", "stopCode", "stopMessage",  ""};
97c94
< 	error(_("'control' must be a list"));
---
> 	error(_("'%s' argument must be a list"), "control");
99c96
< 	error(_("'m' must be a list"));
---
> 	error(_("'%s' argument must be a list"), "m");
105c102
< 	error(_("'%s' absent"), "control$maxiter");
---
> 	error(_("'%s' is absent"), "control$maxiter");
110c107
< 	error(_("'%s' absent"), "control$tol");
---
> 	error(_("'%s' is absent"), "control$tol");
115c112
< 	error(_("'%s' absent"), "control$minFactor");
---
> 	error(_("'%s' is absent"), "control$minFactor");
120c117
< 	error(_("'%s' absent"), "control$warnOnly");
---
> 	error(_("'%s' is absent"), "control$warnOnly");
125c122
< 	error(_("'%s' absent"), "control$printEval");
---
> 	error(_("'%s' is absent"), "control$printEval");
166c163
< 	error(_("'%s' absent"), "m$conv()");
---
> 	error(_("'%s' is absent"), "m$conv()");
171c168
< 	error(_("'%s' absent"), "m$incr()");
---
> 	error(_("'%s' is absent"), "m$incr()");
176c173
< 	error(_("'%s' absent"), "m$deviance()");
---
> 	error(_("'%s' is absent"), "m$deviance()");
181c178
< 	error(_("'%s' absent"), "m$trace()");
---
> 	error(_("'%s' is absent"), "m$trace()");
186c183
< 	error(_("'%s' absent"), "m$setPars()");
---
> 	error(_("'%s' is absent"), "m$setPars()");
191c188
< 	error(_("'%s' absent"), "m$getPars()");
---
> 	error(_("'%s' is absent"), "m$getPars()");
220,221c217
< 		Rprintf("  It. %3d, fac= %11.6g, eval (no.,total): (%2d,%3d):",
< 			i+1, fac, evalCnt, evaltotCnt);
---
> 		Rprintf("  It. %3d, fac= %11.6g, eval (no.,total): (%2d,%3d):", i + 1, fac, evalCnt, evaltotCnt);
241c237
< 		fac = MIN(2*fac, 1);
---
> 		fac = min(2*fac, 1);
288c284
< 	error(_("'theta' should be of type character"));
---
> 	error(_("'%s' argument should be of type character"), "theta");
294c290
< 	    error(_("'rho' should be an environment"));
---
> 	    error(_("'%s' argument should be an environment"), "rho");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/nls.h R/src/library/stats/src/nls.h
20,25d19
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("stats", String)
< #else
< #define _(String) (String)
< #endif
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/optim.c R/src/library/stats/src/optim.c
28,34c28
< #undef _
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("stats", String)
< #else
< #define _(String) (String)
< #endif
---
> #include "localization.h"
80c74
< 	if (!R_FINITE(p[i])) error(_("non-finite value supplied by optim"));
---
> 	if (!R_FINITE(p[i])) error(_("non-finite value supplied by 'optim' argument"));
107c101
< 		error(_("non-finite value supplied by optim"));
---
> 		error(_("non-finite value supplied by 'optim' argument"));
138c132
< 		    error(("non-finite finite-difference value [%d]"), i+1);
---
> 		    error(_("non-finite finite-difference value [%d]"), i+1);
165c159
< 		    error(("non-finite finite-difference value [%d]"), i+1);
---
> 		    error(_("non-finite finite-difference value [%d]"), i+1);
193c187
<     if (!isFunction(fn)) error(_("'fn' is not a function"));
---
>     if (!isFunction(fn)) error(_("'%s' argument is not a function"), "fn");
211c205
< 	error(_("'parscale' is of the wrong length"));
---
> 	error(_("'%s' argument is of the wrong length"), "parscale");
240c234
<     if (maxit == NA_INTEGER) error(_("'maxit' is not an integer"));
---
>     if (maxit == NA_INTEGER) error(_("'%s' argument is not an integer"), "maxit");
260c254
< 	    error(_("'tmax' is not a positive integer"));
---
> 		error(_("'%s' argument is not a positive integer"), "tmax");
262c256
< 	    if (!isFunction(gr)) error(_("'gr' is not a function"));
---
> 	    if (!isFunction(gr)) error(_("'%s' argument is not a function"), "gr");
279c273
< 	    if (!isFunction(gr)) error(_("'gr' is not a function"));
---
> 	    if (!isFunction(gr)) error(_("'%s' argument is not a function"), "gr");
285c279
< 		error(_("'ndeps' is of the wrong length"));
---
> 		error(_("'%s' argument is of the wrong length"), "ndeps");
304c298
< 	    if (!isFunction(gr)) error(_("'gr' is not a function"));
---
> 	    if (!isFunction(gr)) error(_("'%s' argument is not a function"), "gr");
310c304
< 		error(_("'ndeps' is of the wrong length"));
---
> 		error(_("'%s' argument is of the wrong length"), "ndeps");
334c328
< 	    if (!isFunction(gr)) error(_("'gr' is not a function"));
---
> 	    if (!isFunction(gr)) error(_("'%s' argument is not a function"), "gr");
340c334
< 		error(_("'ndeps' is of the wrong length"));
---
> 		error(_("'%s' argument is of the wrong length"), "ndeps");
370c364
< 	error(_("unknown 'method'"));
---
> 	error(_("invalid '%s' value"), "method");
399c393
<     if (!isFunction(fn)) error(_("'fn' is not a function"));
---
>     if (!isFunction(fn)) error(_("'%s' argument is not a function"), "fn");
405c399
< 	error(_("'parscale' is of the wrong length"));
---
> 	error(_("'%s' argument is of the wrong length"), "parscale");
413c407
< 	if (!isFunction(gr)) error(_("'gr' is not a function"));
---
> 	if (!isFunction(gr)) error(_("'%s' argument is not a function"), "gr");
419c413
<     if (LENGTH(ndeps) != npar) error(_("'ndeps' is of the wrong length"));
---
>     if (LENGTH(ndeps) != npar) error(_("'%s' argument is of the wrong length"), "ndeps");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/optimize.c R/src/library/stats/src/optimize.c
26d25
< #define NO_NLS
35,42c34
< #undef _
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("stats", String)
< #else
< #define _(String) (String)
< #endif
< 
---
> #include "localization.h"
237c229
<     error(_("invalid function value in 'optimize'"));
---
>     error(_("invalid function value in '%s' function"), "optimize()");
328c320
<     error(_("invalid function value in 'zeroin'"));
---
>     error(_("invalid function value in '%s' function"), "zeroin()");
363c355
<     if (ISNA(f_ax)) error(_("NA value for '%s' is not allowed"), "f.lower");
---
>     if (ISNA(f_ax)) error(_("NA value for '%s' argument is not allowed"), "f.lower");
368c360
<     if (ISNA(f_bx)) error(_("NA value for '%s' is not allowed"), "f.upper");
---
>     if (ISNA(f_bx)) error(_("NA value for '%s' argument is not allowed"), "f.upper");
378c370
<     if (iter <= 0) error(_("'maxiter' must be positive"));
---
>     if (iter <= 0) error(_("'%s' argument must be positive"), "maxiter");
639c631
< 	error(_("nlm is inefficient for 1-d problems"));
---
> 	error(_("'nlm()' function is inefficient for 1-d problems"));
641c633
< 	error(_("invalid gradient tolerance in nlm"));
---
> 	error(_("invalid gradient tolerance in 'nlm()' function"));
643c635
< 	error(_("invalid iteration limit in nlm"));
---
> 	error(_("invalid iteration limit in 'nlm()' function"));
647c639
< 	error(_("no analytic gradient to check in nlm!"));
---
> 	error(_("no analytic gradient to check in 'nlm()' function"));
649c641
< 	error(_("no analytic Hessian to check in nlm!"));
---
> 	error(_("no analytic Hessian to check in 'nlm()' function"));
655c647
< 	error(_("*** unknown error message (msg = %d) in nlm()\n*** should not happen!"), nerr);
---
> 	error(_("*** unknown error message (msg = %d) in 'nlm()' function\n*** should not happen!"), nerr);
675,677c667
< 	Rprintf(_("Either x is an approximate local minimum of the function,\n\
< the function is too non-linear for this algorithm,\n\
< or steptol is too large.\n"));
---
> 	Rprintf(_("Either 'x' is an approximate local minimum of the function, the function is too non-linear for this algorithm, or 'steptol' is too large.\n"));
683,687c673
< 	Rprintf(_("Maximum step size exceeded 5 consecutive times.\n\
< Either the function is unbounded below,\n\
< becomes asymptotic to a finite value\n\
< from above in some direction,\n"\
< "or stepmx is too small.\n"));
---
> 	Rprintf(_("Maximum step size exceeded 5 consecutive times. Either the function is unbounded below, becomes asymptotic to a finite value from above in some direction, or 'stepmx' is too small.\n"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/pacf.c R/src/library/stats/src/pacf.c
25a26
> #include <R_ext/Minmax.h>
28a30
> #include "localization.h"
30,35d31
< #ifndef max
< #define max(a,b) ((a < b)?(b):(a))
< #endif
< #ifndef min
< #define min(a,b) ((a > b)?(b):(a))
< #endif
469c465
< 	error(_("invalid value of lag.max"));
---
> 	error(_("invalid '%s' value"), "lag.max");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/port.c R/src/library/stats/src/port.c
20a21
> #include "localization.h"
316c317
< 	if(ISNAN(gv[i])) error("NA/NaN gradient evaluation");
---
> 	if(ISNAN(gv[i])) error(_("NA/NaN gradient evaluation"));
330c331
< 		if(ISNAN(hv[pos])) error("NA/NaN Hessian evaluation");
---
> 		if(ISNAN(hv[pos])) error(_("NA/NaN Hessian evaluation"));
380c381
< 	error(_("'rho' must be an environment"));
---
> 	error(_("'%s' argument must be an environment"));
382c383
< 	error(_("'d' must be a nonempty numeric vector"));
---
> 	error(_("'%s' argument must be a nonempty numeric vector"), "d");
415c416
< 		warning("NA/NaN function evaluation");
---
> 		warning(_("NA/NaN function evaluation"));
457c458
< 	error(_("'getElement' applies only to named lists"));
---
> 	error(_("'getElement()' function applies only to named lists"));
477,478c478,485
<     if (!isFunction(ans = getElement(list, enm)))
< 	error(_("%s$%s() not found"), lnm, enm);
---
>     if (!isFunction(ans = getElement(list, enm))) {
> 	char *bf;
> 	strcat(bf, lnm);
> 	strcat(bf, "$");
> 	strcat(bf, enm);
> 	strcat(bf, "()");
> 	error(_("'%s' was not found"), bf);
> 	}
491,492c498
< 	error(_("'gradient' must be a numeric matrix of dimension (%d,%d)"),
< 	      gdims[0], gdims[1]);
---
> 	error(_("'gradient' argument must be a numeric matrix of dimension (%d,%d)"), gdims[0], gdims[1]);
525c531
< 	error(_("invalid type for eval_check_store"));
---
> 	error(_("invalid type for 'eval_check_store()' function"));
543,544c549,550
< 	error(_("'d' must be a nonempty numeric vector"));
<     if(!isNewList(m)) error(_("m must be a list"));
---
> 	error(_("'%s' argument must be a nonempty numeric vector"), "d");
>     if(!isNewList(m)) error(_("'%s' argument must be a list"), "m");
564c570
< 	} else error(_("'lowerb' and 'upperb' must be numeric vectors"));
---
> 	} else error(_("'lowerb' and 'upperb' arguments must be numeric vectors"));
587c593
< 	    Rprintf("nlsb_iterate returned %d", INTEGER(iv)[0]);
---
> 	    Rprintf(_("'nlsb_iterate()' function returned %d"), INTEGER(iv)[0]);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/port.h R/src/library/stats/src/port.h
33,38d32
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("stats", String)
< #else
< #define _(String) (String)
< #endif
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/rWishart.c R/src/library/stats/src/rWishart.c
29d28
< #include "stats.h" // for _()
31c30
< 
---
> #include "localization.h" //for _()
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/random.c R/src/library/stats/src/random.c
31c31
< #undef _
---
> 
32a33
> #include "localization.h"
53c54
<     warning(_("NAs produced"));
---
>     warning(_("NA values produced"));
128c129
< 	if (naflag) warning(_("NAs produced"));
---
> 	if (naflag) warning(_("NA values produced"));
200c201
< 	if (naflag) warning(_("NAs produced"));
---
> 	if (naflag) warning(_("NA values produced"));
284c285
< 	if (naflag) warning(_("NAs produced"));
---
> 	if (naflag) warning(_("NA values produced"));
310c311
< 	    error(_("NA in probability vector"));
---
> 	    error(_("NA value in probability vector"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/rcont.c R/src/library/stats/src/rcont.c
14,20c14
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("stats", String)
< #else
< #define _(String) (String)
< #endif
< 
---
> #include "localization.h"
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/sbart.c R/src/library/stats/src/sbart.c
10a11
> #include "localization.h"
350c351
< 	    REprintf("spar-finding: non-finite value %g; using BIG value\n", fu);
---
> 	    REprintf(_("spar-finding: non-finite value %g; using BIG value\n"), fu);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/smooth.c R/src/library/stats/src/smooth.c
36,41c36
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("stats", String)
< #else
< #define _(String) (String)
< #endif
---
> #include "localization.h"
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/splines.c R/src/library/stats/src/splines.c
49a50
> #include "localization.h"
373c374
<     if(LENGTH(y) != n) error("inputs of different lengths");
---
>     if(LENGTH(y) != n) error(_("inputs of different lengths"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/starma.c R/src/library/stats/src/starma.c
28,35c28,29
< 
< 
< #ifndef max
< #define max(a,b) ((a < b)?(b):(a))
< #endif
< #ifndef min
< #define min(a,b) ((a > b)?(b):(a))
< #endif
---
> #include "localization.h"
> #include <R_ext/Minmax.h>
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/stats.h R/src/library/stats/src/stats.h
25,31d24
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("stats", String)
< #else
< #define _(String) (String)
< #endif
< 
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats/src/swilk.c R/src/library/stats/src/swilk.c
26a27,28
> #include "localization.h"
> #include <R_ext/Minmax.h>
28,30d29
< #ifndef min
< # define min(a, b)		((a) > (b) ? (b) : (a))
< #endif
207c206
< 	error("ifault=%d. This should not happen", ifault);
---
> 	error(_("ifault=%d. This should not happen"), ifault);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/stats4/R/mle.R R/src/library/stats4/R/mle.R
80c80
<     cat("\nCall:\n")
---
>     cat("\n", gettext("Call:", domain = "R-stats4"),"\n", sep = "")
82c82
<     cat("\nCoefficients:\n")
---
>     cat("\n", gettext("Coefficients:", domain = "R-stats4"), "\n", sep = "")
87c87
<     cat("Maximum likelihood estimation\n\nCall:\n")
---
>     cat(gettext("Maximum likelihood estimation", domain = "R-stats4"), "\n\n", gettext("Call:", domain = "R-stats4"), "\n", sep = "")
89c89
<     cat("\nCoefficients:\n")
---
>     cat("\n", gettext("Coefficients:", domain = "R-stats4"), "\n", sep = "")
154c154,157
<                 cat("\nParameter:", pi, c("down", "up")[(sgn + 1)/2 + 1], "\n")
---
> 	     if(sgn == -1)
>                 cat("\n", gettextf("Parameter: %s down", pi, domain = "R-stats4"), "\n", sep = "")
> 	     else
>                 cat("\n", gettextf("Parameter: %s up", pi, domain = "R-stats4"), "\n", sep = "")
314c317
<     cat("Profiling...\n")
---
>     cat(gettext("Profiling...", domain = "R-stats4"), "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tcltk/R/Tk.R R/src/library/tcltk/R/Tk.R
268,269c268
<                 stop(gettextf("cannot handle object of mode '%s'",
<                               storage.mode(x)), domain = NA)
---
>                 stop(gettextf("cannot handle object of mode '%s'", storage.mode(x)), domain = "R-tcltk")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tcltk/R/tclsearch.R R/src/library/tcltk/R/tclsearch.R
37,38c37
<             warning(gettextf("Tcl package '%s' not found", package),
<                     domain = NA)
---
>             warning(gettextf("Tcl package '%s' not found", package), domain = "R-tcltk")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tcltk/R/unix/zzz.R R/src/library/tcltk/R/unix/zzz.R
54,55c54
<                     stop("Tcl/Tk libraries are missing: install the Tcl/Tk component from the R installer",
<                          domain = NA)
---
>                     stop("Tcl/Tk libraries are missing: install the Tcl/Tk component from the R installer")
62,63c61
<                     stop("X11 library is missing: install XQuartz from xquartz.macosforge.org",
<                          domain = NA)
---
>                     stop("X11 library is missing: install XQuartz from xquartz.macosforge.org")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tcltk/R/utils.R R/src/library/tcltk/R/utils.R
156,158c156
<         stop(gettextf("'pb' is not from class %s",
<                       dQuote("tkProgressBar")),
<              domain = NA)
---
>         stop(gettextf("'pb' is not from class %s", dQuote("tkProgressBar")), domain = "R-tcltk")
165,167c163
<         stop(gettextf("'pb' is not from class %s",
<                       dQuote("tkProgressBar")),
<              domain = NA)
---
>         stop(gettextf("'pb' is not from class %s", dQuote("tkProgressBar")), domain = "R-tcltk")
Only in R/src/library/tcltk/src: localization.h
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tcltk/src/tcltk.c R/src/library/tcltk/src/tcltk.c
23d22
< #define NO_NLS
27a27
> #include "localization.h"
29,34d28
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("tcltk", String)
< #else
< #define _(String) (String)
< #endif
304c298
<     if (!obj) error(_("invalid tclObj -- perhaps saved from another session?"));
---
>     if (!obj) error(_("invalid object of type tclObj -- perhaps saved from another session?"));
322c316
<     if (!obj) error(_("invalid tclObj -- perhaps saved from another session?"));
---
>     if (!obj) error(_("invalid object of type tclObj -- perhaps saved from another session?"));
395c389
<     if (!obj) error(_("invalid tclObj -- perhaps saved from another session?"));
---
>     if (!obj) error(_("invalid object of type tclObj -- perhaps saved from another session?"));
458c452
<     if (!obj) error(_("invalid tclObj -- perhaps saved from another session?"));
---
>     if (!obj) error(_("invalid object of type tclObj -- perhaps saved from another session?"));
510c504
<     if (!obj) error(_("invalid tclObj -- perhaps saved from another session?"));
---
>     if (!obj) error(_("invalid object of type tclObj -- perhaps saved from another session?"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tcltk/src/tcltk_unix.c R/src/library/tcltk/src/tcltk_unix.c
23d22
< #define NO_NLS
31a31
> #include "localization.h"
33,38d32
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("tcltk", String)
< #else
< #define _(String) (String)
< #endif
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/CRANtools.R R/src/library/tools/R/CRANtools.R
298,299c298,299
<             stop(sprintf("Reading %s failed with message: %s",
<                          path, conditionMessage(db)))
---
>             stop(gettextf("Reading %s failed with message: %s",
>                          path, conditionMessage(db), domain = "R-tools"))
308,309c308,309
<             stop(sprintf("Reading %s failed with message: %s",
<                          path, conditionMessage(ts)))
---
>             stop(gettextf("Reading %s failed with message: %s",
>                          path, conditionMessage(ts), domain = "R-tools"))
365c365
<                               message(sprintf("Checking %s", m))
---
>                               message(gettextf("Checking %s", m, domain = "R-tools"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/QC.R R/src/library/tools/R/QC.R
90c90
<             stop("argument 'package' must be of length 1")
---
>             stop(gettextf("'%s' argument must be of length 1", "package"))
107c107
<             stop("you must specify 'package' or 'dir'")
---
>             stop("you must specify 'package' or 'dir' argument")
110,111c110
<             stop(gettextf("directory '%s' does not exist", dir),
<                  domain = NA)
---
>             stop(gettextf("directory %s does not exist", sQuote(dir)), domain = "R-tools")
287,297c286,291
<                       "code objects" =
<                       gettext("Undocumented code objects:"),
<                       "data sets" =
<                       gettext("Undocumented data sets:"),
<                       "S4 classes" =
<                       gettext("Undocumented S4 classes:"),
<                       "S4 methods" =
<                       gettext("Undocumented S4 methods:"),
<                       prim_extra =
<                       gettext("Prototyped non-primitives:"),
<                       gettextf("Undocumented %s:", tag))
---
>                       "code objects" = gettext("Undocumented code objects:", domain = "R-tools"),
>                       "data sets" = gettext("Undocumented data sets:", domain = "R-tools"),
>                       "S4 classes" = gettext("Undocumented S4 classes:", domain = "R-tools"),
>                       "S4 methods" = gettext("Undocumented S4 methods:", domain = "R-tools"),
>                       prim_extra = gettext("Prototyped non-primitives:", domain = "R-tools"),
>                       gettextf("Undocumented %s:", tag, domain = "R-tools"))
322c316
<             stop("argument 'package' must be of length 1")
---
>             stop(gettextf("'%s' argument must be of length 1", "package"))
327,329c321
<             stop(gettextf("directory '%s' does not contain R code",
<                           dir),
<                  domain = NA)
---
>             stop(gettextf("directory %s does not contain R code", sQuote(dir)), domain = "R-tools")
331,332c323
<             stop(gettextf("directory '%s' does not contain Rd objects", dir),
<                  domain = NA)
---
>             stop(gettextf("directory %s does not contain Rd objects", sQuote(dir)), domain = "R-tools")
361c352
<             stop("you must specify 'package' or 'dir'")
---
>             stop("you must specify 'package' or 'dir' argument")
364,365c355
<             stop(gettextf("directory '%s' does not exist", dir),
<                  domain = NA)
---
>             stop(gettextf("directory %s does not exist", sQuote(dir)), domain = "R-tools")
370,372c360,361
<             stop(gettextf("directory '%s' does not contain R code",
<                           dir),
<                  domain = NA)
---
>             stop(gettextf("directory %s does not contain R code", sQuote(dir)), domain = "R-tools")
> 
374,375c363
<             stop(gettextf("directory '%s' does not contain Rd objects", dir),
<                  domain = NA)
---
>             stop(gettextf("directory %s does not contain Rd objects", sQuote(dir)), domain = "R-tools")
753,754c741
<             writeLines(gettextf("Functions or methods with usage in documentation object '%s' but not in code:",
<                                 fname))
---
>             writeLines(gettextf("Functions or methods with usage in documentation object %s but not in code:", sQuote(fname), domain = "R-tools"))
764,765c751
<             writeLines(gettextf("Data with usage in documentation object '%s' but not in code:",
<                                 fname))
---
>             writeLines(gettextf("Data with usage in documentation object %s but not in code:", sQuote(fname), domain = "R-tools"))
809,811c795,797
<             writeLines(c(gettext("  Argument names in code not in docs:"),
<                          strwrap(paste(nms, collapse = " "),
<                                  indent = 4L, exdent = 4L)))
---
>             writeLines(c(gettext("  Argument names in code but not in docs:", domain = "R-tools"),
>                          strwrap(paste(nms, collapse = " "), indent = 4L, exdent = 4L)))
> 
813,815c799,801
<             writeLines(c(gettext("  Argument names in docs not in code:"),
<                          strwrap(paste(nms, collapse = " "),
<                                  indent = 4L, exdent = 4L)))
---
>             writeLines(c(gettext("  Argument names in docs but not in code:", domain = "R-tools"),
>                          strwrap(paste(nms, collapse = " "), indent = 4L, exdent = 4L)))
> 
825c811
<                     writeLines(gettext("  Mismatches in argument names (first 3):"))
---
>                     writeLines(gettext("  Mismatches in argument names (first 3):", domain = "R-tools"))
828c814
<                     writeLines(gettext("  Mismatches in argument names:"))
---
>                     writeLines(gettext("  Mismatches in argument names:", domain = "R-tools"))
831,832c817
<                     writeLines(sprintf("    Position: %d Code: %s Docs: %s",
<                                        i, nfc[i], nfd[i]))
---
>                     writeLines(gettextf("    Position: %d Code: %s Docs: %s", i, nfc[i], nfd[i], domain = "R-tools"))
847c832
<                 writeLines(gettext("  Mismatches in argument default values (first 3):"))
---
>                 writeLines(gettext("  Mismatches in argument default values (first 3):", domain = "R-tools"))
850c835
<                 writeLines(gettext("  Mismatches in argument default values:"))
---
>                 writeLines(gettext("  Mismatches in argument default values:", domain = "R-tools"))
865,867c850,854
<                 sep <- if(multiline) "\n    " else " "
<                 writeLines(sprintf("    Name: '%s'%sCode: %s%sDocs: %s",
<                                    nms[i], sep, cv, sep, dv))
---
>                 if(multiline) {
> 		   writeLines(gettextf("    Name: %s\n    Code: %s\n    Docs: %s", sQuote(nms[i]), cv, dv, domain = "R-tools"))
>                 } else {
> 		   writeLines(gettextf("    Name: %s Code: %s Docs: %s", sQuote(nms[i]), cv, dv, domain = "R-tools"))
> 	 	}
882,883c869
<         writeLines(gettextf("Codoc mismatches from documentation object '%s':",
<                             fname))
---
>         writeLines(gettextf("Codoc mismatches from documentation object %s:", sQuote(fname), domain = "R-tools"))
889,892c875,876
<                          strwrap(gettextf("Code: %s", format_args(ffc)),
<                                  indent = 2L, exdent = 17L),
<                          strwrap(gettextf("Docs: %s", format_args(ffd)),
<                                  indent = 2L, exdent = 17L)))
---
>                          strwrap(gettextf("Code: %s", format_args(ffc), domain = "R-tools"), indent = 2L, exdent = 17L),
>                          strwrap(gettextf("Docs: %s", format_args(ffd), domain = "R-tools"), indent = 2L, exdent = 17L)))
922c906
<         stop("argument 'package' must be of length 1")
---
>         stop(gettextf("'%s' argument must be of length 1", "package"))
925,926c909,910
<         stop(gettextf("directory '%s' does not contain R code", dir),
<              domain = NA)
---
>         stop(gettextf("directory %s does not contain R code", sQuote(dir)), domain = "R-tools")
> 
928,929c912,913
<         stop(gettextf("directory '%s' does not contain Rd objects", dir),
<              domain = NA)
---
>         stop(gettextf("directory %s does not contain Rd objects", sQuote(dir)), domain = "R-tools")
> 
1048,1050c1032
<                 strwrap(sprintf("%s: %s", gettextf(capWord(nam)),
<                                 paste(O, collapse = " ")),
<                         indent = 2L, exdent = 8L)
---
>                 strwrap(sprintf("%s: %s", gettextf(capWord(nam)), paste(O, collapse = " ")), indent = 2L, exdent = 8L)
1054,1056c1036,1037
<         c(gettextf("S4 class codoc mismatches from documentation object '%s':",
<                    nm),
<           gettextf("Slots for class '%s'", docObj[["name"]]),
---
>         c(gettextf("S4 class codoc mismatches from documentation object %s:", sQuote(nm), domain = "R-tools"),
>           gettextf("Slots for class %s", dQuote(docObj[["name"]]), domain = "R-tools"),
1087c1068
<         stop("argument 'package' must be of length 1")
---
>         stop(gettextf("'%s' argument must be of length 1", "package"))
1184,1185c1165
<         if(!grepl("^[ \n\t]*(A|This) data frame",
<                   .Rd_deparse(x, tag = FALSE)))
---
>         if(!grepl("^[ \n\t]*(A|This) data frame", .Rd_deparse(x, tag = FALSE)))
1265,1270c1245,1248
<         c(gettextf("Data codoc mismatches from documentation object '%s':", nm),
<           gettextf("Variables in data frame '%s'", docObj[["name"]]),
<           strwrap(gettextf("Code: %s", format_args(docObj[["code"]])),
<                   indent = 2L, exdent = 8L),
<           strwrap(gettextf("Docs: %s", format_args(docObj[["docs"]])),
<                   indent = 2L, exdent = 8L),
---
>         c(gettextf("Data codoc mismatches from documentation object %s:", sQuote(nm), domain = "R-tools"),
>           gettextf("Variables in data frame %s", sQuote(docObj[["name"]]), domain = "R-tools"),
>           strwrap(gettextf("Code: %s", format_args(docObj[["code"]]), domain = "R-tools"), indent = 2L, exdent = 8L),
>           strwrap(gettextf("Docs: %s", format_args(docObj[["docs"]]), domain = "R-tools"), indent = 2L, exdent = 8L),
1285c1263
<             stop("argument 'package' must be of length 1")
---
>             stop(gettextf("'%s' argument must be of length 1", "package"))
1291c1269
<             stop("you must specify 'package' or 'dir'")
---
>             stop("you must specify 'package' or 'dir' argument")
1294,1295c1272
<             stop(gettextf("directory '%s' does not exist", dir),
<                  domain = NA)
---
>             stop(gettextf("directory %s does not exist", sQuote(dir)), domain = "R-tools")
1479,1480c1456
<               c(gettextf("Undocumented arguments in documentation object '%s'",
<                          nm),
---
>               c(gettextf("Undocumented arguments in documentation object %s", sQuote(nm), domain = "R-tools"),
1485,1486c1461
<               c(gettextf("Duplicated \\argument entries in documentation object '%s':",
<                          nm),
---
>               c(gettextf("Duplicated \\argument entries in documentation object %s:", sQuote(nm), domain = "R-tools"),
1491,1492c1466
<               c(gettextf("Documented arguments not in \\usage in documentation object '%s':",
<                          nm),
---
>               c(gettextf("Documented arguments not in \\usage in documentation object %s:", sQuote(nm), domain = "R-tools"),
1497,1498c1471
<               c(gettextf("Objects in \\usage without \\alias in documentation object '%s':",
<                          nm),
---
>               c(gettextf("Objects in \\usage without \\alias in documentation object %s:", sQuote(nm), domain = "R-tools"),
1503,1504c1476
<               c(gettextf("Assignments in \\usage in documentation object '%s':",
<                          nm),
---
>               c(gettextf("Assignments in \\usage in documentation object %s:", sQuote(nm), domain = "R-tools"),
1516,1518c1488
<                                  c(gettextf("Bad \\usage lines found in documentation object '%s':",
<                                             nm),
<                                    paste(" ", bad_lines[[nm]]))
---
>                                  c(gettextf("Bad \\usage lines found in documentation object %s:", sQuote(nm), domain = "R-tools"), paste(" ", bad_lines[[nm]]))
1535c1505
<             stop("argument 'package' must be of length 1")
---
>             stop(gettextf("'%s' argument must be of length 1", "package"))
1545,1547c1515
<             stop(gettextf("directory '%s' does not contain R code",
<                           dir),
<                  domain = NA)
---
>             stop(gettextf("directory %s does not contain R code", sQuote(dir)), domain = "R-tools")
1549,1550c1517
<             stop(gettextf("directory '%s' does not contain Rd objects", dir),
<                  domain = NA)
---
>             stop(gettextf("directory %s does not contain Rd objects", sQuote(dir)), domain = "R-tools")
1575c1542
<             stop("you must specify 'package' or 'dir'")
---
>             stop("you must specify 'package' or 'dir' argument")
1578,1579c1545
<             stop(gettextf("directory '%s' does not exist", dir),
<                  domain = NA)
---
>             stop(gettextf("directory %s does not exist", sQuote(dir)), domain = "R-tools")
1584,1586c1550
<             stop(gettextf("directory '%s' does not contain R code",
<                           dir),
<                  domain = NA)
---
>             stop(gettextf("directory %s does not contain R code", sQuote(dir)), domain = "R-tools")
1588,1589c1552
<             stop(gettextf("directory '%s' does not contain Rd objects", dir),
<                  domain = NA)
---
>             stop(gettextf("directory %s does not contain Rd objects", sQuote(dir)), domain = "R-tools")
1776,1779c1739,1740
<             c(gettextf("S3 methods shown with full name in documentation object '%s':",
<                        nm),
<               .pretty_format(methods_with_full_name),
<               "")
---
>             c(gettextf("S3 methods shown with full name in documentation object %s:", sQuote(nm), domain = "R-tools"),
>               .pretty_format(methods_with_full_name), "")
1807c1768
<             stop("argument 'package' must be of length 1")
---
>             stop(gettextf("'%s' argument must be of length 1", "package"))
1815,1817c1776
<             stop(gettextf("directory '%s' does not contain R code",
<                           dir),
<                  domain = NA)
---
>             stop(gettextf("directory %s does not contain R code", sQuote(dir)), domain = "R-tools")
1844,1845c1803
<             stop(gettextf("directory '%s' does not exist", dir),
<                  domain = NA)
---
>             stop(gettextf("directory %s does not exist", sQuote(dir)), domain = "R-tools")
1862,1864c1820
<             stop(gettextf("directory '%s' does not contain R code",
<                           dir),
<                  domain = NA)
---
>             stop(gettextf("directory %s does not contain R code", sQuote(dir)), domain = "R-tools")
1867c1823
<         if(!file.create(file)) stop("unable to create ", file, domain = NA)
---
>         if(!file.create(file)) stop(gettext("unable to create %s", file), domain = "R-tools")
1871c1827
<             stop("unable to write code files", domain = NA)
---
>             stop("unable to write code files", domain = "R-tools")
1879,1880c1835
<         stop(gettextf("file '%s' does not exist", file),
<              domain = NA)
---
>         stop(gettextf("file %s does not exist", sQuote(file)), domain = "R-tools")
1942,1945c1897
<                         other_desc <<-
<                             c(other_desc,
<                               sprintf("symbol %s in the local frame",
<                                       sQuote(name)))
---
>       other_desc <<- c(other_desc, gettextf("symbol %s in the local frame", sQuote(name), domain = "R-tools"))
1948,1951c1900
<                         other_desc <<-
<                             c(other_desc,
<                               sprintf("symbol %s not in namespace",
<                                       sQuote(name)))
---
>                         other_desc <<- c(other_desc, gettextf("symbol %s not in namespace", sQuote(name), domain = "R-tools"))
1963,1965c1912
<                 other_desc <<-
<                     c(other_desc, sprintf("Evaluating %s during check gives error\n%s",
<                                           sQuote(name), sQuote(sym$message)))
---
>     	    other_desc <<- c(other_desc, gettextf("Evaluating %s during check gives error\n%s", sQuote(name), sQuote(sym$message), domain = "R-tools"))
1987,1988c1934
<     	    other_desc <<- c(other_desc, sprintf("%s is of class \"%s\"",
<                                                  sQuote(name), class(sym)))
---
>     	    other_desc <<- c(other_desc, gettextf("%s is of class %s", sQuote(name), dQuote(class(sym)), domain = "R-tools"))
2005,2007c1951,1953
<                       sprintf("call includes ..., expected %d %s",
<                               numparms,
<                               if(numparms > 1L) "parameters" else "parameter"))
---
>                       sprintf(ngettext(numparms, "call includes '...', expected %d parameter",
> 						"call includes '...', expected %d parameters", domain = "R-tools"),
>                               numparms))
2017,2020c1963,1965
<                           sprintf("call to %s with %d %s, expected %d",
<                                   sQuote(name), callparms,
<                                   if(callparms > 1L) "parameters" else "parameter",
<                                   numparms))
---
>                           paste(sprintf(ngettext(callparms, "call to %s with %d parameter, expected %d",
> 						"call to %s with %d parameters, expected %d", domain = "R-tools"),
>                                   sQuote(name), callparms, numparms), collapse = ""))
2027c1972
<     	    other_desc <<- c(other_desc, sprintf("%s registered as %s, but called with %s", sQuote(name), ".Call", FF_fun))
---
>     	    other_desc <<- c(other_desc, gettextf("%s registered as %s, but called with %s", sQuote(name), sQuote(".Call"), sQuote(FF_fun), domain = "R-tools"))
2032c1977
< 	    other_desc <<- c(other_desc, sprintf("%s registered as %s, but called with %s", sQuote(name), ".External", FF_fun))
---
> 	    other_desc <<- c(other_desc, gettextf("%s registered as %s, but called with %s", sQuote(name), sQuote(".External"), sQuote(FF_fun), domain = "R-tools"))
2135,2138c2080,2082
<                      stop(gettextf("parse error in file '%s':\n%s",
<                                    file,
<                                    .massage_file_parse_error_message(conditionMessage(e))),
<                           domain = NA, call. = FALSE))
---
>                      stop(gettextf("parse error in file %s:", sQuote(file)), "\n",
>                                    .massage_file_parse_error_message(conditionMessage(e)),
>                           domain = "R-tools", call. = FALSE))
2185c2129
<                         domain = NA)
---
>                         domain = "R-tools")
2194c2138
<                         domain = NA)
---
>                         domain = "R-tools")
2215c2159
<                             domain = NA)
---
>                             domain = "R-tools")
2225c2169
<                             domain = NA)
---
>                             domain = "R-tools")
2234c2178
<                         domain = NA)
---
>                         domain = "R-tools")
2241c2185
<     		        domain = NA)
---
>     		        domain = "R-tools")
2252,2254c2196,2198
<     		        "Call with DUP:",
<     		        "Calls with DUP:",
<     		        domain = NA)
---
>     		        "Call with 'DUP':",
>     		        "Calls with 'DUP':",
>     		        domain = "R-tools")
2277c2221
<             stop("argument 'package' must be of length 1")
---
>             stop(gettextf("'%s' argument must be of length 1", "package"))
2282,2284c2226
<             stop(gettextf("directory '%s' does not contain R code",
<                           dir),
<                  domain = NA)
---
>             stop(gettextf("directory %s does not contain R code", sQuote(dir)), domain = "R-tools")
2308c2250,2251
<             stop("you must specify 'package' or 'dir'")
---
>             stop("you must specify 'package' or 'dir' argument")
> 
2311,2312c2254
<             stop(gettextf("directory '%s' does not exist", dir),
<                  domain = NA)
---
>             stop(gettextf("directory %s does not exist", sQuote(dir)), domain = "R-tools")
2317,2319c2259,2260
<             stop(gettextf("directory '%s' does not contain R code",
<                           dir),
<                  domain = NA)
---
>             stop(gettextf("directory %s does not contain R code", sQuote(dir)), domain = "R-tools")
> 
2384,2385c2325
<             if(!exists(".__S3MethodsTable__.", envir = defenv,
<                        inherits = FALSE)) {
---
>             if(!exists(".__S3MethodsTable__.", envir = defenv, inherits = FALSE)) {
2392,2393c2332
<             S3Table <- get(".__S3MethodsTable__.", envir = defenv,
<                            inherits = FALSE)
---
>             S3Table <- get(".__S3MethodsTable__.", envir = defenv, inherits = FALSE)
2395,2398c2334
<                 warning(gettextf("declared S3 method '%s' not found",
<                                  m),
<                         domain = NA,
<                         call. = FALSE)
---
>                 warning(gettextf("declared S3 method %s not found", sQuote(m)), domain = "R-tools", call. = FALSE)
2425,2427c2361
<         else if (g %in% c("+", "-", "*", "/", "^", "%%", "%/%", "&", "|",
<                           "!", "==", "!=", "<", "<=", ">=", ">")
<                  && (length(ogArgs) == length(omArgs)) )
---
>         else if (g %in% c("+", "-", "*", "/", "^", "%%", "%/%", "&", "|", "!", "==", "!=", "<", "<=", ">=", ">") && (length(ogArgs) == length(omArgs)) )
2439,2442c2373
<                  .get_S3_generics_as_seen_from_package(dir,
<                                                        !missing(package),
<                                                        FALSE),
<                  S3_group_generics, S3_primitive_generics))
---
>                  .get_S3_generics_as_seen_from_package(dir, !missing(package), FALSE), S3_group_generics, S3_primitive_generics))
2464,2465c2395
<             functions_in_code[substr(functions_in_code, 1L,
<                                      nchar(name, type="c")) == name]
---
>             functions_in_code[substr(functions_in_code, 1L, nchar(name, type="c")) == name]
2512c2442
<             stop("argument 'package' must be of length 1")
---
>             stop(gettextf("'%s' argument must be of length 1", "package"))
2517,2519c2447
<             stop(gettextf("directory '%s' does not contain R code",
<                           dir),
<                  domain = NA)
---
>             stop(gettextf("directory %s does not contain R code", sQuote(dir)), domain = "R-tools")
2540c2468
<             stop("you must specify 'package' or 'dir'")
---
>             stop("you must specify 'package' or 'dir' argument")
2543,2544c2471
<             stop(gettextf("directory '%s' does not exist", dir),
<                  domain = NA)
---
>             stop(gettextf("directory %s does not exist", sQuote(dir)), domain = "R-tools")
2549,2551c2476
<             stop(gettextf("directory '%s' does not contain R code",
<                           dir),
<                  domain = NA)
---
>             stop(gettextf("directory %s does not contain R code", sQuote(dir)), domain = "R-tools")
2657c2582
<             stop("argument 'package' must be of length 1")
---
>             stop(gettextf("'%s' argument must be of length 1", "package"))
2668,2669c2593
<             code_files <- c(code_files,
<                             list_files_with_exts(example_dir, "R"))
---
>             code_files <- c(code_files, list_files_with_exts(example_dir, "R"))
2675,2676c2599
<             stop(gettextf("directory '%s' does not exist", dir),
<                  domain = NA)
---
>             stop(gettextf("directory %s does not exist", sQuote(dir)), domain = "R-tools")
2688,2689c2611
<             stop(gettextf("file '%s' does not exist", file),
<                  domain = NA)
---
>             stop(gettextf("file %s does not exist", sQuote(file)), domain = "R-tools")
2694c2616
<         stop("you must specify 'package', 'dir' or 'file'")
---
>         stop("you must specify 'package', 'dir' or 'file' argument")
2717,2718c2639,2640
<                      stop(gettextf("parse error in file '%s':\n",
<                                    file,
---
>                      stop(gettextf("parse error in file %s:\n",
>                                    sQuote(file),
2720c2642
<                           domain = NA, call. = FALSE))
---
>                           domain = "R-tools", call. = FALSE))
2724,2726c2646
<                      stop(gettextf("parse error in examples from file '%s':\n",
<                                    file, conditionMessage(e)),
<                           domain = NA, call. = FALSE))
---
>                      stop(gettextf("parse error in examples from file %s:\n", sQuote(file), conditionMessage(e)), domain = "R-tools", call. = FALSE))
2760c2680
<         c(gettextf("File '%s':", fname),
---
>         c(gettextf("File %s:", sQuote(fname), domain = "R-tools"),
2763,2766c2683
<                             strwrap(gettextf("found T/F in %s",
<                                              paste(deparse(xfname[[i]]),
<                                                    collapse = "")),
<                                     exdent = 4L)
---
>                             strwrap(gettextf("found T/F in %s", paste(deparse(xfname[[i]]), collapse = ""), domain = "R-tools"), exdent = 4L)
2810c2727
<         stop("argument 'package' must be of length 1")
---
>         stop(gettextf("'%s' argument must be of length 1", "package"))
2819,2821c2736
< 	message(sprintf(
<             "package name '%s' seems invalid; using directory name '%s' instead",
<             package_name, dir_name))
---
> 	message(gettextf("package name %s seems invalid; using directory name %s instead", sQuote(package_name), sQuote(dir_name)))
2835c2750
<             "  No repository set, so cyclic dependency check skipped"
---
>             gettext("  No repository set, so cyclic dependency check skipped", domain = "R-tools")
2894,2895c2809
<                     desc <- readRDS(file.path(installed_in[where[1L]], pkg,
<                                               "Meta", "package.rds"))
---
>                     desc <- readRDS(file.path(installed_in[where[1L]], pkg, "Meta", "package.rds"))
2991,2993c2905,2906
<           c("There is circular dependency in the installation order:",
<             .pretty_format2("  One or more packages in", x$all_depends),
<             "  depend on this package (for the versions on the repositories).",
---
>           c(gettext("There is circular dependency in the installation order:", domain = "R-tools"),
>             "  ", .pretty_format2(gettextf("One or more packages in %s depend on this package.", x$all_depends, domain = "R-tools")),
2996,3012c2909,2910
<       if(length(bad <- x$required_but_not_installed) > 1L) {
<           c(.pretty_format2("Packages required but not available:", bad), "")
<       } else if(length(bad)) {
<           c(sprintf("Package required but not available: %s", sQuote(bad)), "")
<       },
<       if(length(bad <- x$suggested_but_not_installed) > 1L) {
<           c(.pretty_format2("Packages suggested but not available:", bad), "")
<       } else if(length(bad)) {
<           c(sprintf("Package suggested but not available: %s", sQuote(bad)), "")
<       },
<       if(length(bad <- x$required_but_obsolete) > 1L) {
<           c(.pretty_format2("Packages required and available but unsuitable versions:",
<                             bad),
<             "")
<       } else if(length(bad)) {
<           c(sprintf("Package required and available but unsuitable version: %s", sQuote(bad)),
<             "")
---
>       if(length(bad <- x$required_but_not_installed) >= 1L) {
>           c(.pretty_format2(ngettext(length(bad), "Package required but not available:", "Packages required but not available:", domain = "R-tools"), bad), "")
3014,3029c2912,2913
<       if(length(bad <- x$required_but_stub) > 1L) {
<           c("Former standard packages required but now defunct:",
<             .pretty_format(bad),
<             "")
<       } else if(length(bad)) {
<           c(sprintf("Former standard package required but now defunct: %s",
<                     sQuote(bad)), "")
<       },
<       if(length(bad <- x$suggests_but_not_installed) > 1L) {
<           c(.pretty_format2("Packages suggested but not available for checking:",
<                             bad),
<             "")
<       } else if(length(bad)) {
<           c(sprintf("Package suggested but not available for checking: %s",
<                      sQuote(bad)),
<             "")
---
>       if(length(bad <- x$suggested_but_not_installed) >= 1L) {
>           c(.pretty_format2(ngettext(length(bad), "Package suggested but not available:", "Packages suggested but not available:", domain = "R-tools"), bad), "")
3031,3037c2915,2916
<       if(length(bad <- x$enhances_but_not_installed) > 1L) {
<           c(.pretty_format2("Packages which this enhances but not available for checking:",
<                             bad),
<             "")
<       } else if(length(bad)) {
<           c(sprintf("Package which this enhances but not available for checking: %s", sQuote(bad)),
<             "")
---
>       if(length(bad <- x$required_but_obsolete) >= 1L) {
>           c(.pretty_format2(ngettext(length(bad), "Package required and available but unsuitable version:", "Packages required and available but unsuitable versions:", domain = "R-tools"), bad), "")
3039,3053c2918,2922
<       if(length(bad <- x$required_for_checking_but_not_declared) > 1L) {
<           c(.pretty_format2("VignetteBuilder packages not declared:", bad), "")
<       } else if(length(bad)) {
<           c(sprintf("VignetteBuilder package not declared: %s", sQuote(bad)), "")
<       },
<       if(length(bad <- x$required_for_checking_but_not_installed) > 1L) {
<           c(.pretty_format2("VignetteBuilder packages required for checking but not installed:", bad), "")
<       } else if(length(bad)) {
<           c(sprintf("VignetteBuilder package required for checking but installed: %s", sQuote(bad)), "")
<       },
<       if(length(bad <- x$missing_vignette_depends)) {
<           c(if(length(bad) > 1L) {
<                 c("Vignette dependencies not required:", .pretty_format(bad))
<             } else {
<                 sprintf("Vignette dependencies not required: %s", sQuote(bad))
---
>       if(length(bad <- x$required_but_stub) >= 1L) {
>           c(.pretty_format2(ngettext(length(bad), "Former standard package required but now defunct:", "Former standard packages required but now defunct:", domain = "R-tools"), bad), "")
>       },
>       if(length(bad <- x$suggests_but_not_installed) >= 1L) {
>           c(.pretty_format2(ngettext(length(bad), "Package suggested but not available for checking:", "Packages suggested but not available for checking:", domain = "R-tools"), bad), "")
3054a2924,2931
>       if(length(bad <- x$enhances_but_not_installed) >= 1L) {
>           c(.pretty_format2(ngettext(length(bad), "Package which this enhances but not available for checking:", "Packages which this enhances but not available for checking:", domain = "R-tools"), bad), "")
>       },
>       if(length(bad <- x$required_for_checking_but_not_installed) >= 1L) {
>           c(.pretty_format2(ngettext(length(bad), "VignetteBuilder package required for checking but not available:", "VignetteBuilder packages required for checking but not available:", domain = "R-tools"), bad), "")
>       },
>       if(length(bad <- x$missing_vignette_depends) >= 1L) {
>           c(.pretty_format2(ngettext(length(bad), "Vignette dependency not required:", "Vignette dependencies not required:", domain = "R-tools"), bad),
3056,3057c2933
<                              "\\VignetteDepends{}")),
<             "")
---
>                              sQuote("\\VignetteDepends{}"), domain = "R-tools")), "")
3059,3062c2935,2936
<       if(length(bad <- x$missing_namespace_depends) > 1L) {
<           c(.pretty_format2("Namespace dependencies not required:", bad), "")
<       } else if(length(bad)) {
<           c(sprintf("Namespace dependency not required: %s", sQuote(bad)), "")
---
>       if(length(bad <- x$missing_namespace_depends) >= 1L) {
>           c(.pretty_format2(ngettext(length(bad), "Namespace dependency not required:", "Namespace dependencies not required:", domain = "R-tools"), bad), "")
3065,3070c2939,2940
<           c(.pretty_format2("Depends: includes the non-default packages:", y),
<             strwrap(paste("Adding so many packages to the search path",
<                           "is excessive",
<                           "and importing selectively is preferable."
<                           , collapse = ", ")),
<             "")
---
>           c(.pretty_format2(gettext("Depends: includes the non-default packages:", domain = "R-tools"), y),
>             strwrap(gettext("Adding so many packages to the search path is excessive and importing selectively is preferable.", domain = "R-tools")), "")
3076,3080c2946,2948
<           c(if(length(bad) > 1L)
<             c("Packages in Depends/Imports which should probably only be in LinkingTo:", .pretty_format(bad))
<           else
<             sprintf("Package in Depends/Imports which should probably only be in LinkingTo: %s", sQuote(bad)),
<             "")
---
>           c(
>             c(sprintf(ngettext(length(bad), "Package in 'Depends/Imports' which should probably only be in 'LinkingTo': %s", "Packages in 'Depends/Imports' which should probably only be in 'LinkingTo': %s", domain = "R-tools"), .pretty_format(bad)), "")
>            )
3112,3113c2980
<     ASCII_fields <- c(.get_standard_repository_db_fields(),
<                       "Encoding", "License")
---
>     ASCII_fields <- c(.get_standard_repository_db_fields(), "Encoding", "License")
3156c3023
<             tmp <- c(tmp, gettext("Malformed package name"))
---
>             tmp <- c(tmp, gettext("Malformed package name", domain = "R-tools"))
3160,3161c3027,3028
<                          c("Invalid package name.",
<                            "This is the name of a base package."))
---
>                          c(gettext("Invalid package name.", domain = "R-tools"),
>                            gettext("This is the name of a base package.", domain = "R-tools")))
3164,3165c3031,3032
<                          c("Invalid package name.",
<                            "This name was used for a base package and is remapped by library()."))
---
>                          c(gettext("Invalid package name.", domain = "R-tools"),
>                            gettext("This name was used for a base package and is remapped by library().", domain = "R-tools")))
3182,3183c3049
<     val <- db[match(c("Depends", "Suggests", "Imports", "Enhances"),
<                     names(db), nomatch = 0L)]
---
>     val <- db[match(c("Depends", "Suggests", "Imports", "Enhances"), names(db), nomatch = 0L)]
3200,3201c3066
<                 if(!sub(dep_regexp, "\\3", dep) %in%
<                    c("<=", ">=", "<", ">", "==", "!="))
---
>                 if(!sub(dep_regexp, "\\3", dep) %in% c("<=", ">=", "<", ">", "==", "!="))
3204,3206c3069
<                     if(!grepl(sprintf("^(r[0-9]+|%s)$",
<                                       valid_package_version_regexp),
<                               sub(dep_regexp, "\\4", dep)))
---
>                     if(!grepl(sprintf("^(r[0-9]+|%s)$", valid_package_version_regexp), sub(dep_regexp, "\\4", dep)))
3208,3210c3071
<                 } else if(!grepl(sprintf("^%s$",
<                                          valid_package_version_regexp),
<                                  sub(dep_regexp, "\\4", dep)))
---
>                 } else if(!grepl(sprintf("^%s$", valid_package_version_regexp), sub(dep_regexp, "\\4", dep)))
3240c3101
<         writeLines(c(gettext("Unknown encoding"), ""))
---
>         writeLines(c(gettext("Unknown encoding", domain = "R-tools"), ""))
3243c3104
<         writeLines(gettext("Fields with non-ASCII tags:"))
---
>         writeLines(gettext("Fields with non-ASCII tags:", domain = "R-tools"))
3245c3106
<         writeLines(c(gettext("All field tags must be ASCII."), ""))
---
>         writeLines(c(gettext("All field tags must be ASCII.", domain = "R-tools"), ""))
3249c3110
<         writeLines(gettext("Fields with non-ASCII values:"))
---
>         writeLines(gettext("Fields with non-ASCII values:", domain = "R-tools"))
3251c3112
<         writeLines(c(gettext("These fields must have ASCII values."), ""))
---
>         writeLines(c(gettext("These fields must have ASCII values.", domain = "R-tools"), ""))
3268c3129
<         writeLines(c(gettext("Malformed package version."), ""))
---
>         writeLines(c(gettext("Malformed package version.", domain = "R-tools"), ""))
3271c3132
<         writeLines(c(gettext("Malformed maintainer field."), ""))
---
>         writeLines(c(gettext("Malformed maintainer field.", domain = "R-tools"), ""))
3275c3136
<         writeLines(gettext("Malformed Depends or Suggests or Imports or Enhances field."))
---
>         writeLines(gettext("Malformed Depends or Suggests or Imports or Enhances field.", domain = "R-tools"))
3277c3138
<             tmp <- c(gettext("Offending entries:"),
---
>             tmp <- c(gettext("Offending entries:", domain = "R-tools"),
3279c3140
<                      strwrap(gettextf("Entries must be names of packages optionally followed by '<=' or '>=', white space, and a valid version number in parentheses.")))
---
>                      strwrap(gettext("Entries must be names of packages optionally followed by '<=' or '>=', white space, and a valid version number in parentheses.", domain = "R-tools")))
3283c3144
<             tmp <- c(gettext("Entries with infeasible comparison operator:"),
---
>             tmp <- c(gettext("Entries with infeasible comparison operator:", domain = "R-tools"),
3285c3146
<                      strwrap(gettextf("Only operators '<=' and '>=' are possible.")))
---
>                      strwrap(gettext("Only operators '<=' and '>=' are possible.", domain = "R-tools")))
3290c3151
<             tmp <- c(gettext("Entries with infeasible version number:"),
---
>             tmp <- c(gettext("Entries with infeasible version number:", domain = "R-tools"),
3292c3153
<                      strwrap(gettextf("Version numbers must be sequences of at least two non-negative integers, separated by single '.' or '-'.")))
---
>                      strwrap(gettext("Version numbers must be sequences of at least two non-negative integers, separated by single '.' or '-'.", domain = "R-tools")))
3298,3300c3159,3160
<         writeLines(c(gettext("Invalid VignetteBuilder field."),
<                      strwrap(gettextf("This field must contain one or more packages (and no version requirement).")),
<                      ""))
---
>         writeLines(c(gettext("Invalid VignetteBuilder field.", domain = "R-tools"),
>                      strwrap(gettextf("This field must contain one or more packages (and no version requirement).", domain = "R-tools")), ""))
3304,3306c3164,3165
<         writeLines(c(gettext("Invalid Priority field."),
<                      strwrap(gettextf("Packages with priorities 'base' or 'recommended' or 'defunct-base' must already be known to R.")),
<                      ""))
---
>         writeLines(c(gettext("Invalid Priority field.", domain = "R-tools"),
>                      strwrap(gettext("Packages with priorities 'base' or 'recommended' or 'defunct-base' must already be known to R.", domain = "R-tools")), ""))
3309,3310c3168
<         writeLines(c(strwrap(gettextf("See section 'The DESCRIPTION file' in the 'Writing R Extensions' manual.")),
<                      ""))
---
>         writeLines(c(strwrap(gettext("See section 'The DESCRIPTION file' in the 'Writing R Extensions' manual.", domain = "R-tools")), ""))
3371,3376c3229
<         c(if(length(xx) > 1L)
<           "Packages listed in more than one of Depends, Imports, Suggests, Enhances:"
<         else
<           "Package listed in more than one of Depends, Imports, Suggests, Enhances:",
<           paste(c(" ", sQuote(xx)), collapse = " "),
<           "A package should be listed in only one of these fields.")
---
> 	sprintf(ngettext(length(xx), "Package listed in more than one of Depends, Imports, Suggests, Enhances: %s\nA package should be listed in only one of these fields.", "Packages listed in more than one of Depends, Imports, Suggests, Enhances: %s\nA package should be listed in only one of these fields.", domain = "R-tools"), paste(c(" ", sQuote(xx)), collapse = " "))
3378c3231
<       if(!x$have_src) "'LinkingTo' field is unused: package has no 'src' directory",
---
>       if(!x$have_src) gettextf("'LinkingTo' field is unused: package has no 'src' directory", domain = "R-tools"),
3380,3386c3233
<           if(length(xx) > 1L)
<               c("Versioned 'LinkingTo' values for",
<                 paste(c(" ", sQuote(xx)), collapse = " "),
<                 "are only usable in R >= 3.0.2")
<           else
<               sprintf("Versioned 'LinkingTo' value for %s is only usable in R >= 3.0.2",
<                       sQuote(xx))
---
> 	  sprintf(ngettext(length(xx), "Versioned 'LinkingTo' value for %s is only usable in R >= 3.0.2", "Versioned 'LinkingTo' values for %s are only usable in R >= 3.0.2", domain = "R-tools"), paste(c(" ", sQuote(xx)), collapse = " "))
3389,3394c3236
<           if(length(xx) > 1L)
<               c("'LinkingTo' for",
<                 paste(c(" ", sQuote(xx)), collapse = " "),
<                 "are unused as they have no 'include' directory")
<           else
<               sprintf("'LinkingTo' for %s is unused as it has no 'include' directory", sQuote(xx))
---
> 	sprintf(ngettext(length(xx), "'LinkingTo' for %s is unused as it has no 'include' directory", "'LinkingTo' for %s are unused as they have no 'include' directory"), paste(sQuote(xx), collapse = ", "))
3450,3451c3292
<           c(gettext("Malformed Authors@R field:"),
<             paste(" ", bad))
---
>           c(gettext("Malformed Authors@R field:", domain = "R-tools"), paste(" ", bad))
3454,3455c3295
<           c(gettext("Cannot extract Author field from Authors@R field:"),
<             paste(" ", bad))
---
>           c(gettext("Cannot extract Author field from Authors@R field:", domain = "R-tools"), paste(" ", bad))
3458c3298
<           gettext("Authors@R field gives no person with author role.")
---
>           gettext("Authors@R field gives no person with author role.", domain = "R-tools")
3462,3463c3302
<           c(gettext("Authors@R field gives persons with no valid roles:"),
<             paste(" ", bad))
---
>           c(gettext("Authors@R field gives persons with no valid roles:", domain = "R-tools"), paste(" ", bad))
3466,3467c3305
<           c(gettext("Cannot extract Maintainer field from Authors@R field:"),
<             paste(" ", bad))
---
>           c(gettext("Cannot extract Maintainer field from Authors@R field:", domain = "R-tools"), paste(" ", bad))
3470c3308
<           gettext("Authors@R field gives no person with maintainer role and email address.")
---
>           gettext("Authors@R field gives no person with maintainer role and email address.", domain = "R-tools")
3511,3513c3349
<           c(gettextf("Encoding '%s' is not portable",
<                      x$non_portable_encoding),
<             "")
---
>           c(gettextf("Encoding %s is not portable", sQuote(x$non_portable_encoding), domain = "R-tools"), "")
3516c3352
<           gettext("Unknown encoding with non-ASCII data")
---
>           gettext("Unknown encoding with non-ASCII data", domain = "R-tools")
3519,3522c3355
<           c(gettext("Fields with non-ASCII tags:"),
<             .pretty_format(x$fields_with_non_ASCII_tags),
<             gettext("All field tags must be ASCII."),
<             "")
---
>           c(gettext("Fields with non-ASCII tags:", domain = "R-tools"), .pretty_format(x$fields_with_non_ASCII_tags), gettext("All field tags must be ASCII.", domain = "R-tools"), "")
3525,3526c3358
<           c(gettext("Fields with non-ASCII values:"),
<             .pretty_format(x$fields_with_non_ASCII_values))
---
>           c(gettext("Fields with non-ASCII values:", domain = "R-tools"), .pretty_format(x$fields_with_non_ASCII_values))
3529,3530c3361
<           c(strwrap(gettextf("See section 'The DESCRIPTION file' in the 'Writing R Extensions' manual.")),
<             "")
---
>           c(strwrap(gettext("See section 'The DESCRIPTION file' in the 'Writing R Extensions' manual.", domain = "R-tools")), "")
3614c3445
<           c(gettext("Non-standard license specification:"),
---
>           c(gettext("Non-standard license specification:", domain = "R-tools"),
3616c3447
<             gettextf("Standardizable: %s", x$is_standardizable),
---
>             paste(if(x$is_standardizable) gettext("Standardizable: TRUE", domain = "R-tools") else gettext("Standardizable: FALSE", domain = "R-tools"), sep = ""),
3618,3619c3449
<                 c(gettext("Standardized license specification:"),
<                   strwrap(x$standardization, indent = 2L, exdent = 2L))
---
>                 c(gettext("Standardized license specification:", domain = "R-tools"), strwrap(x$standardization, indent = 2L, exdent = 2L))
3623,3624c3453
<           c(gettextf("Deprecated license: %s",
<                      paste(y, collapse = " ")))
---
>           c(gettextf("Deprecated license: %s", paste(y, collapse = " "), domain = "R-tools"))
3627,3628c3456
<           c(gettextf("Invalid license file pointers: %s",
<                      paste(y, collapse = " ")))
---
>           c(paste(gettextf("Invalid license file pointers: %s", paste(y, collapse = " "), domain = "R-tools"), sep = ""))
3631,3632c3459
<           c(gettext("License components with restrictions not permitted:"),
<             paste(" ", y))
---
>           c(gettext("License components with restrictions not permitted:", domain = "R-tools"), paste(" ", y))
3635,3636c3462
<           c(gettext("License components which are templates and need '+ file LICENSE':"),
<             paste(" ", y))
---
>           c(gettext("License components which are templates and need '+ file LICENSE':", domain = "R-tools"), paste(" ", y))
3660,3661c3486
<                        shQuote(file.path(R.home("share"), "make",
<                                          "check_vars_ini.mk")),
---
>                        shQuote(file.path(R.home("share"), "make", "check_vars_ini.mk")),
3663,3664c3488
<                        shQuote(file.path(R.home("share"), "make",
<                                          "check_vars_out.mk")))
---
>                        shQuote(file.path(R.home("share"), "make", "check_vars_out.mk")))
3673,3674c3497
<     uflags_re <- sprintf("^(%s)FLAGS: *(.*)$",
<                          paste(prefixes, collapse = "|"))
---
>     uflags_re <- sprintf("^(%s)FLAGS: *(.*)$", paste(prefixes, collapse = "|"))
3681,3682c3504
<     pflags_re <- sprintf("^PKG_(%s)FLAGS: ",
<                          paste(prefixes, collapse = "|"))
---
>     pflags_re <- sprintf("^PKG_(%s)FLAGS: ", paste(prefixes, collapse = "|"))
3722,3724c3544
<                  gettextf("Non-portable flags in variable '%s':",
<                           names(x)),
<                  sprintf("  %s", lapply(x, paste, collapse = " ")))
---
>                  gettextf("Non-portable flags in variable %s:", sQuote(names(x)), domain = "R-tools"), sprintf("  %s", lapply(x, paste, collapse = " ")))
3731,3732c3551
<           c(gettextf("Variables overriding user/site settings:"),
<             sprintf("  %s", bad))
---
>           c(gettext("Variables overriding user/site settings:", domain = "R-tools"), sprintf("  %s", bad))
3735,3737c3554,3555
<           c(sprintf("Package has both %s and %s.",
<                   sQuote("src/Makevars.in"), sQuote("src/Makevars")),
<             strwrap(sprintf("Installation with --no-configure' is unlikely to work.  If you intended %s to be used on Windows, rename it to %s otherwise remove it.  If %s created %s, you need a %s script.",
---
>           c(gettextf("Package has both %s and %s.", sQuote("src/Makevars.in"), sQuote("src/Makevars"), domain = "R-tools"),
>             strwrap(gettextf("Installation with --no-configure' is unlikely to work. If you intended %s to be used on Windows, rename it to %s otherwise remove it.  If %s created %s, you need a %s script.",
3742c3560
<                             sQuote("cleanup"))))
---
>                             sQuote("cleanup"), domain = "R-tools")))
3782,3783c3600
<             assign("X11.options", function(..., reset = TRUE) {},
<                    envir = compat)
---
>             assign("X11.options", function(..., reset = TRUE) {}, envir = compat)
3791,3792c3608
<             assign("quartz.options", function(..., reset = TRUE) {},
<                    envir = compat)
---
>             assign("quartz.options", function(..., reset = TRUE) {}, envir = compat)
3795,3799c3611,3612
<             assign("bringToTop", function (which = dev.cur(), stay = FALSE) {},
<                    envir = compat)
<             assign("choose.dir",
<                    function (default = "", caption = "Select folder") {},
<                    envir = compat)
---
>             assign("bringToTop", function (which = dev.cur(), stay = FALSE) {}, envir = compat)
>             assign("choose.dir", function (default = "", caption = "Select folder") {}, envir = compat)
3805,3806c3618
<             assign("getClipboardFormats", function(numeric = FALSE) {},
<                    envir = compat)
---
>             assign("getClipboardFormats", function(numeric = FALSE) {}, envir = compat)
3808,3809c3620
<             assign("getWindowsHandle", function(which = "Console") {},
<                    envir = compat)
---
>             assign("getWindowsHandle", function(which = "Console") {}, envir = compat)
3811,3815c3622,3623
<             assign("readClipboard", function(format = 1, raw = FALSE) {},
<                    envir = compat)
<             assign("setWindowTitle",
<                    function(suffix, title = paste(getIdentification(), suffix)) {},
<                    envir = compat)
---
>             assign("readClipboard", function(format = 1, raw = FALSE) {}, envir = compat)
>             assign("setWindowTitle", function(suffix, title = paste(getIdentification(), suffix)) {}, envir = compat)
3818,3820c3626
<                             wait = TRUE, translate = FALSE, mustWork = FALSE,
<                             ...) {},
<                    envir = compat)
---
>                             wait = TRUE, translate = FALSE, mustWork = FALSE, ...) {}, envir = compat)
3883,3884c3689
<         attach(compat, name="compat", pos = length(search()),
<                warn.conflicts = FALSE)
---
>         attach(compat, name="compat", pos = length(search()), warn.conflicts = FALSE)
3912c3717
< 	    stop("package must be loaded", domain = NA)
---
> 	    stop("package must be loaded", domain = "R-tools")
3924,3925c3729
<     opts <- unlist(strsplit(Sys.getenv("_R_CHECK_CODETOOLS_PROFILE_"),
<                             "[[:space:]]*,[[:space:]]*"))
---
>     opts <- unlist(strsplit(Sys.getenv("_R_CHECK_CODETOOLS_PROFILE_"), "[[:space:]]*,[[:space:]]*"))
4045,4046c3849
<         config_val_to_logical(Sys.getenv("_R_CHECK_XREFS_USE_ALIASES_FROM_CRAN_",
<                                          FALSE))
---
>         config_val_to_logical(Sys.getenv("_R_CHECK_XREFS_USE_ALIASES_FROM_CRAN_", FALSE))
4059,4060c3862
<                 message(gettextf("package %s exists but was not installed under R >= 2.10.0 so xrefs cannot be checked", sQuote(pkg)),
<                         domain = NA)
---
>                 message(gettextf("package %s exists but was not installed under R >= 2.10.0 so xrefs cannot be checked", sQuote(pkg)), domain = "R-tools")
4100c3902
<                                  "Obsolete packages %s in Rd xrefs"),
---
>                                  "Obsolete packages %s in Rd xrefs", domain = "R-tools"),
4122c3924
<                                      "Packages unavailable to check Rd xrefs: %s"),
---
>                                      "Packages unavailable to check Rd xrefs: %s", domain = "R-tools"),
4128c3930
<                                      "Unknown packages %s in Rd xrefs"),
---
>                                      "Unknown packages %s in Rd xrefs", domain = "R-tools"),
4144,4145c3946
<             c(gettextf("Missing link or links in documentation object '%s':",
<                        names(xx)[i]),
---
>             c(gettextf("Missing link or links in documentation object %s:", sQuote(names(xx)[i]), domain = "R-tools"),
4147,4148c3948
<               .pretty_format(unique(xx[[i]])),
<               "")
---
>               .pretty_format(unique(xx[[i]])), "")
4151,4152c3951
<           strwrap(gettextf("See section 'Cross-references' in the 'Writing R Extensions' manual.")),
<           "")
---
>           strwrap(gettext("See section 'Cross-references' in the 'Writing R Extensions' manual.", domain = "R-tools")), "")
4200,4201c3999
<         .try_quietly(utils::data(list = f, package = character(),
<                                  envir = dataEnv))
---
>         .try_quietly(utils::data(list = f, package = character(), envir = dataEnv))
4229c4027
<                    "Note: found %d marked Latin-1 strings"), n)
---
>                    "Note: found %d marked Latin-1 strings", domain = "R-tools"), n)
4235c4033
<                            "Note: found %d marked UTF-8 strings"), n)
---
>                            "Note: found %d marked UTF-8 strings", domain = "R-tools"), n)
4241c4039
<                            "Note: found %d strings marked as \"bytes\""), n)
---
>                            "Note: found %d strings marked as \"bytes\"", domain = "R-tools"), n)
4247c4045
<                           domain = NA)
---
>                           domain = "R-tools")
4249,4250c4047
<             paste0(iconv0(x$unknown[, 1L], "", "ASCII", sub = "byte"),
<                    " in object '", x$unknown[, 2L], "'"))
---
>             gettextf("%s in object %s", iconv0(x$unknown[, 1L], "", "ASCII", sub = "byte"), sQuote(x$unknown[, 2L]), domain = "R-tools"))
4270c4067
<         if(!OK) msg <- "Warning: package needs dependence on R (>= 2.10)"
---
>         if(!OK) msg <- gettext("Warning: package needs dependence on R (>= 2.10)", domain = "R-tools")
4319c4116
<                         domain = NA)
---
>                         domain = "R-tools")
4328,4330c4125
<         writeLines(c("",
<                      "Note: significantly better compression could be obtained",
<                      "      by using R CMD build --resave-data"))
---
>         writeLines(c("", gettext("Note: significantly better compression could be obtained by using R CMD build --resave-data", domain = "R-tools")))
4356c4151
<         if(!OK) msg <- "Warning: package needs dependence on R (>= 2.10)"
---
>         if(!OK) msg <- gettext("Warning: package needs dependence on R (>= 2.10)", domain = "R-tools")
4408c4203
<         stop(gettextf("directory '%s' does not exist", dir), domain = NA)
---
>         stop(gettextf("directory %s does not exist", sQuote(dir)), domain = "R-tools")
4449,4450c4244
<         demo_files <- list_files_with_type(demo_dir, "demo",
<                                            full.names = FALSE)
---
>         demo_files <- list_files_with_type(demo_dir, "demo", full.names = FALSE)
4488,4490c4282
<         c(sprintf("Subdirectory '%s' contains invalid file names:",
<                   tag),
<           .pretty_format(x[[i]]))
---
>         c(gettextf("Subdirectory %s contains invalid file names:", sQuote(tag), domain = "R-tools"), .pretty_format(x[[i]]))
4503c4295
<         stop(gettextf("directory '%s' does not exist", dir), domain = NA)
---
>         stop(gettextf("directory %s does not exist", sQuote(dir)), domain = "R-tools")
4529c4321
<         stop(gettextf("directory '%s' does not exist", dir), domain = NA)
---
>         stop(gettextf("directory %s does not exist", sQuote(dir)), domain = "R-tools")
4586,4587c4378
<             lines <- iconv(readLines(file, warn = FALSE), from = enc, to = "",
<                            sub = "byte")
---
>             lines <- iconv(readLines(file, warn = FALSE), from = enc, to = "", sub = "byte")
4615,4618c4406
<     out <-
<         lapply(list_files_with_type(dir, "code", full.names = FALSE,
<                                     OS_subdirs = c("unix", "windows")),
<                collect_parse_woes)
---
>     out <- lapply(list_files_with_type(dir, "code", full.names = FALSE, OS_subdirs = c("unix", "windows")), collect_parse_woes)
4620,4621c4408
<     structure(out[sapply(out, length) > 0L],
<               class = "check_package_code_syntax")
---
>     structure(out[sapply(out, length) > 0L], class = "check_package_code_syntax")
4632,4635c4419,4420
<             msg <- gsub("\n", "\n  ", sub("[^:]*: *", "", xi$Error),
< 			perl = TRUE, useBytes = TRUE)
<             writeLines(c(sprintf("Error in file '%s':", xi$File),
<                          paste(" ", msg)))
---
>             msg <- gsub("\n", "\n  ", sub("[^:]*: *", "", xi$Error), perl = TRUE, useBytes = TRUE)
>             writeLines(c(gettextf("Error in file %s:", sQuote(xi$File), domain = "R-tools"), paste(" ", msg)))
4640c4425
<                                           "Warnings in file %s:"),
---
>                                           "Warnings in file %s:", domain = "R-tools"),
4642,4643c4427
<                          paste(" ", gsub("\n\n", "\n  ", xi$Warnings,
< 					 perl = TRUE, useBytes = TRUE))))
---
>                          paste(" ", gsub("\n\n", "\n  ", xi$Warnings, perl = TRUE, useBytes = TRUE))))
4661,4663c4445
<     x <- Filter(length,
<                 .find_calls_in_package_code(dir, predicate,
<                                             recursive = TRUE))
---
>     x <- Filter(length, .find_calls_in_package_code(dir, predicate, recursive = TRUE))
4668,4669c4450
<         writeLines(c(unlist(Map(.format_calls_in_file, x, names(x))),
<                      ""))
---
>         writeLines(c(unlist(Map(.format_calls_in_file, x, names(x))), ""))
4680,4681c4461
<     bad_call_names <-
<         unlist(.bad_call_names_in_startup_functions)
---
>     bad_call_names <- unlist(.bad_call_names_in_startup_functions)
4743c4523,4527
<     res <- if(!is.null(attr(x, ".First.lib"))) "NB: .First.lib is obsolete and will not be used in R >= 3.0.0" else character()
---
>     if(!is.null(attr(x, ".First.lib"))) {
> 	res <- gettext("NB: .First.lib is obsolete and will not be used in R >= 3.0.0", domain = "R-tools")
>    } else {
> 	res <- character()
>    }
4750,4760c4534,4538
<         has_bad_wrong_args <-
<             "bad_arg_names" %in% unlist(lapply(y, names))
<         calls <-
<             unique(unlist(lapply(y,
<                                  function(e) e[["bad_calls"]][["names"]])))
<         has_bad_calls_for_load <-
<             any(calls %in% .bad_call_names_in_startup_functions$load)
<         has_bad_calls_for_output <-
<             any(calls %in% .bad_call_names_in_startup_functions$output)
<         has_unsafe_calls <-
<             any(calls %in% .bad_call_names_in_startup_functions$unsafe)
---
>         has_bad_wrong_args <- "bad_arg_names" %in% unlist(lapply(y, names))
>         calls <- unique(unlist(lapply(y, function(e) e[["bad_calls"]][["names"]])))
>         has_bad_calls_for_load <- any(calls %in% .bad_call_names_in_startup_functions$load)
>         has_bad_calls_for_output <- any(calls %in% .bad_call_names_in_startup_functions$output)
>         has_unsafe_calls <- any(calls %in% .bad_call_names_in_startup_functions$unsafe)
4763c4541
<             c(gettextf("File %s:", sQuote(f)),
---
>             c(gettextf("File %s:", sQuote(f), domain = "R-tools"),
4770,4771c4548
<                 gettextf("  %s has wrong argument list %s",
<                          f, sQuote(paste(bad, collapse = ", ")))
---
>                 gettextf("  %s has wrong argument list %s", sQuote(f), sQuote(paste(bad, collapse = ", ")), domain = "R-tools")
4774c4551
<                   c(gettextf("  %s calls:", f),
---
>                   c(gettextf("  %s calls:", sQuote(f), domain = "R-tools"),
4786,4788c4563
<               strwrap(gettextf("Package startup functions should have two arguments with names starting with %s and %s, respectively.",
<                                sQuote("lib"), sQuote("pkg")),
<                       exdent = 2L),
---
>               strwrap(gettextf("Package startup functions should have two arguments with names starting with %s and %s, respectively.", sQuote("lib"), sQuote("pkg"), domain = "R-tools"), exdent = 2L),
4790,4791c4565
<               strwrap(gettextf("Package startup functions should not change the search path."),
<                       exdent = 2L),
---
>               strwrap(gettext("Package startup functions should not change the search path.", domain = "R-tools"), exdent = 2L),
4793,4795c4567
<               strwrap(gettextf("Package startup functions should use %s to generate messages.",
<                                sQuote("packageStartupMessage")),
<                       exdent = 2L),
---
>               strwrap(gettextf("Package startup functions should use %s to generate messages.", sQuote("packageStartupMessage"), domain = "R-tools"), exdent = 2L),
4797,4802c4569,4570
<               strwrap(gettextf("Package startup functions should not call %s.",
<                                sQuote("installed.packages")),
<                       exdent = 2L),
<               gettextf("See section %s in '%s'.",
<                        sQuote("Good practice"),
<                        "?.onAttach")
---
>               strwrap(gettextf("Package startup functions should not call %s.", sQuote("installed.packages"), domain = "R-tools"), exdent = 2L),
>               gettextf("See section %s in %s.", sQuote("Good practice"), sQuote("?.onAttach"), domain = "R-tools")
4896c4664,4668
<     res <- if(!is.null(attr(x, ".Last.lib"))) "NB: .Last.lib will not be used unless it is exported" else character()
---
>     if(!is.null(attr(x, ".Last.lib"))) {
> 	res <- gettext("NB: .Last.lib will not be used unless it is exported", domain = "R-tools")
>     } else {
> 	res <- character()
>     }
4909c4681
<             c(gettextf("File %s:", sQuote(f)),
---
>             c(gettextf("File %s:", sQuote(f), domain = "R-tools"),
4917c4689
<                          f, sQuote(paste(bad, collapse = ", ")))
---
>                          sQuote(f), sQuote(paste(bad, collapse = ", ")), domain = "R-tools")
4920c4692
<                   c(gettextf("  %s calls:", f),
---
>                   c(gettextf("  %s calls:", sQuote(f), domain = "R-tools"),
4932,4933c4704
<               strwrap(gettextf("Package detach functions should have one argument with name starting with %s.", sQuote("lib")),
<                       exdent = 2L),
---
>               strwrap(gettextf("Package detach functions should have one arguments with names starting with %s.", sQuote("lib"), domain = "R-tools"), exdent = 2L),
4935,4939c4706,4707
<               strwrap(gettextf("Package detach functions should not call %s.",
<                                sQuote("library.dynam.unload")),
<                       exdent = 2L),
<               gettextf("See section %s in '%s'.",
<                        sQuote("Good practice"), "?.Last.lib")
---
>               strwrap(gettextf("Package detach functions should not call %s.", sQuote("library.dynam.unload"), domain = "R-tools"), exdent = 2L),
>               gettextf("See section %s in %s.", sQuote("Good practice"), sQuote("?.Last.lib"), domain = "R-tools")
5025,5028c4793
<         if(!is.null(env <- mc$envir) &&
<            identical(tryCatch(eval(env),
<                               error = identity),
<                      globalenv()))
---
>         if(!is.null(env <- mc$envir) && identical(tryCatch(eval(env), error = identity), globalenv()))
5030,5033c4795
<         if(!is.null(pos <- mc$pos) &&
<            identical(tryCatch(eval(call("as.environment", pos)),
<                               error = identity),
<                      globalenv()))
---
>         if(!is.null(pos <- mc$pos) && identical(tryCatch(eval(call("as.environment", pos)), error = identity), globalenv()))
5050c4812
<     c("Found the following assignments to the global environment:",
---
>     c(gettext("Found the following assignments to the global environment:", domain = "R-tools"),
5074c4836
<     c("Found the following calls to attach():",
---
>     c(gettext("Found the following calls passed to 'attach()':", domain = "R-tools"),
5113c4875
<     c("Found the following calls to data() loading into the global environment:",
---
>     c(gettext("Found the following calls passed to 'data()' loading into the global environment:", domain = "R-tools"),
5126c4888
<             stop("argument 'package' must be of length 1")
---
>             stop(gettextf("'%s' argument must be of length 1", "package"))
5131,5133c4893
<             stop(gettextf("directory '%s' does not contain R code",
<                           dir),
<                  domain = NA)
---
>             stop(gettextf("directory %s does not contain R code", sQuote(dir)), domain = "R-tools")
5154,5155c4914
<             stop(gettextf("directory '%s' does not exist", dir),
<                  domain = NA)
---
>             stop(gettextf("directory %s does not exist", sQuote(dir)), domain = "R-tools")
5167c4926
<             if(!file.create(file)) stop("unable to create ", file)
---
>             if(!file.create(file)) stop(gettextf("unable to create file %s", sQuote(file)))
5181,5183c4940
<     standard_package_names <-
<         setdiff(.get_standard_package_names()$base,
<                 c("methods", "stats4"))
---
>     standard_package_names <- setdiff(.get_standard_package_names()$base, c("methods", "stats4"))
5190,5191c4947
<     imports <- c(imports, depends, suggests, enhances, pkg_name,
<                  standard_package_names)
---
>     imports <- c(imports, depends, suggests, enhances, pkg_name, standard_package_names)
5271,5272c5027
<         if(length(objects(code_env, all.names = TRUE,
<                           pattern = "^[.]__[CT]_")))
---
>         if(length(objects(code_env, all.names = TRUE, pattern = "^[.]__[CT]_")))
5300,5303c5055,5057
<                      stop(gettextf("parse error in file '%s':\n%s",
<                                    file,
<                                    .massage_file_parse_error_message(conditionMessage(e))),
<                                domain = NA, call. = FALSE))
---
>                      stop(gettextf("parse error in file %s:", sQuote(file)), "\n",
>                                    .massage_file_parse_error_message(conditionMessage(e)),
>                                domain = "R-tools", call. = FALSE))
5322c5076
<             gettext("package 'methods' is used but not declared")
---
>             gettext("package 'methods' is used but not declared", domain = "R-tools")
5407,5408c5161
<                  exps <- c(ls(envir = getNamespaceInfo(p, "exports"),
<                               all.names = TRUE), extras[[p]])
---
>                  exps <- c(ls(envir = getNamespaceInfo(p, "exports"), all.names = TRUE), extras[[p]])
5459,5462c5212
<     incoming <-
<         identical(Sys.getenv("_R_CHECK_PACKAGES_USED_CRAN_INCOMING_NOTES_",
<                              "FALSE"),
<                   "TRUE")
---
>     incoming <- identical(Sys.getenv("_R_CHECK_PACKAGES_USED_CRAN_INCOMING_NOTES_", "FALSE"), "TRUE")
5465,5470c5215,5219
<           if(length(xx) > 1L) {
<               c(gettext("'::' or ':::' imports not declared from:"),
<                 .pretty_format(sort(xx)))
<           } else {
<               gettextf("'::' or ':::' import not declared from: %s", sQuote(xx))
<           }
---
> 	  paste(sprintf(ngettext(length(xx),
>  "'::' or ':::' import not declared from: %s",
>  "'::' or ':::' imports not declared from: %s", domain = "R-tools"),
>  .pretty_format(sort(xx))),
>  collapse = "")
5473,5479c5222,5226
<           if(length(xx) > 1L) {
<               c(gettext("'library' or 'require' calls not declared from:"),
<                 .pretty_format(sort(xx)))
<           } else {
<               gettextf("'library' or 'require' call not declared from: %s",
<                        sQuote(xx))
<           }
---
> 	  paste(sprintf(ngettext(length(xx),
>  "'library' or 'require' call not declared from: %s",
>  "'library' or 'require' calls not declared from: %s", domain = "R-tools"),
>  .pretty_format(sort(xx))),
>  collapse = "")
5482,5488c5229
<           if(length(xx) > 1L) {
<               c(gettext("'loadNamespace' or 'requireNamespace' calls not declared from:"),
<                 .pretty_format(sort(xx)))
<           } else {
<               gettextf("'loadNamespace' or 'requireNamespace' call not declared from: %s",
<                        sQuote(xx))
<           }
---
>           sprintf(ngettext("'loadNamespace' or 'requireNamespace' call not declared from: %s", "'loadNamespace' or 'requireNamespace' calls not declared from: %s", domain = "R-tools"), .pretty_format(sort(xx)))
5491,5498c5232,5235
<           msg <- "  Please remove these calls from your code."
<           if(length(xx) > 1L) {
<               c(gettext("'library' or 'require' calls to packages already attached by Depends:"),
<                 .pretty_format(sort(xx)), msg)
<           } else {
<               c(gettextf("'library' or 'require' call to %s which was already attached by Depends.",
<                          sQuote(xx)), msg)
<           }
---
> 	  sprintf(ngettext(length(xx),
>  "'library' or 'require' call to package %s which was already attached by Depends. Please remove these calls from your code.",
>  "'library' or 'require' call to packages %s which were already attached by Depends. Please remove these calls from your code.", domain = "R-tools"),
>  .pretty_format(sort(xx)))
5501,5509c5238
<           msg <-
<               "  Please use :: or requireNamespace() instead.\n  See section 'Suggested packages' in the 'Writing R Extensions' manual."
<           if(length(xx) > 1L) {
<               c(gettext("'library' or 'require' calls in package code:"),
<                 .pretty_format(sort(xx)), msg)
<           } else {
<               c(gettextf("'library' or 'require' call to %s in package code.",
<                          sQuote(xx)), msg)
<           }
---
>           sprintf(ngettext(length(xx), "'library' or 'require' call in package code: %s\n  Please use :: or requireNamespace() instead: see 'Suggested Packages'.", "'library' or 'require' calls in package code: %s\n  Please use :: or requireNamespace() instead: see 'Suggested Packages'.",domain = "R-tools"), .pretty_format(sort(xx)))
5513,5520c5242,5245
<           msg <- "  All declared Imports should be used."
<           if(length(xx) > 1L) {
<               c(gettext("Namespaces in Imports field not imported from:"),
<                 .pretty_format(sort(xx)), msg)
<           } else {
<               c(gettextf("Namespace in Imports field not imported from: %s",
<                        sQuote(xx)), msg)
<           }
---
> 	  sprintf(ngettext(length(xx),
>  "Namespace in Imports field not imported from: %s\nAll declared Imports should be used.",
>  "Namespaces in Imports field not imported from: %s\nAll declared Imports should be used.", domain = "R-tools"),
>  .pretty_format(sort(xx)))
5523,5531c5248,5251
<           msg <- c("  These packages need to be imported from (in the NAMESPACE file)",
<                    "  for when this namespace is loaded but not attached.")
<           if(length(xx) > 1L) {
<               c(gettext("Packages in Depends field not imported from:"),
<                 .pretty_format(sort(xx)), msg)
<           } else {
<               c(gettextf("Package in Depends field not imported from: %s",
<                          sQuote(xx)), msg)
<           }
---
> 	  sprintf(ngettext(length(xx),
>  "Package in Depends field not imported from: %s\nThese packages needs to imported from for the case when this namespace is loaded but not attached.",
>  "Packages in Depends field not imported from: %s\nThese packages needs to imported from for the case when this namespace is loaded but not attached.", domain = "R-tools"),
>  .pretty_format(sort(xx)))
5534,5535c5254,5256
<           if(length(xx) > 1L) {
<               c(gettext("Missing or unexported objects:"),
---
>       sprintf(ngettext(length(xx),
>  "Missing or unexported object: %s",
>  "Missing or unexported objects: %s", domain = "R-tools"),
5537,5539d5257
<           } else {
<               gettextf("Missing or unexported object: %s", sQuote(xx))
<           }
5542,5550c5260,5263
<           msg <- "See the note in ?`:::` about the use of this operator."
<           msg <- strwrap(paste(msg, collapse = " "), indent = 2L, exdent = 2L)
<           if(length(xx) > 1L) {
<               c(gettext("':::' calls which should be '::':"),
<                 .pretty_format(sort(xx)), msg)
<           } else {
<               c(gettextf("':::' call which should be '::': %s",
<                          sQuote(xx)), msg)
<           }
---
> 	  sprintf(ngettext(length(xx),
>  "':::' call which should be '::': %s\nSee the note in ?`:::` about the use of this operator.",
>  "':::' calls which should be '::': %s\nSee the note in ?`:::` about the use of this operator.", domain = "R-tools"),
>  .pretty_format(sort(xx)))
5553,5554c5266,5268
<            if(length(xx) > 1L) {
<               c(gettext("Missing objects imported by ':::' calls:"),
---
>       sprintf(ngettext(length(xx),
>  "Missing object imported by a ':::' call: %s",
>  "Missing objects imported by a ':::' calls: %s", domain = "R-tools"),
5556,5559d5269
<           } else {
<               gettextf("Missing object imported by a ':::' call: %s",
<                        sQuote(xx))
<           }
5562,5563d5271
<           msg <- "See the note in ?`:::` about the use of this operator."
<           msg <- strwrap(paste(msg, collapse = " "), indent = 2L, exdent = 2L)
5567,5577c5275,5285
<               if (any(z %in% base))
<                   msg <- c(msg,
<                            "  Including base/recommended package(s):",
<                            .pretty_format(intersect(base, z)))
<           }
<           if(length(xxx) > 1L) {
<               c(gettext("Unexported objects imported by ':::' calls:"),
<                 .pretty_format(sort(xxx)), msg)
<           } else  if(length(xxx)) {
<               c(gettextf("Unexported object imported by a ':::' call: %s",
<                          sQuote(xxx)), msg)
---
>           }
> 	  if(incoming && (any(z %in% base)) && (length(xxx) >= 1L)) {
> 	  paste(sprintf(ngettext(length(xxx),
>  "Unexported object imported by a ':::' call: %s\nSee the note in ?`:::` about the use of this operator.\nIncluding base/recommended package(s): %s",
>  "Unexported objects imported by ':::' calls: %s\nSee the note in ?`:::` about the use of this operator.\nIncluding base/recommended package(s): %s", domain = "R-tools"),
>  .pretty_format(sort(xxx)), .pretty_format(intersect(base, z))), sep = "")
> 	  } else if(length(xxx) >= 1L){
> 	  sprintf(ngettext(length(xxx),
>  "Unexported object imported by a ':::' call: %s\nSee the note in ?`:::` about the use of this operator.",
>  "Unexported objects imported by ':::' calls: %s\nSee the note in ?`:::` about the use of this operator.", domain = "R-tools"),
>  .pretty_format(sort(xxx)))
5581,5585c5289
<           msg <-
<               c("There are ::: calls to the package's namespace in its code.",
<                 "A package almost never needs to use ::: for its own objects:")
<           c(strwrap(paste(msg, collapse = " "), indent = 0L, exdent = 2L),
<             .pretty_format(sort(x$imp3selfcalls)))
---
>               gettextf("There are ::: calls to the package's namespace in its code. A package almost never needs to use ::: for its own objects: %s", .pretty_format(sort(x$imp3selfcalls)), domain = "R-tools")
5588,5596c5292,5295
<           msg <- "See the note in ?`:::` about the use of this operator."
<           msg <- strwrap(paste(msg, collapse = " "), indent = 2L, exdent = 2L)
<           if(length(xx) > 1L) {
<               c(gettext("Unavailable namespaces imported from by ':::' calls:"),
<                 .pretty_format(sort(xx)), msg)
<           } else {
<               c(gettextf("Unavailable namespace imported from by a ':::' call: %s",
<                          sQuote(xx)), msg)
<           }
---
> 	  sprintf(ngettext(length(xx),
>  "Unavailable namespace imported from by a ':::' call: %s\nSee the note in ?`:::` about the use of this operator.",
>  "Unavailable namespaces imported from by ':::' calls: %s\nSee the note in ?`:::` about the use of this operator.", domain = "R-tools"),
>  .pretty_format(sort(xx)))
5599,5605c5298,5301
<           if(length(xx) > 1L) {
<               c(gettext("'data(package=)' calls not declared from:"),
<                 .pretty_format(sort(xx)))
<           } else {
<               gettextf("'data(package=)' call not declared from: %s",
<                        sQuote(xx))
<           }
---
> 	  paste(sprintf(ngettext(length(xx),
>  "'data(package=)' call not declared from: %s",
>  "'data(package=)' calls not declared from: %s", domain = "R-tools"),
>  .pretty_format(sort(xx))), collapse = "")
5692,5694c5388,5390
<                      warning(gettextf("parse error in file '%s':\n%s", f,
<                                       .massage_file_parse_error_message(conditionMessage(e))),
<                              domain = NA, call. = FALSE))
---
>                      warning(gettextf("parse error in file %s:", sQuote(f)), "\n",
>                                       .massage_file_parse_error_message(conditionMessage(e)),
>                              domain = "R-tools", call. = FALSE))
5703,5706c5399,5402
<                  warning(gettextf("parse error in file '%s':\n%s",
<                                   summary(files)$description,
<                                   .massage_file_parse_error_message(conditionMessage(e))),
<                          domain = NA, call. = FALSE))
---
>                  warning(gettextf("parse error in file %s:",
>                                   sQuote(summary(files)$description)), "\n",
>                                   .massage_file_parse_error_message(conditionMessage(e)),
>                          domain = "R-tools", call. = FALSE))
5723c5419
<             stop("argument 'package' must be of length 1")
---
>             stop(gettextf("'%s' argument must be of length 1", "package"))
5727,5728c5423
<     }
<     else if(!missing(dir)) {
---
>     } else if(!missing(dir)) {
5732c5427
<             stop(gettextf("directory '%s' does not exist", dir), domain = NA)
---
>             stop(gettextf("directory %s does not exist", sQuote(dir)), domain = "R-tools")
5764c5459
<         stop(gettextf("directory '%s' does not exist", dir), domain = NA)
---
>         stop(gettextf("directory %s does not exist", sQuote(dir)), domain = "R-tools")
5785c5480
<         stop("argument 'package' must be of length 1")
---
>         stop(gettextf("'%s' argument must be of length 1", "package"))
5876c5571
<             stop("argument 'package' must be of length 1")
---
>             stop(gettextf("'%s' argument must be of length 1", "package"))
5891c5586
<             stop("you must specify 'package' or 'dir'")
---
>             stop("you must specify 'package' or 'dir' argument")
5944,5947c5639,5640
<                           "Found possibly global 'T' or 'F' in the following functions:"
<                           )
<           c(strwrap(msg),
<             .pretty_format(x$bad_closures))
---
>                           "Found possibly global 'T' or 'F' in the following functions:", domain = "R-tools")
>           c(strwrap(msg), .pretty_format(x$bad_closures))
5952,5955c5645,5646
<                           "Found possibly global 'T' or 'F' in the examples of the following Rd files:"
<                           )
<           c(strwrap(msg),
<             paste(" ", x$bad_examples))
---
>                           "Found possibly global 'T' or 'F' in the examples of the following Rd files:", domain = "R-tools")
>           c(strwrap(msg), paste(" ", x$bad_examples))
6001c5692
<             stop("argument 'package' must be of length 1")
---
>             stop(gettextf("'%s' argument must be of length 1", "package"))
6019c5710
<             stop("you must specify 'package' or 'dir'")
---
>             stop("you must specify 'package' or 'dir' argument")
6058,6060c5749,5750
<                         "Found a .Internal call in the following function:",
<                         "Found .Internal calls in the following functions:"
<                         )
---
>                         "Found an .Internal call in the following function:",
>                         "Found .Internal calls in the following functions:", domain = "R-tools")
6062,6064c5752,5759
<         if (length(unique(x$internals)))
<             out <- c(out, "with calls to .Internal functions",
<                      .pretty_format(sort(unique(x$internals))))
---
>         if (length(unique(x$internals))) {
>         msg <- sprintf(ngettext(length(x$bad_closures),
>                         "Found an .Internal call in the following function:\n%s\nwith calls to .Internal functions:\n%s",
>                         "Found .Internal calls in the following functions:\n%s\nwith calls to .Internal functions:\n%s", domain = "R-tools"),
> 		.pretty_format(x$bad_closures), .pretty_format(sort(unique(x$internals))))
> 
>         out <- c(strwrap(msg))
> 	}
6069,6071c5764,5765
<                         "Found a.Internal call in methods for the following S4 generic:",
<                         "Found .Internal calls in methods for the following S4 generics:"
<                         )
---
>                         "Found an .Internal call in methods for the following S4 generic:",
>                         "Found .Internal calls in methods for the following S4 generics:", domain = "R-tools")
6076,6078c5770,5771
<                         "Found a .Internal call in methods for the following reference class:",
<                         "Found .Internal calls in methods for the following reference classes:"
<                         )
---
>                         "Found an .Internal call in methods for the following reference class:",
>                         "Found .Internal calls in methods for the following reference classes:", domain = "R-tools")
6092c5785
<                            writeLines("Invalid NAMESPACE file, parsing gives:")
---
>                            writeLines(gettext("Invalid NAMESPACE file, parsing gives:", domain = "R-tools"))
6113c5806
<                 msg <- c("Error: ", msg)
---
>                 msg <- c(gettext("Error: ", domain = "R-tools"), msg)
6115c5808
<                 msg <- c("Error in ", deparse(call), ": ", msg)
---
>                 msg <- c(gettextf("Error in %s: ", sQuote(deparse(call)), domain = "R-tools"), msg)
6145,6147c5838,5839
<                    paste(substring(entries, 1L, 20L), "[TRUNCATED]"))
<         writeLines(sprintf("entry %d: invalid type %s",
<                            pos, sQuote(entries)))
---
>                    paste(substring(entries, 1L, 20L), gettext("[TRUNCATED]", domain = "R-tools")))
>         writeLines(gettextf("entry %d: invalid type %s", pos, sQuote(entries), domain = "R-tools"))
6151c5843
<         writeLines(strwrap(sprintf("entry %d (%s): missing required field(s) %s",
---
>         writeLines(strwrap(gettextf("entry %d (%s): missing required field(s) %s",
6154,6158c5846,5847
<                                    sapply(bad[pos],
<                                           function(s)
<                                           paste(sQuote(s),
<                                                 collapse = ", "))),
<                            indent = 0L, exdent = 2L))
---
>                                    paste(sQuote(bad[pos]), collapse = ", ") #sapply(bad[pos], function(s) paste(sQuote(s), collapse = ", "))
> 				, domain = "R-tools"), indent = 0L, exdent = 2L))
6184,6186c5873
< 	tmp <- tryCatch(suppressMessages(checkRd(f, encoding = enc,
< 						 def_enc = def_enc)),
< 			error = function(e)e)
---
> 	tmp <- tryCatch(suppressMessages(checkRd(f, encoding = enc, def_enc = def_enc)), error = function(e) e)
6193,6196c5880,5881
<     if(length(bad) > 1L)
<         cat("problems found in ", paste(bad, collapse=", "), "\n", sep = "")
<     else if(length(bad))
<         cat("problem found in ", bad, "\n", sep = "")
---
>     if(length(bad) > 0L)
>       cat(sprintf(ngettext(length(bad), "problem found in %s", "problems found in %s", domain = "R-tools"), paste(sQuote(bad), collapse = ", ")), "\n", sep = "")
6281c5966
<             stop("argument 'package' must be of length 1")
---
>             stop(gettextf("'%s' argument must be of length 1", "package"))
6299c5984
<             stop("you must specify 'package' or 'dir'")
---
>             stop("you must specify 'package' or 'dir' argument")
6331,6332c6016
<                         "Found an obsolete/platform-specific call in the following functions:"
<                         )
---
>                         "Found an obsolete/platform-specific call in the following functions:", domain = "R-tools")
6338,6339c6022
<                         "Found an obsolete/platform-specific call in methods for the following S4 generics:"
<                         )
---
>                         "Found an obsolete/platform-specific call in methods for the following S4 generics:", domain = "R-tools")
6345,6346c6028
<                         "Found an obsolete/platform-specific call in methods for the following reference classes:"
<                         )
---
>                         "Found an obsolete/platform-specific call in methods for the following reference classes:", domain = "R-tools")
6352,6353c6034
<                         "Found the deprecated functions:"
<                         )
---
>                         "Found the deprecated functions:", domain = "R-tools")
6359,6360c6040
<                         "Found the defunct/removed functions:"
<                         )
---
>                         "Found the defunct/removed functions:", domain = "R-tools")
6366,6367c6046
<                         "Found the platform-specific devices:"
<                         )
---
>                         "Found the platform-specific devices:", domain = "R-tools")
6369,6371c6048
<                  strwrap(paste("dev.new() is the preferred way to open a new device,",
<                                "in the unlikely event one is needed.",
<                                collapse = " ")))
---
>                  gettext("dev.new() is the preferred way to open a new device, in the unlikely event one is needed.", domain = "R-tools"))
6933,6962c6610,6649
<       if(length(x$Maintainer))
<           sprintf("Maintainer: %s", sQuote(paste(x$Maintainer, collapse = " ")))
<       else "No maintainer field in DESCRIPTION file",
<       if(x$empty_Maintainer_name)
<           'The maintainer field lacks a name',
<       if(x$Maintainer_needs_quotes)
<           'The display-name part of the maintainer field should be enclosed in ""',
<       if(length(x$new_submission))
<           "New submission",
<       if(length(y <- x$bad_package))
<           sprintf("Conflicting package names (submitted: %s, existing: %s)",
<                   y[[1L]], y[[2L]]),
<       if(length(y <- x$repositories))
<           sprintf("Package duplicated from %s", y),
<       if(length(y <- x$CRAN_archive))
<           "Package was archived on CRAN",
<       if(length(y <- x$bad_version))
<           sprintf("Insufficient package version (submitted: %s, existing: %s)",
<                   y[[1L]], y[[2L]]),
<       if(length(y <- x$version_with_leading_zeroes))
<           sprintf("Version contains leading zeroes (%s)", y),
<       if(length(y <- x$version_with_jump_in_minor))
<           sprintf("Version jumps in minor (submitted: %s, existing: %s)",
<                   y[[1L]], y[[2L]]),
<       if(length(y <- x$recency))
<           sprintf("Days since last update: %d", y),
<       if(length(y <- x$frequency))
<           sprintf("Number of updates in past 6 months: %d", y),
<       if(length(y <- x$new_maintainer))
<           c("New maintainer:",
---
>       if(length(x$Maintainer)) {
>           gettextf("Maintainer: %s", sQuote(paste(x$Maintainer, collapse = " ")), domain = "R-tools")
>       } else {
> 	  gettext("No maintainer field in DESCRIPTION file", domain = "R-tools")
>       },
>       if(x$empty_Maintainer_name) {
>           gettext("The maintainer field lacks a name", domain = "R-tools")
>       },
>       if(x$Maintainer_needs_quotes) {
>           gettext("The display-name part of the maintainer field should be enclosed in \"\"", domain = "R-tools")
>       },
>       if(length(x$new_submission)) {
>           gettext("New submission", domain = "R-tools")
>       },
>       if(length(y <- x$bad_package)) {
>           gettextf("Conflicting package names (submitted: %s, existing: %s)", y[[1L]], y[[2L]], domain = "R-tools")
>       },
>       if(length(y <- x$repositories)) {
>           gettextf("Package duplicated from %s", y, domain = "R-tools")
>       },
>       if(length(y <- x$CRAN_archive)) {
>           gettext("Package was archived on CRAN", domain = "R-tools")
>       },
>       if(length(y <- x$bad_version)) {
>           gettextf("Insufficient package version (submitted: %s, existing: %s)", y[[1L]], y[[2L]], domain = "R-tools")
>       },
>       if(length(y <- x$version_with_leading_zeroes)) {
>           gettextf("Version contains leading zeroes (%s)", y, domain = "R-tools")
>       },
>       if(length(y <- x$version_with_jump_in_minor)) {
>           gettextf("Version jumps in minor (submitted: %s, existing: %s)", y[[1L]], y[[2L]], domain = "R-tools")
>       },
>       if(length(y <- x$recency)) {
>           gettextf("Days since last update: %d", y, domain = "R-tools")
>       },
>       if(length(y <- x$frequency)) {
>           gettextf("Number of updates in past 6 months: %d", y, domain = "R-tools")
>       },
>       if(length(y <- x$new_maintainer)) {
>           c(gettext("New maintainer:", domain = "R-tools"),
6964,6970c6651,6659
<             "Old maintainer(s):",
<             strwrap(y[[2L]], indent = 2L, exdent = 4L)),
<       if(length(y <- x$bad_license))
<           sprintf("Non-FOSS package license (%s)", y),
<       if(length(y <- x$new_license))
<           c("Change to non-FOSS package license.",
<             "New license:",
---
>             gettext("Old maintainer(s):", domain = "R-tools"),
>             strwrap(y[[2L]], indent = 2L, exdent = 4L))
>       },
>       if(length(y <- x$bad_license)) {
>           gettextf("Non-FOSS package license (%s)", y, domain = "R-tools")
>       },
>       if(length(y <- x$new_license)) {
>           c(gettext("Change to non-FOSS package license.", domain = "R-tools"),
>             gettext("New license:", domain = "R-tools"),
6972,6973c6661,6663
<             "Old license:",
<             strwrap(y[[2L]], indent = 2L, exdent = 4L)),
---
>             gettext("Old license:", domain = "R-tools"),
>             strwrap(y[[2L]], indent = 2L, exdent = 4L))
>       },
6975,6976c6665
<           c("Components with restrictions and base license permitting such:",
<             paste(" ", y),
---
>           c(gettext("Components with restrictions and base license permitting such:", domain = "R-tools"), paste(" ", y),
6979c6668
<                               c(sprintf("File '%s':", e[1L]),
---
>                               c(gettextf("File '%s':", e[1L], domain = "R-tools"),
6985,6988c6674,6675
<           c("Possibly mis-spelled words in DESCRIPTION:",
<             sprintf("  %s (%s)",
<                     names(s),
<                     lapply(s, paste, collapse = ", ")))
---
>           c(gettext("Possibly mis-spelled words in DESCRIPTION:", domain = "R-tools"),
>             sprintf("  %s (%s)", names(s), lapply(s, paste, collapse = ", ")))
6991c6678
<           "FOSS licence with BuildVignettes: false"
---
>           gettext("FOSS licence with BuildVignettes: false", domain = "R-tools")
6994c6681
<           c("Unknown, possibly mis-spelled, fields in DESCRIPTION:",
---
>           c(gettext("Possibly mis-spelled fields in DESCRIPTION:", domain = "R-tools"),
6998c6685
<           c("CRAN repository db overrides:", y)
---
>           c(gettextf("CRAN repository db overrides: %s", sQuote(y), domain = "R-tools"))
7001,7002c6688
<           sprintf("CRAN repository db conflicts: %s",
<                   sQuote(y))
---
>           gettextf("CRAN repository db conflicts: %s", sQuote(y), domain = "R-tools")
7005,7006c6691
<           sprintf("Package license conflicts with %s override",
<                   sQuote(paste("License_is_FOSS:", y)))
---
>           gettextf("Package license conflicts with %s override", sQuote(paste("License_is_FOSS:", y)), domain = "R-tools")
7009,7010c6694
<           sprintf("Package license conflicts with %s override",
<                   sQuote(paste("License_restricts_use:", y)))
---
>           gettextf("Package license conflicts with %s override", sQuote(paste("License_restricts_use:", y)), domain = "R-tools")
7013,7016c6697,6699
<           c("Package has a FOSS license but eventually depends on the following",
< 	    if(length(y) > 1L)
< 	    "packages which restrict use:" else
< 	    "package which restricts use:",
---
>           c(ngettext(length(y),
> 		"Package has a FOSS license but eventually depends on the following package which restricts use:",
>                 "Package has a FOSS license but eventually depends on the following packages which restrict use:", domain = "R-tools"),
7020,7023c6703,6705
<           c("Package has a FOSS license but eventually depends on the following",
< 	    if(length(y) > 1L)
<             "packages which may restrict use:" else
< 	    "package which may restrict use:",
---
>           c(ngettext(length(y),
> 		"Package has a FOSS license but eventually depends on the following package which may restrict use:",
>                 "Package has a FOSS license but eventually depends on the following packages which may restrict use:", domain = "R-tools"),
7027c6709
<           c("Strong dependencies not in mainstream repositories:",
---
>           c(gettext("Strong dependencies not in mainstream repositories:", domain = "R-tools"),
7032c6714
<           c("Suggests or Enhances not in mainstream repositories:",
---
>           c(gettext("'Suggests' or 'Enhances' packages are not in mainstream repositories:", domain = "R-tools"),
7037c6719
<           c("Using Additional_repositories specification failed with:",
---
>           c(gettext("Using 'Additional_repositories specification' failed with packages:", domain = "R-tools"),
7041c6723
<           c("Availability using Additional_repositories specification:",
---
>           c(gettext("Availability using 'Additional_repositories' specification:", domain = "R-tools"),
7048c6730
<           c("Additional repositories with no packages:",
---
>           c(gettext("Additional repositories with no packages:", domain = "R-tools"),
7052,7053c6734
<           paste(if(length(y) > 1L)
< 		"Uses the superseded packages:" else
---
>           paste(ngettext(length(y),
7054a6736
>                        "Uses the superseded packages:", domain = "R-tools"),
7058,7059c6740
<           paste(if(length(y) > 1L)
< 		"Uses the non-portable packages:" else
---
>           paste(ngettext(length(y),
7060a6742
> 		"Uses the non-portable packages:", domain = "R-tools"),
7064c6746
<           c("Authors@R field should be a call to person(), or combine such calls.")
---
>           c(gettext("Authors@R field should be a call to person(), or combine such calls.", domain = "R-tools"))
7068c6750
<               c("Vignette sources in 'inst/doc' with no 'vignettes' directory:",
---
>               c(gettext("Vignette sources in 'inst/doc' with no 'vignettes' directory:", domain = "R-tools"),
7071c6753
<                 "A 'vignettes' directory is required as from R 3.1.0")
---
>                 gettext("A 'vignettes' directory is required as from R 3.1.0", domain = "R-tools"))
7073c6755
<               c("Vignette sources in 'inst/doc' missing from the 'vignettes' directory:",
---
>               c(gettext("Vignette sources in 'inst/doc' missing from the 'vignettes' directory:", domain = "R-tools"),
7078c6760
<           "Package has a VignetteBuilder field but no prebuilt vignette index."
---
>           gettext("Package has a VignetteBuilder field but no prebuilt vignette index.", domain = "R-tools")
7081c6763
<           "Package has help file(s) containing build-stage \\Sexpr{} expresssons but no build/partial.rdb."
---
>           gettext("Package has help file(s) containing build-stage \\Sexpr{} expresssons but no build/partial.rdb.", domain = "R-tools")
7084c6766
<           "Package has help file(s) containing install/render-stage \\Sexpr{} expresssons but no prebuilt PDF manual."
---
>           gettext("Package has help file(s) containing install/render-stage \\Sexpr{} expresssons but no prebuilt PDF manual.", domain = "R-tools")
7087c6769
<           "Package installs .java files."
---
>           gettext("Package installs .java files.", domain = "R-tools")
7090c6772
<           "Package has FOSS license, installs .class/.jar but has no 'java' directory."
---
>           gettext("Package has FOSS license, installs .class/.jar but has no 'java' directory.", domain = "R-tools")
7093c6775
<           c("Package CITATION file contains call(s) to:",
---
>           c(gettext("Package CITATION file contains call(s) to:", domain = "R-tools"),
7097,7099c6779,6780
<           c("Reading CITATION file fails with",
<             paste(" ", y),
<             "when package is not installed.")
---
>           c(gettextf("Reading CITATION file fails with\n%s\nwhen package is not installed.",
>             paste(" ", y), domain = "R-tools"))
7120c6801
<             stop("argument 'package' must be of length 1")
---
>             stop(gettextf("'%s' argument must be of length 1", "package"))
7176,7177c6857
<                      c(gettextf("Rd files with duplicated name '%s':",
<                                 nm),
---
>                      c(gettextf("Rd files with duplicated name %s:", sQuote(nm), domain = "R-tools"),
7184,7186c6864
<                      c(gettextf("Rd files with duplicated alias '%s':",
<                                 nm),
<                        .pretty_format(bad[[nm]]))
---
>                      c(gettextf("Rd files with duplicated alias %s:", sQuote(nm), domain = "R-tools"), .pretty_format(bad[[nm]]))
7202c6880
<             stop("argument 'package' must be of length 1")
---
>             stop(gettextf("'%s' argument must be of length 1", "package"))
7208c6886
<             stop("you must specify 'package' or 'dir'")
---
>             stop("you must specify 'package' or 'dir' argument")
7211,7212c6889
<             stop(gettextf("directory '%s' does not exist", dir),
<                  domain = NA)
---
>             stop(gettextf("directory %s does not exist", sQuote(dir)), domain = "R-tools")
7263,7264c6940
<               c(gettextf("Argument items with no description in Rd object '%s':",
<                          nm),
---
>               c(gettextf("Argument items with no description in Rd object %s:", sQuote(nm), domain = "R-tools"),
7269,7270c6945
<               c(gettextf("Auto-generated content requiring editing in Rd object '%s':",
<                          nm),
---
>               c(gettextf("Auto-generated content requiring editing in Rd object %s:", sQuote(nm), domain = "R-tools"),
7302c6977
<                      "... [TRUNCATED]"),
---
>                      gettext("... [TRUNCATED]", domain = "R-tools")),
7319c6994
<         c(sprintf("Rd file '%s':", nm),
---
>         c(gettextf("Rd file %s:", sQuote(nm), domain = "R-tools"),
7324,7326c6999
<                                 c(sprintf("  \\%s lines wider than %d characters:",
<                                           s, limit[s]),
<                                   .truncate(lines))
---
>                                 c(sprintf(ngettext(limit[s], "  \\%s lines wider than %d character:", "  \\%s lines wider than %d characters:", domain = "R-tools"), s, limit[s]), .truncate(lines))
7442,7443c7115
<         out <- sprintf("%s%s\"%s\"", out,
<                        substring(txt, 1L, ipos - 1L), str)
---
>         out <- sprintf("%s%s\"%s\"", out, substring(txt, 1L, ipos - 1L), str)
7454c7126
<     c(gettextf("File %s:", sQuote(f)),
---
>     c(gettextf("File %s:", sQuote(f), domain = "R-tools"),
7468,7469c7140
<       c("(", "{", "function", "if", "for", "while", "repeat",
<         "Math", "Ops", "Summary", "Complex"),
---
>       c("(", "{", "function", "if", "for", "while", "repeat", "Math", "Ops", "Summary", "Complex"),
7496c7167
< 	    warning(gettextf("Generics 'g' in 'env' %s where '%s' errors: %s\nMay need something like\n\n%s\nin NAMESPACE.",
---
> 	    warning(gettextf("Generics 'g' in 'env' %s where %s errors: %s\nMay need something like\n\n%s\nin NAMESPACE.",
7498c7169
<                              "hasMethods(g, env)",
---
>                              sQuote("hasMethods(g, env)"),
7500,7504c7171
<                              paste0("  importFrom(",
<                                     paste(dq(pkgs), dq(rErr), sep =", "),
<                                     ")\n")
<                              ),
<                     domain = NA)
---
>                              paste0("  importFrom(", paste(dq(pkgs), dq(rErr), sep = ", "), ")\n")), domain = "R-tools")
7512,7513c7179,7180
<                                      "Generics without any methods in %s: %s"),
<                             format(env),
---
>                                      "Generics without any methods in %s: %s", domain = "R-tools"),
>                             sQuote(format(env)),
7628,7629c7295
<     package <-
<         sub(".*:([^_]*).*", "\\1", attr(env, "name", exact = TRUE))
---
>     package <- sub(".*:([^_]*).*", "\\1", attr(env, "name", exact = TRUE))
7692,7694c7358
<         while(inherits(yy <- tryCatch(parse(text = txt),
<                                       error = identity),
<                        "error")
---
>         while(inherits(yy <- tryCatch(parse(text = txt), error = identity), "error")
7722,7723c7386
<     txt <- .Rd_deparse(.Rd_drop_nodes_with_tags(x, "\\special"),
<                        tag = FALSE)
---
>     txt <- .Rd_deparse(.Rd_drop_nodes_with_tags(x, "\\special"), tag = FALSE)
7740,7741c7403
<     txt <- gsub("(^|[^\\])\\\\($|[^abfnrtuUvx0-9'\"\\])",
<                 "\\1<unescaped bksl>\\2", txt)
---
>     txt <- gsub("(^|[^\\])\\\\($|[^abfnrtuUvx0-9'\"\\])", "\\1<unescaped bksl>\\2", txt)
7743,7744c7405
<     txt <- gsub("(^|[^\\])\\\\($|[^abfnrtuUvx0-9'\"\\])",
<                 "\\1<unescaped bksl>\\2", txt)
---
>     txt <- gsub("(^|[^\\])\\\\($|[^abfnrtuUvx0-9'\"\\])", "\\1<unescaped bksl>\\2", txt)
7753,7754c7414
<     strwrap(paste(sQuote(x), collapse = " "),
<             indent = 2L, exdent = 2L)
---
>     strwrap(paste(sQuote(x), collapse = " "), indent = 2L, exdent = 2L)
7760c7420
<     if (length(xx) > 1L || (nchar(msg) + nchar(xx) + 1L > 75L))
---
>     if (length(xx) > 1L || (nchar(msg) + nchar(xx) + 1L > options("width")$width))
7770,7771c7430
<     writeLines(strwrap(paste(x, collapse = " "),
<                        indent = 2L, exdent = 2L))
---
>     writeLines(strwrap(paste(x, collapse = " "), indent = 2L, exdent = 2L))
7903,7904c7562
<     sprintf("^[[:space:]]*(.*<%s>|ORPHANED)[[:space:]]*$",
<             .make_RFC_2822_email_address_regexp())
---
>     sprintf("^[[:space:]]*(.*<%s>|ORPHANED)[[:space:]]*$", .make_RFC_2822_email_address_regexp())
7959,7961c7617
<                          cbind(sprintf("\\arguments, description of item '%s'",
<                                        tab[ind, 1L]),
<                                tab[ind, 2L]))
---
>                          cbind(gettextf("\\arguments, description of item %s", sQuote(tab[ind, 1L]), domain = "R-tools"), tab[ind, 2L]))
7974,7976c7630
<                          cbind(sprintf("section 'Methods', description of item '%s'",
<                                        tab[ind, 1L]),
<                                tab[ind, 2L]))
---
>                          cbind(gettextf("section 'Methods', description of item %s", sQuote(tab[ind, 1L]), domain = "R-tools"), tab[ind, 2L]))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/Rd.R R/src/library/tools/R/Rd.R
26c26,27
<     ## now only for a parsed Rd object.
---
>     ## We now also allow for passing a parsed Rd object.
>     ## Is the Rd file case still needed?
32c33
<         stop("Rd object required")
---
>         stop("Rd object is required")
45,51c46,49
<             c(gettextf("missing/empty %s field in '%s'",
<                        "\\name",
<                        description),
<               gettextf("Rd files must have a non-empty %s.",
<                        "\\name"),
<               gettext("See chapter 'Writing R documentation' in manual 'Writing R Extensions'."))
<         stop(paste(msg, collapse = "\n"), domain = NA)
---
>             c(gettextf("missing/empty %s field in '%s'", "\\name", description, domain = "R-tools"),
>               gettextf("Rd files must have a non-empty %s.", "\\name", domain = "R-tools"),
>               gettext("See chapter 'Writing R documentation' in manual 'Writing R Extensions'.", domain = "R-tools"))
>         stop(paste(msg, collapse = "\n"), domain = "R-tools")
57,61c55,58
<             c(gettextf("missing/empty \\title field in '%s'",
<                        description),
<               gettext("Rd files must have a non-empty \\title."),
<               gettext("See chapter 'Writing R documentation' in manual 'Writing R Extensions'."))
<         stop(paste(msg, collapse = "\n"), domain = NA)
---
>             c(gettextf("missing/empty %s field in '%s'", "\\title", description, domain = "R-tools"),
>               gettextf("Rd files must have a non-empty %s.", "\\title", domain = "R-tools"),
>               gettext("See chapter 'Writing R documentation' in manual 'Writing R Extensions'.", domain = "R-tools"))
>         stop(paste(msg, collapse = "\n"), domain = "R-tools")
243c240
<         stop("argument 'outFile' must be a character string or connection")
---
>         stop(gettextf("'%s' argument must be a character string or connection", "outFile"))
267c264
<             stop("argument 'package' must be of length 1")
---
>             stop(gettextf("'%s' argument must be of length 1", "package"))
325c322
<             stop("you must specify 'package' or 'dir'")
---
>             stop("you must specify 'package' or 'dir' argument")
328,329c325
<             stop(gettextf("directory '%s' does not exist", dir),
<                  domain = NA)
---
>             stop(gettextf("directory %s does not exist", sQuote(dir)), domain = "R-tools")
370c366
<         stop("you must specify 'dir' or 'files'")
---
>         stop("you must specify 'dir' or 'files' argument")
770c766
<                                   "missing/empty \\name field in Rd files\n%s"),
---
>                                   "missing/empty \\name field in Rd files\n%s", domain = "R-tools"),
820,822c816
<                 stop(gettextf("No help on %s found in RdDB %s",
<                               sQuote(key), sQuote(filebase)),
<                      domain = NA)
---
>                 stop(gettextf("No help on %s found in RdDB %s", sQuote(key), sQuote(filebase)), domain = "R-tools")
865c859
< 	warning(gettextf("Macro file %s should only contain Rd macro definitions and comments",
---
> 	warning(gettextf("Macro file '%s' should only contain Rd macro definitions and comments",
883c877
<     	    	warning(gettextf("No Rd macros in package '%s'.", p), call. = FALSE)
---
>     	    	warning(gettextf("No Rd macros in package %s", sQuote(p)), call. = FALSE)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/Rd2HTML.R R/src/library/tools/R/Rd2HTML.R
31c31
<     	stopRd(arg, Rdfile, "Bad \\link text")
---
>     	stopRd(arg, Rdfile, gettext("Bad \\link text"))
40c40
<     	    stopRd(option, Rdfile, "Bad \\link option -- must be text")
---
>     	    stopRd(option, Rdfile, gettext("Bad \\link option -- must be text"))
343c343
<                     warnRd(block, Rdfile, "missing link ", sQuote(topic))
---
>                     warnRd(block, Rdfile, gettextf("missing link %s", sQuote(topic)))
372,375c372
<                         warnRd(block, Rdfile,
<                                "file link ", sQuote(parts$targetfile),
<                                " in package ", sQuote(parts$pkg),
<                                " does not exist and so has been treated as a topic")
---
>                         warnRd(block, Rdfile, gettextf("file link %s in package %s does not exist and so has been treated as a topic", sQuote(parts$targetfile), sQuote(parts$pkg)))
378,379c375
<                         warnRd(block, Rdfile, "missing file link ",
<                                sQuote(parts$targetfile))
---
>                         warnRd(block, Rdfile, gettextf("missing file link %s", sQuote(parts$targetfile)))
402,407c398
<         if (length(block) > 1L) {
<             of1('## Not run: ')
<             writeContent(block, tag)
<             of1('\n## End(Not run)')
<         } else {
<             of1('## Not run: ')
---
>             of1("## Dont't run: ")
408a400,401
>         if (length(block) > 1L) {
>             of1("\n## End (Don't run)")
463c456
<                	   	of0('<a href="', urlify(url), '">')
---
>                	   	of0('<a href="', shtmlify(url), '">')
549c542
<                stopRd(block, Rdfile, "Tag ", tag, " not recognized")
---
>                stopRd(block, Rdfile, gettextf("Tag %s not implemented", tag))
557c550
<     	    stopRd(table, Rdfile, "\\tabular format must be simple text")
---
>     	    stopRd(table, Rdfile, gettext("\\tabular format must be simple text"))
561c554
<                    "Unrecognized \\tabular format: ", table[[1L]][[1L]])
---
>                    gettextf("Unrecognized \\tabular format: %s", table[[1L]][[1L]]))
579,581c572
<                     stopRd(table, Rdfile,
<                            "Only ", length(format),
<                            " columns allowed in this table")
---
>                     stopRd(table, Rdfile, sprintf(ngettext(length(format), "Only %d column allowed in this table", "Only %d columns allowed in this table", domain = "R-tools"), length(format)))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/Rd2ex.R R/src/library/tools/R/Rd2ex.R
87c87
< 	    renderDont("Not run", commentDontrun, label=commentDontrun)
---
> 	    renderDont("Don't run", commentDontrun, label=commentDontrun)
89c89
< 	    renderDont("No test", commentDonttest, xtra1=FALSE)
---
> 	    renderDont("Don't test", commentDonttest, xtra1=FALSE)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/Rd2latex.R R/src/library/tools/R/Rd2latex.R
233,238c233
<         if (length(block) > 1L) {
<             of1('## Not run: ')
<             writeContent(block, tag)
<             of1('\n## End(Not run)')
<         } else {
<             of1('## Not run: ')
---
>             of1("## Don't run: ")
239a235,236
>         if (length(block) > 1L) {
>             of1("\n## End (Don't run)")
460c457
<                stopRd(block, Rdfile, "Tag ", tag, " not recognized")
---
>                stopRd(block, Rdfile, gettextf("Tag %s not recognized", tag))
469c466
<     	    stopRd(table, Rdfile, "\\tabular format must be simple text")
---
>     	    stopRd(table, Rdfile, gettext("\\tabular format must be simple text"))
653,656c650,651
< 	warnRd(Rd, Rdfile, "Some input could not be re-encoded to ",
< 	       outputEncoding)
<     invisible(structure(out, latexEncoding = latexEncoding,
<                         hasFigures = hasFigures))
---
> 	warnRd(Rd, Rdfile, gettextf("Some input could not be re-encoded to %s", outputEncoding))
>     invisible(structure(out, latexEncoding = latexEncoding, hasFigures = hasFigures))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/Rd2pdf.R R/src/library/tools/R/Rd2pdf.R
163c163
<                                  appendLF = FALSE, domain = NA)
---
>                                  appendLF = FALSE, domain = "R-tools")
195c195
<             if (!silent) message(domain = NA)
---
>             if (!silent) message(domain = "R-tools")
208,209c208
<                     stop("this package has a ", sQuote("man"), " directory but no .Rd files",
<                          domain = NA)
---
>                     stop(gettextf("this package has a %s directory but no .Rd files", sQuote("man")), domain = "R-tools")
214,216c213
<                     stop("this package does not have either a ", sQuote("latex"),
<                          " or a (source) ", sQuote("man"), " directory",
<                          domain = NA)
---
>                     stop(gettextf("this package does not have either a %s or a (source) %s directory", sQuote("latex"), sQuote("man")), domain = "R-tools")
232,233c229
<             if (!silent) message("Converting Rd files to LaTeX ",
<                                  appendLF = FALSE, domain = NA)
---
>             if (!silent) message("Converting Rd files to LaTeX ", appendLF = FALSE, domain = "R-tools")
260c256
<             if (!silent) message(domain = NA)
---
>             if (!silent) message(domain = "R-tools")
275,276c271
<         stop("no validly-named files in the ", sQuote("latex"), " directory",
<              domain = NA)
---
>         stop(gettextf("no validly-named files in the %s directory", sQuote("latex")), domain = "R-tools")
293,294c288
<             warning("file ", sQuote(f), " lacks a header: skipping",
<                     domain = NA)
---
>             warning(gettextf("file %s lacks a header: skipping", sQuote(f), domain = "R-tools"))
401c395
<             message("Warning: unknown option ", sQuote(a))
---
>             message(gettextf("Warning: unknown option %s", sQuote(a)))
788c782
<             cat("Hmm ... looks like a package\n")
---
>             cat(gettext("Hmm ... looks like a package", domain = "R-tools"), "\n", sep = "")
793c787
<             cat("Hmm ... looks like a package from the R distribution\n")
---
>             cat(gettext("Hmm ... looks like a package from the R distribution", domain = "R-tools"), "\n", sep = "")
798c792
<                 cat("_not_ indexing 'base' package\n")
---
>                 cat(gettext("_not_ indexing 'base' package", domain = "R-tools"), "\n", sep = "")
812c806
<         cat("cannot write to build dir\n")
---
>         cat(gettext("cannot write to build dir", domain = "R-tools"), "\n", sep = "")
818c812
<         cat("file", sQuote(output), "exists; please remove it first\n")
---
>         cat(gettextf("file %s exists; please remove it first", sQuote(output), domain = "R-tools"), "\n", sep = "")
829c823
<     if (!batch)  cat("Creating", out_ext, "output from LaTeX ...\n")
---
>     if (!batch)  cat(gettextf("Creating %s output from LaTeX ...", out_ext, domain = "R-tools"), "\n", sep = "")
843,846c837,839
<     cat("Saving output to", sQuote(output), "...\n")
<     file.copy(file.path(build_dir, paste("Rd2", out_ext, sep = ".")), output,
<               overwrite = force)
<     cat("Done\n")
---
>     cat(gettextf("Saving output to %s ...", sQuote(output), domain = "R-tools"), "\n", sep = "")
>     file.copy(file.path(build_dir, paste("Rd2", out_ext, sep = ".")), output, overwrite = force)
>     cat(gettext("Done", domain = "R-tools"), "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/Rd2txt.R R/src/library/tools/R/Rd2txt.R
89c89
<     	    stopRd(block, Rdfile, sprintf("no parenthesis following %s", blocktag))
---
>     	    stopRd(block, Rdfile, gettextf("no parenthesis following %s", blocktag))
115c115
< 	    stopRd(block, Rdfile, sprintf("no comma in argument list following %s", blocktag))
---
> 	    stopRd(block, Rdfile, gettextf("no comma in argument list following %s", blocktag))
529,535c529
<         if (length(block) > 1L) {
<             putf('## Not run:\n')
<             writeCodeBlock(block, tag)
<             blankLine(0L)
<             putf('## End(Not run)\n')
<         } else {
<             putf('## Not run: ')
---
>             putf("## Don't run:\n")
537a532,533
>         if (length(block) > 1L) {
>             putf("## End (Don't run)\n")
702c698
<                stopRd(block, Rdfile, "Tag ", tag, " not recognized")
---
>                stopRd(block, Rdfile, gettextf("Tag %s not recognized", tag, domain = "R-tools"))
710c706
<     	    stopRd(table, Rdfile, "\\tabular format must be simple text")
---
>     	    stopRd(table, Rdfile, gettext("\\tabular format must be simple text", domain = "R-tools"))
731,732c727
<                                    sprintf("too many columns for format '%s'",
<                                            table[[1L]]))
---
>                                    gettextf("too many columns for format '%s'", table[[1L]], domain = "R-tools"))
825,826c820
<                    stopRd(block, Rdfile, "Tag ", tag,
<                           " not expected in code block")
---
>                    stopRd(block, Rdfile, gettextf("Tag %s not expected in code block", tag, domain = "R-tools"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/RdConv2.R R/src/library/tools/R/RdConv2.R
52c52
<     stop(msg, call. = FALSE, domain = NA)
---
>     stop(msg, call. = FALSE, domain = "R-tools")
73c73
<     warning(msg, call. = FALSE, domain = NA, immediate. = TRUE)
---
>     warning(msg, call. = FALSE, domain = "R-tools", immediate. = TRUE)
106,107c106
<                 stop(gettextf("invalid value for '%s' : %s", opt, oldval),
<                      domain = NA)
---
>                 stop(gettextf("invalid value for '%s' : %s", opt, oldval), domain = "R-tools")
300,302c299
< 	    		stop(gettextf("Only one Rd section per %s is supported.",
<                                       "\\Sexpr"),
<                              domain = NA)
---
> 	    		stop(gettextf("Only one Rd section per %s is supported.", "\\Sexpr"), domain = "R-tools")
446c443
<                "Only one \\Rdversion declaration is allowed")
---
>                gettext("Only one \\Rdversion declaration is allowed"))
454c451
<                    "All text must be in a section")
---
>                    gettext("All text must be in a section"))
469c466
<                    sprintf("Only one %s section is allowed: the first will be used", tag))
---
>                    gettextf("Only one %s section is allowed: the first will be used", tag))
478c475
<     	    stopRd(encoding, Rdfile, "'encoding' must be plain text")
---
>     	    stopRd(encoding, Rdfile, gettextf("'%s' must be plain text", "encoding"))
486c483
<                    "Multiple \\docType sections are not supported")
---
>                    gettext("Multiple \\docType sections are not supported"))
490c487
<         	stopRd(docType, Rdfile, "'docType' must be plain text")
---
>         	stopRd(docType, Rdfile, gettextf("'%s' must be plain text", "docType"))
495,496c492
<                 warnRd(dt[i], Rdfile, "docType ", sQuote(docTypes[i]),
<                        " is unrecognized")
---
>                 warnRd(dt[i], Rdfile, gettextf("docType %s is unrecognized", sQuote(docTypes[i])))
507,508c503
<             warnRd(Rd[[s]], Rdfile, "Section ",
<                    sections[s], " is unrecognized and will be dropped")
---
>             warnRd(Rd[[s]], Rdfile, gettextf("Section %s is unrecognized and will be dropped", sections[s]))
517,518c512
<     	stopRd(Rd, Rdfile,
<                "Sections \\title, and \\name must exist and be unique in Rd files")
---
>     	stopRd(Rd, Rdfile, gettext("Sections \\title, and \\name must exist and be unique in Rd files"))
520c514
<         stopRd(RdTags(Rd[[2L]]), Rdfile,"\\name must only contain simple text")
---
>         stopRd(RdTags(Rd[[2L]]), Rdfile, gettext("\\name must only contain simple text"))
526c520
<         warnRd(RdTags(Rd[[2L]]), Rdfile,"\\name should not contain !, | or @")
---
>         warnRd(RdTags(Rd[[2L]]), Rdfile, gettext("\\name should not contain !, | or @"))
566c560
<             warnRd(s0, Rdfile, "Dropping empty section ", tagtitle)
---
>             warnRd(s0, Rdfile, "M0151: ", gettextf("Dropping empty section %s", tagtitle))
633c627
<                stopRd(block, Rdfile, "Unrecognized macro ", block[[1L]]),
---
>                stopRd(block, Rdfile, gettextf("Unrecognized macro %s", block[[1L]])),
640,646c634,645
<                        msg2 <- if(inEnc2) "in second part of \\enc" else "without declared encoding"
<                        if(Encoding(block) == "UTF-8")
<                            warnRd(block, Rdfile, level = -1,
<                                   "Non-ASCII contents ", msg2)
<                        if(grepl("<[0123456789abcdef][0123456789abcdef]>", block))
<                            warnRd(block, Rdfile, level = -3,
<                                   "Apparent non-ASCII contents ", msg2)
---
>                        if(Encoding(block) == "UTF-8") {
> 			if(inEnc2)
>                            warnRd(block, Rdfile, level = -1, gettext("Non-ASCII contents in second part of \\enc"))
> 			else
>                            warnRd(block, Rdfile, level = -1, gettext("Non-ASCII contents without declared encoding"))
> 			}
>                        if(grepl("<[0123456789abcdef][0123456789abcdef]>", block)) {
> 			if(inEnc2)
>                            warnRd(block, Rdfile, level = -3, gettext("Apparent non-ASCII contents in second part of \\enc"))
> 			else
>                            warnRd(block, Rdfile, level = -3, gettext("Apparent non-ASCII contents without declared encoding"))
> 			}
658,660c657,658
<                        stopRd(block, Rdfile, "Unnecessary braces at ", deparse)
<                    else warnRd(block, Rdfile, level = -3,
<                                "Unnecessary braces at ", deparse)
---
>                        stopRd(block, Rdfile, gettextf("Unnecessary braces at %s", deparse))
>                    else warnRd(block, Rdfile, level = -3, gettextf("Unnecessary braces at %s", deparse))
698,699c696
<                    warnRd(block, Rdfile, level = 7, "Tag ", tag,
<                           " not valid outside a code block"),
---
>                    warnRd(block, Rdfile, level = 7, gettextf("Tag %s not valid outside a code block", tag)),
723c720
<     		       stopRd(block, Rdfile, "Condition must be \\Sexpr or plain text")
---
>     		       stopRd(block, Rdfile, gettext("Condition must be \\Sexpr or plain text"))
726,727c723
<     		   unknown <- allow[!(allow %in%
<     		          c("", "latex", "example", "text", "html", "TRUE", "FALSE"))]
---
>     		   unknown <- allow[!(allow %in% c("", "latex", "example", "text", "html", "TRUE", "FALSE"))]
729c725
<     		       warnRd(block, Rdfile, "Unrecognized format: ", unknown)
---
>     		       warnRd(block, Rdfile, gettextf("Unrecognized format: %s", unknown))
736c732
<                    	stopRd(block, Rdfile, "First argument to \\href must be verbatim URL")
---
>                    	stopRd(block, Rdfile, gettext("First argument to \\href must be verbatim URL"))
742c738
<                	       stopRd(block, Rdfile, "Must contain verbatim text")
---
>                	       stopRd(block, Rdfile, gettext("Must contain verbatim text"))
744c740
<                warnRd(block, Rdfile, level = 7, "Tag ", tag, " not recognized"))
---
>                warnRd(block, Rdfile, level = 7, gettextf("Tag %s not recognized", tag)))
754c750
<                    stopRd(block, Rdfile, "Unrecognized macro ", block[[1L]]),
---
>                    stopRd(block, Rdfile, gettextf("Unrecognized macro %s", block[[1L]])),
761,767c757,768
<                            msg2 <- if(inEnc2) "in second part of \\enc" else "without declared encoding"
<                            if(Encoding(block) == "UTF-8")
<                                warnRd(block, Rdfile, level = -1,
<                                       "Non-ASCII contents ", msg2)
<                            if(grepl("<[0123456789abcdef][0123456789abcdef]>", block))
<                                warnRd(block, Rdfile, level = -3,
<                                       "Apparent non-ASCII contents ", msg2)
---
>                            if(Encoding(block) == "UTF-8") {
> 			    if(inEnc2)
>                                warnRd(block, Rdfile, level = -1, gettext("Non-ASCII contents in second part of \\enc"))
> 			    else
>                                warnRd(block, Rdfile, level = -1, gettext("Non-ASCII contents without declared encoding"))
> 				}
>                            if(grepl("<[0123456789abcdef][0123456789abcdef]>", block)) {
> 			    if(inEnc2)
>                                warnRd(block, Rdfile, level = -3, gettext("Apparent non-ASCII contents in second part of \\enc"))
> 			    else
>                                warnRd(block, Rdfile, level = -3, gettext("Apparent non-ASCII contents without declared encoding"))
> 			   }
781,782c782
<                        warnRd(block, Rdfile, level = -3,
<                               "Tag ", tag, " is invalid in a code block")
---
>                        warnRd(block, Rdfile, level = -3, gettextf("Tag %s is invalid in a code block", tag))
793,794c793
<                    } else warnRd(block, Rdfile, level = 7,
<                                  "Tag ", tag, " is only valid in \\usage"),
---
>                    } else warnRd(block, Rdfile, level = 7, gettextf("Tag %s is only valid in \\usage", tag)),
800,801c799
<                    else warnRd(block, Rdfile, level = 7,
<                                "Tag ", tag, " is only valid in \\examples"),
---
>                    else warnRd(block, Rdfile, level = 7, gettextf("Tag %s is only valid in \\examples", tag)),
803,805c801
<                        warnRd(block, Rdfile, level = 7,
<                               "Tag ", tag, " is invalid in a ",
<                               blocktag, " block")
---
>                        warnRd(block, Rdfile, level = 7, gettextf("Tag %s is invalid in a %s block", tag, blocktag))
816,817c812
<     	    warnRd(table, Rdfile, level = 7,
<                    "\\tabular format must be simple text")
---
>     	    warnRd(table, Rdfile, level = 7, gettext("\\tabular format must be simple text"))
820,821c815
<     	    warnRd(table, Rdfile, level = 7,
<                    "Unrecognized \\tabular format: ", table[[1L]][[1L]])
---
>     	    warnRd(table, Rdfile, level = 7, gettextf("Unrecognized \\tabular format: %s", table[[1L]][[1L]]))
834,836c828
<                     warnRd(table, Rdfile, level = 7,
<                            "Only ", length(format),
<                            " columns allowed in this table")
---
>                     warnRd(table, Rdfile, level = 7, sprintf(ngettext(length(format), "Only %d column allowed in this table", "Only %d columns allowed in this table", domain = "R-tools"), length(format)))
895c887
<             stopRd(section, Rdfile, "\\synopsis was removed in R 3.1.0")
---
>             stopRd(section, Rdfile, gettext("\\synopsis was removed in R 3.1.0"))
899,900c891
<         if(!has_text) warnRd(section, Rdfile, level = 3,
<                              "Empty section ", tagtitle)
---
>         if(!has_text) warnRd(section, Rdfile, level = 3, gettextf("Empty section %s", tagtitle))
906c897
<     	    warnRd(Rd, Rdfile, level = 5, "Must have a ", tag)
---
>     	    warnRd(Rd, Rdfile, level = 5, gettextf("Must have a tag %s", tag))
909,910c900
<     	    	warnRd(Rd[[which[2L]]], Rdfile, level = 5,
<                    "Only one ", tag, " is allowed")
---
>     	    	warnRd(Rd[[which[2L]]], Rdfile, level = 5, gettextf("Only one tag %s is allowed", tag))
919,920c909
<                 warnRd(Rd[[which[1L]]], Rdfile, level = 5,
<                        "Tag ", tag, " must not be empty")
---
>                 warnRd(Rd[[which[1L]]], Rdfile, level = 5, gettextf("Tag %s must not be empty", tag))
930,931c919
<         	warnRd(docType, Rdfile, level = 7,
<                        "'docType' must be plain text")
---
>         	warnRd(docType, Rdfile, level = 7, gettextf("'%s' must be plain text", "docType"))
969,970c957
<         warnRd(Rd, Rdfile, level = 5,
<                sprintf("multiple sections named '%s' are not allowed", tag))
---
>         warnRd(Rd, Rdfile, level = 5, gettextf("multiple sections named '%s' are not allowed", tag))
992c979
<     if (!all(tags == "TEXT")) stopRd(conditional, Rdfile, "condition must be plain text")
---
>     if (!all(tags == "TEXT")) stopRd(conditional, Rdfile, gettext("condition must be plain text"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/Rprof.R R/src/library/tools/R/Rprof.R
96,99c96,99
<     cat("\nEach sample represents", format(res$sample.interval), "seconds.\n")
<     cat("Total run time:", format(res$sampling.time), "seconds.\n")
<     cat("\nTotal seconds: time spent in function and callees.\n")
<     cat("Self seconds: time spent in function alone.\n\n")
---
>     cat("\n", gettextf("Each sample represents %s seconds.", format(res$sample.interval), domain = "R-tools"), "\n", sep = "")
>     cat(gettextf("Total run time: %s seconds.", format(res$sampling.time), domain = "R-tools"), "\n", sep = "")
>     cat("\n", gettext("Total seconds: time spent in function and callees.", domain = "R-tools"), "\n", sep = "")
>     cat(gettext("Self seconds: time spent in function alone.", domain = "R-tools"), "\n\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/Vignettes.R R/src/library/tools/R/Vignettes.R
29,31c29
<         stop(gettextf("Vignette product %s does not have a known filename extension (%s)",
<                       sQuote(file), paste(sQuote(names(type)), collapse=", ")),
<              domain = NA)
---
>         stop(gettextf("Vignette product %s does not have a known filename extension (%s)", sQuote(file), paste(sQuote(names(type)), collapse=", ")))
74,79c72
<             stop(gettextf("Failed to locate the %s output file (by engine %s) for vignette with name %s. The following files exist in directory %s: %s",
<                           sQuote(by),
<                           sQuote(sprintf("%s::%s", engine$package, engine$name)),
<                           sQuote(name), sQuote(dir),
<                           paste(sQuote(output0), collapse=", ")),
<                  domain = NA)
---
>             stop(gettextf("Failed to locate the %s output file (by engine %s) for vignette with name %s. The following files exists in directory %s: %s", sQuote(by), sQuote(sprintf("%s::%s", engine$package, engine$name)), sQuote(name), sQuote(dir), paste(sQuote(output0), collapse = ", ")))
81,84c74
<             stop(gettextf("Located more than one %s output file (by engine %s) for vignette with name %s: %s", sQuote(by),
<                           sQuote(sprintf("%s::%s", engine$package, engine$name)),
<                           sQuote(name), paste(sQuote(output), collapse=", ")),
<                  domain  = NA)
---
> 	    stop(gettextf("Located more than one %s output file (by engine %s) for vignette with name: %s", sQuote(by), sQuote(sprintf("%s::%s", engine$package, engine$name)), sQuote(name), paste(sQuote(output), collapse = ", ")))
98,103c88
<             stop(gettextf("Failed to locate the %s output file (by engine %s) for vignette with name %s. The following files exist in directory %s: %s",
<                           sQuote(by),
<                           sQuote(sprintf("%s::%s", engine$package, engine$name)),
<                           sQuote(name), sQuote(dir),
<                           paste(sQuote(output0), collapse=", ")),
<                  domain = NA)
---
>             stop(gettextf("Failed to locate the %s output file (by engine %s) for vignette with name %s. The following files exists in directory %s: %s", sQuote(by), sQuote(sprintf("%s::%s", engine$package, engine$name)), sQuote(name), sQuote(dir), paste(sQuote(output0), collapse = ", ")))
105,109c90
<             stop(gettextf("Located more than one %s output file (by engine %s) for vignette with name %s: %s",
<                           sQuote(by),
<                           sQuote(sprintf("%s::%s", engine$package, engine$name)),
<                           sQuote(name), paste(sQuote(output), collapse=", ")),
<                  domain = NA)
---
>             stop(gettextf("Located more than one %s output file (by engine %s) for vignette with name %s: %s", sQuote(by), sQuote(sprintf("%s::%s", engine$package, engine$name)), sQuote(name), paste(sQuote(output), collapse = ", ")))
143,144c124
<             stop(gettextf("unable to create temp directory %s ", sQuote(tmpd)),
<                  domain = NA)
---
>             stop(gettextf("unable to create temp directory %s", sQuote(tmpd)), domain = "R-tools")
172c152
<                  domain = NA)
---
>                  domain = "R-tools")
174c154
<             message("  Running ", sQuote(file))
---
>             message(gettextf("  Running %s", sQuote(file), domain = "R-tools"))
215,220c195
<                      stop(gettextf("Vignette %s overwrites the following %s output by vignette %s: %s",
<                                    sQuote(basename(names(resultsT)[j])),
<                                    sQuote(name),
<                                    sQuote(basename(names(resultsT)[i])),
<                                    paste(basename(bad), collapse=", ")),
<                           domain = NA)
---
>                      stop(gettextf("Vignette %s overwrites the following %s output by vignette %s:", sQuote(basename(names(resultsT)[j])), sQuote(name), sQuote(basename(names(resultsT)[i])), domain = "R-tools"), paste(basename(bad), collapse = ", "), domain = NA)
308c283
<                 cat("File", names(y)[k], ":\n")
---
>                 cat(gettextf("File %s:", names(y)[k], domain = "R-tools"), "\n", sep = "")
314,317c289,292
<     mycat(x$tangle, "*** Tangle Errors ***")
<     mycat(x$source, "*** Source Errors ***")
<     mycat(x$weave,  "*** Weave Errors ***")
<     mycat(x$latex,  "*** PDFLaTeX Errors ***")
---
>     mycat(x$tangle, gettext("*** Tangle Errors ***", domain = "R-tools"))
>     mycat(x$source, gettext("*** Source Errors ***", domain = "R-tools"))
>     mycat(x$weave,  gettext("*** Weave Errors ***", domain = "R-tools"))
>     mycat(x$latex,  gettext("*** PDFLaTeX Errors ***", domain = "R-tools"))
354c329
<             stop("argument 'package' must be of length 1")
---
>             stop(gettextf("'%s' argument must be of length 1", "package"))
358c333
< 	stop("you must specify 'package' or 'dir'")
---
>     stop("you must specify 'package' or 'dir' argument")
361c336
< 	stop(gettextf("directory '%s' does not exist", dir), domain = NA)
---
>     stop(gettextf("directory %s does not exist", sQuote(dir)), domain = "R-tools")
409,411c384
<             msg <- c("Files named as vignettes but with no recognized vignette engine:",
<                      paste("  ", sQuote(files)),
<                      "(Is a VignetteBuilder field missing?)")
---
>             msg <- gettextf("Files named as vignettes but with no recognized vignette engine: %s\n(Is a VignetteBuilder field missing?)", paste(sQuote(files), collapse = ", "), domain = "R-toosl")
473,476c446
<         stop(gettextf("Detected vignette source files (%s) with shared names (%s) and therefore risking overwriting each others output files",
<                       paste(sQuote(docs), collapse = ", "),
<                       paste(sQuote(names), collapse = ", ")),
<              domain = NA)
---
>         stop(gettextf("Detected vignette source files (%s) with shared names (%s) and therefore risking overwriting each others output files", paste(sQuote(docs), collapse = ", "), paste(sQuote(names), collapse = ", ")))
513c483
<                  file), domain = NA, call. = FALSE)
---
>                  file), domain = "R-tools", call. = FALSE)
521,522c491,492
<             stop(gettextf("processing vignette '%s' failed with diagnostics:\n%s",
<                  file, conditionMessage(e)), domain = NA, call. = FALSE)
---
>             stop(gettextf("processing vignette %s failed with diagnostics:",
>                  sQuote(file)), "\n", conditionMessage(e), domain = "R-tools", call. = FALSE, sep = "")
539,540c509,510
<                 stop(gettextf("tangling vignette '%s' failed with diagnostics:\n%s",
<                      file, conditionMessage(e)), domain = NA, call. = FALSE)
---
>                 stop(gettextf("tangling vignette %s failed with diagnostics:",
>                      sQuote(file)), "\n", conditionMessage(e), domain = "R-tools", call. = FALSE)
603c573
< 	stop(gettextf("file '%s' not found", file), domain = NA)
---
> 	stop(gettextf("file %s was not found", sQuote(file)), domain = "R-tools")
605c575
< 	stop(gettextf("directory '%s' does not exist", dir), domain = NA)
---
> 	stop(gettextf("directory %s does not exist", sQuote(dir)), domain = "R-tools")
625,627c595
< 	stop(gettextf("vignette filename '%s' does not match any of the '%s' filename patterns",
< 		file, paste(engine$package, engine$name, sep="::")),
< 		domain = NA)
---
> 	stop(gettextf("vignette filename %s does not match any of the %s filename patterns", sQuote(file), sQuote(paste(engine$package, engine$name, sep="::"))), domain = NA)
814c782
<         stop(gettextf("directory '%s' does not exist", dir), domain = NA)
---
>         stop(gettextf("directory %s does not exist", sQuote(dir)), domain = "R-tools")
833,835c801,802
<     	stop(gettextf("In '%s' vignettes '%s' and '%s' have the same vignette name",
<     		      basename(dirname(dir)), orig, dup),
<              domain = NA)
---
>     	stop(gettextf("In directory %s vignettes %s and %s have the same vignette name",
>     		      sQuote(basename(dirname(dir))), sQuote(orig), sQuote(dup)), domain = "R-tools")
881c848
<         stop(gettextf("directory '%s' does not exist", dir), domain = NA)
---
>         stop(gettextf("directory %s does not exist", sQuote(dir)), domain = "R-tools")
897,898c864
<         writeLines(paste("Vignettes with missing or empty",
<                          "\\VignetteIndexEntry:"))
---
>         writeLines(gettext("Vignettes with missing or empty '\\VignetteIndexEntry':"))
912,913c878,879
<     html <- c(HTMLheader("Vignettes and other documentation"),
<               paste0("<h2>Vignettes from package '", pkg,"'</h2>"))
---
>     html <- c(HTMLheader(gettext("Vignettes and other documentation")),
>               paste0("<h2>", gettextf("Vignettes from package %s", sQuote(pkg)),"</h2>"))
918c884
<               "The package contains no vignette meta-information.")
---
>               gettext("The package contains no vignette meta-information."))
951c917
<         stop("argument 'vignette' must be of length 1")
---
>         stop(gettextf("'%s' argument must be of length 1", "vignette"))
954c920
<         stop(gettextf("file '%s' not found", vignette), domain = NA)
---
>         stop(gettextf("file %s was not found", sQuote(vignette)), domain = "R-tools")
1005,1006c971,972
<        cat("\n  When running vignette ", sQuote(vig_name), ":\n", sep="")
<        stop("No vignettes available", call. = FALSE, domain = NA)
---
>        cat("\n  ", gettextf("When running vignette %s:", sQuote(vig_name), domain = "R-tools"), "\n", sep = "")
>        stop("No vignettes available", call. = FALSE, domain = "R-tools")
1011,1012c977,978
<        cat("\n  When running vignette ", sQuote(vig_name), ":\n", sep="")
<        stop("No such vignette ", sQuote(vig_name), call. = FALSE, domain = NA)
---
>        cat("\n  ", gettextf("When running vignette %s:", sQuote(vig_name), domain = "R-tools"), "\n", sep = "")
>        stop(gettextf("No such vignette %s", sQuote(vig_name)), call. = FALSE, domain = "R-tools")
1026,1027c992,993
<         cat("\n  When tangling ", sQuote(file), ":\n", sep="")
<         stop(conditionMessage(e), call. = FALSE, domain = NA)
---
>         cat("\n  ", gettextf("When tangling %s:", sQuote(file), domain = "R-tools"), "\n", sep = "")
>         stop(conditionMessage(e), call. = FALSE, domain = "R-tools")
1034,1035c1000,1001
<             cat("\n  When sourcing ", sQuote(output), ":\n", sep="")
<             stop(conditionMessage(e), call. = FALSE, domain = NA)
---
>             cat("\n  ", gettextf("When sourcing %s:", sQuote(output), domain = "R-tools"), "\n", sep = "")
>             stop(conditionMessage(e), call. = FALSE, domain = "R-tools")
1039c1005
<     cat("\n *** Run successfully completed ***\n")
---
>     cat("\n *** ", gettext("Run successfully completed", domain = "R-tools"), " ***\n", sep = "", collapse = "")
1049c1015
< 		stop("Vignette engine package not specified", call.=FALSE)
---
> 		stop("Vignette engine package was not specified.", call.=FALSE)
1053c1019
<             stop("Unsupported engine name ", sQuote(name))
---
>             stop(gettextf("Unsupported engine name %s", sQuote(name)))
1066,1068c1032
<                    stop(gettextf("None of packages %s have registered vignette engines",
<                                  paste(sQuote(package), collapse = ", ")),
<                         domain = NA)
---
>                    stop(gettextf("None of packages %s have registered vignette engines", paste(sQuote(package), collapse = ", ")))
1088,1089c1052
<                     stop(gettextf("Vignette engine %s is not registered",
<                                   sQuote(name)), domain = NA)
---
>                     stop(gettextf("Vignette engine %s is not registered", sQuote(name)))
1100,1103c1063
<                     stop(gettextf("Vignette engine %s is not registered by any of the packages %s",
<                                   sQuote(name),
<                                   paste(sQuote(package), collapse = ", ")),
<                          domain = NA)
---
>                     stop(gettextf("Vignette engine %s is not registered by any of the packages %s", sQuote(name), paste(sQuote(package), collapse = ", ")))
1107,1110c1067
<                 stop(gettextf("Vignette engine %s is not registered by any of the packages %s",
<                               sQuote(name),
<                               paste(sQuote(package), collapse = ", ")),
<                      domain = NA)
---
>                 stop(gettextf("Vignette engine %s is not registered by any of the packages %s", sQuote(name), paste(sQuote(package), collapse = ", ")))
1119,1120c1076
<             stop(gettextf("Engine name %s and package %s do not match",
<                           sQuote(name), sQuote(package)), domain = NA)
---
>             stop(gettextf("Engine name %s and package %s do not match", sQuote(name), sQuote(package)))
1134,1136c1090
<                     stop(gettextf("Argument %s must be a function and not %s",
<                                   sQuote("weave"), sQuote(class(weave)[1L])),
<                          domain = NA)
---
>                     stop(gettextf("Argument %s must be a function and not an object of class %s", sQuote("weave"), dQuote(class(weave)[1L])))
1138,1140c1092
<                     stop(gettextf("Argument %s must be a function and not %s",
<                                   sQuote("tangle"), sQuote(class(tangle)[1L])),
<                          domain = NA)
---
>                     stop(gettextf("Argument %s must be a function and not an object of class %s", sQuote("tangle"), dQuote(class(tangle)[1L])))
1145,1147c1097
<                 stop(gettextf("Argument %s must be a character vector or NULL and not %s",
<                               sQuote("pattern"), sQuote(class(pattern)[1L])),
<                      domain = NA)
---
>                 stop(gettextf("Argument %s must be a character vector or NULL and not an object of class %s", sQuote("pattern"), sQuote(class(pattern)[1L])))
1169,1170c1119
<                 stop(gettextf("Cannot change the %s engine or use an engine of that name",
<                               sQuote("Sweave")), domain = NA)
---
>                 stop(gettextf("Cannot change the %s engine or use an engine of that name", sQuote("Sweave")))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/admin.R R/src/library/tools/R/admin.R
38,42c38,39
<                    paste(.eval_with_capture(print(ok))$output,
<                          collapse = "\n"),
<                    sep = "\n\n"),
<              domain = NA,
<              call. = FALSE)
---
>                    paste(.eval_with_capture(print(ok))$output, collapse = "\n"), sep = "\n\n"),
>              domain = "R-tools", call. = FALSE)
54,57c51
<         warning(gettextf("*** someone has corrupted the Built field in package '%s' ***",
<                          db["Package"]),
<                 domain = NA,
<                 call. = FALSE)
---
>         warning(gettextf("*** someone has corrupted the Built field in package %s ***", sQuote(db["Package"])), domain = "R-tools", call. = FALSE)
97,99c91
<          stop(gettextf("cannot open directory '%s'",
<                        outMetaDir),
<               domain = NA)
---
>          stop(gettextf("cannot open directory %s", sQuote(outMetaDir)), domain = "R-tools")
115,118c107
<             warning(gettextf("*** someone has corrupted the Built field in package '%s' ***",
<                              db["Package"]),
<                     domain = NA,
<                     call. = FALSE)
---
>             warning(gettextf("*** someone has corrupted the Built field in package %s ***", sQuote(db["Package"])), domain = "R-tools", call. = FALSE)
169c158
<             stop(gettextf("cannot open directory '%s'", meta_dir))
---
>             stop(gettextf("cannot open directory %s", sQuote(meta_dir)))
209,210c198
<         stop(gettextf("directory '%s' does not exist", dir),
<              domain = NA)
---
>         stop(gettextf("directory %s does not exist", sQuote(dir)), domain = "R-tools")
246,247c234
<             out <- gettextf("\nduplicated files in '%s' field:",
<                             collationField)
---
>             out <- gettextf("\nduplicated files in %s field:", sQuote(collationField))
251c238
<             stop(out, domain = NA)
---
>             stop(out, domain = "R-tools")
257,259c244,246
<             out <- gettextf("\nfiles in '%s' field missing from '%s':",
<                             collationField,
<                             codeDir)
---
>             out <- gettextf("\nfiles in %s field missing from %s:",
>                             sQuote(collationField),
>                             sQuote(codeDir))
263c250
<             stop(out, domain = NA)
---
>             stop(out, domain = "R-tools")
270,272c257,259
<             out <- gettextf("\nfiles in '%s' missing from '%s' field:",
<                             codeDir,
<                             collationField)
---
>             out <- gettextf("\nfiles in %s missing from %s field:",
>                             sQuote(codeDir),
>                             sQuote(collationField))
276c263
<             stop(out, domain = NA)
---
>             stop(out, domain = "R-tools")
285,286c272
<         stop(gettextf("cannot open directory '%s'", outDir),
<              domain = NA)
---
>         stop(gettextf("cannot open directory %s", sQuote(outDir)), domain = "R-tools")
289,290c275
<         stop(gettextf("cannot open directory '%s'", outCodeDir),
<              domain = NA)
---
>         stop(gettextf("cannot open directory %s", sQuote(outCodeDir)), domain = "R-tools")
293c278
<         stop(gettextf("unable to create '%s'", outFile), domain = NA)
---
>         stop(gettextf("unable to create file %s", sQuote(outFile)), domain = "R-tools")
307c292
<                                          "unable to re-encode %s lines %s"),
---
>                                          "unable to re-encode %s lines %s", domain = "R-tools"),
346,347c331
<         stop(gettextf("directory '%s' does not exist", dir),
<              domain = NA)
---
>         stop(gettextf("directory %s does not exist", sQuote(dir)), domain = "R-tools")
349,350c333
<         stop(gettextf("directory '%s' does not exist", outDir),
<              domain = NA)
---
>         stop(gettextf("directory %s does not exist", sQuote(outDir)), domain = "R-tools")
358,360c341
<             stop(gettextf("unable to copy INDEX to '%s'",
<                           file.path(outDir, "INDEX")),
<                  domain = NA)
---
>             stop(gettextf("unable to copy INDEX to %s", sQuote(file.path(outDir, "INDEX"))), domain = "R-tools")
364,365c345
<          stop(gettextf("cannot open directory '%s'", outMetaDir),
<               domain = NA)
---
>          stop(gettextf("cannot open directory %s", sQuote(outMetaDir)), domain = "R-tools")
536,537c516,517
<             cat("  ", sQuote(basename(file)),
<                 if(nzchar(enc)) paste("using", sQuote(enc)), "\n")
---
>             if(nzchar(enc)) cat("  ", gettextf("%s is using %s encoding", sQuote(basename(file)), sQuote(enc), domain = "R-tools"), "\n", sep = "")
>             else cat("  ", sQuote(basename(file)), "\n", sep = "")
663,664c643
<         stop(gettextf("cannot open directory '%s'", outVignetteDir),
<              domain = NA)
---
>         stop(gettextf("cannot open directory %s", sQuote(outVignetteDir)), domain = "R-tools")
683c662
<         stop(gettextf("cannot create directory '%s'", buildDir), domain = NA)
---
>         stop(gettextf("cannot create directory %s", sQuote(buildDir)), domain = "R-tools")
694,695c673
<         message(gettextf("processing %s", sQuote(basename(file))),
<                 domain = NA)
---
>         message(gettextf("processing file %s", sQuote(basename(file))), domain = "R-tools")
707,709c685
<             stop(gettextf("running %s on vignette '%s' failed with message:\n%s",
<                  engine[["name"]], file, conditionMessage(e)),
<                  domain = NA, call. = FALSE)
---
>             stop(gettextf("running %s on vignette %s failed with message:\n%s", engine[["name"]], sQuote(file), conditionMessage(e)), domain = "R-tools", call. = FALSE)
723,725c699
<                 stop(gettextf("compiling TeX file %s failed with message:\n%s",
<                  sQuote(output), conditionMessage(e)),
<                  domain = NA, call. = FALSE)
---
>                 stop(gettextf("compiling TeX file %s failed with message:\n%s", sQuote(output), conditionMessage(e)), domain = "R-tools", call. = FALSE)
731,734c705
<             stop(gettextf("cannot copy '%s' to '%s'",
<                           output,
<                           outVignetteDir),
<                  domain = NA)
---
>             stop(gettextf("cannot copy file %s to directory %s", sQuote(output), sQuote(outVignetteDir)), domain = "R-tools")
759,760c730
<         stop(gettextf("cannot open directory '%s'", outMetaDir),
<              domain = NA)
---
>         stop(gettextf("cannot open directory %s", sQuote(outMetaDir)), domain = "R-tools")
893,895c863
<                     gettextf("ERROR: this R is version %s, package '%s' requires R %s %s",
<                                     current, package,
<                                     depends$op, depends$version)
---
>                     gettextf("ERROR: this R is version %s, package %s requires R %s", current, sQuote(package), paste(depends$op, depends$version, collapse = " "))
897,899c865,866
<                     gettextf("ERROR: this R is version %s, required is R %s %s",
<                                     current, depends$op, depends$version)
<                 message(strwrap(msg, exdent = 2L))
---
>                     gettextf("ERROR: this R is version %s, required is R %s", current, paste(depends$op, depends$version, collapse = " "))
>                 message(strwrap(msg, exdent = 2L), domain = "R-tools")
920c887
<         stop("loading failed", call. = FALSE)
---
>         stop("loading package failed", call. = FALSE)
1073,1074c1040,1041
<     paste('  compacted', sQuote(basename(row.names(y))),
<           'from', z[, 1L], 'to', z[, 2L])
---
>     #paste("  compacted", sQuote(basename(row.names(y))), "from", z[, 1L], "to", z[, 2L])
>     gettextf("  compacted %s from %s to %s", sQuote(basename(row.names(y))), z[, 1L], z[, 2L], domain = "R-tools")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/assertCondition.R R/src/library/tools/R/assertCondition.R
52c52
<                     message(sprintf("assertCondition: caught %s",
---
>                     message(gettextf("assertCondition: caught %s",
79c79
<         message(sprintf("Asserted error: %s", error[[1]]$message))
---
>         message(gettextf("Asserted error: %s", error[[1]]$message))
91c91
<         message(sprintf("Asserted warning: %s", warning[[1]]$message))
---
>         message(gettextf("Asserted warning: %s", warning[[1]]$message))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/bibstyle.R R/src/library/tools/R/bibstyle.R
387c387
<     	    paste("bibtype", attr(paper, "bibtype"),"not implemented") ))
---
>     	    gettextf("bibtype %s is not implemented", sQuote(attr(paper, "bibtype")))))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/build.R R/src/library/tools/R/build.R
195c195
< 	    printLog(Log, "ERROR: package installation failed\n")
---
> 	    printLog(Log, gettext("ERROR: package installation failed\n", domain = "R-tools"))
206c206
<         checkingLog(Log, "DESCRIPTION meta-information")
---
>         checkingLog(Log, gettext("checking DESCRIPTION meta-information ...", domain = "R-tools"))
209,210c209,210
<             resultLog(Log, "ERROR")
<             messageLog(Log, "running '.check_package_description' failed")
---
>             resultLog(Log, gettext("ERROR", domain = "R-tools"))
>             messageLog(Log, gettext("running '.check_package_description()' failed", domain = "R-tools"))
213c213
<                 resultLog(Log, "ERROR")
---
>                 resultLog(Log, gettext("ERROR", domain = "R-tools"))
216c216
<             } else resultLog(Log, "OK")
---
>             } else resultLog(Log, gettext("OK", domain = "R-tools"))
225c225
< 			   "installing the package to build vignettes")
---
> 			   gettext("installing the package to build vignettes", domain = "R-tools"))
234c234
<             messageLog(Log, "renaming 'inst/doc/makefile' to 'inst/doc/Makefile'")
---
>             messageLog(Log, gettext("renaming 'inst/doc/makefile' to 'inst/doc/Makefile'", domain = "R-tools"))
252c252
<                 creatingLog(Log, "vignettes")
---
>                 creatingLog(Log, gettext("creating vignettes ...", domain = "R-tools"))
275c275
<                     resultLog(Log, "ERROR")
---
>                     resultLog(Log, gettext("ERROR", domain = "R-tools"))
283c283
<                     resultLog(Log, "OK")
---
>                     resultLog(Log, gettext("OK", domain = "R-tools"))
333c333
<                 checkingLog(Log, "vignette meta-information")
---
>                 checkingLog(Log, gettext("checking vignette meta-information ...", domain = "R-tools"))
338c338
<                     msg <- c("Output(s) listed in 'build/vignette.rds' but not in package:",
---
>                     msg <- c(gettext("Output(s) listed in 'build/vignette.rds' but not in package:", domain = "R-tools"),
340c340
<                              "Run R CMD build without --no-build-vignettes to re-create")
---
>                              gettext("Run R CMD build without --no-build-vignettes to re-create", domain = "R-tools"))
343c343
<                 } else resultLog(Log, "OK")
---
>                 } else resultLog(Log, gettext("OK"))
349c349
<             messageLog(Log, "compacting vignettes and other PDF files")
---
>             messageLog(Log, gettext("compacting vignettes and other PDF files", domain = "R-tools"))
380c380
<             messageLog(Log, "cleaning src")
---
>             messageLog(Log, gettext("cleaning 'src' directory", domain = "R-tools"))
386,387c386
<                     else warning("unable to run 'make clean' in 'src'",
<                                  domain = NA)
---
>                     else warning("unable to run 'make clean' in 'src'", domain = "R-tools")
397,398c396
<                         } else warning("unable to run 'make clean' in 'src'",
<                                        domain = NA)
---
>                         } else warning("unable to run 'make clean' in 'src'", domain = "R-tools")
445c443
<                     messageLog(Log, "running 'cleanup.win'")
---
>                     messageLog(Log, gettext("running 'cleanup.win'", domain = "R-tools"))
453c451
<             messageLog(Log, "running 'cleanup'")
---
>             messageLog(Log, gettext("running 'cleanup'", domain = "R-tools"))
463c461
<             errorLog(Log, "computing Rd index failed")
---
>             errorLog(Log, gettext("computing Rd index failed", domain = "R-tools"))
466c464
<         checkingLog(Log, "whether ", sQuote(oldindex), " is up-to-date")
---
>         checkingLog(Log, gettextf("checking whether %s is up-to-date ...", sQuote(oldindex), domain = "R-tools"))
471c469
<                 resultLog(Log, "NO")
---
>                 resultLog(Log, gettext("NO", domain = "R-tools"))
473,474c471
<                     messageLog(Log, "removing ", sQuote(oldindex),
< 			      " as '--force' was given")
---
>                     messageLog(Log, gettextf("removing %s as '--force' was given", sQuote(oldindex), domain = "R-tools"))
477,478c474
<                     messageLog(Log, "use '--force' to remove ",
< 			      "the existing ", sQuote(oldindex))
---
>                     messageLog(Log, gettextf("use '--force' to remove the existing %s", sQuote(oldindex), domain = "R-tools"))
482c478
<                 resultLog(Log, "OK")
---
>                 resultLog(Log, gettext("OK", domain = "R-tools"))
486,487c482,483
<             resultLog(Log, "NO")
<             messageLog(Log, "creating new ", sQuote(oldindex))
---
>             resultLog(Log, gettext("NO", domain = "R-tools"))
>             messageLog(Log, gettextf("creating new %s", sQuote(oldindex), domain = "R-tools"))
505c501
< 	messageLog(Log, "installing the package to process help pages")
---
> 	messageLog(Log, gettext("installing the package to process help pages", domain = "R-tools"))
521c517
< 	    messageLog(Log, "saving partial Rd database")
---
> 	    messageLog(Log, gettext("saving partial Rd database", domain = "R-tools"))
530c526
< 	    messageLog(Log, "building the PDF package manual")
---
> 	    messageLog(Log, gettext("building the PDF package manual", domain = "R-tools"))
589c585
<                 printLog(Log, "WARNING: directory ", sQuote(d), " is empty\n")
---
>                 printLog(Log, gettextf("WARNING: directory %s is empty\n", sQuote(d), domain = "R-tools"))
592c588
<                 printLog(Log, "Removed empty directory ", sQuote(d), "\n")
---
>                 printLog(Log, gettextf("Removed empty directory %s\n", sQuote(d), domain = "R-tools"))
624,625c620
<         printLog(Log,
<                  "  NB: this package now depends on R (>= ", ver, ")\n")
---
>         printLog(Log, gettextf("  NB: this package now depends on R (>= %s)\n", ver, domain = "R-tools"))
636c631
<             messageLog(Log, "re-saving image files")
---
>             messageLog(Log, gettext("re-saving image files", domain = "R-tools"))
648c643
<                     messageLog(Log, "re-saving image files")
---
>                     messageLog(Log, gettext("re-saving image files", domain = "R-tools"))
656c651
<                     messageLog(Log, "re-saving sysdata.rda")
---
>                     messageLog(Log, gettext("re-saving sysdata.rda", domain = "R-tools"))
674c669
<             messageLog(Log, "re-saving .R files as .rda")
---
>             messageLog(Log, gettext("re-saving .R files as .rda", domain = "R-tools"))
686,687c681
<             printLog(Log,
<                      "  NB: *.R converted to .rda: other files may need to be removed\n")
---
>             printLog(Log, gettextf("  NB: *.R converted to .rda: other files may need to be removed\n", domain = "R-tools"))
691c685
<             messageLog(Log, "re-saving tabular files")
---
>             messageLog(Log, gettext("re-saving tabular files", domain = "R-tools"))
780,781c774
<             stop("'--no-vignettes' is defunct:\n  use '--no-build-vignettes' instead",
<                  call. = FALSE, domain = NA)
---
>             stop("'--no-vignettes' is defunct:\n  use '--no-build-vignettes' instead", call. = FALSE, domain = "R-tools")
797c790
<             message("Warning: unknown option ", sQuote(a))
---
>             message(gettextf("Warning: unknown option %s", sQuote(a)))
803,805c796
<         warning(gettextf("invalid value for '--compact-vignettes', assuming %s",
<                          "\"qpdf\""),
<                 domain = NA)
---
>         warning(gettextf("invalid value for '--compact-vignettes', assuming %s", "\"qpdf\""), domain = "R-tools")
813c804
<         stop("current working directory cannot be ascertained")
---
>         stop("current working directory cannot be ascertained", domain = "R-tools")
834c825
<             errorLog(Log, "cannot change to directory ", sQuote(pkg))
---
>             errorLog(Log, gettextf("cannot change to directory %s", sQuote(pkg), domain = "R-tools"))
839c830
<         checkingLog(Log, "for file ", sQuote(file.path(pkg, "DESCRIPTION")))
---
>         checkingLog(Log, gettextf("checking for file %s ...", sQuote(file.path(pkg, "DESCRIPTION")), domain = "R-tools"))
844c835
<                 resultLog(Log, "EXISTS but not correct format")
---
>                 resultLog(Log, gettext("file EXISTS but is not of correct format", domain = "R-tools"))
847c838
<             resultLog(Log, "OK")
---
>             resultLog(Log, gettext("OK", domain = "R-tools"))
849c840
<             resultLog(Log, "NO")
---
>             resultLog(Log, gettext("NO", domain = "R-tools"))
862c853
<                 errorLog(Log, "copying to build directory failed")
---
>                 errorLog(Log, gettext("copying to build directory failed", domain = "R-tools"))
873c864
<                 errorLog(Log, "copying to build directory failed")
---
>                 errorLog(Log, gettext("copying to build directory failed", domain = "R-tools"))
882,883c873
<                 message(gettextf("Error: cannot rename directory to %s",
<                                  sQuote(intname)), domain = NA)
---
>                 message(gettextf("Error: cannot rename directory to %s", sQuote(intname)), domain = "R-tools")
890c880
<         messageLog(Log, "preparing ", sQuote(pkgname), ":")
---
>         messageLog(Log, gettextf("preparing %s:", sQuote(pkgname)))
935c925
<             messageLog(Log, "excluding invalid files")
---
>             messageLog(Log, gettext("excluding invalid files", domain = "R-tools"))
948,949c938
<         messageLog(Log,
<                    "checking for LF line-endings in source and make files")
---
>         messageLog(Log, gettext("checking for LF line-endings in source and make files", domain = "R-tools"))
952c941
<         messageLog(Log, "checking for empty or unneeded directories");
---
>         messageLog(Log, gettext("checking for empty or unneeded directories", domain = "R-tools"));
957,962c946,947
<                 msg <- paste("WARNING: Removing directory",
<                              sQuote(d),
<                              "which should only occur",
<                              "in an installed package")
<                 printLog(Log, paste(strwrap(msg, indent = 0L, exdent = 2L),
<                                     collapse = "\n"), "\n")
---
>                 msg <- gettextf("WARNING: Removing directory %s which should only occur in an installed package", sQuote(d), domain = "R-tools")
>                 printLog(Log, paste(strwrap(msg, indent = 0L, exdent = 2L), collapse = "\n"), "\n")
974c959
<             messageLog(Log, "looking to see if a 'data/datalist' file should be added")
---
>             messageLog(Log, gettext("looking to see if a 'data/datalist' file should be added", domain = "R-tools"))
979c964
<                      printLog(Log, "  unable to create a 'datalist' file: may need the package to be installed\n"))
---
>                      printLog(Log, gettext("  unable to create a 'datalist' file: may need the package to be installed\n", domain = "R-tools")))
989c974
< 	    messageLog(Log, "creating default NAMESPACE file")
---
> 	    messageLog(Log, gettext("creating default NAMESPACE file", domain = "R-tools"))
994c979
< 	    messageLog(Log, "adding MD5 file")
---
> 	    messageLog(Log, gettext("adding MD5 file", domain = "R-tools"))
1005c990
<         messageLog(Log, "building ", sQuote(filename))
---
>         messageLog(Log, gettextf("building %s", sQuote(filename)))
1011c996
<             errorLog(Log, "packaging into .tar.gz failed")
---
>             errorLog(Log, gettext("packaging into .tar.gz failed", domain = "R-tools"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/check.R R/src/library/tools/R/check.R
50c50
<                                  c(Ropts, paste("-f", Rin)), stdout, stderr, env = env))
---
>                                  c(Ropts, paste("-f", Rin)), stdout, stderr, env = c("LANGUAGE=en", env)))
54c54
<                                  stdout, stderr, stdin, input = cmd, env = env))
---
>                                  stdout, stderr, stdin, input = cmd, env = c("LANGUAGE=en", env)))
69c69
<         if (!res) stop(gettextf("cannot link from %s", from), domain = NA)
---
>         if (!res) stop(gettextf("cannot link from %s", sQuote(from)), domain = "R-tools")
210,211c210
<                     grep("^(ftype: not found|File type)", out,
<                          invert = TRUE, value = TRUE)
---
>                     grep("^(ftype: not found|File type)", out, invert = TRUE, value = TRUE)
219,220c218
<                     grep('^Xlib: *extension "RANDR" missing on display', out,
<                          invert = TRUE, value = TRUE)
---
>                     grep('^Xlib: *extension "RANDR" missing on display', out, invert = TRUE, value = TRUE)
257c255
<         checkingLog(Log, "package directory")
---
>         checkingLog(Log, gettext("checking package directory ...", domain = "R-tools"))
263c261
<             resultLog(Log, "OK")
---
>             resultLog(Log, gettext("OK", domain = "R-tools"))
265c263
<             errorLog(Log, "Package directory ", sQuote(pkg), "does not exist.")
---
>             errorLog(Log, gettextf("Package directory %s does not exist.", sQuote(pkg), domain = "R-tools"))
289c287
<                     printLog(Log, "* loading checks for arch ", sQuote(arch), "\n")
---
>                     printLog(Log, gettextf("* loading checks for arch %s\n", sQuote(arch), domain = "R-tools"))
316c314
<             checkingLog(Log, "for left-overs from vignette generation")
---
>             checkingLog(Log, gettext("checking for left-overs from vignette generation ...", domain = "R-tools"))
318,320c316
<             printLog(Log,
<                      paste("  file", paste(sQuote(miss[f]), collapse = ", "),
<                            "will not be installed: please remove it\n"))
---
>             printLog(Log, gettextf("  file %s will not be installed: please remove it\n", paste(sQuote(miss[f]), collapse = ", "), domain = "R-tools"))
325c321
<                 warningLog(Log, "'qpdf' is needed for checks on size reduction of PDFs")
---
>                 warningLog(Log, gettext("'qpdf' is needed for checks on size reduction of PDFs", domain = "R-tools"))
349,354c345,348
<                 checkingLog(Log, "for old-style vignette sources")
<                 msg <- c("Vignette sources only in 'inst/doc':",
<                          strwrap(paste(sQuote(sources), collapse = ", "),
<                                  indent = 2L, exdent = 2L),
<                          "A 'vignettes' directory is required as from R 3.1.0",
<                          "and these will not be indexed nor checked")
---
>                 checkingLog(Log, gettext("checking for old-style vignette sources ...", domain = "R-tools"))
>                 msg <- c(gettext("Vignette sources only in 'inst/doc':", domain = "R-tools"),
>                          strwrap(paste(sQuote(sources), collapse = ", "), indent = 2L, exdent = 2L),
>                          gettext("A 'vignettes' directory is required as from R 3.1.0 and these will not be indexed nor checked", domain = "R-tools"))
366,367c360,361
<             checkingLog(Log, "examples")
<             resultLog(Log, "SKIPPED")
---
>             checkingLog(Log, gettext("checking examples ...", domain = "R-tools"))
>             resultLog(Log, gettext("SKIPPED", domain = "R-tools"))
374c368
< 	    printLog(Log, "directory ", sQuote(test_dir), " not found\n")
---
> 	    printLog(Log, gettextf("directory %s was not found\n", sQuote(test_dir), domain = "R-tools"))
389c383
<         checkingLog(Log, "for portable file names")
---
>         checkingLog(Log, gettext("checking for portable file names ...", domain = "R-tools"))
442,443c436
<         bad_files <- allfiles[grepl("[[:cntrl:]\"*/:<>?\\|]",
<                                     basename(allfiles))]
---
>         bad_files <- allfiles[grepl("[[:cntrl:]\"*/:<>?\\|]", basename(allfiles))]
456c449
<             msg <- ngettext(nb,
---
>             wrapLog(ngettext(nb,
459,460c452
<                             domain = NA)
<             wrapLog(msg)
---
>                             domain = "R-tools"))
462,466c454
<             wrapLog("These are not valid file names",
<                     "on all R platforms.\n",
<                     "Please rename the files and try again.\n",
<                     "See section 'Package structure'",
<                     "in the 'Writing R Extensions' manual.\n")
---
>             wrapLog(gettext("These are not valid file names on all R platforms.\nPlease rename the files and try again.\nSee section 'Package structure' in the 'Writing R Extensions' manual.\n", domain = "R-tools"))
476c464
<             wrapLog("Found the following files with duplicate lower-cased file names:\n")
---
>             wrapLog(gettext("Found the following files with duplicate lower-cased file names:\n", domain = "R-tools"))
478,482c466
<             wrapLog("File names must not differ just by case",
<                     "to be usable on all R platforms.\n",
<                     "Please rename the files and try again.\n",
<                     "See section 'Package structure'",
<                     "in the 'Writing R Extensions' manual.\n")
---
>             wrapLog(gettext("File names must not differ just by case to be usable on all R platforms.\nPlease rename the files and try again.\nSee section 'Package structure' in the 'Writing R Extensions' manual.\n", domain = "R-tools"))
494c478
<             msg <- ngettext(nb,
---
>             wrapLog(ngettext(nb,
497,498c481
<                             domain = NA)
<             wrapLog(msg)
---
>                             domain = "R-tools"))
500,502c483
<             wrapLog("These are not fully portable file names.\n",
<                     "See section 'Package structure'",
<                     "in the 'Writing R Extensions' manual.\n")
---
>             wrapLog(gettext("These are not fully portable file names.\nSee section 'Package structure' in the 'Writing R Extensions' manual.\n", domain = "R-tools"))
527c508
<             msg <- ngettext(length(bad_files),
---
>             wrapLog(ngettext(length(bad_files),
530,531c511
<                             domain = NA)
<             wrapLog(msg)
---
>                             domain = "R-tools"))
533,538c513
<             wrapLog("Tarballs are only required to store paths of up to 100",
<                     "bytes and cannot store those of more than 256 bytes,",
<                     "with restrictions including to 100 bytes for the",
<                     "final component.\n",
<                     "See section 'Package structure'",
<                     "in the 'Writing R Extensions' manual.\n")
---
>             wrapLog(gettext("Tarballs are only required to store paths of up to 100 bytes and cannot store those of more than 256 bytes, with restrictions including to 100 bytes for the final component.\nSee section 'Package structure' in the 'Writing R Extensions' manual.\n", domain = "R-tools"))
542c517
<         if (!any) resultLog(Log, "OK")
---
>         if (!any) resultLog(Log, gettext("OK", domain = "R-tools"))
549c524
<         checkingLog(Log, "for sufficient/correct file permissions")
---
>         checkingLog(Log, gettext("checking for sufficient/correct file permissions ...", domain = "R-tools"))
579c554
<             wrapLog("Found the following files with insufficient permissions:\n")
---
>             wrapLog(gettext("Found the following files with insufficient permissions:\n", domain = "R-tools"))
581c556
<             wrapLog("Permissions should be at least 700 for directories and 400 for files.\nPlease fix permissions and try again.\n")
---
>             wrapLog(gettext("Permissions should be at least 700 for directories and 400 for files.\nPlease fix permissions and try again.\n", domain = "R-tools"))
597c572
<             wrapLog("The following files should most likely be executable (for the owner):\n")
---
>             wrapLog(gettext("The following files should most likely be executable (for the owner):\n", domain = "R-tools"))
599,600c574,575
<             printLog(Log, "Please fix their permissions\n")
<         } else resultLog(Log, "OK")
---
>             printLog(Log, gettext("Please fix their permissions\n", domain = "R-tools"))
>         } else resultLog(Log, gettext("OK", domain = "R-tools"))
609c584
<         checkingLog(Log, "DESCRIPTION meta-information")
---
>         checkingLog(Log, gettext("checking DESCRIPTION meta-information ...", domain = "R-tools"))
613,614c588
<         Rcmd <- sprintf("tools:::.check_package_description(\"%s\", TRUE)",
<                         dfile)
---
>         Rcmd <- sprintf("tools:::.check_package_description(\"%s\", TRUE)", dfile)
646,647c620
<             Rcmd <- sprintf("tools:::.check_package_license(\"%s\", \"%s\")",
<                             dfile, pkgdir)
---
>             Rcmd <- sprintf("tools:::.check_package_license(\"%s\", \"%s\")", dfile, pkgdir)
653,654c626
<                 } else if (any(grepl("^(Standardizable: FALSE|Invalid license file pointers:)",
<                                      out))) {
---
>                 } else if (any(grepl("^(Standardizable: FALSE|Invalid license file pointers:)", out))) {
668,669c640
<             out <- .check_package_description_authors_at_R_field(aar,
<                                                                  strict = TRUE)
---
>             out <- .check_package_description_authors_at_R_field(aar, strict = TRUE)
700,702c671,673
<                         printLog(Log, "Author field differs from that derived from Authors@R", "\n")
<                         printLog(Log, "  Author:    ", sQuote(yorig[1L]), "\n")
<                         printLog(Log, "  Authors@R: ", sQuote(y[1L]), "\n")
---
>                         printLog(Log, gettext("Author field differs from that derived from Authors@R", domain = "R-tools"), "\n")
>                         printLog(Log, gettext("  Author:    ", domain = "R-tools"), sQuote(yorig[1L]), "\n")
>                         printLog(Log, gettext("  Authors@R: ", domain = "R-tools"), sQuote(y[1L]), "\n")
706,708c677,679
<                         printLog(Log, "Maintainer field differs from that derived from Authors@R", "\n")
<                         printLog(Log, "  Maintainer: ", sQuote(yorig[2L]), "\n")
<                         printLog(Log, "  Authors@R:  ", sQuote(y[2L]), "\n")
---
>                         printLog(Log, gettext("Maintainer field differs from that derived from Authors@R", domain = "R-tools"), "\n")
>                         printLog(Log, gettext("  Maintainer: ", domain = "R-tools"), sQuote(yorig[2L]), "\n")
>                         printLog(Log, gettext("  Authors@R:  ", domain = "R-tools"), sQuote(y[2L]), "\n")
719c690
<                 printLog(Log, "NeedsCompilation field must take value 'yes' or 'no'", "\n")
---
>                 printLog(Log, gettext("'NeedsCompilation' field must take value 'yes' or 'no'", domain = "R-tools"), "\n")
731c702
<         if (!any) resultLog(Log, "OK")
---
>         if (!any) resultLog(Log, gettext("OK", domain = "R-tools"))
738c709
<         checkingLog(Log, "'build' directory")
---
>         checkingLog(Log, gettext("checking 'build' directory ...", domain = "R-tools"))
746c717
<             msg <- c("Vignette(s) without any output listed in 'build/vignette.rds'",
---
>             msg <- c(gettext("Vignette(s) without any output listed in 'build/vignette.rds'", domain = "R-tools"),
755c726
<             msg <- c("Output(s) listed in 'build/vignette.rds' but not in package:",
---
>             msg <- c(gettext("Output(s) listed in 'build/vignette.rds' but not in package:", domain = "R-tools"),
759c730
<         if (!any) resultLog(Log, "OK")
---
>         if (!any) resultLog(Log, gettext("OK", domain = "R-tools"))
764c735
<         checkingLog(Log, "top-level files")
---
>         checkingLog(Log, gettext("checking top-level files ...", domain = "R-tools"))
771,772c742
<             wrapLog("These files are defunct.",
<                     "See manual 'Writing R Extensions'.\n")
---
>             wrapLog(gettext("These files are defunct. See manual 'Writing R Extensions'.\n", domain = "R-tools"))
794,795c764
<                          "File README.md cannot be checked without ",
<                          "'pandoc' being installed.\n")
---
>                          gettext("File README.md cannot be checked without 'pandoc' being installed.\n", domain = "R-tools"))
809,819c778,781
<                     one <- (length(topfiles) == 1L)
<                     msg <- c(if(one) "File" else "Files",
<                              "\n",
<                              .format_lines_with_indent(topfiles),
<                              "\n",
<                              if(one) {
<                                  "is not mentioned in the DESCRIPTION file.\n"
<                              } else {
<                                  "are not mentioned in the DESCRIPTION file.\n"
<                              })
<                     printLog(Log, msg)
---
>                     printLog(Log,
>                              sprintf(ngettext(length(topfiles),
>                              "File %s is not mentioned in the DESCRIPTION file.\n",
>                              "Files %s are not mentioned in the DESCRIPTION file.\n", domain = "R-tools"),.format_lines_with_indent(topfiles)))
834,844c796
<                     one <- (length(topfiles) == 1L)
<                     msg <- c(if(one) "File" else "Files",
<                              "\n",
<                              .format_lines_with_indent(topfiles),
<                              "\n",
<                              if(one) {
<                                  "will install at top-level and is not mentioned in the DESCRIPTION file.\n"
<                              } else {
<                                  "will install at top-level and are not mentioned in the DESCRIPTION file.\n"
<                              })
<                     printLog(Log, msg)
---
>                     printLog(Log, sprintf(ngettext(length(topfiles), "File\n%s\nwill install at top-level and is not mentioned in the 'DESCRIPTION' file.\n", "Files\n%s\nwill install at top-level and are not mentioned in the 'DESCRIPTION' file.\n", domain = "R-tools"), .format_lines_with_indent(topfiles)))
883,884c835
<                          if(lt > 1L) "Non-standard files/directories found at top level:\n"
<                          else "Non-standard file/directory found at top level:\n" )
---
>                              ngettext(lt, "Non-standard file/directory found at top level:\n", "Non-standard files/directories found at top level:\n", domain = "R-tools"))
888,889c839
<                 cp <- grep("^copyright", topfiles,
<                            ignore.case = TRUE, value = TRUE)
---
>                 cp <- grep("^copyright", topfiles, ignore.case = TRUE, value = TRUE)
891c841
<                     printLog(Log, "Copyright information should be in file inst/COPYRIGHTS\n")
---
>                     printLog(Log, gettext("Copyright information should be in file inst/COPYRIGHTS\n", domain = "R-tools"))
893c843
<                     printLog(Log, "Authors information should be in file inst/AUTHORS\n")
---
>                     printLog(Log, gettext("Authors information should be in file inst/AUTHORS\n", domain = "R-tools"))
901c851
<         checkingLog(Log, "for left-over files")
---
>         checkingLog(Log, gettext("checking for left-over files ...", domain = "R-tools"))
909,913c859,861
<                       "The following files look like leftovers:\n",
<                       paste(strwrap(paste(sQuote(bad), collapse = ", "),
<                                     indent = 2, exdent = 2), collapse = "\n"),
<                       "\nPlease remove them from your package.\n")
<         } else resultLog(Log, "OK")
---
>                      gettextf("The following files look like leftovers:\n%s\nPlease remove them from your package.\n",
>                      paste(strwrap(paste(sQuote(bad), collapse = ", "), indent = 2, exdent = 2), collapse = "\n"), domain = "R-tools"))
>         } else resultLog(Log, gettext("OK", domain = "R-tools"))
920c868
<         checkingLog(Log, "index information")
---
>         checkingLog(Log, gettext("checking index information ...", domain = "R-tools"))
925c873
<             warningLog(Log, "Empty file 'INDEX'.")
---
>             warningLog(Log, gettext("Empty file 'INDEX'.", domain = "R-tools"))
933,935c881
<                 printLog0(Log,
<                           sprintf("Empty or missing file %s.\n",
<                                   sQuote(index)))
---
>                 printLog0(Log, gettextf("Empty or missing file %s.\n", sQuote(index), domain = "R-tools"))
958,959c904,905
<             wrapLog("See sections 'The INDEX file' and 'Package subdirectories' in the 'Writing R Extensions' manual.\n")
<         else resultLog(Log, "OK")
---
>             wrapLog(gettext("See sections 'The INDEX file' and 'Package subdirectories' in the 'Writing R Extensions' manual.\n", domain = "R-tools"))
>         else  resultLog(Log, gettext("OK", domain = "R-tools"))
964c910
<         checkingLog(Log, "package subdirectories")
---
>         checkingLog(Log, gettext("checking package subdirectories ...", domain = "R-tools"))
969c915
<             warningLog(Log, "Found directory 'R' with no source files.")
---
>             warningLog(Log, gettext("Found directory 'R' with no source files.", domain = "R-tools"))
987,988c933
<                 printLog(Log, "Found subdirectory 'r'.\n",
<                          "Most likely, this should be 'R'.\n")
---
>                 printLog(Log, gettext("Found subdirectory 'r'.\nMost likely, this should be 'R'.\n", domain = "R-tools"))
993,994c938
<                 printLog(Log, "Found subdirectory 'MAN'.\n",
<                          "Most likely, this should be 'man'.\n")
---
>                 printLog(Log, gettext("Found subdirectory 'MAN'.\nMost likely, this should be 'man'.\n", domain = "R-tools"))
999,1000c943
<                 printLog(Log, "Found subdirectory 'DATA'.\n",
<                          "Most likely, this should be 'data'.\n")
---
>                 printLog(Log, gettext("Found subdirectory 'DATA'.\nMost likely, this should be 'data'.\n", domain = "R-tools"))
1017,1023c960,963
<             msg <- ngettext(sum(ind),
<                             "Found the following directory with the name of a check directory:\n",
<                             "Found the following directories with names of check directories:\n", domain = NA)
<             printLog0(Log, msg,
<                       .format_lines_with_indent(all_dirs[ind]),
<                       "\n",
<                       "Most likely, these were included erroneously.\n")
---
>             msg <- sprintf(ngettext(sum(ind),
>                             "Found the following directory with the name of a check directory:\n%s\nMost likely, these were included erroneously.\n",
>                             "Found the following directories with names of check directories:\n%s\nMost likely, these were included erroneously.\n", domain = "R-tools"), .format_lines_with_indent(all_dirs[ind]))
>             printLog0(Log, msg)
1032,1038c972,975
<             msg <- ngettext(sum(ind),
<                             "Found the following directory with the name of a Rd2pdf directory:\n",
<                             "Found the following directories with names of Rd2pdf directories:\n", domain = NA)
<            printLog0(Log, msg,
<                      .format_lines_with_indent(all_dirs[ind]),
<                      "\n",
<                      "Most likely, these were included erroneously.\n")
---
>             msg <- sprintf(ngettext(sum(ind),
>                             "Found the following directory with the name of a Rd2pdf directory:\n%s\nMost likely, these were included erroneously.\n",
>                             "Found the following directories with names of Rd2pdf directories:\n%s\nMost likely, these were included erroneously.\n", domain = "R-tools"), .format_lines_with_indent(all_dirs[ind]))
>            printLog0(Log, msg)
1049,1055c986,989
<             msg <- ngettext(sum(ind),
<                             "Found the following directory with the name of a version control directory:\n",
<                             "Found the following directories with names of version control directories:\n", domain = NA)
<                 printLog0(Log, msg,
<                           .format_lines_with_indent(all_dirs[ind]),
<                           "\n",
<                           "These should not be in a package tarball.\n")
---
>             msg <- sprintf(ngettext(sum(ind),
>                             "Found the following directory with the name of a version control directory:\n%s\nThese should not be in a package tarball.\n",
>                             "Found the following directories with names of version control directories:\n%s\nThese should not be in a package tarball.\n", domain = "R-tools"), .format_lines_with_indent(all_dirs[ind]))
>                 printLog0(Log, msg)
1069,1071c1003
<                 wrapLog("Please remove or rename the files.\n",
<                         "See section 'Package subdirectories'",
<                         "in the 'Writing R Extensions' manual.\n")
---
>                 wrapLog(gettext("Please remove or rename the files.\nSee section 'Package subdirectories' in the 'Writing R Extensions' manual.\n", domain = "R-tools"))
1080c1012
<             printLog(Log, "Subdirectory 'data' contains no data sets.\n")
---
>             printLog(Log, gettext("Subdirectory 'data' contains no data sets.\n", domain = "R-tools"))
1089c1021
<                 printLog(Log, "Subdirectory 'demo' contains no demos.\n")
---
>                 printLog(Log, gettext("Subdirectory 'demo' contains no demos.\n", domain = "R-tools"))
1102c1034
<                     printLog(Log, "Demos with non-ASCII characters:")
---
>                     printLog(Log, gettext("Demos with non-ASCII characters:", domain = "R-tools"))
1107,1109c1039
<                     wrapLog("Portable packages must use only ASCII",
<                             "characters in their demos.\n",
<                             "Use \\uxxxx escapes for other characters.\n")
---
>                     wrapLog(gettext("Portable packages must use only ASCII characters in their demos.\nUse \\uxxxx escapes for other characters.\n", domain = "R-tools"))
1120c1050
<                     printLog(Log, "Demos which do not contain valid R code:")
---
>                     printLog(Log, gettext("Demos which do not contain valid R code:", domain = "R-tools"))
1133c1063
<             printLog(Log, "Subdirectory 'exec' contains no files.\n")
---
>             printLog(Log, gettext("Subdirectory 'exec' contains no files.\n", domain = "R-tools"))
1140c1070
<             printLog(Log, "Subdirectory 'inst' contains no files.\n")
---
>             printLog(Log, gettext("Subdirectory 'inst' contains no files.\n", domain = "R-tools"))
1154c1084
<                     printLog(Log, "Subdirectory 'src' contains no source files.\n")
---
>                     printLog(Log, gettext("Subdirectory 'src' contains no source files.\n", domain = "R-tools"))
1179,1181c1109
<                     wrapLog("Found the following non-empty",
<                             "subdirectories of 'inst' also",
<                             "used by R:\n")
---
>                     wrapLog(gettext("Found the following non-empty subdirectories of 'inst' also used by R:\n", domain = "R-tools"))
1183,1184c1111
<                     wrapLog("It is recommended not to interfere",
<                             "with package subdirectories used by R.\n")
---
>                     wrapLog(gettext("It is recommended not to interfere with package subdirectories used by R.\n", domain = "R-tools"))
1213c1140
<                 printLog(Log, "Problems with news in 'inst/NEWS.Rd':\n")
---
>                 printLog(Log, gettext("Problems with news in 'inst/NEWS.Rd':\n", domain = "R-tools"))
1234,1235c1161
<                 printLog(Log,
<                          "Invalid citation information in 'inst/CITATION':\n")
---
>                 printLog(Log, gettext("Invalid citation information in 'inst/CITATION':\n", domain = "R-tools"))
1253,1258c1179,1182
<             msg <- ngettext(length(files),
<                             "Found the following CITATION file in a non-standard place:\n",
<                             "Found the following CITATION files in a non-standard place:\n", domain = NA)
<             wrapLog(msg)
<             printLog0(Log, .format_lines_with_indent(files), "\n")
<             wrapLog("Most likely 'inst/CITATION' should be used instead.\n")
---
>             msg <- sprintf(ngettext(length(files),
>                             "Found the following CITATION file in a non-standard place:\n%s\nMost likely 'inst/CITATION' should be used instead.\n",
>                             "Found the following CITATION files in a non-standard place:\n%s\nMost likely 'inst/CITATION' should be used instead.\n", domain = "R-tools"), .format_lines_with_indent(files))
>             printLog0(Log, msg)
1266,1268c1190,1191
<         checkingLog(Log, "R files for non-ASCII characters")
<         out <- R_runR("tools:::.check_package_ASCII_code('.')",
<                       R_opts2, "R_DEFAULT_PACKAGES=NULL")
---
>         checkingLog(Log, gettext("checking R files for non-ASCII characters ...", domain = "R-tools"))
>         out <- R_runR("tools:::.check_package_ASCII_code('.')", R_opts2, "R_DEFAULT_PACKAGES=NULL")
1274c1197
<                             domain = NA)
---
>                             domain = "R-tools")
1277,1281c1200,1201
<             wrapLog("Portable packages must use only ASCII",
<                     "characters in their R code,\n",
<                     "except perhaps in comments.\n",
<                     "Use \\uxxxx escapes for other characters.\n")
<         } else resultLog(Log, "OK")
---
>             wrapLog(gettext("Portable packages must use only ASCII characters in their R code,\nexcept perhaps in comments.\nUse \\uxxxx escapes for other characters.\n", domain = "R-tools"))
>         } else resultLog(Log, gettext("OK", domain = "R-tools"))
1283c1203
<         checkingLog(Log, "R files for syntax errors")
---
>         checkingLog(Log, gettext("checking R files for syntax errors ...", domain = "R-tools"))
1293c1213
<         } else resultLog(Log, "OK")
---
>         } else resultLog(Log, gettext("OK", domain = "R-tools"))
1299c1219
<             checkingLog(Log, "dependencies in R code")
---
>             checkingLog(Log, gettext("checking dependencies in R code ...", domain = "R-tools"))
1301,1302c1221
<                 Rcmd <- paste("options(warn=1, showErrorCalls=FALSE)\n",
<                               sprintf("tools:::.check_packages_used(package = \"%s\")\n", pkgname))
---
>                 Rcmd <- sprintf("options(warn=1, showErrorCalls=FALSE)\ntools:::.check_packages_used(package = \"%s\")\n", pkgname)
1310c1229
<                 } else resultLog(Log, "OK")
---
>                 } else resultLog(Log, gettext("OK", domain = "R-tools"))
1314,1315c1233
<                 Rcmd <- paste("options(warn=1, showErrorCalls=FALSE)\n",
<                               sprintf("tools:::.check_packages_used(dir = \"%s\")\n", pkgdir))
---
>                 Rcmd <- sprintf("options(warn=1, showErrorCalls=FALSE)\ntools:::.check_packages_used(dir = \"%s\")\n", pkgdir)
1323c1241
<                 } else resultLog(Log, "OK")
---
>                 } else resultLog(Log, gettext("OK", domain = "R-tools"))
1329c1247
<         checkingLog(Log, "S3 generic/method consistency")
---
>         checkingLog(Log, gettext("checking S3 generic/method consistency ...", domain = "R-tools"))
1340,1342c1258,1259
<             wrapLog("See section 'Generic functions and methods'",
<                     "in the 'Writing R Extensions' manual.\n")
<         } else resultLog(Log, "OK")
---
>             wrapLog(gettext("See section 'Generic functions and methods' in the 'Writing R Extensions' manual.\n", domain = "R-tools"))
>         } else resultLog(Log, gettext("OK", domain = "R-tools"))
1346c1263
<         checkingLog(Log, "replacement functions")
---
>         checkingLog(Log, gettext("checking replacement functions ...", domain = "R-tools"))
1361,1364c1278,1279
<             wrapLog("The argument of a replacement function",
<                     "which corresponds to the right hand side",
<                     "must be named 'value'.\n")
<         } else resultLog(Log, "OK")
---
>             wrapLog(gettext("The argument of a replacement function which corresponds to the right hand side must be named 'value'.\n", domain = "R-tools"))
>         } else resultLog(Log, gettext("OK", domain = "R-tools"))
1373c1288
<             checkingLog(Log, "foreign function calls")
---
>             checkingLog(Log, gettext("checking foreign function calls ...", domain = "R-tools"))
1397,1404c1312,1314
<                     wrapLog("Packages should not make",
<                             ".C/.Call/.External/.Fortran",
<                             "calls to a base package.",
<                             "They are not part of the API,",
<                             "for use only by R itself",
<                             "and subject to change without notice.")
<                 else if(any(grepl("with DUP:", out)))
<                     wrapLog("DUP is no longer supported and will be ignored.")
---
>                     wrapLog(gettext("Packages should not make .C/.Call/.External/.Fortran calls to a base package. They are not part of the API, for use only by R itself and subject to change without notice.", domain = "R-tools"))
>                 else if(any(grepl("with 'DUP':", out)))
>                     wrapLog(gettext("'DUP' option is no longer supported and will be ignored.", domain = "R-tools"))
1406,1407c1316,1317
<                     wrapLog("See chapter 'System and foreign language interfaces' in the 'Writing R Extensions' manual.\n")
<             } else resultLog(Log, "OK")
---
>                     wrapLog(gettext("See chapter 'System and foreign language interfaces' in the 'Writing R Extensions' manual.\n", domain = "R-tools"))
>             } else resultLog(Log, gettext("OK", domain = "R-tools"))
1413c1323
<         checkingLog(Log, "R code for possible problems")
---
>         checkingLog(Log, gettext("checking R code for possible problems ...", domain = "R-tools"))
1421,1422c1331
<                 wrapLog("Incorrect (un)loading of package",
<                         "shared object.\n")
---
>                 wrapLog(gettext("Incorrect (un)loading of package shared object.\n", domain = "R-tools"))
1424,1426c1333
<                 wrapLog("The system-specific extension for",
<                         "shared objects must not be added.\n",
<                         "See ?library.dynam.\n")
---
>                 wrapLog(gettext("The system-specific extension for shared objects must not be added.\nSee ?library.dynam.\n", domain = "R-tools"))
1513,1516c1420
<                 wrapLog(c("Packages should not call .Internal():",
<                           "it is not part of the API,",
<                           "for use only by R itself",
<                           "and subject to change without notice."))
---
>                 wrapLog(gettext("Packages should not call .Internal(): it is not part of the API, for use only by R itself and subject to change without notice.", domain = "R-tools"))
1526,1528c1430
<                 ini <- c("",
<                          "In addition to the above warning(s), found the following notes:",
<                          "")
---
>                 ini <- gettext("\nIn addition to the above warning(s), found the following notes:\n", domain = "R-tools")
1537c1439
<                                   "Found the following possibly unsafe calls:",
---
>                                   gettext("Found the following possibly unsafe calls:", domain = "R-tools"),
1553,1554c1455
<                 wrapLog(gettextf("See section %s in '%s'.",
<                                  sQuote("Good practice"), "?attach"))
---
>                 wrapLog(gettextf("See section %s in '%s'.", sQuote("Good practice"), "?attach", domain = "R-tools"))
1559,1560c1460
<                 wrapLog(gettextf("See section %s in '%s'.",
<                                  sQuote("Good practice"), "?data"))
---
>                 wrapLog(gettextf("See section %s in '%s'.", sQuote("Good practice"), "?data", domain = "R-tools"))
1562c1462
<         } else resultLog(Log, "OK")
---
>         } else resultLog(Log, gettext("OK", domain = "R-tools"))
1568c1468
<             c("See chapter 'Writing R documentation files' in the 'Writing R Extensions' manual.\n")
---
>             gettext("See chapter 'Writing R documentation files' in the 'Writing R Extensions' manual.\n", domain = "R-tools")
1571c1471
<             checkingLog(Log, "Rd files")
---
>             checkingLog(Log, gettext("checking Rd files ...", domain = "R-tools"))
1577,1578c1477
<                 if(length(grep("^prepare.*Dropping empty section", out,
<                                invert = TRUE)))
---
>                 if(length(grep("^prepare.*Dropping empty section", out, invert = TRUE)))
1582c1481
<             } else resultLog(Log, "OK")
---
>             } else resultLog(Log, gettext("OK", domain = "R-tools"))
1584c1483
<             checkingLog(Log, "Rd metadata")
---
>             checkingLog(Log, gettext("checking Rd metadata ..", domain = "R-tools"))
1594c1493
<             } else resultLog(Log, "OK")
---
>             } else resultLog(Log, gettext("OK", domain = "R-tools"))
1612c1511
<                 wrapLog("These lines will be truncated in the PDF manual.\n")
---
>                 wrapLog(gettext("These lines will be truncated in the PDF manual.\n", domain = "R-tools"))
1633c1532
<             checkingLog(Log, "Rd cross-references")
---
>             checkingLog(Log, gettext("checking Rd cross-references ...", domain = "R-tools"))
1645c1544
<             } else resultLog(Log, "OK")
---
>             } else resultLog(Log, gettext("OK", domain = "R-tools"))
1650c1549
<             checkingLog(Log, "for missing documentation entries")
---
>             checkingLog(Log, gettext("checking for missing documentation entries ...", domain = "R-tools"))
1681,1682d1579
<                 wrapLog("All user-level objects",
<                         "in a package",
1684,1685c1581,1583
<                         "(including S4 classes and methods)",
<                         "should have documentation entries.\n")
---
>                  wrapLog(gettext("All user-level objects in a package (including S4 classes and methods) should have documentation entries.\n", domain = "R-tools"))
> 		        else
>                  wrapLog(gettext("All user-level objects in a package should have documentation entries.\n", domain = "R-tools"))
1692c1590
<             checkingLog(Log, "for code/documentation mismatches")
---
>             checkingLog(Log, gettext("checking for code/documentation mismatches ...", domain = "R-tools"))
1735c1633
<                 if (!any) resultLog(Log, "OK")
---
>                 if (!any) resultLog(Log, gettext("OK", domain = "R-tools"))
1743c1641
<             checkingLog(Log, "Rd \\usage sections")
---
>             checkingLog(Log, gettext("checking Rd \\usage sections ...", domain = "R-tools"))
1746,1750c1644
<                 c("Functions with \\usage entries",
<                   "need to have the appropriate \\alias entries,",
<                   "and all their arguments documented.\n",
<                   "The \\usage entries must correspond to syntactically",
<                   "valid R code.\n")
---
>                 gettext("Functions with \\usage entries need to have the appropriate \\alias entries, and all their arguments documented.\nThe \\usage entries must correspond to syntactically valid R code.\n", domain = "R-tools")
1768,1769c1662
<                     c("The \\usage entries for S3 methods should use",
<                       "the \\method markup and not their full name.\n")
---
>                     gettext("The \\usage entries for S3 methods should use the \\method markup and not their full name.\n", domain = "R-tools")
1786c1679
<             if (!any) resultLog(Log, "OK")
---
>             if (!any) resultLog(Log, gettext("OK", domain = "R-tools"))
1791c1684
<             checkingLog(Log, "Rd contents")
---
>             checkingLog(Log, gettext("checking Rd contents ...", domain = "R-tools"))
1801c1694
<             } else resultLog(Log, "OK")
---
>             } else resultLog(Log, gettext("OK", domain = "R-tools"))
1806c1699
<             checkingLog(Log, "for unstated dependencies in examples")
---
>             checkingLog(Log, gettext("checking for unstated dependencies in examples ...", domain = "R-tools"))
1815c1708
<             } else resultLog(Log, "OK")
---
>             } else resultLog(Log, gettext("OK", domain = "R-tools"))
1823c1716
<             checkingLog(Log, "contents of 'data' directory")
---
>             checkingLog(Log, gettext("checking contents of 'data' directory ...", domain = "R-tools"))
1830,1838c1723,1726
<                     msg <-
<                         c(sprintf("Files not of a type allowed in a %s directory:\n",
<                                   sQuote("data")),
<                           paste0(.pretty_format(odd), "\n"),
<                           sprintf("Please use e.g. %s for non-R data files\n",
<                                   sQuote("inst/extdata")))
<                     printLog0(Log, msg)
<                 } else resultLog(Log, "OK")
<             } else resultLog(Log, "OK")
---
>                     msg <- gettextf("Files not of a type allowed in a 'data' directory:\n%s\nPlease use e.g. 'inst/extdata' for non-R data files\n", .pretty_format(odd), domain = "R-tools")
>                     printLog(Log, msg)
>                 } else resultLog(Log, gettext("OK", domain = "R-tools"))
>             } else resultLog(Log, gettext("OK", domain = "R-tools"))
1843c1731
<             checkingLog(Log, "data for non-ASCII characters")
---
>             checkingLog(Log, gettext("checking data for non-ASCII characters ...", domain = "R-tools"))
1853c1741
<             } else resultLog(Log, "OK")
---
>             } else resultLog(Log, gettext("OK", domain = "R-tools"))
1858c1746
<             checkingLog(Log, "data for ASCII and uncompressed saves")
---
>             checkingLog(Log, gettext("checking data for ASCII and uncompressed saves ...", domain = "R-tools"))
1866c1754
<             } else resultLog(Log, "OK")
---
>             } else resultLog(Log, gettext("OK", domain = "R-tools"))
1872c1760
<             checkingLog(Log, "R/sysdata.rda")
---
>             checkingLog(Log, gettext("checking R/sysdata.rda ...", domain = "R-tools"))
1879c1767
<             } else resultLog(Log, "OK")
---
>             } else resultLog(Log, gettext("OK", domain = "R-tools"))
1888c1776
<         checkingLog(Log, "installed files from 'inst/doc'")
---
>         checkingLog(Log, gettext("checking installed files from 'inst/doc' ...", domain = "R-tools"))
1897,1900c1785
<             printLog0(Log,
<                       "The following files are already in R: ",
<                       paste(sQuote(bad), collapse = ", "), "\n",
<                       "Please remove them from your package.\n")
---
>             printLog(Log, gettextf("The following files are already in R: %s\nPlease remove them from your package.\n", paste(sQuote(bad), collapse = ", "), domain = "R-tools"))
1916,1920c1801
<             printLog0(Log,
<                       "The following files contain a license that requires\n",
<                       "distribution of original sources:\n",
<                       "  ", paste(sQuote(bad), collapse = ", "), "\n",
<                       "Please ensure that you have complied with it.\n")
---
>             printLog(Log, gettextf("The following files contain a license that requires\ndistribution of original sources:\n  %s\nPlease ensure that you have complied with it.\n", paste(sQuote(bad), collapse = ", "), domain = "R-tools")) 
1929,1933c1810,1811
<             printLog0(Log,
<                       "The following files look like leftovers/mistakes:\n",
<                       paste(strwrap(paste(sQuote(files[bad]), collapse = ", "),
<                                     indent = 2, exdent = 2), collapse = "\n"),
<                       "\nPlease remove them from your package.\n")
---
>             printLog(Log, gettextf("The following files look like leftovers/mistakes:\n%s\nPlease remove them from your package.\n",
>                      paste(strwrap(paste(sQuote(files[bad]), collapse = ", "), indent = 2, exdent = 2), collapse = "\n"), domain = "R-tools"))
1959,1963c1837,1838
<                 printLog0(Log,
<                           "The following files should probably not be installed:\n",
<                           paste(strwrap(paste(sQuote(badf), collapse = ", "),
<                                         indent = 2, exdent = 2), collapse = "\n"),
<                           "\n")
---
>                 printLog(Log, gettextf("The following files should probably not be installed:\n%s\n", 
>                          paste(strwrap(paste(sQuote(badf), collapse = ", "), indent = 2, exdent = 2), collapse = "\n"), domain = "R-tools"))
1965,1973c1840,1843
<                 printLog0(Log,
<                           "The following directories should probably not be installed:\n",
<                           paste(strwrap(paste(sQuote(badd), collapse = ", "),
<                                         indent = 2, exdent = 2), collapse = "\n"),
<                           "\n")
<             printLog0(Log, "\nConsider the use of a .Rinstignore file: see ",
<                       sQuote("Writing R Extensions"), ",\n",
<                       "or move the vignette sources from ",
<                       sQuote("inst/doc"), " to ", sQuote("vignettes"), ".\n")
---
>                 printLog(Log, gettextf("The following directories should probably not be installed:\n%s\n",
>                          paste(strwrap(paste(sQuote(badd), collapse = ", "), indent = 2, exdent = 2), collapse = "\n"), domain = "R-tools"))
>             printLog(Log, gettextf("\nConsider the use of a .Rinstignore file: see %s,\nor move the vignette sources from %s to %s.\n",
>                      sQuote("Writing R Extensions"), sQuote("inst/doc"), sQuote("vignettes"), domain = "R-tools"))
1980c1850
<         checkingLog(Log, "files in 'vignettes'")
---
>         checkingLog(Log, gettext("checking files in 'vignettes' ...", domain = "R-tools"))
1991,1993c1861,1862
<             msg <- c("Vignette sources in 'inst/doc' missing from the 'vignettes' directory:",
<                     strwrap(paste(sQuote(sources), collapse = ", "),
<                             indent = 2L, exdent = 4L),
---
>             msg <- c(gettext("Vignette sources in 'inst/doc' missing from the 'vignettes' directory:", domain = "R-tools"),
>                     strwrap(paste(sQuote(sources), collapse = ", "), indent = 2L, exdent = 4L),
1995c1864
<             printLog0(Log, paste(msg, collapse = "\n"))
---
>             printLog(Log, paste(msg, collapse = "\n"))
2004,2007c1873,1874
<             printLog0(Log,
<                       "The following files are already in R: ",
<                       paste(sQuote(bad), collapse = ", "), "\n",
<                       "Please remove them from your package.\n")
---
>             printLog(Log,
>                      gettextf("The following files are already in R: %s\nPlease remove them from your package.", paste(sQuote(bad), collapse = ", "), domain = "R-tools"), "\n")
2022,2026c1889,1890
<             printLog0(Log,
<                       "The following files contain a license that requires\n",
<                       "distribution of original sources:\n",
<                       "  ", paste(sQuote(bad), collapse = ", "), "\n",
<                       "Please ensure that you have complied with it.\n")
---
>             printLog(Log,
>                      gettextf("The following files contain a license that requires distribution of original sources:\n  %s\nPlease ensure that you have complied with it.", paste(sQuote(bad), collapse = ", "), domain = "R-tools"), "\n")
2036,2040c1900,1902
<             printLog0(Log,
<                       "The following files look like leftovers/mistakes:\n",
<                       paste(strwrap(paste(sQuote(files[bad]), collapse = ", "),
<                                     indent = 2, exdent = 2), collapse = "\n"),
<                       "\nPlease remove them from your package.\n")
---
>             printLog(Log,
>                      gettextf("The following files look like leftovers/mistakes:\n%s\nPlease remove them from your package.",
>                      paste(strwrap(paste(sQuote(files[bad]), collapse = ", "), indent = 2, exdent = 2), collapse = "\n"), domain = "R-tools"), "\n")
2042c1904
<         if (!any) resultLog(Log, "OK")
---
>         if (!any) resultLog(Log, gettext("OK", domain = "R-tools"))
2052c1914
<             checkingLog(Log, "sizes of PDF files under 'inst/doc'")
---
>             checkingLog(Log, gettext("checking sizes of PDF files under 'inst/doc' ...", domain = "R-tools"))
2062,2066c1924,1925
<                 printLog(Log,
<                          "  'qpdf' made some significant size reductions:\n",
<                          paste("  ", res, collapse = "\n"),
<                          "\n",
<                          "  consider running tools::compactPDF() on these files\n")
---
>                 printLog(Log, gettextf("  'qpdf' made some significant size reductions:\n%s\n  consider running tools::compactPDF() on these files\n",
>                          paste("  ", res, collapse = "\n"), domain = "R-tools"))
2076,2080c1935
<                         printLog(Log,
<                                  "  'gs+qpdf' made some significant size reductions:\n",
<                                  paste("  ", res, collapse = "\n"),
<                                  "\n",
<                                  '  consider running tools::compactPDF(gs_quality = "ebook") on these files\n')
---
>                         printLog(Log, gettextf("  'gs+qpdf' made some significant size reductions:\n%s\n  consider running tools::compactPDF(gs_quality = \"ebook\") on these files\n", paste("  ", res, collapse = "\n"), domain = "R-tools"))
2085c1940
<                     printLog(Log, "Unable to find GhostScript executable to run checks on size reduction\n")
---
>                     printLog(Log, gettext("Unable to find GhostScript executable to run checks on size reduction\n", domain = "R-tools"))
2089c1944
<             if (!any) resultLog(Log, "OK")
---
>             if (!any) resultLog(Log, gettext("OK", domain = "R-tools"))
2103c1958
<             checkingLog(Log, "line endings in C/C++/Fortran sources/headers")
---
>             checkingLog(Log, gettext("checking line endings in C/C++/Fortran sources/headers ...", domain = "R-tools"))
2116c1971
<                 warningLog(Log, "Found the following sources/headers with CR or CRLF line endings:")
---
>                 warningLog(Log, gettext("Found the following sources/headers with CR or CRLF line endings:", domain = "R-tools"))
2118,2119c1973,1974
<                 printLog(Log, "Some Unix compilers require LF line endings.\n")
<             } else resultLog(Log, "OK")
---
>                 printLog(Log, gettext("Some Unix compilers require LF line endings.\n", domain = "R-tools"))
>             } else resultLog(Log, gettext("OK", domain = "R-tools"))
2134c1989
<             checkingLog(Log, "line endings in Makefiles")
---
>         checkingLog(Log, gettext("checking line endings in Makefiles ...", domain = "R-tools"))
2145,2147c2000,2002
<                 warningLog(Log, "Found the following Makefile(s) with CR or CRLF line endings:")
<                 printLog0(Log, .format_lines_with_indent(bad_files), "\n")
<                 printLog(Log, "Some Unix 'make' programs require LF line endings.\n")
---
>                 warningLog(Log, gettext("Found the following Makefiles with CR or CRLF line endings:", domain = "R-tools"))
>                 printLog(Log, .format_lines_with_indent(bad_files), "\n")
>                 printLog(Log, gettext("Some Unix 'make' programs require LF line endings.\n", domain = "R-tools"))
2149c2004
<                 noteLog(Log, "Found the following Makefile(s) without a final LF:")
---
>                 noteLog(Log, gettext("Found the following Makefile(s) without a final LF:", domain = "R-tools"))
2151,2152c2006,2007
<                 printLog(Log, "Some 'make' programs ignore lines not ending in LF.\n")
<             } else resultLog(Log, "OK")
---
>                 printLog(Log, gettext("Some 'make' programs ignore lines not ending in LF.\n", domain = "R-tools"))
>             } else resultLog(Log, gettext("OK", domain = "R-tools"))
2156c2011
<             checkingLog(Log, "compilation flags in Makevars")
---
>             checkingLog(Log, gettext("checking compilation flags in Makevars", domain = "R-tools"))
2164,2165c2019,2020
<                 printLog0(Log, paste(c(out, ""), collapse = "\n"))
<             } else resultLog(Log, "OK")
---
>                 printLog(Log, paste(c(out, ""), collapse = "\n"))
>             } else resultLog(Log, gettext("OK", domain = "R-tools"))
2169c2024
<             checkingLog(Log, "for GNU extensions in Makefiles")
---
>             checkingLog(Log, gettext("checking for GNU extensions in Makefiles ...", domain = "R-tools"))
2183c2038
<                     noteLog(Log, "GNU make is a SystemRequirements.")
---
>                     noteLog(Log, gettext("GNU make is a SystemRequirements.", domain = "R-tools"))
2185c2040
<                     warningLog(Log, "Found the following file(s) containing GNU extensions:")
---
>                     warningLog(Log, ngettext(length(bad_files), "Found the following file containing GNU extensions:", "Found the following files containing GNU extensions:", domain = "R-tools"))
2187,2191c2042
<                     wrapLog("Portable Makefiles do not use GNU extensions",
<                             "such as +=, :=, $(shell), $(wildcard),",
<                             "ifeq ... endif.",
<                             "See section 'Writing portable packages'",
<                             "in the 'Writing R Extensions' manual.\n")
---
>                     wrapLog(gettext("Portable Makefiles do not use GNU extensions such as +=, :=, $(shell), $(wildcard), ifeq ... endif. See section 'Writing portable packages' in the 'Writing R Extensions' manual.\n", domain = "R-tools"))
2193c2044
<             } else resultLog(Log, "OK")
---
>             } else resultLog(Log, gettext("OK", domain = "R-tools"))
2203c2054
<             checkingLog(Log, "for portable use of $(BLAS_LIBS) and $(LAPACK_LIBS)")
---
>             checkingLog(Log, gettext("checking for portable use of $(BLAS_LIBS) and $(LAPACK_LIBS) ...", domain = "R-tools"))
2225,2227c2076
<                     printLog(Log,
<                              "  apparently using $(LAPACK_LIBS) without $(BLAS_LIBS) in ",
<                              sQuote(f), "\n")
---
>                     printLog(Log, gettextf("  apparently using $(LAPACK_LIBS) without $(BLAS_LIBS) in %s\n", sQuote(f), domain = "R-tools"))
2232,2233c2081
<                     printLog(Log, "  apparently PKG_LIBS is missing $(FLIBS) in ",
<                              sQuote(f), "\n")
---
>                     printLog(Log, gettextf("  apparently PKG_LIBS is missing $(FLIBS) in %s\n", sQuote(f), domain = "R-tools"))
2236c2084
<             if (!any) resultLog(Log, "OK")
---
>             if (!any) resultLog(Log, gettext("OK", domain = "R-tools"))
2241c2089
<         checkingLog(Log, "compiled code")
---
>         checkingLog(Log, gettext("checking compiled code ...", domain = "R-tools"))
2251,2252c2099,2100
<                 printLog0(Log, c(out, "\n"))
<             } else resultLog(Log, "OK")
---
>                 printLog0(Log, c(gettext(out, domain = "R-tools"), "\n"))
>             } else resultLog(Log, gettext("OK", domain = "R-tools"))
2268,2270c2116
<                     c("Compiled code should not call entry points which",
<                       "might terminate R nor write to stdout/stderr instead",
<                       "of to the console, nor the system RNG.\n")
---
>                     gettext("Compiled code should not call entry points which might terminate R nor write to stdout/stderr instead of to the console.\n", domain = "R-tools")
2272,2277c2118
<                     c("Compiled code should not call entry points which",
<                       "might terminate R nor write to stdout/stderr instead",
<                       "of to the console, nor the system RNG.",
<                       "The detected symbols are linked",
<                       "into the code but might come from libraries",
<                       "and not actually be called.\n")
---
>                     gettext("Compiled code should not call entry points which might terminate R nor write to stdout/stderr instead of to the console.  The detected symbols are linked into the code but might come from libraries and not actually be called.\n", domain = "R-tools")
2280,2281c2121
<                 msg <- c(msg,
<                          "Compiled code should not call non-API entry points in R.\n")
---
>                 msg <- c(msg, gettext("Compiled code should not call non-API entry points in R.\n", domain = "R-tools"))
2283,2285c2123,2124
<                     "See 'Writing portable packages'",
<                     "in the 'Writing R Extensions' manual.\n")
<         } else resultLog(Log, "OK")
---
>                     gettext("See 'Writing portable packages' in the 'Writing R Extensions' manual.\n", domain = "R-tools"))
>         } else resultLog(Log, gettext("OK", domain = "R-tools"))
2290c2129
<         checkingLog(Log, "whether the package can be loaded")
---
>         checkingLog(Log, gettext("checking whether the package can be loaded ...", domain = "R-tools"))
2298,2299c2137
<             wrapLog("Loading this package had a fatal error",
<                     "status code ", st,  "\n")
---
>             wrapLog(gettextf("Loading this package had a fatal error status code %s", st, domain = "R-tools"),  "\n", sep = "")
2301,2303c2139
<                 printLog0(Log,
<                           paste(c("Loading log:", out, ""),
<                                 collapse = "\n"))
---
>                 printLog(Log, gettextf("Loading log:\n%s\n", paste(out, collapse = "\n"), domain = "R-tools"))
2309,2312c2145,2146
<             printLog0(Log, paste(c(out, ""), collapse = "\n"))
<             wrapLog("\nIt looks like this package",
<                     "has a loading problem: see the messages",
<                     "for details.\n")
---
>             printLog(Log, paste(c(out, ""), collapse = "\n"))
>             wrapLog(gettext("\nIt looks like this package has a loading problem: see the messages for details.\n", domain = "R-tools"))
2314c2148
<         } else resultLog(Log, "OK")
---
>         } else resultLog(Log, gettext("OK", domain = "R-tools"))
2316c2150
<         checkingLog(Log, "whether the package can be loaded with stated dependencies")
---
>         checkingLog(Log, gettext("checking whether the package can be loaded with stated dependencies ...", domain = "R-tools"))
2320,2325c2154,2155
<             printLog0(Log, paste(c(out, ""), collapse = "\n"))
<             wrapLog("\nIt looks like this package",
<                     "(or one of its dependent packages)",
<                     "has an unstated dependence on a standard",
<                     "package.  All dependencies must be",
<                     "declared in DESCRIPTION.\n")
---
>             printLog(Log, paste(c(out, ""), collapse = "\n"))
>             wrapLog(gettext("\nIt looks like this package (or one of its dependent packages) has an unstated dependence on a standard package.  All dependencies must be declared in DESCRIPTION.\n", domain = "R-tools"))
2327c2157
<         } else resultLog(Log, "OK")
---
>         } else resultLog(Log, gettext("OK", domain = "R-tools"))
2329c2159
<         checkingLog(Log, "whether the package can be unloaded cleanly")
---
>         checkingLog(Log, gettext("checking whether the package can be unloaded cleanly ...", domain = "R-tools"))
2340,2341c2170,2171
<             printLog0(Log, paste(c(out, ""), collapse = "\n"))
<         } else resultLog(Log, "OK")
---
>             printLog(Log, paste(c(out, ""), collapse = "\n"))
>         } else resultLog(Log, gettext("OK", domain = "R-tools"))
2346c2176
<             checkingLog(Log, "whether the namespace can be loaded with stated dependencies")
---
>             checkingLog(Log, gettext("checking whether the namespace can be loaded with stated dependencies ...", domain = "R-tools"))
2351,2359c2181,2183
<                 printLog0(Log, paste(c(out, ""), collapse = "\n"))
<                 wrapLog("\nA namespace must be able to be loaded",
<                         "with just the base namespace loaded:",
<                         "otherwise if the namespace gets loaded by a",
<                         "saved object, the session will be unable",
<                         "to start.\n\n",
<                         "Probably some imports need to be declared",
<                         "in the NAMESPACE file.\n")
<             } else resultLog(Log, "OK")
---
>                 printLog(Log, paste(c(out, ""), collapse = "\n"))
>                 wrapLog(gettext("\nA namespace must be able to be loaded with just the base namespace loaded: otherwise if the namespace gets loaded by a saved object, the session will be unable to start.\n\nProbably some imports need to be declared in the 'NAMESPACE' file.\n", domain = "R-tools"))
>             } else resultLog(Log, gettext("OK", domain = "R-tools"))
2361,2362c2185
<             checkingLog(Log,
<                         "whether the namespace can be unloaded cleanly")
---
>             checkingLog(Log, gettext("checking whether the namespace can be unloaded cleanly ...", domain = "R-tools"))
2376,2377c2199,2200
<                 printLog0(Log, paste(c(out, ""), collapse = "\n"))
<             } else resultLog(Log, "OK")
---
>                 printLog(Log, paste(c(out, ""), collapse = "\n"))
>             } else resultLog(Log, gettext("OK", domain = "R-tools"))
2382c2205
<             checkingLog(Log, "loading without being on the library search path")
---
>             checkingLog(Log, gettext("checking loading without being on the library search path ...", domain = "R-tools"))
2391,2395c2214,2216
<                 printLog0(Log, paste(c(out, ""), collapse = "\n"))
<                 wrapLog("\nIt looks like this package",
<                         "has a loading problem when not on .libPaths:",
<                         "see the messages for details.\n")
<             } else resultLog(Log, "OK")
---
>                 printLog(Log, paste(c(out, ""), collapse = "\n"))
>                 wrapLog(gettext("\nIt looks like this package has a loading problem when not on .libPaths: see the messages for details.\n", domain = "R-tools"))
>             } else resultLog(Log, gettext("OK", domain = "R-tools"))
2406,2408c2227
<                 warningLog(Log,
<                            paste("checking a package with encoding ",
<                                  sQuote(e), " in an ASCII locale\n"))
---
>                 warningLog(Log, gettextf("checking a package with encoding %s in an ASCII locale", sQuote(e), domain = "R-tools"))
2417c2236
<                              c("LANGUAGE=en", "_R_CHECK_INTERNALS2_=1",
---
>                              c("_R_CHECK_INTERNALS2_=1",
2424,2426c2243
<                 errorLog(Log, "Running examples in ",
<                          sQuote(basename(exfile)),
<                          " failed")
---
>                 errorLog(Log, gettextf("Running examples in %s failed", sQuote(basename(exfile)), domain = "R-tools"))
2438,2439c2255
<                                            printLog(Log,
<                                                     "The error most likely occurred in:\n\n")
---
>                                            printLog(Log, gettext("The error most likely occurred in:\n\n", domain = "R-tools"))
2444c2260
<                                            printLog(Log, "The error occurred in:\n\n")
---
>                                            printLog(Log, gettext("The error occurred in:\n\n", domain = "R-tools"))
2461,2465c2277,2279
<                 warningLog(Log, "Found the following significant warnings:\n")
<                 printLog0(Log, .format_lines_with_indent(bad_lines), "\n")
<                 wrapLog("Deprecated functions may be defunct as",
<                         "soon as of the next release of R.\n",
<                         "See ?Deprecated.\n")
---
>                 warningLog(Log, gettext("Found the following significant warnings:\n", domain = "R-tools"))
>                 printLog(Log, .format_lines_with_indent(bad_lines), "\n")
>                 wrapLog(gettext("Deprecated functions may be defunct as soon as of the next release of R.\nSee ?Deprecated.\n", domain = "R-tools"))
2473c2287
<                                "Found the following significant warnings:")
---
>                                gettext("Found the following significant warnings:", domain = "R-tools"))
2476,2478c2290,2291
<                 printLog0(Log, .format_lines_with_indent(bad_lines), "\n")
<                 wrapLog("dev.new() is the preferred way to open a new device,",
<                         "in the unlikely event one is needed.")
---
>                 printLog(Log, .format_lines_with_indent(bad_lines), "\n")
>                 wrapLog("'dev.new()' is the preferred way to open a new device, in the unlikely event one is needed.")
2485c2298
<                                "Found the following significant warnings:")
---
>                                gettext("Found the following significant warnings:", domain = "R-tools"))
2488,2490c2301,2302
<                 printLog0(Log, .format_lines_with_indent(bad_lines), "\n")
<                 wrapLog("Note that CRAN packages must never use more than two",
<                         "cores simultaneously during their checks.")
---
>                 printLog(Log, .format_lines_with_indent(bad_lines), "\n")
>                 wrapLog(gettext("Note that CRAN packages must never use more than two cores simultaneously during their checks.", domain = "R-tools"))
2503c2315
<                     printLog(Log, "Examples with CPU or elapsed time > 5s\n")
---
>                     printLog(Log, gettext("Examples with CPU or elapsed time > 5s\n", domain = "R-tools"))
2514,2516c2326
<                 checkingLog(Log, "differences from ",
<                             sQuote(basename(exout)),
<                             " to ", sQuote(basename(exsave)))
---
>                 checkingLog(Log, gettextf("checking differences from %s to %s ...", sQuote(basename(exout)), sQuote(basename(exsave)), domain = "R-tools"))
2520c2330
<                 resultLog(Log, "OK")
---
>                 resultLog(Log, gettext("OK", domain = "R-tools"))
2528,2529c2338,2339
<         checkingLog(Log, "examples")
<         if (!do_examples) resultLog(Log, "SKIPPED")
---
>         checkingLog(Log, gettext("checking examples ...", domain = "R-tools"))
>         if (!do_examples) resultLog(Log, gettext("SKIPPED", domain = "R-tools"))
2540,2546c2350,2352
<                 errorLog(Log,
<                          paste("Running massageExamples to create",
<                                sQuote(exfile), "failed"))
<                 printLog0(Log,
<                           paste(readLines(Rout, warn = FALSE),
<                                 collapse = "\n"),
<                           "\n")
---
>                 errorLog(Log, gettextf("Running massageExamples to create %s failed", sQuote(exfile), domain = "R-tools"))
>                 printLog(Log, paste(readLines(Rout, warn = FALSE),
>                                     collapse = "\n"), "\n")
2563,2564c2369
<                         printLog(Log, "** running examples for arch ",
<                                  sQuote(arch), " ...")
---
>                         printLog(Log, gettextf("** running examples for arch %s ...", sQuote(arch), domain = "R-tools"))
2566c2371
<                             resultLog(Log, "SKIPPED")
---
>                             resultLog(Log, gettext("SKIPPED", domain = "R-tools"))
2571,2572c2376
<                                 errorLog(Log,
<                                          "unable to create examples directory")
---
>                                 errorLog(Log, gettext("unable to create examples directory", domain = "R-tools"))
2591,2592c2395
<                         printLog(Log, "** found \\donttest examples:",
<                                  " check also with --run-donttest\n")
---
>                         printLog(Log, gettext("** found \\donttest examples: check also with --run-donttest\n", domain = "R-tools"))
2595c2398
<                 resultLog(Log, "NONE")
---
>                 resultLog(Log, gettext("NONE", domain = "R-tools"))
2604c2407
<             checkingLog(Log, "for unstated dependencies in ", sQuote(test_dir))
---
>             checkingLog(Log, gettextf("checking for unstated dependencies in %s directory ...", sQuote(test_dir), domain = "R-tools"))
2611c2414
<                 printLog0(Log, paste(c(out, ""), collapse = "\n"))
---
>                 printLog(Log, paste(c(out, ""), collapse = "\n"))
2613c2416
<             } else resultLog(Log, "OK")
---
>             } else resultLog(Log, gettext("OK", domain = "R-tools"))
2617c2420
< 	    checkingLog(Log, "tests")
---
> 	    checkingLog(Log, gettext("checking tests ...", domain = "R-tools"))
2619c2422
< 	    checkingLog(Log, "tests in ", sQuote(test_dir))
---
> 	    checkingLog(Log, gettextf("checking tests in %s directory ...", sQuote(test_dir), domain = "R-tools"))
2628,2629c2431
<                 errorLog(Log,
<                          sprintf("unable to create %s", sQuote(testdir)))
---
>                 errorLog(Log, gettextf("unable to create %s", sQuote(testdir), domain = "R-tools"))
2643,2644c2445
<             cmd <- paste0("tools:::.runPackageTestsR(",
<                          paste(extra, collapse = ", "), ")")
---
>             cmd <- paste0("tools:::.runPackageTestsR(", paste(extra, collapse = ", "), ")")
2648,2649c2449
<                              env = c("LANGUAGE=en",
<                              "_R_CHECK_INTERNALS2_=1",
---
>                              env = c("_R_CHECK_INTERNALS2_=1",
2670,2673c2470,2472
<                         lines <- grep('^Xlib: *extension "RANDR" missing on display',
<                                       lines, invert = TRUE, value = TRUE)
<                     printLog(Log, sprintf("Running the tests in %s failed.\n", sQuote(file)))
<                     printLog(Log, "Last 13 lines of output:\n")
---
>                         lines <- grep('^Xlib: *extension "RANDR" missing on display', lines, invert = TRUE, value = TRUE)
>                     printLog(Log, gettextf("Running the tests in %s failed.\n", sQuote(file), domain = "R-tools"))
>                     printLog(Log, gettext("Last 13 lines of output:\n", domain = "R-tools"))
2679c2478
<                 resultLog(Log, "OK")
---
>                 resultLog(Log, gettext("OK", domain = "R-tools"))
2698,2699c2497
<                         printLog(Log, "** running tests for arch ",
<                                  sQuote(arch), " ...")
---
>                         printLog(Log, gettextf("** running tests for arch %s", sQuote(arch), domain = "R-tools"))
2704c2502
<         } else resultLog(Log, "SKIPPED")
---
>         } else resultLog(Log, gettext("SKIPPED", domain = "R-tools"))
2714c2512
<             checkingLog(Log, "for unstated dependencies in vignettes")
---
>             checkingLog(Log, gettext("checking for unstated dependencies in vignettes ...", domain = "R-tools"))
2720,2721c2518,2519
<                 printLog0(Log, paste(c(out, ""), collapse = "\n"))
<             } else resultLog(Log, "OK")
---
>                 printLog(Log, paste(c(out, ""), collapse = "\n"))
>             } else resultLog(Log, gettext("OK", domain = "R-tools"))
2724c2522
<         checkingLog(Log, "package vignettes in ", sQuote("inst/doc"))
---
>         checkingLog(Log, gettextf("checking package vignettes in %s ...", sQuote("inst/doc"), domain = "R-tools"))
2746,2751c2544,2546
<                                 "Package vignettes without corresponding PDF/HTML:\n", domain = NA)
<                 printLog0(Log, msg)
<                 printLog0(Log,
<                           paste(c(paste("  ",
<                                         sQuote(basename(bad_vignettes))),
<                                   "", ""), collapse = "\n"))
---
>                                 "Package vignettes without corresponding PDF/HTML:\n", domain = "R-tools")
>                 printLog(Log, msg)
>                 printLog(Log, paste(c(paste("  ", sQuote(basename(bad_vignettes))), "", ""), collapse = "\n"))
2761,2766c2556,2558
<                          "Non-ASCII package vignettes without specified encoding:\n", domain = NA)
<                 printLog0(Log, "  ", msg)
<                 printLog0(Log,
<                           paste(c(paste("  ",
<                                         sQuote(basename(bad_vignettes))),
<                                   "", ""), collapse = "\n"))
---
>                          "Non-ASCII package vignettes without specified encoding:\n", domain = "R-tools")
>                 printLog(Log, "  ", msg)
>                 printLog(Log, paste(c(paste("  ", sQuote(basename(bad_vignettes))), "", ""), collapse = "\n"))
2784c2576
< #                                "Unused files in 'inst/doc' which are pointless or misleading", domain = NA)
---
> #                                "Unused files in 'inst/doc' which are pointless or misleading", domain = "R-tools")
2798,2799c2590
<             printLog(Log,
<                      "  Found 'inst/doc/makefile': should be 'Makefile' and will be ignored\n")
---
>             printLog(Log, gettext("  Found 'inst/doc/makefile': should be 'Makefile' and will be ignored\n", domain = "R-tools"))
2809,2810c2600
<                 printLog(Log,
<                          "  Found 'R CMD' in Makefile: should be '\"$(R_HOME)/bin/R\" CMD'\n")
---
>                 printLog(Log, gettext("  Found 'R CMD' in Makefile: should be '\"$(R_HOME)/bin/R\" CMD'\n", domain = "R-tools"))
2816,2817c2606,2607
<                 printLog(Log, "Found Makefile with CR or CRLF line endings:\n")
<                 printLog(Log, "some Unix 'make' programs require LF line endings.\n")
---
>                 printLog(Log, gettext("Found Makefile with CR or CRLF line endings:\n", domain = "R-tools"))
>                 printLog(Log, gettext("some Unix 'make' programs require LF line endings.\n", domain = "R-tools"))
2822,2823c2612
<                 printLog(Log,
<                          "  Found 'Rscript' in Makefile: should be '\"$(R_HOME)/bin/Rscript\"'\n")
---
>                 printLog(Log, gettext("  Found 'Rscript' in Makefile: should be '\"$(R_HOME)/bin/Rscript\"'\n", domain = "R-tools"))
2843,2848c2632,2634
<                                 "Package vignettes which are not in their specified encoding:\n", domain = NA)
<                 printLog0(Log, "  ", msg)
<                 printLog0(Log,
<                           paste(c(paste("  ",
<                                         sQuote(basename(bad_vignettes))),
<                                   "", ""), collapse = "\n"))
---
>                                 "Package vignettes which are not in their specified encoding:\n", domain = "R-tools")
>                 printLog(Log, "  ", msg)
>                 printLog(Log, paste(c(paste("  ", sQuote(basename(bad_vignettes))), "", ""), collapse = "\n"))
2852c2638
<         if (!any) resultLog(Log, "OK")
---
>         if (!any) resultLog(Log, gettext("OK", domain = "R-tools"))
2860c2646
<             checkingLog(Log, "running R code from vignettes")
---
>             checkingLog(Log, gettext("checking running R code from vignettes ...", domain = "R-tools"))
2871,2873c2657,2658
<                 cat("  ", sQuote(basename(file)),
<                     if(nzchar(enc)) paste("using", sQuote(enc)),
<                     "...")
---
>                 if(nzchar(enc)) cat("   ", gettextf("%s is using %s encoding", sQuote(basename(file)), sQuote(enc), domain = "R-tools"), " ...", sep = "")
>                 else cat("   ", sQuote(basename(file)), " ...", sep = "")
2884,2885c2669
<                                  env = c(jitstr, "R_BATCH=1234", elibs,
<                                  "_R_CHECK_INTERNALS2_=1"),
---
>                                  env = c(jitstr, "R_BATCH=1234", elibs, "_R_CHECK_INTERNALS2_=1"),
2890,2892c2674,2675
<                 if(length(grep("^  When (running|tangling|sourcing)", out,
<                                useBytes = TRUE))) {
<                     cat(" failed\n")
---
>                 if(length(grep("^  When (running|tangling|sourcing)", out, useBytes = TRUE))) {
>                     cat(gettext(" failed\n", domain = "R-tools"))
2894,2895c2677
<                              paste("when running code in", sQuote(basename(file))),
<                              "  ...",
---
>                              gettextf("when running code in %s ...", sQuote(basename(file)), domain = "R-tools"),
2899,2900c2681,2682
<                     cat(" failed to complete the test\n")
<                     out <- c(out, "", "... incomplete output.  Crash?")
---
>                     cat(gettext(" failed to complete the test", domain = "R-tools"), "\n", sep = "")
>                     out <- c(out, "", gettext("... incomplete output.  Crash?", domain = "R-tools"))
2902,2903c2684
<                              paste("when running code in", sQuote(basename(file))),
<                              "  ...",
---
>                              gettextf("when running code in %s ...", sQuote(basename(file)), domain = "R-tools"),
2906,2907c2687
<                     cmd <- paste0("invisible(tools::Rdiff('",
<                                  outfile, "', '", savefile, "',TRUE,TRUE))")
---
>                     cmd <- sprintf("invisible(tools::Rdiff('%s', '%s',TRUE,TRUE))", outfile, savefile)
2911,2912c2691
<                         cat("\ndifferences from ", sQuote(basename(savefile)),
<                             "\n", sep = "")
---
>                         cat("\n", gettextf("differences from %s", sQuote(basename(savefile)), domain = "R-tools"), "\n", sep = "")
2916c2695
<                         cat(" OK\n")
---
>                         cat(gettext(" OK\n", domain = "R-tools"))
2922c2701
<                     cat(" OK\n")
---
>                     cat(gettext(" OK\n", domain = "R-tools"))
2933,2935c2712,2713
<                 if(length(grep("there is no package called", res,
<                                useBytes = TRUE))) {
<                     warningLog(Log, "Errors in running code in vignettes:")
---
>                 if(length(grep("there is no package called", res, useBytes = TRUE))) {
>                     warningLog(Log, gettext("Errors in running code in vignettes:", domain = "R-tools"))
2938c2716
<                     errorLog(Log, "Errors in running code in vignettes:")
---
>                     errorLog(Log, gettext("Errors in running code in vignettes:", domain = "R-tools"))
2942c2720
<             } else resultLog(Log, "OK")
---
>             } else resultLog(Log, gettext("OK", domain = "R-tools"))
2952c2730
<                 checkingLog(Log, "re-building of vignette outputs")
---
>                 checkingLog(Log, gettext("checking re-building of vignette outputs ...", domain = "R-tools"))
2957c2735
<                     errorLog(Log, "unable to create 'vign_test'")
---
>                     errorLog(Log, gettext("unable to create 'vign_test'", domain = "R-tools"))
2973,2976c2751
<                 Rcmd <- "options(warn=1)\nlibrary(tools)\n"
<                 Rcmd <- paste0(Rcmd, "buildVignettes(dir = '",
<                                file.path(pkgoutdir, "vign_test", pkgname0),
<                                "')")
---
>                 Rcmd <- sprintf("options(warn=1)\nlibrary(tools)\nbuildVignettes(dir = '%s')", file.path(pkgoutdir, "vign_test", pkgname0))
2979,2980c2754
<                 status <- R_runR(Rcmd, R_opts2, jitstr,
<                                  stdout = outfile, stderr = outfile)
---
>                 status <- R_runR(Rcmd, R_opts2, jitstr, stdout = outfile, stderr = outfile)
2993,2994c2767
<                               paste(c("Error in re-building vignettes:",
<                                       "  ...", out, "", ""), collapse = "\n"))
---
>                               paste(c(gettext("Error in re-building vignettes:", domain = "R-tools"), "  ...", out, "", ""), collapse = "\n"))
3000c2773
<                                     domain = NA)
---
>                                     domain = "R-tools")
3008c2781
<                     resultLog(Log, "OK")
---
>                     resultLog(Log, gettext("OK", domain = "R-tools"))
3011,3012c2784,2785
<                 checkingLog(Log, "re-building of vignette outputs")
<                 resultLog(Log, "SKIPPED")
---
>                 checkingLog(Log, gettext("checking re-building of vignette outputs ...", domain = "R-tools"))
>                 resultLog(Log, gettext("SKIPPED", domain = "R-tools"))
3015,3018c2788,2791
<             checkingLog(Log, "running R code from vignettes")
<             resultLog(Log, "SKIPPED")
<             checkingLog(Log, "re-building of vignette outputs")
<             resultLog(Log, "SKIPPED")
---
>             checkingLog(Log, gettext("checking running R code from vignettes ...", domain = "R-tools"))
>             resultLog(Log, gettext("SKIPPED", domain = "R-tools"))
>             checkingLog(Log, gettext("checking re-building of vignette outputs ...", domain = "R-tools"))
>             resultLog(Log, gettext("SKIPPED", domain = "R-tools"))
3031c2804
<             checkingLog(Log, "PDF version of manual")
---
>             checkingLog(Log, gettext("checking PDF version of manual ...", domain = "R-tools"))
3044c2817
<                 errorLog(Log, "Rd conversion errors:")
---
>                 errorLog(Log, gettext("Rd conversion errors:", domain = "R-tools"))
3046,3047c2819
<                 lines <- grep("^(Hmm|Execution)", lines,
<                               invert = TRUE, value = TRUE)
---
>                 lines <- grep("^(Hmm|Execution)", lines, invert = TRUE, value = TRUE)
3056,3058c2828
<                 printLog0(Log,
<                           paste0("LaTeX errors when creating PDF version.\n",
<                                  "This typically indicates Rd problems.\n"))
---
>                 printLog(Log, gettext("LaTeX errors when creating PDF version.\nThis typically indicates Rd problems.\n", domain = "R-tools"))
3062c2832
<                     printLog(Log, "LaTeX errors found:\n")
---
>                     printLog(Log, gettext("LaTeX errors found:\n", domain = "R-tools"))
3068c2838
<                 checkingLog(Log, "PDF version of manual without hyperrefs or index")
---
>                 checkingLog(Log, gettext("checking PDF version of manual without hyperrefs or index ...", domain = "R-tools"))
3089c2859
<                         printLog(Log, "Re-running with no redirection of stdout/stderr.\n")
---
>                         printLog(Log, gettext("Re-running with no redirection of stdout/stderr.\n", domain = "R-tools"))
3103c2873
<                     resultLog(Log, "OK")
---
>                     resultLog(Log, gettext("OK", domain = "R-tools"))
3107c2877
<                 resultLog(Log, "OK")
---
>                 resultLog(Log, gettext("OK", domain = "R-tools"))
3115,3116c2885
<         allfiles <- dir(".", all.files = TRUE, full.names = TRUE,
<                         recursive = TRUE)
---
>         allfiles <- dir(".", all.files = TRUE, full.names = TRUE, recursive = TRUE)
3135c2904
<             checkingLog(Log, "for executable files")
---
>             checkingLog(Log, gettext("checking for executable files ...", domain = "R-tools"))
3168c2937
<             checkingLog(Log, "for .dll and .exe files")
---
>             checkingLog(Log, gettext("checking for .dll and .exe files ...", domain = "R-tools"))
3179c2948
<                             domain = NA)
---
>                             domain = "R-tools")
3181,3185c2950,2952
<             printLog0(Log, .format_lines_with_indent(execs), "\n")
<             wrapLog("Source packages should not contain undeclared executable files.\n",
<                     "See section 'Package structure'",
<                     "in the 'Writing R Extensions' manual.\n")
<         } else resultLog(Log, "OK")
---
>             printLog(Log, .format_lines_with_indent(execs), "\n")
>             wrapLog(gettext("Source packages should not contain undeclared executable files.\nSee section 'Package structure' in the 'Writing R Extensions' manual.\n", domain = "R-tools"))
>         } else resultLog(Log, gettext("OK", domain = "R-tools"))
3202c2969
<         checkingLog(Log, "for hidden files and directories")
---
>         checkingLog(Log, gettext("checking for hidden files and directories ...", domain = "R-tools"))
3216,3220c2983,2985
<             noteLog(Log, "Found the following hidden files and directories:")
<             printLog0(Log, .format_lines_with_indent(dots), "\n")
<             wrapLog("These were most likely included in error.",
<                     "See section 'Package structure'",
<                     "in the 'Writing R Extensions' manual.\n")
---
>             noteLog(Log, gettext("Found the following hidden files and directories:", domain = "R-tools"))
>             printLog(Log, .format_lines_with_indent(dots), "\n")
>             wrapLog(gettext("These files and directories were most likely included in error. See section 'Package structure' in the 'Writing R Extensions' manual.\n", domain = "R-tools"))
3228c2993
<                     printLog(Log, "\nCRAN-pack knows about all of these\n")
---
>                     printLog(Log, gettext("\nCRAN-pack knows about all of these files and directories\n", domain = "R-tools"))
3230,3231c2995,2996
<                     printLog(Log, "\nCRAN-pack does not know about\n")
<                     printLog0(Log, .format_lines_with_indent(dots[!known]), "\n")
---
>                     printLog(Log, gettext("\nCRAN-pack does not know about following files and directories:\n", domain = "R-tools"))
>                     printLog(Log, .format_lines_with_indent(dots[!known]), "\n")
3234c2999
<         } else resultLog(Log, "OK")
---
>         } else resultLog(Log, gettext("OK", domain = "R-tools"))
3253c3018
<             messageLog(Log, "skipping installation test")
---
>             messageLog(Log, gettext("skipping installation test", domain = "R-tools"))
3275c3040
<                     errorLog(Log, "Installation failed.")
---
>                     errorLog(Log, gettext("Installation failed.", domain = "R-tools"))
3283,3286c3048
<                 checkingLog(Log,
<                             "whether package ",
<                             sQuote(desc["Package"]),
<                             " can be installed")
---
>                 checkingLog(Log, gettextf("checking whether package %s can be installed ...", sQuote(desc["Package"]), domain = "R-tools"))
3290c3052
<                         printLog(Log, "\nWarning: --install=check... specified without --library\n")
---
>                         printLog(Log, gettext("\nWarning: --install=check... specified without --library\n", domain = "R-tools"))
3294,3295c3056
<                         errorLog(Log,
<                                  sprintf("install log %s does not exist", sQuote(thislog)))
---
>                         errorLog(Log, gettextf("install log %s does not exist", sQuote(thislog), domain = "R-tools"))
3312,3313c3073
<                     cat("* install options ", sQuote(INSTALL_opts),
<                         "\n\n", sep = "", file = outfile)
---
>                     cat(gettextf("* install options %s", sQuote(INSTALL_opts), domain = "R-tools"), "\n\n", sep = "", file = outfile)
3323,3325c3083,3084
<                     errorLog(Log, "Installation failed.")
<                     printLog0(Log, "See ", sQuote(outfile),
<                              " for details.\n")
---
>                     errorLog(Log, gettext("Installation failed.", domain = "R-tools"))
>                     printLog(Log, gettextf("See %s for details.\n", sQuote(outfile), domain = "R-tools"))
3536c3295
<                     "warning: control may reach end of non-void function"
---
>                     gettext("warning: control may reach end of non-void function", domain = "R-tools")
3542c3301
<                     warningLog(Log, "Found the following significant warnings:")
---
>                     warningLog(Log, gettext("Found the following significant warnings:", domain = "R-tools"))
3546c3305
<                                  "Found the following additional warnings:\n")
---
>                                  gettext("Found the following additional warnings:\n", domain = "R-tools"))
3550,3551c3309,3310
<                     printLog0(Log, sprintf("See %s for details.\n",
<                                            sQuote(outfile)))
---
>                     printLog0(Log, gettextf("See %s for details.\n",
>                                            sQuote(outfile), domain = "R-tools"))
3553c3312
<                     noteLog(Log, "Found the following warnings:")
---
>                     noteLog(Log, gettext("Found the following warnings:", domain = "R-tools"))
3555,3557c3314,3315
<                     printLog0(Log, sprintf("See %s for details.\n",
<                                            sQuote(outfile)))
<                 } else resultLog(Log, "OK")
---
>                     printLog0(Log, gettextf("See %s for details.\n", sQuote(outfile), domain = "R-tools"))
>                 } else resultLog(Log, gettext("OK", domain = "R-tools"))
3571c3329
<         checkingLog(Log, "installed package size")
---
>         checkingLog(Log, gettext("checking installed package size ...", domain = "R-tools"))
3580c3338
<             printLog(Log, sprintf("  installed size is %4.1fMb\n", total/1024))
---
>             printLog(Log, gettextf("  installed size is %4.1fMb\n", total/1024, domain = "R-tools"))
3588c3346
<                 printLog(Log, "  sub-directories of 1Mb or more:\n")
---
>                 printLog(Log, gettextf("  sub-directories of 1Mb or more:\n", domain = "R-tools"))
3590,3591c3348
<                 printLog0(Log,
<                           paste("    ",
---
>                 printLog(Log, paste("    ",
3595,3596c3352
<                                 "\n",
<                                 sep=""))
---
>                                     "\n", sep=""))
3598c3354
<         } else resultLog(Log, "OK")
---
>         } else resultLog(Log, gettext("OK", domain = "R-tools"))
3604,3605c3360
<         checkingLog(Log, "for file ",
<                     sQuote(file.path(pkgname0, "DESCRIPTION")))
---
>         checkingLog(Log, gettextf("checking for file %s ...", sQuote(file.path(pkgname0, "DESCRIPTION")), domain = "R-tools"))
3610c3365
<                 resultLog(Log, "EXISTS but not correct format")
---
>                 resultLog(Log, gettext("file EXISTS but is not of correct format", domain = "R-tools"))
3621c3376
<                                 "Required fields missing or empty:")
---
>                                 "Required fields missing or empty:", domain = "R-tools")
3630,3633c3385,3386
<                 printLog(Log,"  Package name is not portable:\n",
<                          "  It must start with a letter, contain letters, digits or dot\n",
<                          "  have at least 2 characters and not end with a dot.\n")
<             } else resultLog(Log, "OK")
---
>                 printLog(Log, gettext("  Package name is not portable:\n  It must start with a letter, contain letters, digits or dot\n  have at least 2 characters and not end with a dot.\n", domain = "R-tools"))
>             } else resultLog(Log, gettext("OK", domain = "R-tools"))
3637c3390
<                      "File DESCRIPTION does not exist but there is a case-insensitive match.")
---
>                      gettext("File DESCRIPTION does not exist but there is a case-insensitive match.", domain = "R-tools"))
3641c3394
<             resultLog(Log, "NO")
---
>             resultLog(Log, gettext("NO", domain = "R-tools"))
3646c3399
<             checkingLog(Log, "extension type")
---
>             checkingLog(Log, gettext("checking extension type ...", domain = "R-tools"))
3649,3650c3402
<                 printLog(Log,
<                          "Only 'Type = Package' extensions can be checked.\n")
---
>                 printLog(Log, gettext("Only 'Type = Package' extensions can be checked.\n", domain = "R-tools"))
3656,3657c3408
<             messageLog(Log, "looks like ", sQuote(pkgname0),
<                        " is a package bundle -- they are defunct")
---
>             messageLog(Log, gettextf("looks like %s is a package bundle -- they are defunct", sQuote(pkgname0), domain = "R-tools"))
3663,3666c3414
<         messageLog(Log,
<                    sprintf("this is package %s version %s",
<                            sQuote(desc["Package"]),
<                            sQuote(desc["Version"])))
---
>         messageLog(Log, gettextf("this is package %s version %s", sQuote(desc["Package"]), sQuote(desc["Version"]), domain = "R-tools"))
3669c3417
<             messageLog(Log, "package encoding: ", encoding)
---
>             messageLog(Log, gettextf("package encoding: %s", encoding, domain = "R-tools"))
3676c3424
<         checkingLog(Log, "CRAN incoming feasibility")
---
>         checkingLog(Log, gettext("checking CRAN incoming feasibility ...", domain = "R-tools"))
3694c3442
<                 printLog0(Log, paste(c(out, ""), collapse = "\n"))
---
>                 printLog(Log, paste(c(out, ""), collapse = "\n"))
3702,3704c3450,3452
<             else resultLog(Log, "OK")
<             printLog0(Log, paste(out, "\n", sep = ""))
<         } else resultLog(Log, "OK")
---
>             else resultLog(Log, gettext("OK", domain = "R-tools"))
>             printLog(Log, paste(out, "\n", sep = ""))
>         } else resultLog(Log, gettext("OK", domain = "R-tools"))
3733c3481
<             checkingLog(Log, "package namespace information")
---
>             checkingLog(Log, gettext("checking package namespace information ...", domain = "R-tools"))
3739,3740c3487
<                                    "Invalid NAMESPACE file, parsing gives:",
<                                    "\n", as.character(e), "\n")
---
>                                    gettextf("Invalid 'NAMESPACE' file, parsing gives:\n%s\n", as.character(e), domain = "R-tools"))
3742,3743c3489
<                              c("See section 'Package namespaces'",
<                                " in the 'Writing R Extensions' manual.\n")
---
>                 gettext("See section 'Package namespaces' in the 'Writing R Extensions' manual.\n", domain = "R-tools")
3758,3762c3504
<                 msg <- if(length(bad) == 1L)
<                     sprintf("  Namespace with empty importFrom: %s", sQuote(bad))
<                 else
<                     paste("  Namespaces with empty importFrom:",
<                           .pretty_format(sort(bad)), sep = "\n")
---
>                 msg <- sprintf(ngettext(length(bad), "  Namespace with empty importFrom: %s", "  Namespaces with empty importFrom: %s", domain = "R-tools"), .pretty_format(sort(bad)))
3789,3790c3531
<                     msg <- sprintf("R < 3.0.2 had a limit of 500 registered S3 methods: found %d",
<                                    nS3methods)
---
>                     msg <- gettextf("R < 3.0.2 had a limit of 500 registered S3 methods: found %d", nS3methods, domain = "R-tools")
3794c3535
<             if(OK) resultLog(Log, "OK")
---
>             if(OK) resultLog(Log, gettext("OK", domain = "R-tools"))
3797c3538
<         checkingLog(Log, "package dependencies")
---
>         checkingLog(Log, gettext("checking package dependencies ...", domain = "R-tools"))
3817c3558
<                 printLog0(Log, paste(out, collapse = "\n"), "\n")
---
>                 printLog(Log, paste(out, collapse = "\n"), "\n")
3819,3824c3560
<                    wrapLog("The suggested packages are required for",
<                            "a complete check.\n",
<                            "Checking can be attempted without them",
<                            "by setting the environment variable",
<                            "_R_CHECK_FORCE_SUGGESTS_",
<                            "to a false value.\n\n")
---
>                    wrapLog(gettext("The suggested packages are required for a complete check.\nChecking can be attempted without them by setting the environment variable _R_CHECK_FORCE_SUGGESTS_ to a false value.\n\n", domain = "R-tools"))
3830c3566
<                 printLog0(Log, paste(out, collapse = "\n"))
---
>                 printLog(Log, paste(out, collapse = "\n"))
3832c3568
<         } else resultLog(Log, "OK")
---
>         } else resultLog(Log, gettext("OK", domain = "R-tools"))
3837c3573
<         checkingLog(Log, "if this is a source package")
---
>         checkingLog(Log, gettext("checking if this is a source package ...", domain = "R-tools"))
3844c3580
<             printLog(Log, "Only *source* packages can be checked.\n")
---
>             printLog(Log, gettext("Only *source* packages can be checked.\n", domain = "R-tools"))
3860,3862c3596,3598
<                 printLog0(Log,
<                           sprintf("Subdirectory %s contains apparent object files/libraries\n",
<                                   sQuote(file.path(pkgname, "src"))),
---
>                 printLog(Log,
>                          gettextf("Subdirectory %s contains apparent object files/libraries\n",
>                                  sQuote(file.path(pkgname, "src")), domain = "R-tools"),
3866c3602
<                           "\nObject files/libraries should not be included in a source package.\n")
---
>                          gettext("\nObject files/libraries should not be included in a source package.\n", domain = "R-tools"))
3878,3879c3614,3615
<                                 domain = NA)
<                 printLog0(Log,
---
>                                 domain = "R-tools")
>                 printLog(Log,
3884c3620
<                           "Most likely, these were included erroneously.\n")
---
>                          gettext("Most likely, these were included erroneously.\n", domain = "R-tools"))
3901,3903c3637
<                                  paste("Subdirectory",
<                                        sQuote("src"),
<                                        "contains:"),
---
>                                  gettextf("Subdirectory %s contains:", sQuote("src"), domain = "R-tools"),
3906c3640
<                                  strwrap("These are unlikely file names for src files."),
---
>                                  strwrap(gettext("These are unlikely file names for src files.", domain = "R-tools")),
3908c3642
<                         printLog0(Log, paste(msg, collapse = "\n"))
---
>                         printLog(Log, paste(msg, collapse = "\n"))
3916,3918c3650
<                 ini <- c("",
<                          "In addition to the above warning(s), found the following notes:",
<                          "")
---
>                 ini <- c("", gettext("In addition to the above warning(s), found the following notes:", domain = "R-tools"), "")
3930,3934c3662,3665
<                          "Found the following apparent object files/libraries:",
<                          strwrap(paste(bad, collapse = " "),
<                                  indent = 2L, exdent = 2L),
<                          "Object files/libraries should not be included in a source package.\n")
<                 printLog0(Log, paste(msg, collapse = "\n"))
---
>                          gettext("Found the following apparent object files/libraries:", domain = "R-tools"),
>                          strwrap(paste(bad, collapse = " "), indent = 2L, exdent = 2L),
>                          gettext("Object files/libraries should not be included in a source package.\n", domain = "R-tools"))
>                 printLog(Log, paste(msg, collapse = "\n"))
3945,3947c3676,3677
<                          sprintf("Subdirectory %s seems to contain an installed version of the package.\n",
<                                  sQuote(dirname(dirname(files[1L])))))
<                 printLog0(Log, paste(msg, collapse = "\n"))
---
>                          gettextf("Subdirectory %s seems to contain an installed version of the package.\n", sQuote(dirname(dirname(files[1L]))), domain = "R-tools"))
>                 printLog(Log, paste(msg, collapse = "\n"))
3949,3950c3679,3680
<             if (!any) resultLog(Log, "OK")
<         } else resultLog(Log, "OK")
---
>             if (!any) resultLog(Log, gettext("OK", domain = "R-tools"))
>         } else resultLog(Log, gettext("OK", domain = "R-tools"))
3957c3687
< 	    printLog(Log, "NOTE:  Quitting check on first error.\n")
---
> 	    printLog(Log, gettext("NOTE: Quitting check on first error.\n", domain = "R-tools"))
4129,4130c3859
<             stop("'--no-rebuild-vignettes' is defunct: use '--no-build-vignettes' instead",
<                  call. = FALSE, domain = NA)
---
>             stop("'--no-rebuild-vignettes' is defunct: use '--no-build-vignettes' instead", call. = FALSE, domain = "R-tools")
4136,4137c3865
<             stop("'--no-latex' is defunct: use '--no-manual' instead",
<                  call. = FALSE, domain = NA)
---
>             stop("'--no-latex' is defunct: use '--no-manual' instead", call. = FALSE, domain = "R-tools")
4167c3895
<             message("Warning: unknown option ", sQuote(a))
---
>             message(gettextf("Warning: unknown option %s", sQuote(a)))
4383,4384c4111
<     msg_DESCRIPTION <-
<         c("See section 'The DESCRIPTION file' in the 'Writing R Extensions' manual.\n")
---
>     msg_DESCRIPTION <- gettext("See section 'The DESCRIPTION file' in the 'Writing R Extensions' manual.", domain = "R-tools")
4420,4421c4147
<             warning(sQuote(pkg), " is neither a file nor directory, skipping\n",
<                     domain = NA, call. = FALSE, immediate. = TRUE)
---
>             warning(gettextf("%s is neither a file nor directory, skipping\n", sQuote(pkg)), domain = "R-tools", call. = FALSE, immediate. = TRUE)
4431c4157
<             message(sprintf("ERROR: cannot create check dir %s", sQuote(pkgoutdir)))
---
>             message(gettextf("ERROR: cannot create check dir %s", sQuote(pkgoutdir), domain = "R-tools"))
4440c4166
<                 errorLog(Log, sprintf("cannot create %s", sQuote(dir)))
---
>                 errorLog(Log, gettextf("cannot create %s", sQuote(dir), domain = "R-tools"))
4448c4174
<                 errorLog(Log, sprintf("cannot unpack %s", sQuote(pkg)))
---
>                 errorLog(Log, gettextf("cannot unpack %s", sQuote(pkg), domain = "R-tools"))
4457,4458c4183
<             stop(gettextf("package directory %s does not exist",
<                           sQuote(pkg)), domain = NA)
---
>             stop(gettextf("package directory %s does not exist", sQuote(pkg)), domain = "R-tools")
4474,4477c4199,4201
<         messageLog(Log, "using log directory ", sQuote(pkgoutdir))
<         messageLog(Log, "using ", R.version.string)
<         messageLog(Log, "using platform: ", R.version$platform,
<                    " (", 8*.Machine$sizeof.pointer, "-bit)")
---
>         messageLog(Log, gettextf("using log directory %s", sQuote(pkgoutdir), domain = "R-tools"))
>         messageLog(Log, gettextf("using %s", R.version.string, domain = "R-tools"))
>         messageLog(Log, gettextf("using platform: %s (%s-bit)", R.version$platform, 8*.Machine$sizeof.pointer, domain = "R-tools"))
4480c4204
<         messageLog(Log, "using session charset: ", charset)
---
>         messageLog(Log, gettextf("using session charset: %s", charset, domain = "R-tools"))
4496c4220
<             messageLog(Log, "using options ", sQuote(paste(opts, collapse=" ")))
---
>             messageLog(Log, gettextf("using options %s", sQuote(paste(opts, collapse=" ")), domain = "R-tools"))
4498c4222
<             messageLog(Log, "using option ", sQuote(opts))
---
>             messageLog(Log, gettextf("using option %s", sQuote(opts), domain = "R-tools"))
4519c4243
<                 resultLog(Log, "EXISTS but not correct format")
---
>                 resultLog(Log, gettext("EXISTS but not correct format", domain = "R-tools"))
4525,4527c4249,4250
<                 messageLog(Log, "looks like ", sQuote(pkgname0),
<                            " is a base package")
<                 messageLog(Log, "skipping installation test")
---
>                 messageLog(Log, gettextf("looks like %s is a base package", sQuote(pkgname0), domain = "R-tools"))
>                 messageLog(Log, gettext("skipping installation test", domain = "R-tools"))
4543c4266
<                     messageLog(Log, "will not attempt to install this package on Windows")
---
>                     messageLog(Log, gettext("will not attempt to install this package on Windows", domain = "R-tools"))
4547c4270
<                     messageLog(Log, "this is a Windows-only package, skipping installation")
---
>                     messageLog(Log, gettext("this is a Windows-only package, skipping installation", domain = "R-tools"))
4570c4293
<             checkingLog(Log, "if there is a namespace")
---
>             checkingLog(Log, gettext("checking if there is a namespace ...", domain = "R-tools"))
4573c4296
<                 resultLog(Log, "OK")
---
>                 resultLog(Log, gettext("OK", domain = "R-tools"))
4576c4299
<                        "File NAMESPACE does not exist but there is a case-insenstiive match.")
---
>                        gettext("File NAMESPACE does not exist but there is a case-insensitive match.", domain = "R-tools"))
4581,4583c4304
<                 wrapLog("All packages need a namespace as from R 3.0.0.\n",
<                         "R CMD build will produce a suitable starting point,",
<                         "but it is better to handcraft a NAMESPACE file.")
---
>                 wrapLog(gettext("All packages need a namespace as from R 3.0.0.\nR CMD build will produce a suitable starting point, but it is better to handcraft a 'NAMESPACE' file.", domain = "R-tools"))
4587,4589c4308
<                 wrapLog("Packages without R code can be installed without",
<                         "a NAMESPACE file, but it is cleaner to add",
<                         "an empty one.")
---
>                 wrapLog(gettext("Packages without R code can be installed without a 'NAMESPACE' file, but it is cleaner to add an empty one.", domain = "R-tools"))
4629,4631c4348
< 				printLog0(Log,
<                                           "NB: this package is only installed for sub-architectures ",
<                                           paste(sQuote(inst_archs), collapse=", "), "\n")
---
> 				printLog(Log, gettextf("NB: this package is only installed for sub-architectures %s\n", paste(sQuote(inst_archs), collapse=", "), domain = "R-tools"))
4633,4635c4350
< 				printLog0(Log,
<                                           "NB: this package is only installed for sub-architecture ",
<                                           sQuote(inst_archs), "\n")
---
> 				printLog(Log, gettextf("NB: this package is only installed for sub-architecture %s\n", sQuote(inst_archs), domain = "R-tools"))
4679,4680c4394,4395
<                     checkingLog(Log, "for code which exercises the package")
<                     warningLog(Log, "No examples, no tests, no vignettes")
---
>                     checkingLog(Log, gettext("checking for code which exercises the package ...", domain = "R-tools"))
>                     warningLog(Log, gettext("No examples, no tests, no vignettes", domain = "R-tools"))
4684c4399
<         messageLog(Log, "DONE")
---
>         messageLog(Log, gettext("DONE", domain = "R-tools"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/checktools.R R/src/library/tools/R/checktools.R
200c200
<                 message(sprintf("downloading %s ... ", rfiles[i]),
---
>                 message(sprintf("downloading file %s ... ", sQuote(rfiles[i])),
233,237c233,235
<         message(paste(strwrap(sprintf("installing dependencies %s",
<                                       paste(sQuote(depends),
<                                             collapse = ", ")),
<                               exdent = 2L),
<                       collapse = "\n"))
---
>         message(paste(strwrap(sprintf(gettext("installing dependencies %s", domain = "R-tools"),
>                                       paste(sQuote(depends), collapse = ", ")), exdent = 2L),
>                       collapse = "\n"), domain = NA)
295c293
<         message(sprintf("checking %s ...", pfile))
---
>         message(sprintf("checking package %s ...", sQuote(pfile)))
367c365
<         writeLines("No packages checked.")
---
>         writeLines(gettext("No packages checked.", domain = "R-tools"))
372,374c370,372
<     writeLines(c(strwrap(sprintf("Check results for packages in dir '%s':",
<                                  dir)),
<                  sprintf("Package sources: %d, Reverse depends: %d",
---
>     writeLines(c(strwrap(gettextf("Check results for packages in dir '%s':",
>                                  dir, domain = "R-tools")),
>                  gettextf("Package sources: %d, Reverse depends: %d",
376,377c374,375
<                          length(attr(x, "rnames"))),
<                  "Use summary() for more information."))
---
>                          length(attr(x, "rnames")), domain = "R-tools"),
>                  gettext("Use 'summary()' for more information.", domain = "R-tools")))
387c385
<         writeLines("No packages checked.")
---
>         writeLines(gettext("No packages checked.", domain = "R-tools"))
392,393c390,391
<     writeLines(c(strwrap(sprintf("Check results for packages in dir '%s':",
<                                  dir)),
---
>     writeLines(c(strwrap(gettextf("Check results for packages in dir '%s':",
>                                  dir, domain = "R-tools")),
397c395
<         writeLines("\nUse summary(full = TRUE) for details.")
---
>         writeLines(gettext("\nUse 'summary(full = TRUE)' for details.", domain = "R-tools"))
597c595
<             writeLines(sprintf("Example timings for package '%s':", x))
---
>             writeLines(gettextf("Example timings for package %s:", sQuote(x), domain = "R-tools"))
634c632
<             "OK"
---
>             gettext("OK", domain = "R-tools")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/citation.R R/src/library/tools/R/citation.R
43c43
<             stop("non-ASCII input in a CITATION file without a declared encoding")
---
>             stop("non-ASCII input in a 'CITATION' file without a declared encoding")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/dynamicHelp.R R/src/library/tools/R/dynamicHelp.R
103c103
<                                domain = NA)
---
>                                domain = "R-tools")
381c381
<                                        mono(pkg))))
---
>                                        sQuote(mono(pkg)), domain = "R-tools")))
396c396
<             	return(error_page(gettextf("URL %s was not found", mono(path))))
---
>             	return(error_page(gettextf("URL '%s' was not found", mono(path), domain = "R-tools")))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/index.R R/src/library/tools/R/index.R
48,49c48
<         stop(gettextf("directory '%s' does not exist", dataDir),
<              domain = NA)
---
>         stop(gettextf("directory %s does not exist", sQuote(dataDir)), domain = "R-tools")
95,96c94
<         stop(gettextf("directory '%s' does not exist", demoDir),
<              domain = NA)
---
>         stop(gettextf("directory %s does not exist", sQuote(demoDir)), domain = "R-tools")
104,106c102
<             warning(gettextf("cannot read index information in file '%s'",
<                              INDEX),
<                     domain = NA)
---
>             warning(gettextf("cannot read index information in file '%s'", INDEX), domain = "R-tools")
122,123c118
<         stop(gettextf("directory '%s' does not exist", demoDir),
<              domain = NA)
---
>         stop(gettextf("directory %s does not exist", sQuote(demoDir)), domain = "R-tools")
130c125
<                       domain = NA))
---
>                       domain = "R-tools"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/install.R R/src/library/tools/R/install.R
56c56
<                 starsmsg(stars, "removing ", sQuote(pkgdir))
---
>                 starsmsg(stars, gettextf("removing package directory %s", sQuote(pkgdir)))
63c63
<                 starsmsg(stars, "restoring previous ", sQuote(pkgdir))
---
>                 starsmsg(stars, gettextf("restoring previous package directory %s", sQuote(pkgdir)))
65,66c65
<                     file.copy(lp, dirname(pkgdir), recursive = TRUE,
<                               copy.date = TRUE)
---
>                     file.copy(lp, dirname(pkgdir), recursive = TRUE, copy.date = TRUE)
112,113c111
<         sub(".*= ", "", grep("^SHLIB_EXT", readLines(mconf), value = TRUE,
<                              perl = TRUE))
---
>         sub(".*= ", "", grep("^SHLIB_EXT", readLines(mconf), value = TRUE, perl = TRUE))
191,192c189
<             paste0("for this one it is ",
< 		   if(static_html) "--html" else "--no-html", "."),
---
>                    if(static_html) "for this one it is --html." else "for this one it is --no-html.",
222c219
<                     errmsg("invalid value of ", field, " field in DESCRIPTION")
---
>                     errmsg(gettextf("ERROR: invalid value of %s field in 'DESCRIPTION' file", sQuote(field)))
227c224
<         message(stars, " ", ..., domain = NA)
---
>         message(stars, " ", ..., domain = "R-tools")
231c228
<         message("ERROR: ", ..., domain = NA)
---
>         message(..., domain = "R-tools")
235c232
<     pkgerrmsg <- function(msg, pkg)
---
>     pkgerrmsg <- function(msg)
237c234
<         message("ERROR: ", msg, " for package ", sQuote(pkg), domain = NA)
---
>         message(msg, domain = "R-tools")
254,255c251
<         desc <- tryCatch(read.dcf(fd <- file.path(pkg, "DESCRIPTION")),
<                          error = identity)
---
>         desc <- tryCatch(read.dcf(fd <- file.path(pkg, "DESCRIPTION")), error = identity)
257,258c253
<             stop(gettextf("error reading file '%s'", fd),
<                  domain = NA, call. = FALSE)
---
>             stop(gettextf("error reading file %s", sQuote(fd)), domain = "R-tools", call. = FALSE)
262c257
<             stop("this seems to be a bundle -- and they are defunct")
---
>             stop("'DESCRIPTION' file seems to be a bundle -- and they are defunct")
265c260
<             if (is.na(pkg_name)) errmsg("no 'Package' field in 'DESCRIPTION'")
---
>             if (is.na(pkg_name)) errmsg(gettext("ERROR: no 'Package' field in 'DESCRIPTION' file"))
276c271
<             message("ERROR: unable to create ", sQuote(instdir), domain = NA)
---
>             message(gettextf("ERROR: unable to create installation directory %s", sQuote(instdir)), domain = "R-tools")
281,282c276
<             message("ERROR: ", sQuote(pkg_name), " is not a legal package name",
<                     domain = NA)
---
>             message(gettextf("ERROR: %s is not a legal package name", sQuote(pkg_name)), domain = "R-tools")
288c282
<         if (owd == getwd()) pkgerrmsg("cannot install to srcdir", pkg_name)
---
>         if (owd == getwd()) pkgerrmsg(gettextf("ERROR: cannot install to source directory for package %s", sQuote(pkg_name)))
299,300c293
<                 if(any(grepl("^[[:space:]]*C[+][+]11[[:space:]]*$",
<                              sys_requires, ignore.case=TRUE))) {
---
>                 if(any(grepl("^[[:space:]]*C[+][+]11[[:space:]]*$", sys_requires, ignore.case=TRUE))) {
320c313
<             starsmsg(stars, "creating tarball")
---
>             starsmsg(stars, gettext("creating tarball"))
323,324c316
<                 paste0(pkg_name, "_", version, "_R_",
<                        Sys.getenv("R_PLATFORM"), ".tar.gz")
---
>                 paste0(pkg_name, "_", version, "_R_", Sys.getenv("R_PLATFORM"), ".tar.gz")
334,337c326,327
<                 errmsg(sprintf("packaging into %s failed", sQuote(filename)))
<             message("packaged installation of ",
<                     sQuote(pkg_name), " as ", sQuote(filename),
<                     domain = NA)
---
>                 errmsg(gettextf("packaging into %s failed", sQuote(filename), domain = "R-tools"))
>             message(gettextf("packaged installation of %s as %s", sQuote(pkg_name), sQuote(paste0(filename, ".gz"))), domain = "R-tools")
342c332
<             starsmsg(stars, "MD5 sums")
---
>             starsmsg(stars, gettext("MD5 sums"))
352,353c342
<             res <- system(paste(shQuote(ZIP), "-r9Xq", filepath,
<                                 paste(curPkg, collapse = " ")))
---
>             res <- system(paste(shQuote(ZIP), "-r9Xq", filepath, paste(curPkg, collapse = " ")))
356c345
<                 message("running 'zip' failed", domain = NA)
---
>                 message("running 'zip' failed", domain = "R-tools")
358,359c347
<                 message("packaged installation of ",
<                         sQuote(pkg_name), " as ", filename, domain = NA)
---
>                 message(gettextf("packaged installation of package %s as file %s", sQuote(pkg_name), filename), domain = "R-tools")
362,363c350,351
<             ## message("", domain = NA)  # ensure next starts on a new line, for R CMD check
<             starsmsg(stars, "DONE (", pkg_name, ")")
---
>             ## message("", domain = "R-tools")  # ensure next starts on a new line, for R CMD check
>             starsmsg(stars, gettextf("DONE (%s)", pkg_name))
373c361
<         starsmsg(stars, "installing *binary* package ", sQuote(pkg), " ...")
---
>         starsmsg(stars, gettextf("installing *binary* package %s ...", sQuote(pkg)))
377,378c365
<                 system(paste("mv", shQuote(instdir),
<                              shQuote(file.path(lockdir, pkg))))
---
>                 system(paste("mv", shQuote(instdir), shQuote(file.path(lockdir, pkg))))
385c372
<         if (res) errmsg("installing binary package failed")
---
>         if (res) errmsg(gettextf("ERROR: installing binary package failed"))
388,389c375
<             starsmsg(stars, sQuote(pkg),
<                      " was already a binary package and will not be rebuilt")
---
>             starsmsg(stars, gettextf("package %s was already a binary package and will not be rebuilt", sQuote(pkg)))
432c418
<             warning("'cleanup' exists but is not executable -- see the 'R Installation and Administration Manual'", call. = FALSE)
---
>             warning("'cleanup' file exists but is not executable -- see the 'R Installation and Administration Manual'", call. = FALSE)
444,445c430
<                 message("installing via 'install.libs.R' to ", instdir,
<                         domain = NA)
---
>                 message(gettextf("installing via 'install.libs.R' to installation directory %s", sQuote(instdir)), domain = "R-tools")
464c449
<                 message('installing to ', dest, domain = NA)
---
>                 message(gettextf("installing to directory %s", sQuote(dest)), domain = "R-tools")
476,477c461
< 		    message(gettextf("generating debug symbols (%s)", "dSYM"),
<                             domain = NA)
---
> 		    message(gettextf("generating debug symbols (%s)", "dSYM"), domain = "R-tools")
482,483c466
<                 if(config_val_to_logical(Sys.getenv("_R_SHLIB_BUILD_OBJECTS_SYMBOL_TABLES_",
<                                                     "TRUE"))
---
>                 if(config_val_to_logical(Sys.getenv("_R_SHLIB_BUILD_OBJECTS_SYMBOL_TABLES_", "TRUE"))
498,500c481
<             if (debug) message("about to run ",
<                                "R CMD SHLIB ", paste(args, collapse = " "),
<                                domain = NA)
---
>             if (debug) message(gettextf("about to run command %s", sQuote(paste("R CMD SHLIB", args, collapse = " "))), domain = "R-tools")
528,529c509,510
<             if (WINDOWS) errmsg("'Frontend' packages are Unix-only")
<             starsmsg(stars, "installing *Frontend* package ", sQuote(pkg_name), " ...")
---
>             if (WINDOWS) errmsg(gettext("ERROR: 'Frontend' packages are Unix-only"))
>             starsmsg(stars, gettextf("installing *Frontend* package %s ...", sQuote(pkg_name)))
533,536c514,515
<                     res <- system(paste(paste(configure_vars, collapse = " "),
<                                         "./configure",
<                                         paste(configure_args, collapse = " ")))
<                     if (res) pkgerrmsg("configuration failed", pkg_name)
---
>                     res <- system(paste(paste(configure_vars, collapse = " "), "./configure", paste(configure_args, collapse = " ")))
>                     if (res) pkgerrmsg(gettextf("ERROR: configuration failed for package %s", sQuote(pkg_name)))
538c517
<                     errmsg("'configure' exists but is not executable -- see the 'R Installation and Administration Manual'")
---
>                     errmsg(gettext("ERROR: 'configure' file exists but is not executable -- see the 'R Installation and Administration Manual'"))
541c520
<                 if (system(MAKE)) pkgerrmsg("make failed", pkg_name)
---
>                 if (system(MAKE)) pkgerrmsg(gettextf("ERROR: make failed for package %s", sQuote(pkg_name)))
547c526
<             errmsg("'Translation' packages are defunct")
---
>             errmsg(gettext("ERROR: 'Translation' packages are defunct"))
552c531
<                 errmsg(" Unix-only package")
---
>                 errmsg(gettext("ERROR: Unix-only package"))
555c534
<                 errmsg(" Windows-only package")
---
>                 errmsg(gettext("ERROR: Windows-only package"))
579,585c558,561
<             if (length(miss) > 1)
<                  pkgerrmsg(sprintf("dependencies %s are not available",
<                                    paste(sQuote(miss), collapse = ", ")),
<                            pkg_name)
<             else if (length(miss))
<                 pkgerrmsg(sprintf("dependency %s is not available",
<                                   sQuote(miss)), pkg_name)
---
>             if (length(miss) >= 1L)
>                  pkgerrmsg(sprintf(ngettext(length(miss), "ERROR: dependency %s is not available for package %s", "ERROR: dependencies %s are not available for package %s", domain = "R-tools"), paste(sQuote(miss), collapse = ", "), sQuote(pkg_name)))
> #            else if (length(miss))
> #                pkgerrmsg(gettextf("ERROR: dependency %s is not available for package %s", sQuote(miss), sQuote(pkg_name)))
588,589c564
<         starsmsg(stars, "installing *source* package ",
<                  sQuote(pkg_name), " ...")
---
>         starsmsg(stars, gettextf("installing *source* package %s ...", sQuote(pkg_name)))
595,597c570
<             starsmsg(stars,
<                      gettextf("package %s successfully unpacked and MD5 sums checked",
<                               sQuote(pkg_name)))
---
>             starsmsg(stars, gettextf("package %s successfully unpacked and MD5 sums checked", sQuote(pkg_name)))
603c576
<                 if (debug) starsmsg(stars, "backing up earlier installation")
---
>                 if (debug) starsmsg(stars, gettext("backing up earlier installation"))
605,606c578
<                     file.copy(instdir, lockdir, recursive = TRUE,
<                               copy.date = TRUE)
---
>                     file.copy(instdir, lockdir, recursive = TRUE, copy.date = TRUE)
609,610c581
<                     system(paste("mv", shQuote(instdir),
<                                  shQuote(file.path(lockdir, pkg_name))))
---
>                     system(paste("mv", shQuote(instdir), shQuote(file.path(lockdir, pkg_name))))
612,613c583
<                     file.copy(instdir, lockdir, recursive = TRUE,
<                               copy.date = TRUE)
---
>                     file.copy(instdir, lockdir, recursive = TRUE, copy.date = TRUE)
624c594
<                     if (res) pkgerrmsg("configuration failed", pkg_name)
---
>                     if (res) pkgerrmsg(gettextf("ERROR: configuration failed for package %s", sQuote(pkg_name)))
628,629c598
<                             "   WARNING: this package has a configure script\n",
<                             "         It probably needs manual configuration\n",
---
>                             gettext("   WARNING: this package has a configure script\n         It probably needs manual configuration\n", domain = "R-tools"),
634,638c603,604
<                     cmd <- paste(paste(configure_vars, collapse = " "),
<                                  "./configure",
<                                  paste(configure_args, collapse = " "))
<                     if (debug) message("configure command: ", sQuote(cmd),
<                                        domain = NA)
---
>                     cmd <- paste(paste(configure_vars, collapse = " "), "./configure", paste(configure_args, collapse = " "))
>                     if (debug) message(gettextf("configure command: %s", sQuote(cmd)), domain = "R-tools")
640,641c606
<                     cmd <- paste("_R_SHLIB_BUILD_OBJECTS_SYMBOL_TABLES_=false",
<                                  cmd)
---
>                     cmd <- paste("_R_SHLIB_BUILD_OBJECTS_SYMBOL_TABLES_=false", cmd)
643c608
<                     if (res) pkgerrmsg("configuration failed", pkg_name)
---
>                     if (res) pkgerrmsg(gettextf("ERROR: configuration failed for package %s", sQuote(pkg_name)))
645c610
<                     errmsg("'configure' exists but is not executable -- see the 'R Installation and Administration Manual'")
---
>                     errmsg(gettext("ERROR: 'configure' file exists but is not executable -- see the 'R Installation and Administration Manual'"))
659c624
<                 pkgerrmsg("installing package DESCRIPTION failed", pkg_name)
---
>                 pkgerrmsg(gettextf("ERROR: installing package DESCRIPTION file failed for package %s", sQuote(pkg_name)))
662,663c627,628
<                     errmsg("a 'NAMESPACE' file is required")
<                 else writeLines("## package without R code", namespace)
---
>                     errmsg(gettext("ERROR: a 'NAMESPACE' file is required"))
>                 else writeLines(gettextf("## package without R code %s", sQuote(namespace)))
669c634
<             starsmsg(stars, "libs")
---
>             starsmsg(stars, gettextf("'%s' directory", "libs"))
672c637
<                 warning("R include directory is empty -- perhaps need to install R-devel.rpm or similar", call. = FALSE)
---
>                 warning("R 'include' directory is empty -- perhaps need to install R-devel.rpm or similar", call. = FALSE)
714c679
<                     message("  running 'src/Makefile.win' ...", domain = NA)
---
>                     message("  running 'src/Makefile.win' ...", domain = "R-tools")
752c717
<                                 warning("this package has a non-empty 'configure.win' file,\nso building only the main architecture\n", call. = FALSE, domain = NA)
---
>                                 warning("this package has a non-empty 'configure.win' file,\nso building only the main architecture\n", call. = FALSE, domain = "R-tools")
762c727
<                             message("", domain = NA) # a blank line
---
>                             message("", domain = "R-tools") # a blank line
794,795c759
<                     } else if (file.exists(f <- path.expand(paste("~/.R/Makevars",
<                                                                   Sys.getenv("R_PLATFORM"), sep = "-"))))
---
>                     } else if (file.exists(f <- path.expand(paste("~/.R/Makevars", Sys.getenv("R_PLATFORM"), sep = "-"))))
799,800c763
<                     res <- system(paste(MAKE,
<                                         paste("-f", shQuote(makefiles), collapse = " ")))
---
>                     res <- system(paste(MAKE, paste("-f", shQuote(makefiles), collapse = " ")))
819,820c782
<                                 starsmsg("***", "arch - ",
<                                          substr(rarch, 2, 1000))
---
>                                 starsmsg("***", "arch - ", substr(rarch, 2, 1000))
850c812
<                 pkgerrmsg("compilation failed", pkg_name)
---
>                 pkgerrmsg(gettextf("ERROR: compilation failed for package %s", sQuote(pkg_name)))
860,864c822,823
<                 olddesc <- grep("^Archs:", olddesc,
<                                 invert = TRUE, value = TRUE, useBytes = TRUE)
<                 newdesc <- c(olddesc,
<                              paste("Archs:", paste(dirs, collapse = ", "))
<                              )
---
>                 olddesc <- grep("^Archs:", olddesc, invert = TRUE, value = TRUE, useBytes = TRUE)
>                 newdesc <- c(olddesc, paste("Archs:", paste(dirs, collapse = ", ")))
888c847
< 	    starsmsg(stars, "R")
---
> 	    starsmsg(stars, gettextf("'%s' directory", "R"))
894c853
< 		pkgerrmsg("unable to collate and parse R files", pkg_name)
---
> 		pkgerrmsg(gettextf("ERROR: unable to collate and parse R files for package %s", sQuote(pkg_name)))
910c869
< 		    pkgerrmsg("unable to build sysdata DB", pkg_name)
---
> 		    pkgerrmsg(gettextf("ERROR: unable to build sysdata DB for package %s", sQuote(pkg_name)))
917,918c876
< 		    cat("",
< 			'.onLoad <- .onAttach <- function(lib, pkg) NULL',
---
> 		    cat("", '.onLoad <- .onAttach <- function(lib, pkg) NULL',
955c913
< 	    starsmsg(stars, "data")
---
> 	    starsmsg(stars, gettextf("'%s' directory", "data"))
971c929
< 			starsmsg(paste0(stars, "*"), "resaving rda files")
---
> 			starsmsg(paste0(stars, "*"), gettext("resaving rda files"))
978c936
<                              "moving datasets to lazyload DB")
---
>                              gettext("moving datasets to lazyload DB"))
995c953
< 			pkgerrmsg("lazydata failed", pkg_name)
---
> 			pkgerrmsg(gettextf("ERROR: lazydata failed for package %s", sQuote(pkg_name)))
1002c960
< 	    starsmsg(stars, "demo")
---
> 	    starsmsg(stars, gettextf("'%s' directory", "demo"))
1008c966
< 		pkgerrmsg("ERROR: installing demos failed")
---
> 		pkgerrmsg(gettext("ERROR: installing demos failed for package %s", sQuote(pkg_name)))
1014c972
< 	    starsmsg(stars, "exec")
---
> 	    starsmsg(stars, gettextf("'%s' directory", "exec"))
1028c986
< 	    starsmsg(stars, "inst")
---
> 	    starsmsg(stars, gettextf("'%s' directory", "inst"))
1030,1031c988
<             i_dirs <- grep(.vc_dir_names_re, i_dirs,
<                            invert = TRUE, value = TRUE)
---
>             i_dirs <- grep(.vc_dir_names_re, i_dirs, invert = TRUE, value = TRUE)
1043,1050c1000,1003
<                 i_dirs <- grep(e, i_dirs, perl = TRUE, invert = TRUE,
<                                value = TRUE, ignore.case = TRUE)
<             lapply(gsub("^inst", instdir, i_dirs),
<                    function(p) dir.create(p, FALSE, TRUE)) # be paranoid
<             i_files <- list.files("inst", all.files = TRUE,
<                                   full.names = TRUE, recursive = TRUE)
<             i_files <- grep(.vc_dir_names_re, i_files,
<                             invert = TRUE, value = TRUE)
---
>                 i_dirs <- grep(e, i_dirs, perl = TRUE, invert = TRUE, value = TRUE, ignore.case = TRUE)
>             lapply(gsub("^inst", instdir, i_dirs), function(p) dir.create(p, FALSE, TRUE)) # be paranoid
>             i_files <- list.files("inst", all.files = TRUE, full.names = TRUE, recursive = TRUE)
>             i_files <- grep(.vc_dir_names_re, i_files, invert = TRUE, value = TRUE)
1085c1038
< 	    starsmsg(stars, "tests")
---
> 	    starsmsg(stars, gettextf("'%s' directory", "tests"))
1097,1098c1050
<                 starsmsg(stars,
<                          "byte-compile and prepare package for lazy loading")
---
>                 starsmsg(stars, gettext("byte-compile and prepare package for lazy loading"))
1104c1056
<                 starsmsg(stars, "preparing package for lazy loading")
---
>                 starsmsg(stars, gettext("preparing package for lazy loading"))
1106,1107c1058
<                 parse_description_field(desc, "KeepSource",
<                                         default = keep.source)
---
>                 parse_description_field(desc, "KeepSource", default = keep.source)
1125c1076
< 		pkgerrmsg("lazy loading failed", pkg_name)
---
> 		pkgerrmsg(gettextf("ERROR: lazy loading failed for package %s", sQuote(pkg_name)))
1130c1081
< 	    starsmsg(stars, "help")
---
> 	    starsmsg(stars, gettextf("'%s' directory", "help"))
1133c1084
< 		cat("No man pages found in package ", sQuote(pkg_name), "\n")
---
> 		cat(gettextf("No man pages found in package %s", sQuote(pkg_name), domain = "R-tools"), "\n", sep = "")
1138c1089
< 		pkgerrmsg("installing Rd objects failed", pkg_name)
---
> 		pkgerrmsg(gettextf("ERROR: installing Rd objects failed for package %s", sQuote(pkg_name)))
1141c1092
< 	    starsmsg(paste0(stars, "*"), "installing help indices")
---
> 	    starsmsg(paste0(stars, "*"), gettext("installing help indices"))
1153c1104
< 		starsmsg(paste0(stars, "*"), "copying figures")
---
> 		starsmsg(paste0(stars, "*"), gettext("copying figures"))
1165c1116
< 	    starsmsg(stars, "building package indices")
---
> 	    starsmsg(stars, gettext("building package indices"))
1168c1119
< 		errmsg("installing package indices failed")
---
> 		errmsg(gettext("ERROR: installing package indices failed"))
1170c1121
<                 starsmsg(stars, "installing vignettes")
---
>                 starsmsg(stars, gettext("installing vignettes"))
1181c1132
< 		errmsg("installing vignettes failed")
---
> 		errmsg(gettext("ERROR: installing vignettes failed"))
1190c1141
< 		errmsg("installing namespace metadata failed")
---
> 		errmsg(gettext("ERROR: installing namespace metadata failed"))
1197c1148
< 	    starsmsg(stars, "testing if installed package can be loaded")
---
> 	    starsmsg(stars, gettext("testing if installed package can be loaded"))
1218,1220c1169
<                     msg <- paste("loading failed for",
<                                  paste(sQuote(msgs), collapse = ", "))
<                     errmsg(msg) # does not return
---
>                     errmsg(gettextf("ERROR: loading failed for %s", paste(sQuote(msgs), collapse = ", "))) # does not return
1229c1178
<                     errmsg("loading failed") # does not return
---
>                     errmsg(gettext("ERROR: loading failed")) # does not return
1297c1246
<             cat("R add-on package installer: ",
---
>             cat(gettext("R add-on package installer: ", domain = "R-tools"),
1302,1303c1251
<                 "This is free software; see the GNU General Public License version 2",
<                 "or later for copying conditions.  There is NO warranty.",
---
>                 "This is free software; see the GNU General Public License version 2 or later for copying conditions. There is NO warranty.",
1327,1330c1275,1276
<             warning("use of '--use-zip-data' is defunct",
<                     call. = FALSE, domain = NA)
<             warning("use of '--use-zip-data' is deprecated",
<                     call. = FALSE, domain = NA)
---
>             warning("use of '--use-zip-data' is defunct", call. = FALSE, domain = "R-tools")
>             warning("use of '--use-zip-data' is deprecated", call. = FALSE, domain = "R-tools")
1332,1333c1278
<             warning("'--auto-zip' is defunct",
<                            call. = FALSE, domain = NA)
---
>             warning("'--auto-zip' is defunct", call. = FALSE, domain = "R-tools")
1410c1355
<             message("Warning: unknown option ", sQuote(a), domain = NA)
---
>             message(gettextf("Warning: unknown option %s", sQuote(a)), domain = "R-tools")
1421,1422c1366
<             stop("ERROR: '--merge-multiarch' applies only to a single tarball",
<                  call. = FALSE)
---
>             stop("ERROR: '--merge-multiarch' applies only to a single tarball", call. = FALSE)
1433,1434c1377
<                     cmd <- c(file.path(R.home(), "bin", arch, "Rcmd.exe"),
<                              "INSTALL", args, "--no-multiarch")
---
>                     cmd <- c(file.path(R.home(), "bin", arch, "Rcmd.exe"), "INSTALL", args, "--no-multiarch")
1440,1441c1383,1384
<                     if (debug) message("about to run ", cmd, domain = NA)
<                     message("\n", "install for ", arch, "\n", domain = NA)
---
>                     if (debug) message(gettextf("about to run command %s", sQuote(cmd)), domain = "R-tools")
>                     message("\n", gettextf("install for architecture %s", arch), "\n", sep = "", domain = "R-tools")
1465,1466c1408,1409
<                     if (debug) message("about to run ", cmd, domain = NA)
<                     message("\n", "install for ", arch, "\n", domain = NA)
---
>                     if (debug) message(gettextf("about to run command %s", sQuote(cmd)), domain = "R-tools")
>                     message("\n", gettextf("install for architecture %s", arch), "\n", sep = "", domain = "R-tools")
1478,1479c1421
<         message("only one architecture so ignoring '--merge-multiarch'",
<                 domain = NA)
---
>         message("only one architecture so ignoring '--merge-multiarch'", domain = "R-tools")
1485c1427
<         if (debug) message("processing ", sQuote(pkg), domain = NA)
---
>         if (debug) message(gettextf("processing package %s", sQuote(pkg)), domain = "R-tools")
1488c1430
<                 if (debug) message("a zip file", domain = NA)
---
>                 if (debug) message("a zip file", domain = "R-tools")
1495c1437
<             if (debug) message("a file", domain = NA)
---
>             if (debug) message("a file", domain = "R-tools")
1501c1443
<                 errmsg("error unpacking tarball")
---
>                 errmsg(gettext("ERROR: error unpacking tarball"))
1506c1448
<                 errmsg("cannot extract package from ", sQuote(pkg))
---
>                 errmsg(gettextf("ERROR: cannot extract package from %s", sQuote(pkg)))
1508c1450
<                 errmsg("extracted multiple files from ", sQuote(pkg))
---
>                 errmsg(gettextf("ERROR: extracted multiple files from %s", sQuote(pkg)))
1510c1452
<             else errmsg("cannot extract package from ", sQuote(pkg))
---
>             else errmsg(gettextf("ERROR: cannot extract package from %s", sQuote(pkg)))
1517c1459
<                     message("looks like a binary bundle", domain = NA)
---
>                     message("looks like a binary bundle", domain = "R-tools")
1519c1461
<                     message("unknown package layout", domain = NA)
---
>                     message("unknown package layout", domain = "R-tools")
1524c1466
<             } else errmsg("cannot extract package from ", sQuote(pkg))
---
>             } else errmsg(gettextf("ERROR: cannot extract package from %s", sQuote(pkg)))
1526c1468
<             if (debug) message("a directory", domain = NA)
---
>             if (debug) message("a directory", domain = "R-tools")
1530c1472
<             warning("invalid package ", sQuote(pkg), call. = FALSE)
---
>             warning(gettextf("invalid package %s", sQuote(pkg)), call. = FALSE)
1541,1543c1483
< 	    system(paste(file.path(R.home("bin"), "Rscript"),
<                          "-e 'cat(.libPaths()[1L])'"),
<                    intern = TRUE)
---
> 	    system(paste(file.path(R.home("bin"), "Rscript"), "-e 'cat(.libPaths()[1L])'"), intern = TRUE)
1546c1486
<         starsmsg(stars, "installing to library ", sQuote(lib))
---
>         starsmsg(stars, gettextf("installing to library %s", sQuote(lib)))
1552,1553c1492
<                         stop(gettextf("ERROR: cannot cd to directory %s", sQuote(lib)),
<                              call. = FALSE, domain = NA))
---
>                         stop(gettextf("ERROR: cannot enter to directory %s", sQuote(lib)), call. = FALSE, domain = "R-tools"))
1570,1571c1509
<         stop("ERROR: no permission to install to directory ",
<              sQuote(lib), call. = FALSE)
---
>         stop(gettextf("ERROR: no permission to install to directory %s", sQuote(lib)), call. = FALSE)
1594,1596c1532
<             message("ERROR: failed to lock directory ", sQuote(lib),
<                     " for modifying\nTry removing ", sQuote(lockdir),
<                     domain = NA)
---
>             message(gettextf("ERROR: failed to lock directory %s for modifying\nTry removing lock directory %s", sQuote(lib), sQuote(lockdir)), domain = "R-tools")
1602,1603c1538
<             message("ERROR: failed to create lock directory ", sQuote(lockdir),
<                     domain = NA)
---
>             message(gettextf("ERROR: failed to create lock directory %s", sQuote(lockdir)), domain = "R-tools")
1607c1542
<         if (debug) starsmsg(stars, "created lock directory ", sQuote(lockdir))
---
>         if (debug) starsmsg(stars, gettextf("created lock directory %s", sQuote(lockdir)))
1640,1641c1575
<         starsmsg(stars, "build_help_types=",
<                  paste(build_help_types, collapse = " "))
---
>         starsmsg(stars, "build_help_types=", paste(build_help_types, collapse = " "))
1644c1578
<         starsmsg(stars, "DBG: 'R CMD INSTALL' now doing do_install()")
---
>         starsmsg(stars, gettext("DBG: 'R CMD INSTALL' now doing do_install()"))
1698,1701c1632,1633
<         SHLIB_EXT <- sub(".*= ", "", grep("^SHLIB_EXT", mconf, value = TRUE,
<                                           perl = TRUE))
<         SHLIB_LIBADD <- sub(".*= ", "", grep("^SHLIB_LIBADD", mconf,
<                                              value = TRUE, perl = TRUE))
---
>         SHLIB_EXT <- sub(".*= ", "", grep("^SHLIB_EXT", mconf, value = TRUE, perl = TRUE))
>         SHLIB_LIBADD <- sub(".*= ", "", grep("^SHLIB_LIBADD", mconf, value = TRUE, perl = TRUE))
1751c1683
<             cat("R shared object builder: ",
---
>             cat(gettext("R shared object builder: ", domain = "R-tools"),
1756,1757c1688
<                 "This is free software; see the GNU General Public License version 2",
<                 "or later for copying conditions.  There is NO warranty.",
---
>                 "This is free software; see the GNU General Public License version 2 or later for copying conditions. There is NO warranty.",
1911c1842
<         cat("make cmd is\n  ", cmd, "\n\nmake would use\n", sep = "")
---
>         cat(gettextf("make cmd is\n  %s\n\nmake would use:\n", cmd, domain = "R-tools"))
2143c2074
<     cat("  converting help for package ", sQuote(pkg), "\n", sep = "")
---
>     cat(gettextf("  converting help for package %s", sQuote(pkg), domain = "R-tools"), "\n", sep = "")
2148c2079
<         if (!silent) message("    finding HTML links ...", appendLF = FALSE, domain = NA)
---
>         if (!silent) message("    finding HTML links ...", appendLF = FALSE, domain = "R-tools")
2152c2083
<             message("\n    finding level-2 HTML links ...", appendLF = FALSE, domain = NA)
---
>             message("\n    finding level-2 HTML links ...", appendLF = FALSE, domain = "R-tools")
2154c2085
<             message(" done", domain = NA)
---
>             message(" done", domain = "R-tools")
2173c2104,2105
<         message("", domain = NA) # force newline
---
>         #message("", domain = "R-tools") # force newline
> 	cat("\n")
2175c2107
<         stop(conditionMessage(e), domain = NA, call. = FALSE)
---
>         stop(conditionMessage(e), domain = "R-tools", call. = FALSE)
2216,2217c2148
<             ff <- file.path(outDir, dirname[type],
<                             paste0(bf, ext[type]))
---
>             ff <- file.path(outDir, dirname[type], paste0(bf, ext[type]))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/license.R R/src/library/tools/R/license.R
110c110
<     lab[pos] <- sprintf("%s version %s", lab[pos], versions[ind])
---
>     lab[pos] <- gettextf("%s version %s", lab[pos], versions[ind], domain = "R-tools")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/logging.R R/src/library/tools/R/logging.R
62c62
<     printLog(Log, Log$stars, " checking ", ..., " ...")
---
>     printLog(Log, Log$stars, " ", ...)
66c66
<     printLog(Log, Log$stars, " creating ", text, " ...")
---
>     printLog(Log, Log$stars, " ", text)
79c79
<     resultLog(Log, "ERROR")
---
>     resultLog(Log, gettext("ERROR", domain = "R-tools"))
93c93
<     resultLog(Log, "WARNING")
---
>     resultLog(Log, gettext("WARNING", domain = "R-tools"))
101c101
<     resultLog(Log, "NOTE")
---
>     resultLog(Log, gettext("NOTE", domain = "R-tools"))
115c115
<                  "Status: OK\n")
---
>                  gettext("Status: OK\n", domain = "R-tools"))
116a117,125
>       m <- c()
>       for(n in names(counts)){
>         switch(n, 
>                "NOTE" = m <- c(m, (sprintf(ngettext(counts["NOTE"], "%d NOTE", "%d NOTES", domain = "R-tools"), counts["NOTE"]))),
>                "ERROR" = m <- c(m, (sprintf(ngettext(counts["ERROR"], "%d ERROR", "%d ERRORS", domain = "R-tools"), counts["ERROR"]))),
>                "WARNING" = m <- c(m, (sprintf(ngettext(counts["WARNING"], "%d WARNING", "%d WARNINGS", domain = "R-tools"), counts["WARNING"])))
>         )
>       }
>       m <- paste(m, sep = "", collapse = ", ")
118,124c127,128
<                  sprintf("Status: %s\n",
<                          paste(sprintf("%d %s%s",
<                                        counts,
<                                        names(counts),
<                                        ifelse(counts > 1L, "s", "")),
<                                collapse = ", ")))
<         cat(sprintf("See\n  %s\nfor details.\n", sQuote(Log$filename)))
---
>                  gettextf("Status: %s\n", m, domain = "R-tools"))
>         cat(gettextf("See\n  %s\nfor details.\n", sQuote(Log$filename), domain = "R-tools"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/makeLazyLoad.R R/src/library/tools/R/makeLazyLoad.R
26,27c26
<         stop(gettextf("there is no package called '%s'", package),
<              domain = NA)
---
>         stop(gettextf("there is no package called %s", sQuote(package)), domain = "R-tools")
36c35
<         stop("all packages should have a NAMESPACE")
---
>         stop("all packages should have a 'NAMESPACE' file")
51,52c50
<             stop(gettextf("there is no package called '%s'", package),
<                  domain = NA)
---
>             stop(gettextf("there is no package called %s", sQuote(package)), domain = "R-tools")
94,95c92
<         stop(gettextf("there is no package called '%s'", package),
<              domain = NA)
---
>         stop(gettextf("there is no package called %s", sQuote(package)), domain = "R-tools")
132c129
<                                          "objects %s are created by more than one data call"),
---
>                                          "objects %s are created by more than one data call", domain = "R-tools"),
154c151
<     if (is.na(ascii)) stop("'ascii' must be TRUE or FALSE", domain = NA)
---
>     if (is.na(ascii)) stop(gettextf("'%s' argument must be TRUE or FALSE", "ascii", domain = "R-tools"))
261,262c258
<             stop(gettextf("there is no package called '%s'", package),
<                  domain = NA)
---
>             stop(gettextf("there is no package called %s", sQuote(package)), domain = "R-tools")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/md5.R R/src/library/tools/R/md5.R
57,61c57,58
<         if (sum(not.here) > 1L)
<             cat("files", paste(sQuote(nmxx[not.here]), collapse = ", "),
<                 "are missing\n", sep = " ")
<         else
<             cat("file", sQuote(nmxx[not.here]), "is missing\n", sep = " ")
---
>         cat(sprintf(ngettext(sum(not.here), "file %s is missing",
> 					"files %s are missing", domain = "R-tools"), paste(sQuote(nmxx[not.here]), collapse = ", ")), "\n", sep = "")
68,71c65,66
<         if(length(files) > 1L)
<             cat("files", paste(sQuote(files), collapse = ", "),
<                 "have the wrong MD5 checksums\n", sep = " ")
<         else cat("file", sQuote(files), "has the wrong MD5 checksum\n")
---
> 	cat(sprintf(ngettext(length(files), "file %s has the wrong MD5 checksums",
> 					"files %s have the wrong MD5 checksums", domain = "R-tools"), paste(sQuote(files), collapse = ", ")), "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/news.R R/src/library/tools/R/news.R
308,310c308,309
<     ##   dimnames(out) <- list(NULL,
<     ##                         c("Version", "Date", "Category", "Text"))
<     colnames(out) <- c("Version", "Date", "Category", "Text")
---
>     ##   dimnames(out) <- list(NULL, c("Version", "Date", "Category", "Text"))
>     colnames(out) <- c(gettext("Version"), gettext("Date"), gettext("Category"), gettext("Text"))
454,456c453
<                  paste(sprintf("\nChunk %s:\n%s",
<                                format(seq_along(bad)), bad),
<                        collapse = "\n"))
---
>                  paste(gettextf("\nChunk %s:\n%s", format(seq_along(bad)), bad), collapse = "\n"))
558,559c555
<         warning("Cannot extract version info from the following section titles:\n",
<                 sprintf("  %s", unique(nms[!ind])))
---
>         warning("Cannot extract version info from the following section titles:", "\n", paste(unique(nms[!ind]), collapse = "  "), sep = "")
586,589c582
<                           substring(sub("^[[:space:]]*", "",
<                                         .Rd_deparse(x)),
<                                     1L, 60L)),
<                  domain = NA)
---
>                           substring(sub("^[[:space:]]*", "", .Rd_deparse(x)), 1L, 60L)), domain = "R-tools")
592,595c585
<                              substring(sub("^[[:space:]]*", "",
<                                            .Rd_deparse(x)),
<                                        1L, 60L)),
<                     domain = NA)
---
>                              substring(sub("^[[:space:]]*", "", .Rd_deparse(x)), 1L, 60L)), domain = "R-tools")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/packages.R R/src/library/tools/R/packages.R
66c66
<                 if(nzchar(path)) cat("Path: ", path, "\n", sep = "", file = out)
---
>                 if(nzchar(path)) cat(gettext("Path: ", domain = "R-tools"), path, "\n", sep = "", file = out)
69c69
<                 if(nzchar(path)) cat("Path: ", path, "\n", sep = "", file = outgz)
---
>                 if(nzchar(path)) cat(gettext("Path: ", domain = "R-tools"), path, "\n", sep = "", file = outgz)
139c139
<         if(!dir.create(td)) stop("unable to create ", td)
---
>         if(!dir.create(td)) stop(gettext("unable to create %s directory", sQuote(td)))
374c374
<         if(verbose) cat("Cycle:", ctr)
---
>         if(verbose) cat(gettext("Cycle: ", domain = "R-tools"), ctr, sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/parseLatex.R R/src/library/tools/R/parseLatex.R
52c52
<         NULL = stop("Internal error, no tag", domain = NA)
---
>         NULL = stop("Internal error, no tag", domain = "R-tools")
88c88
< 			    warning("argument for ", c(a), " not found", domain = NA)
---
> 			    warning(gettext("argument for %s was not found", sQuote(c(a))), domain = "R-tools")
116c116
< 			NULL = stop("Internal error:  NULL tag", domain = NA))
---
> 			NULL = stop("Internal error: NULL tag", domain = "R-tools"))
199c199
<     	    	    	stop("internal error", domain = NA)
---
>     	    	    	stop("internal error", domain = "R-tools")
213c213
<     	    stop("Inconsistent arg count for ", macro, domain = NA)
---
>     	    stop(gettextf("Inconsistent arg count for %s", sQuote(macro)), domain = "R-tools")
222c222
< 		    warning("entry for ", codepoint, "=", index[1L:i], " already defined to be", entry, domain = NA)
---
> 		    warning(gettextf("entry for %s=%s already defined to be %s", codepoint, paste(index[1L:i], collapse = ", "), entry), domain = "R-tools")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/parseRd.R R/src/library/tools/R/parseRd.R
49,50c49
<             warning(file0, ": multiple \\encoding lines, using the first",
<                     domain = NA, call. = warningCalls)
---
>             warning(gettextf("file %s: multiple \\encoding lines, using the first", sQuote(file0)), domain = "R-tools", call. = warningCalls)
54c53
<         if(verbose) message("found encoding ", enc, domain = NA)
---
>         if(verbose) message(gettextf("found encoding %s", sQuote(enc)), domain = "R-tools")
68,69c67
<             stop(file0, ": non-ASCII input and no declared encoding",
<                  domain = NA, call. = warningCalls)
---
>             stop(gettextf("file %s: non-ASCII input and no declared encoding", sQuote(file0)), domain = "R-tools", call. = warningCalls)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/pdftools.R R/src/library/tools/R/pdftools.R
112,114c112
<         stop(gettextf("%s must be a character string or a file/raw connection",
<                       sQuote("file")),
<              domain = NA)
---
>         stop(gettextf("%s argument must be a character string or a file/raw connection", sQuote("file")), domain = "R-tools")
121c119
<         stop("PDF header not found")
---
>         stop("PDF header was not found")
134c132
<         stop("EOF marker not found")
---
>         stop("EOF marker was not found")
185c183
<             stop("cannot find xref table")
---
>             stop("cannot find 'xref' table")
196c194
<                 stop("cannot read xref table")
---
>                 stop("cannot read 'xref' table")
330,332c328
<     writeLines(strwrap(sprintf("PDF document (file \"%s\", %d bytes, %d objects)",
<                                x$file, x$size, x$length),
<                        exdent = 4L))
---
>     writeLines(strwrap(gettextf("PDF document (file %s, %d bytes, %d objects)", dQuote(x$file), x$size, x$length), exdent = 4L))
347c343
<     if(!inherits(x, "pdf_doc")) stop("wrong class")
---
>     if(!inherits(x, "pdf_doc")) stop(gettextf("'%s' argument should be an object of class %s", "x", dQuote("pdf_doc")))
362c358
<     if(!inherits(x, "pdf_doc")) stop("wrong class")
---
>     if(!inherits(x, "pdf_doc")) stop(gettextf("'%s' argument should be an object of class %s", "x", dQuote("pdf_doc")))
589c585
<     info[["File size"]] <- sprintf("%d bytes", doc$size)
---
>     info[["File size"]] <- sprintf(ngettext(doc$size, "%d byte", "%d bytes", domain = "R-tools"), doc$size)
621c617
<         message(sprintf("looking at %s", deparse(intToUtf8(bytes))))
---
>         message(sprintf("looking at %s", sQuote(deparse(intToUtf8(bytes)))))
1022c1018
<             sprintf("%d bytes", length(bytes))
---
>             sprintf(ngettext(length(bytes), "%d byte", "%d bytes"), length(bytes))
1127,1129c1123
<         stop(gettextf("cannot find object header at xrefed position %d",
<                       pos),
<              domain = NA)
---
>         stop(gettextf("cannot find object header at 'xrefed' position %d", pos), domain = "R-tools")
1136,1138c1130
<         message(gettextf("mismatch in object numbers (given: %d, found: %d)",
<                          num, hdr["num"]),
<                 domain = NA)
---
>         message(gettextf("mismatch in object numbers (given: %d, found: %d)", num, hdr["num"]), domain = "R-tools")
1140,1142c1132
<         message(gettextf("mismatch in generation numbers (given: %d, found: %d)",
<                          gen, hdr["gen"]),
<                 domain = NA)
---
>         message(gettextf("mismatch in generation numbers (given: %d, found: %d)", gen, hdr["gen"]), domain = "R-tools")
1167c1157
<     if(!inherits(doc, "pdf_doc")) stop("wrong class")
---
>     if(!inherits(doc, "pdf_doc")) stop(gettextf("'%s' argument should be an object of class %s", "doc", dQuote("pdf_doc")))
1259c1249
<     if(!inherits(doc, "pdf_doc")) stop("wrong class")
---
>     if(!inherits(doc, "pdf_doc")) stop(gettextf("'%s' argument should be an object of class %s", "doc", dQuote("pdf_doc")))
1315,1316c1305
<             message(sprintf("processing %s",
<                             paste(names(entry), entry, collapse = " ")))
---
>             message(gettextf("processing %s", sQuote(paste(names(entry), entry, collapse = " "))))
1371c1360
<     if(!inherits(doc, "pdf_doc")) stop("wrong class")
---
>     if(!inherits(doc, "pdf_doc")) stop(gettextf("'%s' argument should be an object of class %s", "doc", dQuote("pdf_doc")))
1391,1392c1380
<                                message(sprintf("expanding %s",
<                                                format(kid)))
---
>                                message(gettextf("expanding %s", sQuote(format(kid))))
1412c1400
<     if(!inherits(doc, "pdf_doc")) stop("wrong class")
---
>     if(!inherits(doc, "pdf_doc")) stop(gettextf("'%s' argument should be an object of class %s", "doc", dQuote("pdf_doc")))
1460c1448
<     if(!inherits(doc, "pdf_doc")) stop("wrong class")
---
>     if(!inherits(doc, "pdf_doc")) stop(gettextf("'%s' argument should be an object of class %s", "doc", dQuote("pdf_doc")))
1491c1479
<     if(!inherits(doc, "pdf_doc")) stop("wrong class")
---
>     if(!inherits(doc, "pdf_doc")) stop(gettextf("'%s' argument should be an object of class %s", "doc", dQuote("pdf_doc")))
1548,1550c1536
<             stop(gettextf("unsupported filter %s",
<                           sQuote(filter)),
<                  domain = NA)
---
>             stop(gettextf("unsupported filter %s", sQuote(filter)), domain = "R-tools")
1566,1569c1552
<         stop(gettextf("unsupported %s predictor %d",
<                       "flatedecode",
<                       predictor),
<              domain = NA)
---
>         stop(gettextf("unsupported %s predictor %d", sQuote("flatedecode"), predictor), domain = "R-tools")
1589,1590c1572
<             stop(gettextf("unsupported PNG filter %d", fb),
<                  domain = NA)
---
>             stop(gettextf("unsupported PNG filter %d", fb), domain = "R-tools")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/pkgDepends.R R/src/library/tools/R/pkgDepends.R
22c22
<         stop("argument 'pkg' must be of length 1")
---
>         stop(gettextf("'%s' argument must be of length 1", "pkg"))
28,29c28
<         stop(gettextf("package '%s' was not found", pkg),
<              domain = NA)
---
>         stop(gettextf("package '%s' was not found", pkg), domain = "R-tools")
292,294c291
<                 warning(gettextf("Package '%s' had its dependencies reduced to a minimal set.",
<                                  pkgMtrx[1,]),
<                         domain = NA)
---
>                 warning(gettextf("Package %s had its dependencies reduced to a minimal set.", sQuote(pkgMtrx[1,])), domain = "R-tools")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/read.00Index.R R/src/library/tools/R/read.00Index.R
30,32c30
<         stop(gettextf("argument '%s' must be a character string or connection",
<                       file),
<              domain = NA)
---
>         stop(gettextf("'%s' argument must be a character string or connection", file), domain = "R-tools")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/sotools.R R/src/library/tools/R/sotools.R
429c429
<     c(gettextf("File %s:", sQuote(attr(x, "file"))),
---
>     c(gettextf("File %s:", sQuote(attr(x, "file")), domain = "R-tools"),
436c436
<                                           collapse = ", ")),
---
>                                           collapse = ", "), domain = "R-tools"),
439,442c439,440
<                        strwrap(sprintf("Objects: %s",
<                                        paste(sQuote(w), collapse =
<                                              ", ")),
<                                indent = 4L, exdent = 6L)
---
>                        strwrap(gettextf("Objects: %s",
>                                        paste(sQuote(w), collapse = ", "), domain = "R-tools"), indent = 4L, exdent = 6L)
444,445c442
<                        strwrap(sprintf("Object: %s", sQuote(w)),
<                                indent = 4L, exdent = 6L)
---
>                        strwrap(gettextf("Object: %s", sQuote(w), domain = "R-tools"), indent = 4L, exdent = 6L)
496c493
<                     cat("Note: information on .o files for i386 is not available\n")
---
>                     cat(gettext("Note: information on .o files for i386 is not available", domain = "R-tools"), "\n", sep = "")
522c519
<                     cat("Note: information on .o files for x64 is not available\n")
---
>                     cat(gettext("Note: information on .o files for x64 is not available", domain = "R-tools"), "\n", sep = "")
590c587
<             cat("Note: information on .o files is not available\n")
---
>             cat(gettext("Note: information on .o files is not available", domain = "R-tools"), "\n", sep = "")
618c615
<         c(gettextf("File %s:", sQuote(attr(x, "file"))),
---
>         c(gettextf("File %s:", sQuote(attr(x, "file")), domain = "R-tools"),
620,623c617,618
<               strwrap(paste("Found non-API calls to R:",
<                             paste(sQuote(x), collapse = ", ")),
<                       indent = 2L, exdent = 4L)
<           } else paste("  Found non-API call to R:", sQuote(x))
---
>               strwrap(gettextf("Found non-API calls to R: %s", paste(sQuote(x), collapse = ", "), domain = "R-tools"), indent = 2L, exdent = 4L)
>           } else gettextf("  Found non-API call to R: %s", sQuote(x), domain = "R-tools")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/testing.R R/src/library/tools/R/testing.R
89c89
<             stop("file ", file, " cannot be opened", domain = NA)
---
>             stop(gettextf("file %s cannot be opened", sQuote(file)), domain = "R-tools")
112,113c112
<                 if(any(grepl("^[[:space:]]*## No test:", line,
<                              perl = TRUE, useBytes = TRUE))) {
---
>                 if(any(grepl("^[[:space:]]*## Don't test:", line, perl = TRUE, useBytes = TRUE))) {
118,119c117
<                 if(any(grepl("^[[:space:]]*## End\\(No test\\)", line,
<                              perl = TRUE, useBytes = TRUE)))
---
>                 if(any(grepl("^[[:space:]]*## End \\(Don't test\\)", line, perl = TRUE, useBytes = TRUE)))
150,151c148,149
<         if(length(top <- grep("^(R version|R : Copyright|R Under development)",
<                               txt, perl = TRUE, useBytes = TRUE)) &&
---
>         #if(length(top <- grep("^(R version|R : Copyright|R Under development)",
>         if(length(top <- grep("^(Ivory)", txt, perl = TRUE, useBytes = TRUE)) &&
217,218c215,216
<             cat("\nfiles differ in number of lines:\n")
<             out <- "files differ in number of lines"
---
>             cat("\n", gettext("files differ in number of lines:", domain = "R-tools"), "\n", sep = "")
>             out <- gettext("files differ in number of lines", domain = "R-tools")
262,263c260
<                 warning(gettextf("testing '%s' failed", pkgs[i]),
<                         domain = NA, call. = FALSE, immediate. = TRUE)
---
>                 warning(gettextf("testing '%s' failed", pkgs[i]), domain = "R-tools", call. = FALSE, immediate. = TRUE)
277,279c274,276
<                 msg <- gettextf("testing '%s' failed", pkg)
<                 if (errorsAreFatal) stop(msg, domain = NA, call. = FALSE)
<                 else warning(msg, domain = NA, call. = FALSE, immediate. = TRUE)
---
>                 msg <- gettextf("testing package %s failed", sQuote(pkg))
>                 if (errorsAreFatal) stop(msg, domain = "R-tools", call. = FALSE)
>                 else warning(msg, domain = "R-tools", call. = FALSE, immediate. = TRUE)
298,299c295
<         message(gettextf("Testing examples for package %s", sQuote(pkg)),
<                 domain = NA)
---
>         message(gettextf("Testing examples for package %s", sQuote(pkg)), domain = "R-tools")
325,327c321
<                    message(gettextf("  comparing %s to %s ...",
<                                     sQuote(outfile), sQuote(basename(savefile))),
<                            appendLF = FALSE, domain = NA)
---
>                    message(gettextf("  comparing %s to %s ...", sQuote(outfile), sQuote(basename(savefile))), appendLF = FALSE, domain = "R-tools")
331c325
<                         stop("  ", "results differ from reference results")
---
>                         stop("  results differ from reference results")
336,338c330
<                     message(gettextf("  comparing %s to %s ...",
<                             sQuote(outfile), sQuote(basename(prevfile))),
<                             appendLF = FALSE, domain = NA)
---
>                     message(gettextf("  comparing %s to %s ...", sQuote(outfile), sQuote(basename(prevfile))), appendLF = FALSE, domain = "R-tools")
344,345c336
<             warning(gettextf("no examples found for package %s", sQuote(pkg)),
<                     call. = FALSE, domain = NA)
---
>             warning(gettextf("no examples found for package %s", sQuote(pkg)), call. = FALSE, domain = "R-tools")
356,357c347
<         message(gettextf("Running specific tests for package %s",
<                          sQuote(pkg)), domain = NA)
---
>         message(gettextf("Running specific tests for package %s", sQuote(pkg)), domain = "R-tools")
360c350
<             message(gettextf("  Running %s", sQuote(f)), domain = NA)
---
>             message(gettextf("  Running file %s", sQuote(f)), domain = "R-tools")
374,376c364
<                 message(gettextf("  comparing %s to %s ...",
<                                  sQuote(outfile), sQuote(savefile)),
<                         appendLF = FALSE, domain = NA)
---
>                 message(gettextf("  comparing %s to %s ...", sQuote(outfile), sQuote(savefile)), appendLF = FALSE, domain = "R-tools")
385,386c373
<         message(gettextf("Running vignettes for package %s", sQuote(pkg)),
<                 domain = NA)
---
>         message(gettextf("Running vignettes for package %s", sQuote(pkg)), domain = "R-tools")
425c412
<         message(td2, domain = NA)
---
>         message(td2, domain = "R-tools")
430,431c417
<         message(gettextf("  Running %s", sQuote(f)),
<                 appendLF = FALSE, domain = NA)
---
>         message(gettextf("  Running %s", sQuote(f), domain = "R-tools"), appendLF = FALSE)
433c419
<             cat("  Running ", sQuote(f), sep = "", file = Log)
---
>             cat(gettextf("  Running %s", sQuote(f), domain = "R-tools"), sep = "", file = Log)
454,456c440
<             message(gettextf("  Comparing %s to %s ...",
<                              sQuote(outfile), sQuote(savefile)),
<                     appendLF = FALSE, domain = NA)
---
>             message(gettextf("  Comparing %s to %s ...", sQuote(outfile), sQuote(savefile), domain = "R-tools"), appendLF = FALSE)
458,459c442
<                 cat("  Comparing ", sQuote(outfile), " to ",
<                     sQuote(savefile), " ...", sep = "", file = Log)
---
>                 cat(gettextf("  Comparing %s to %s ...", sQuote(outfile),  sQuote(savefile), domain = "R-tools"), sep = "", file = Log)
467,468c450,451
<                 message(" OK")
<                 if(!is.null(Log)) cat(" OK\n", file = Log)
---
>                 message(gettext(" OK", domain = "R-tools"))
>                 if(!is.null(Log)) cat(gettext(" OK\n", domain = "R-tools"), file = Log)
480c463
<         message("  Creating ", sQuote(Rfile), domain = NA)
---
>         message(gettextf("  Creating file %s", sQuote(Rfile), domain = "R-tools"))
482,484c465,466
<             cat("  Creating ", sQuote(Rfile), "\n", sep = "", file = Log)
<         cmd <- paste(shQuote(file.path(R.home("bin"), "R")),
<                      "CMD BATCH --no-timing --vanilla --slave", f)
---
>             cat(gettextf("  Creating file %s", sQuote(Rfile), domain = "R-tools"), "\n", sep = "", file = Log)
>         cmd <- paste(shQuote(file.path(R.home("bin"), "R")), "CMD BATCH --no-timing --vanilla --slave", f)
486c468
<             warning("creation of ", sQuote(Rfile), " failed", domain = NA)
---
>             warning(gettextf("creation of %s failed", sQuote(Rfile)), domain = "R-tools")
488,489c470
<                 cat("Warning: creation of ", sQuote(Rfile), " failed\n",
<                     sep = "", file = Log)
---
>                 cat(gettextf("Warning: creation of %s failed", sQuote(Rfile), domain = "R-tools"), "\n", sep = "", file = Log)
515,516c496
<     if (!silent) message("  Extracting from parsed Rd's ",
<                          appendLF = FALSE, domain = NA)
---
>     if (!silent) message("  Extracting from parsed Rd's ", appendLF = FALSE, domain = "R-tools")
562,563c542,543
<                 stop("file ", sQuote(f), " not found", domain = NA)
<             message("creating ", sQuote(f), domain = NA)
---
>                 stop(gettextf("file %s was not found", sQuote(f)), domain = "R-tools")
>             message(gettextf("creating file %s", sQuote(f)), domain = "R-tools")
566,567c546
<             cmd <- paste(shQuote(file.path(R.home("bin"), "R")),
<                          "--vanilla --slave -f", fin)
---
>             cmd <- paste(shQuote(file.path(R.home("bin"), "R")), "--vanilla --slave -f", fin)
569c548
<                 stop("creation of ", sQuote(f), " failed", domain = NA)
---
>                 stop(gettextf("creation of %s failed", sQuote(f)), domain = "R-tools")
572c551
<         message("  running code in ", sQuote(f), domain = NA)
---
>         message(gettextf("  running code in %s", sQuote(f)), domain = "R-tools")
595,597c574
<             message(gettextf("  comparing %s to %s ...",
<                              sQuote(outfile), sQuote(savefile)),
<                     appendLF = FALSE, domain = NA)
---
>             message(gettextf("  comparing %s to %s ...", sQuote(outfile), sQuote(savefile)), appendLF = FALSE, domain = "R-tools")
608c585
<         message("running strict specific tests", domain = NA)
---
>         message("running strict specific tests", domain = "R-tools")
610c587
<         message("running sloppy specific tests", domain = NA)
---
>         message("running sloppy specific tests", domain = "R-tools")
612c589
<         message("running regression tests", domain = NA)
---
>         message("running regression tests", domain = "R-tools")
616,617c593
<                 message("  comparing 'reg-plot.pdf' to 'reg-plot.pdf.save' ...",
<                         appendLF = FALSE, domain = NA)
---
>                 message(gettextf("  comparing %s to %s ...", sQuote("reg-plot.pdf"), sQuote("reg-plot.pdf.save")), appendLF = FALSE, domain = "R-tools")
623,624c599,600
<         message("running tests of plotting Latin-1", domain = NA)
<         message("  expect failure or some differences if not in a Latin or UTF-8 locale", domain = NA)
---
>         message("running tests of plotting Latin-1", domain = "R-tools")
>         message("  expect failure or some differences if not in a Latin or UTF-8 locale", domain = "R-tools")
627,628c603
<         message("  comparing 'reg-plot-latin1.pdf' to 'reg-plot-latin1.pdf.save' ...",
<                 appendLF = FALSE, domain = NA)
---
>         message(gettextf("  comparing %s to %s ...", sQuote("reg-plot-latin1.pdf"), sQuote("reg-plot-latin1.pdf.save")), appendLF = FALSE, domain = "R-tools")
634c609
<         message("running tests of consistency of as/is.*", domain = NA)
---
>         message("running tests of consistency of as/is.*", domain = "R-tools")
638c613
<         message("running tests of primitives", domain = NA)
---
>         message("running tests of primitives", domain = "R-tools")
640c615
<         message("running regexp regression tests", domain = NA)
---
>         message("running regexp regression tests", domain = "R-tools")
642c617
<         message("running tests to possibly trigger segfaults", domain = NA)
---
>         message("running tests to possibly trigger segfaults", domain = "R-tools")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/translations.R R/src/library/tools/R/translations.R
28c28
<         stop("running msginit failed", domain = NA)
---
>         stop("running 'msginit' failed", domain = "R-tools")
31c31
<     if(system(cmd) != 0L) stop("running msgconv failed", domain = NA)
---
>     if(system(cmd) != 0L) stop("running 'msgconv' failed", domain = "R-tools")
129c129
<             warning("running msgmerge on ", sQuote(f), " failed", domain = NA)
---
>             warning(gettextf("running 'msgmerge' on file %s failed", sQuote(f)), domain = "R-tools")
135c135
<             message("not installing", domain = NA)
---
>             message(gettextf("not installing file %s", sQuote(f)), domain = "R-tools")
144,145c144
<             warning(sprintf("running msgfmt on %s failed", basename(f)),
<                     domain = NA, immediate. = TRUE)
---
>             warning(gettextf("running 'msgfmt' on file %s failed", basename(f)), domain = "R-tools", immediate. = TRUE)
160,161c159
<             warning(sprintf("running msgfmt on %s failed", basename(f)),
<                     domain = NA, immediate. = TRUE)
---
>             warning(gettextf("running 'msgfmt' on file %s failed", basename(f)), domain = "R-tools", immediate. = TRUE)
173,174c171
<             cfiles <- c(cfiles,
<                         dir("windows", pattern = exts, full.names = TRUE))
---
>             cfiles <- c(cfiles, dir("windows", pattern = exts, full.names = TRUE))
178,179c175
<         cfiles <- grep("^#", readLines("po/POTFILES"),
<                        value = TRUE, invert = TRUE)
---
>         cfiles <- grep("^#", readLines("po/POTFILES"), value = TRUE, invert = TRUE)
181c177
<     cmd <- sprintf("xgettext --keyword=_ --keyword=N_ -o %s", shQuote(ofile))
---
>     cmd <- sprintf("xgettext --keyword=_ --keyword=N_ --keyword=n_:1,2 -o %s", shQuote(ofile))
191c187
<     if(system(cmd) != 0L) stop("running xgettext failed", domain = NA)
---
>     if(system(cmd) != 0L) stop("running 'xgettext' failed", domain = "R-tools")
204c200
<             warning("running msgmerge on ",  f, " failed", domain = NA)
---
>             warning(gettextf("running 'msgmerge' on file %s failed", sQuote(f)), domain = "R-tools")
210c206
<             message("not installing", domain = NA)
---
>             message(gettextf("not installing file %s", sQuote(f)), domain = "R-tools")
219,220c215
<             warning(sprintf("running msgfmt on %s failed", basename(f)),
<                     domain = NA)
---
>             warning(sprintf("running 'msgfmt' on file %s failed", basename(f)), domain = "R-tools")
233,234c228
<             warning(sprintf("running msgfmt on %s failed", basename(f)),
<                     domain = NA)
---
>             warning(sprintf("running 'msgfmt' on file %s failed", basename(f)), domain = "R-tools")
273c267
<     if(system(cmd) != 0L) stop("running xgettext failed", domain = NA)
---
>     if(system(cmd) != 0L) stop("running xgettext failed", domain = "R-tools")
283c277
<             warning("running msgmerge failed", domain = NA)
---
>             warning("running 'msgmerge' failed", domain = "R-tools")
297,298c291
<             warning(sprintf("running msgfmt on %s failed", basename(f)),
<                     domain = NA)
---
>             warning(sprintf("running 'msgfmt' on file %s failed", basename(f)), domain = "R-tools")
316,317c309
<     deps <- sprintf("Depends: R (>= %s.%d.0), R (< %d.%d.0)",
<                     ver[1], ver[2], ver[1], ver[2] + 1)
---
>     deps <- sprintf("Depends: R (>= %s.%d.0), R (< %d.%d.0)", ver[1], ver[2], ver[1], ver[2] + 1)
322c314
<     if(system(cmd) != 0L) stop("R CMD build failed")
---
>     if(system(cmd) != 0L) stop("'R CMD build' failed")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/utils.R R/src/library/tools/R/utils.R
40c40
<         stop("'x' must be a single character string")
---
>         stop(gettextf("'%s' argument must be a single character string", "x"))
42,43c42
<         stop(gettextf("file '%s' does not exist", x),
<              domain = NA)
---
>         stop(gettextf("file %s does not exist", sQuote(x)), domain = "R-tools")
81,82c80
<            stop(gettextf("test '%s' is not available", op),
<                 domain = NA))
---
>            stop(gettextf("test %s is not available", sQuote(op)), domain = "R-tools"))
128,129c126
<         list_files_with_exts(dir, exts, all.files = all.files,
<                              full.names = full.names)
---
>         list_files_with_exts(dir, exts, all.files = all.files, full.names = full.names)
184c181
<         stop("argument 'x' must be a character vector")
---
>         stop(gettextf("'%s' argument must be a character vector", "x"))
187c184
<         stop("argument 'delim' must specify two characters")
---
>         stop("'delim' argument must specify two characters")
189c186
<         stop("only Rd syntax is currently supported")
---
>         stop("currently only Rd syntax is supported")
218,219c215
<             files <- setdiff(list.files(all.files = TRUE),
<                              c(".", "..", out_file, pre_files))
---
>             files <- setdiff(list.files(all.files = TRUE), c(".", "..", out_file, pre_files))
233,234c229
<     texinputs <- paste(c(texinputs0, Rtexinputs, ""),
<                        collapse = envSep)
---
>     texinputs <- paste(c(texinputs0, Rtexinputs, ""), collapse = envSep)
239,240c234
<     bibinputs <- paste(c(texinputs0, Rbibinputs, ""),
<                        collapse = envSep)
---
>     bibinputs <- paste(c(texinputs0, Rbibinputs, ""), collapse = envSep)
242,243c236
<     bstinputs <- paste(c(texinputs0, Rbstinputs, ""),
<                        collapse = envSep)
---
>     bstinputs <- paste(c(texinputs0, Rbstinputs, ""), collapse = envSep)
302c295
<                 errors <- paste("LaTeX errors:",
---
>                 errors <- paste(gettext("LaTeX errors:"),
311c304
<                 errors <- paste("BibTeX errors:",
---
>                 errors <- paste(gettext("BibTeX errors:"),
323c316
<             msg <- gettextf("Running 'texi2dvi' on '%s' failed.", file)
---
>             msg <- gettextf("Running 'texi2dvi' on file %s failed.", sQuote(file))
330c323
<                 msg <- paste(msg, "Messages:",
---
>                 msg <- paste(msg, gettext("Messages:"),
334c327
<                 msg <- paste(msg, "Output:",
---
>                 msg <- paste(msg, gettext("Output:"),
342c335
<             stop(msg, domain = NA)
---
>             stop(msg, domain = "R-tools")
377c370
<                 msg <- paste(msg, "LaTeX errors:",
---
>                 msg <- paste(msg, gettext("LaTeX errors:"),
386c379
<                 msg <- paste(msg, "BibTeX errors:",
---
>                 msg <- paste(msg, gettext("BibTeX errors:"),
393,395c386,387
<             msg <- paste(gettextf("running 'texi2dvi' on '%s' failed", file),
<                          msg, "", sep = "\n")
<             stop(msg, call. = FALSE, domain = NA)
---
>             msg <- paste(gettextf("running 'texi2dvi' on file %s failed", sQuote(file)), msg, "", sep = "\n")
>             stop(msg, call. = FALSE, domain = "R-tools")
412,413c404,407
<             stop(if(pdf) "pdflatex" else "latex", " is not available",
<                  domain = NA)
---
> 		  if(pdf)
> 		    stop(gettextf("%s command is not available", sQuote("pdflatex")), domain = "R-tools")
> 		  else
> 		    stop(gettextf("%s command is not available", sQuote("latex")), domain = "R-tools")
417,420c411,412
<             stop(gettextf("unable to run '%s' on '%s'", latex, file),
<                  domain = NA)
<         nmiss <- length(grep("^LaTeX Warning:.*Citation.*undefined",
<                              readLines(paste0(base, ".log"))))
---
>             stop(gettextf("unable to run %s command on file %s", sQuote(latex), sQuote(file)), domain = "R-tools")
>         nmiss <- length(grep("^LaTeX Warning:.*Citation.*undefined", readLines(paste0(base, ".log"))))
427,429c419
<                     stop(gettextf("unable to run '%s' on '%s'",
<                                   makeindex, idxfile),
<                          domain = NA)
---
>                     stop(gettextf("unable to run %s command on file %s", sQuote(makeindex), sQuote(idxfile)), domain = "R-tools")
432c422
<                 stop(gettextf("unable to run %s on '%s'", latex, file), domain = NA)
---
>                 stop(gettextf("unable to run %s command on file %s", sQuote(latex), sQuote(file)), domain = "R-tools")
435,436c425
<             if(nmiss == nmiss_prev &&
<                !length(grep("Rerun to get", Log)) ) break
---
>             if(nmiss == nmiss_prev && !length(grep("Rerun to get", Log)) ) break
511,512c500
<         file_path_sans_ext(system.file("help", "tools.rdb",
<                                        package = "tools"))
---
>         file_path_sans_ext(system.file("help", "tools.rdb", package = "tools"))
531,532c519
<         warning(gettextf("cannot coerce %s to logical", sQuote(val)),
<                 domain = NA)
---
>         warning(gettextf("cannot coerce %s to logical", sQuote(val)))
701,702c688
<          regexpr("There (was|were) ([0123456789]+) error messages?",
<                  lines[length(lines)]) > -1L)
---
>          regexpr("There (was|were) ([0123456789]+) error messages?", lines[length(lines)]) > -1L)
747,749c733
<         c("[", "[[", "$", "[<-", "[[<-", "$<-",
<           "as.vector", "unlist",
<           .get_S3_primitive_generics()
---
>         c("[", "[[", "$", "[<-", "[[<-", "$<-", "as.vector", "unlist", .get_S3_primitive_generics()
1076,1077c1060
<         texi <- file.path(.R_top_srcdir_from_Rd(),
<                           "doc", "manual", "R-exts.texi")
---
>         texi <- file.path(.R_top_srcdir_from_Rd(), "doc", "manual", "R-exts.texi")
1501c1484
<         stop(gettextf("file '%s' does not exist", dfile), domain = NA)
---
>         stop(gettextf("file %s does not exist", sQuote(dfile)), domain = "R-tools")
1506,1508c1489
<                     stop(gettextf("file '%s' is not in valid DCF format",
<                                   dfile),
<                          domain = NA, call. = FALSE))
---
>                     stop(gettextf("file %s is not in valid DCF format", sQuote(dfile)), domain = "R-tools", call. = FALSE))
1510c1491
<         stop("contains a blank line", call. = FALSE)
---
>         stop(gettextf("file %s contains a blank line", sQuote(dfile)), call. = FALSE)
1540,1541c1521
<             warning(gettext("Unknown encoding with non-ASCII data: converting to ASCII"),
<                     domain = NA)
---
>             warning(gettext("Unknown encoding with non-ASCII data: converting to ASCII"), domain = "R-tools")
1652c1632
<         stop("unable to create ", con)
---
>         stop(gettextf("unable to create file %s", con))
1667,1669c1647
<              stop("cannot source package code\n",
<                   conditionMessage(e),
<                   call. = FALSE))
---
>              stop("cannot source package code", "\n", conditionMessage(e), call. = FALSE))
1769c1747
<                                          "\nCall sequence:\n",
---
>                                          "\n", gettext("Call sequence:", domain = "R-tools"), "\n",
1798c1776
<                        message(sprintf("processing %s", basename(dir)))
---
>                        message(gettextf("processing directory %s", sQuote(basename(dir))))
1813,1821c1791,1792
<     else if(len == 1L)
<         paste("argument", sQuote(args), msg)
<     else
<         paste("arguments",
<               paste(c(rep.int("", len - 1L), "and "),
<                     sQuote(args),
<                     c(rep.int(", ", len - 1L), ""),
<                     sep = "", collapse = ""),
<               msg)
---
>     else if(len >= 1L)
> 	paste(sprintf(ngettext(len, "argument %s", "arguments %s"), paste(sQuote(args), collapse = ", ")), msg)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/R/xgettext.R R/src/library/tools/R/xgettext.R
41c41
<         find_strings2 <- function(e, suppress) {
---
>         find_strings2 <- function(e, olde, suppress) {
43c43,45
<                 if(!suppress) strings <<- c(strings, e)
---
> 		e <- sub("^[ \t\n]*", "", e)
>         	e <- sub("[ \t\n]*$", "", e)
>                 if(!suppress) strings <<- c(strings, list(c(msg = e, cmd = olde)))
44a47
> 	 	        olde <- paste(deparse(e), sep = "", collapse = "")
57c60
<                 for(i in seq_along(e)) find_strings2(e[[i]], suppress)
---
>                 for(i in seq_along(e)) find_strings2(e[[i]], olde, suppress)
64a68
> 	 	        olde <- paste(deparse(e), sep = "", collapse = "")
71c75,77
<                  if(!suppress) strings <<- c(strings, as.character(e)[-1L])
---
> 		e <- sub("^[ \t\n]*", "", as.character(e)[-1L])
>         	e <- sub("[ \t\n]*$", "", e)
>                  if(!suppress) strings <<- c(strings, list(c(msg = e, cmd = olde)))
77c83
<                  for(i in seq_along(e)) find_strings2(e[[i]], suppress)
---
>                  for(i in seq_along(e)) find_strings2(e[[i]], olde, suppress)
84,85c90,91
<         if(verbose) message(gettextf("parsing '%s'", f), domain = NA)
<         strings <- character()
---
>         if(verbose) message(gettextf("parsing file %s", sQuote(f)), domain = "R-tools")
>         strings <- list()
88,90c94
<         strings <- sub("^[ \t\n]*", "", strings)
<         strings <- sub("[ \t\n]*$", "", strings)
<         out[[f]] <- structure(unique(strings), class="xgettext")
---
>         out[[f]] <- structure(strings, class="xgettext")
99c103,106
<     cat(x, sep = "\n")
---
>     lapply(x, function(x)
>            cat("\nmsgid        = ", x[1L],
>                "\ncommand      = ", x[2L],
>                "\n", sep = ""))
108a116
> 		       "\ncommand      = ", x[3L],
130a139
> 	    olde <- paste(deparse(e), sep = "", collapse = "")
137c146,147
< 	    				      msg2 = e[["msg2"]])))
---
> 	    				      msg2 = e[["msg2"]],
> 					      cmd  = olde)))
143c153
<         if(verbose) message(gettextf("parsing '%s'", f), domain = NA)
---
>         if(verbose) message(gettextf("parsing file %s", sQuote(f)), domain = "R-tools")
158,159c168,182
<     tmp <- unique(unlist(xgettext(dir, asCall = FALSE)))
<     tmp <- tmp[nzchar(tmp)]
---
>     tmp <- unlist(xgettext(dir, asCall = FALSE))
>     ind <- 2*seq_len(length(tmp)/2)-1
>     tmp <- data.frame(msg = tmp[ind], Cmd = tmp[ind+1], location = names(tmp[ind]), stringsAsFactors=FALSE, row.names = NULL)
>     tmp <- tmp[order(tmp[, "msg"]), ]
>     regpth <- paste(dir, "/", sep = "", collapse = "")
>     tmp[,"Cmd"] <- paste(sub("\\.msg[0-9]*$", ": ", sub(regpth, "#. ", tmp[,"location"])), tmp[,"Cmd"], "\n", sep = "")
>     tmp[,"location"] <- sub("\\.msg[0-9]*$", ": 0", sub(regpth, "\n#: ", tmp[,"location"]))
>     for(i in seq_len(nrow(tmp)-1)) 
>       if(tmp[i,"msg"] == tmp[i+1,"msg"]) {
>         if(tmp[i,"location"] != tmp[i+1,"location"])
> 		 tmp[i+1,"location"] <- paste(tmp[i,"location"], tmp[i+1,"location"], sep = "", collapse = "")
> 		tmp[i+1,"Cmd"] <- paste(tmp[i,"Cmd"], tmp[i+1,"Cmd"], sep = "", collapse = "")
>         tmp[i, ] <- ""
>       }
>     tmp <- tmp[nzchar(tmp[,"msg"]), ]
161c184
< 	tmp <- shQuote(encodeString(tmp), type="cmd")  # need to quote \n, \t etc
---
>     tmp[,"msg"] <- shQuote(encodeString(tmp[,"msg"]), type="cmd")  # need to quote \n, \t etc
181,193c204,231
<     for(e in tmp)
<         writeLines(con=con, c('', paste('msgid', e), 'msgstr ""'))
<     tmp <- xngettext(dir)
<     un <- unique(unlist(tmp, recursive=TRUE))
<     for(ee in tmp)
<         for(e in ee)
<             if(e[1L] %in% un) {
<                 writeLines(con=con, c('',
<                            paste('msgid       ',
<                                  shQuote(encodeString(e[1L]), type="cmd")),
<                            paste('msgid_plural',
<                                  shQuote(encodeString(e[2L]), type="cmd")),
<                            'msgstr[0]    ""', 'msgstr[1]    ""')
---
>     for(i in seq_len(nrow(tmp)))
>       writeLines(con=con, c("", tmp[i, "location"],
> 				tmp[i, "Cmd"],
> 				paste('msgid', tmp[i, "msg"]),
> 				'msgstr ""'))
>     tmp <- unlist(xngettext(dir), recursive=TRUE)
>     if(!is.null(tmp)) {
>     ind <- 3*seq_len(length(tmp)/3)-2
>     tmp2 <- data.frame(Smsg = tmp[ind], Pmsg = tmp[ind + 1], Cmd = tmp[ind + 2], location = names(tmp[ind]), stringsAsFactors=FALSE, row.names = NULL)
>     regpth <- paste(dir, "/", sep = "", collapse = "")
>     tmp2[,"Cmd"] <- paste(sub("\\.msg[0-9]*$", ": ", sub(regpth, "#. ", tmp2[,"location"])), tmp2[,"Cmd"], "\n", sep = "")
>     tmp2[,"location"] <- sub("\\.msg[0-9]*$", ": 0", sub(regpth, "\n#: ", tmp2[,"location"]))
>     tmp2 <- tmp2[order(tmp2[, "Smsg"]), ]
>     for(i in seq_len(nrow(tmp2)-1)) 
>       if(tmp2[i,"Smsg"] == tmp2[i+1,"Smsg"]) {
>         if(tmp2[i,"location"] != tmp2[i+1,"location"]) 
> 	   tmp2[i+1,"location"] <- paste(tmp2[i,"location"], tmp2[i+1,"location"], sep = "", collapse = "")
> 	   tmp2[i+1,"Cmd"] <- paste(tmp2[i,"Cmd"], tmp2[i+1,"Cmd"], sep = "", collapse = "")
>         tmp2[i, ] <- ""
>       }
>     tmp2 <- tmp2[nzchar(tmp2[,"location"]), ]
>     for(i in seq_len(nrow(tmp2)))
>       writeLines(con=con, c("", tmp2[i, "location"],
> 				tmp2[i, "Cmd"],
>                             paste('msgid       ', shQuote(encodeString(tmp2[i, "Smsg"]), type="cmd")),
>                             paste('msgid_plural', shQuote(encodeString(tmp2[i, "Pmsg"]), type="cmd")),
>                             'msgstr[0]    ""',
>                             'msgstr[1]    ""')
195d232
<                 un <- un[-match(e, un)]
277c314
< 			    diff <- "too many entries"
---
> 			    diff <- gettext("too many entries")
280c317
< 			    diff <- "too few entries"
---
> 			    diff <- gettext("too few entries")
286,289c323,331
< 			    if (diff != "")
< 			    	diff <- paste0(diff, ", ")
< 			    if (length(diffs) > 1)
< 				diff <- paste(paste0(diff, "differences in entries"),
---
> 			    if (diff != "") {
> 				diff <- paste(diff, ", ", sprintf(ngettext(length(diffs),
> 								"difference in entry %s",
> 								"differences in entries %s", domain = "R-tools"),
> 								diff, paste(diffs, collapse = ", ")), sep = "")
> 				} else {
> 				diff <- sprintf(ngettext(length(diffs),
> 								"difference in entry %s",
> 								"differences in entries %s", domain = "R-tools"),
291,293c333
< 			    else
< 				diff <- paste(paste0(diff, "difference in entry"),
< 				              diffs)
---
> 					}
296c336
< 			    diff <- paste0(diff, ", translation contains arabic percent sign U+066A")
---
> 			    diff <- paste0(diff, ", ", gettext("translation contains arabic percent sign U+066A", domain = "R-tools"))
298c338
< 			    diff <- paste0(diff, ", translation contains small percent sign U+FE6A")
---
> 			    diff <- paste0(diff, ", ", gettext("translation contains small percent sign U+FE6A", domain = "R-tools"))
300c340
< 			    diff <- paste0(diff, ", translation contains wide percent sign U+FF05")
---
> 			    diff <- paste0(diff, ", ", gettext("translation contains wide percent sign U+FF05", domain = "R-tools"))
332c372
< 	cat("No errors\n")
---
> 	cat(gettext("No errors", domain = "R-tools"), "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/src/Rmd5.c R/src/library/tools/src/Rmd5.c
23a24
> #include "localization.h"
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/src/getfmts.c R/src/library/tools/src/getfmts.c
28,36c28
< 
< #undef _
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("tools", String)
< #else
< #define _(String) (String)
< #endif
< 
---
> #include "localization.h"
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/src/gramLatex.c R/src/library/tools/src/gramLatex.c
98,104c98
< #undef _
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("tools", String)
< #else
< #define _(String) (String)
< #endif
---
> #include "localization.h"
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/src/gramLatex.y R/src/library/tools/src/gramLatex.y
34,40c34
< #undef _
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("tools", String)
< #else
< #define _(String) (String)
< #endif
---
> #include "localization.h"
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/src/gramRd.c R/src/library/tools/src/gramRd.c
98,104c98
< #undef _
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("tools", String)
< #else
< #define _(String) (String)
< #endif
---
> #include "localization.h"
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/src/gramRd.y R/src/library/tools/src/gramRd.y
33,39c33
< #undef _
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("tools", String)
< #else
< #define _(String) (String)
< #endif
---
> #include "localization.h"
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/src/http.c R/src/library/tools/src/http.c
23c23
< 
---
> #include "localization.h"
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/src/install.c R/src/library/tools/src/install.c
27,34c27
< #undef _
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("tools", String)
< #else
< #define _(String) (String)
< #endif
< 
---
> #include "localization.h"
Only in R/src/library/tools/src: localization.h
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/src/signals.c R/src/library/tools/src/signals.c
25a26
> #include "localization.h"
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/src/text.c R/src/library/tools/src/text.c
25a26
> #include "localization.h"
156c157
<     if(ign == NA_LOGICAL) error("'ignore_quotes' must be TRUE or FALSE");
---
>     if(ign == NA_LOGICAL) error(_("'%s' argument must be TRUE or FALSE"), "ignore_quotes");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/tools/src/tools.h R/src/library/tools/src/tools.h
24,29d23
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("tools", String)
< #else
< #define _(String) (String)
< #endif
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/RShowDoc.R R/src/library/utils/R/RShowDoc.R
42c42
<         message("   RShowDoc() should be used with a character string argument specifying\n   a documentation file")
---
>         message("RShowDoc() should be used with a character string argument specifying a documentation file")
82,83c82
<         stop(gettextf("no documentation for %s found in package %s",
<                       sQuote(what), sQuote(package)), domain = NA)
---
>         stop(gettextf("no documentation for %s found in package %s", sQuote(what), sQuote(package)), domain = "R-utils")
118,119c117
<     } else if(what %in% c("R-admin", "R-data", "R-exts", "R-FAQ", "R-intro",
<                           "R-ints", "R-lang")) {
---
>     } else if(what %in% c("R-admin", "R-data", "R-exts", "R-FAQ", "R-intro", "R-ints", "R-lang")) {
169c167
<     stop("document not found")
---
>     stop("document was not found")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/RSiteSearch.R R/src/library/utils/R/RSiteSearch.R
52,54c52,53
<     cat(gettextf("A search query has been submitted to %s",
<                  "http://search.r-project.org"), "\n", sep = "")
<     cat(gettext("The results page should open in your browser shortly\n"))
---
>     cat(gettextf("A search query has been submitted to %s", "http://search.r-project.org", domain = "R-utils"), "\n", sep = "")
>     cat(gettext("The results page should open in your browser shortly", domain = "R-utils"), "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/Sweave.R R/src/library/utils/R/Sweave.R
105,106c105
< 	    cat(sprintf("%16s\n", system(paste("ls -s",
< 				   summary(drobj$output)$description), intern=TRUE)))
---
> 	    cat(sprintf("%16s\n", system(paste("ls -s", summary(drobj$output)$description), intern=TRUE)))
130,132c129
<             chunkopts <- SweaveParseOptions(chunkopts,
<                                             drobj$options,
<                                             driver$checkopts)
---
>             chunkopts <- SweaveParseOptions(chunkopts, drobj$options, driver$checkopts)
146,148c143
<                     warning(gettextf("reference to unknown chunk %s",
<                                      sQuote(chunkref)),
<                             call. = TRUE,domain = NA)
---
>                     warning(gettextf("reference to unknown chunk %s", sQuote(chunkref)), call. = TRUE,domain = "R-utils")
154,156c149
<                     line <- c(namedchunks[[chunkref]],
< 			      paste0("#line ", linenum+linediff+1L,
< 				     ' "', basename(file), '"'))
---
>                     line <- c(namedchunks[[chunkref]], paste0("#line ", linenum+linediff+1L, ' "', basename(file), '"'))
163,164c156
<                 line <- c(paste0("#line ", linenum+linediff, ' "', basename(file), '"'),
<                           line)
---
>                 line <- c(paste0("#line ", linenum+linediff, ' "', basename(file), '"'), line)
202,203c194
<             stop(gettextf("no Sweave file with name %s found",
<                           sQuote(file[1L])), domain = NA)
---
>             stop(gettextf("no Sweave file with name %s found", sQuote(file[1L])), domain = "R-utils")
225,227c216
<                 stop(sQuote(basename(file)),
<                         " is not ASCII and does not declare an encoding",
<                         domain = NA, call. = FALSE)
---
>                 stop(gettextf("%s is not ASCII and does not declare an encoding", sQuote(basename(file)), domain = "R-utils"), domain = NA, call. = FALSE)
230,232c219
<             stop(sQuote(basename(file)),
<                  " declares an encoding that Sweave does not know about",
<                  domain = NA, call. = FALSE)
---
>             stop(gettextf("%s declares an encoding that Sweave does not know about", sQuote(basename(file)), domain = "R-utils"), domain = NA, call. = FALSE)
244,245c231
<         warning(gettextf("more than one syntax specification found, using the first one"),
< 		domain = NA)
---
>         warning("more than one syntax specification found, using the first one", domain = "R-utils")
251,252c237
<             stop(gettextf("object %s does not have class \"SweaveSyntax\"",
<                           sQuote(sname)), domain = NA)
---
>             stop(gettextf("object %s does not have class \"SweaveSyntax\"", sQuote(sname)), domain = "R-utils")
256c241
<     srcFilenum <- rep_len(1, length(srcLinenum))
---
>     srcFilenum <- rep(1, length(srcLinenum))
263,267c248
<                 stop(paste(gettextf("recursive Sweave input %s in stack",
<                                     sQuote(ifile)),
<                            paste("\n         ", seq_len(file), ": ",
<                                  rev(file), collapse="")),
<                  domain = NA)
---
>                 stop(paste(gettextf("recursive Sweave input %s in stack", sQuote(ifile), domain = "R-utils"), paste("\n         ", seq_len(file), ": ", rev(file), collapse = "")), domain = NA)
275,278c256,257
< 	    srcLinenum <- c(srcLinenum[pre], attr(itext, "srcLinenum"),
< 	    		    srcLinenum[post])
< 	    srcFilenum <- c(srcFilenum[pre], attr(itext, "srcFilenum")+length(f),
< 	    		    srcFilenum[post])
---
> 	    srcLinenum <- c(srcLinenum[pre], attr(itext, "srcLinenum"), srcLinenum[post])
> 	    srcFilenum <- c(srcFilenum[pre], attr(itext, "srcFilenum")+length(f), srcFilenum[post])
347,349c326
<         stop(gettextf("target syntax not of class %s",
<                       dQuote("SweaveSyntax")),
<              domain = NA)
---
>         stop(gettextf("target syntax not of class %s", dQuote("SweaveSyntax")), domain = "R-utils")
364c341
<     cat("Wrote file", output, "\n")
---
>     cat(gettextf("Wrote file %s", output, domain = "R-utils"), "\n", sep = "")
390c367
<         stop(gettextf("parse error or empty option in\n%s", text), domain = NA)
---
>         stop(gettextf("parse error or empty option in %s", text), domain = "R-utils")
398,399c375
<             sub(paste0("\\.", options[["engine"]], "$"),
<                 "", options[["label"]])
---
>             sub(paste0("\\.", options[["engine"]], "$"), "", options[["label"]])
496c472
< 					     clean.), domain = NA))
---
> 					     clean., domain = "R-tools"), domain = NA))
506,507c482
<             message(gettextf("Warning: unknown option %s", sQuote(a)),
<                     domain = NA)
---
>             message(gettextf("Warning: unknown option %s", sQuote(a)), domain = "R-utils")
608,609c583
<             message(gettextf("Warning: unknown option %s", sQuote(a)),
<                     domain = NA)
---
>             message(gettextf("Warning: unknown option %s", sQuote(a)), domain = "R-utils")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/SweaveDrivers.R R/src/library/utils/R/SweaveDrivers.R
42,43c42,43
<     if (!quiet) cat("Writing to file ", output, "\n",
<                    "Processing code chunks with options ...\n", sep = "")
---
>     if (!quiet) cat(gettextf("Writing to file %s", output, domain = "R-utils"), "\n",
>                    gettext("Processing code chunks with options ...", domain = "R-utils"), "\n", sep = "")
58,60c58
<             warning(gettextf("path to %s contains spaces,\n", sQuote(styfile)),
<                     gettext("this may cause problems when running LaTeX"),
<                     domain = NA)
---
>             warning(gettextf("path to %s contains spaces, this may cause problems when running LaTeX", sQuote(styfile)), domain = "R-utils")
180,181c178
<                     warning("file stem ", sQuote(chunkout), " is not portable",
<                             call. = FALSE, domain = NA)
---
>                     warning(gettextf("file stem %s is not portable", sQuote(chunkout)), call. = FALSE, domain = "R-utils")
191,192c188
<             chunkexps[1L] <- sub(" parse(text = chunk, srcfile = srcfile) : \n ",
<                                  "", chunkexps[1L], fixed = TRUE)
---
>             chunkexps[1L] <- sub(" parse(text = chunk, srcfile = srcfile) : \n ", "", chunkexps[1L], fixed = TRUE)
210,212c206
<             cat("\n", paste(getOption("prompt"), dce[seq_len(leading)],
<                             sep = "", collapse = "\n"),
<                 file = chunkout, sep = "")
---
>             cat("\n", paste(getOption("prompt"), dce[seq_len(leading)], sep = "", collapse = "\n"), file = chunkout, sep = "")
214,216c208
<                 cat("\n", paste(getOption("continue"), dce[-seq_len(leading)],
<                                 sep = "", collapse = "\n"),
<                     file = chunkout, sep = "")
---
>                 cat("\n", paste(getOption("continue"), dce[-seq_len(leading)], sep = "", collapse = "\n"), file = chunkout, sep = "")
262,263c254
<                 warning("file stem ", sQuote(chunkprefix), " is not portable",
<                         call. = FALSE, domain = NA)
---
>                 warning(gettextf("file stem %s is not portable", sQuote(chunkprefix)), call. = FALSE, domain = "R-utils")
265,267c256
<                 devs[[1L]](name = chunkprefix,
<                            width = options$width, height = options$height,
<                            options)
---
>                 devs[[1L]](name = chunkprefix, width = options$width, height = options$height, options)
406c395
<                     stop(conditionMessage(e), call. = FALSE, domain = NA)
---
>                     stop(conditionMessage(e), call. = FALSE, domain = "R-utils")
412,413c401
<                 cat("\\includegraphics{", chunkprefix, "}\n", sep = "",
<                     file = object$output)
---
>                 cat("\\includegraphics{", chunkprefix, "}\n", sep = "", file = object$output)
464c452
< 		       stop("at ",location, ", ", conditionMessage(e), call. = FALSE)
---
> 		       stop(gettextf("at %s, %s", location, conditionMessage(e)), call. = FALSE)
514,516c502
< 	cat("\n",
< 	    sprintf("You can now run (pdf)latex on %s", sQuote(outputname)),
< 	    "\n", sep = "")
---
> 	cat("\n", gettextf("You can now run (pdf)latex on %s", sQuote(outputname), domain = "R-utils"), "\n", sep = "")
589,590c575
<             stop(gettextf("invalid value for %s : %s", sQuote(opt), oldval),
<                  domain = NA)
---
>             stop(gettextf("invalid value for %s: %s", sQuote(opt), oldval), domain = "R-utils")
596,597c581
<             warning("value of 'results' option should be lowercase",
<                     call. = FALSE)
---
>             warning("value of 'results' option should be lowercase", call. = FALSE)
605,606c589
<             warning("value of 'strip.white' option should be lowercase",
<                     call. = FALSE)
---
>             warning("value of 'strip.white' option should be lowercase", call. = FALSE)
646,649c629,633
<         msg <- paste(" chunk", options$chunknr)
<         if (!is.null(options$label))
<             msg <- paste0(msg, " (label = ", options$label, ")")
<         msg <- paste(msg, "\n")
---
>         if (!is.null(options$label)) {
>             msg <- gettextf(" chunk %s (label = %s)\n", paste(options$chunknr, collapse = ""), paste(options$label, collapse = ""), domain = "R-utils")
>         } else {
> 	    msg <- gettextf(" chunk %s\n", paste(options$chunknr, collapse = ""), domain = "R-utils")
> 		}
682c666
<             if (!quiet) cat("Writing to file", output, "\n")
---
>             if (!quiet) cat(gettextf("Writing to file %s", output, domain = "R-utils"), "\n", sep = "")
687c671
<         lines <- c(sprintf("R code from vignette source '%s'", file),
---
>         lines <- c(gettextf("R code from vignette source '%s'", file, domain = "R-utils"),
689c673
<                    sprintf("Encoding: %s", localeToCharset()[1L])
---
>                    gettextf("Encoding: %s", localeToCharset()[1L], domain = "R-utils")
694c678
<         if (!quiet) cat("Writing chunks to files ...\n")
---
>         if (!quiet) cat(gettext("Writing chunks to files ...", domain = "R-utils"), "\n", sep = "")
721,722c705
<             warning("file stem ", sQuote(chunkprefix), " is not portable",
<                     call. = FALSE, domain = NA)
---
>             warning(gettextf("file stem %s is not portable", sQuote(chunkprefix)), call. = FALSE, domain = "R-utils")
758,759c741
<         cat("getOption(\"SweaveHooks\")[[\"", k, "\"]]()\n",
<             file = chunkout, sep = "")
---
>         cat("getOption(\"SweaveHooks\")[[\"", k, "\"]]()\n", file = chunkout, sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/apropos.R R/src/library/utils/R/apropos.R
69c69
<                                              "%d occurrences in %s"), ll, sp[i]),
---
>                                              "%d occurrences in %s", domain = "R-utils"), ll, sp[i]),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/aspell.R R/src/library/utils/R/aspell.R
62,64c62
<             warning(gettextf("Filter '%s' is not available.",
<                              filter_name),
<                     domain = NA)
---
>             warning(gettextf("Filter '%s' is not available.", filter_name), domain = "R-utils")
75,77c73
<             warning(gettextf("Filter '%s' is not available.",
<                              filter_name),
<                     domain = NA)
---
>             warning(gettextf("Filter '%s' is not available.", filter_name), domain = "R-utils")
80c76
<         stop("Invalid 'filter' argument.")
---
>         stop(gettextf("invalid '%s' argument", "filter"))
98,101c94
<             warning(gettextf("The following dictionaries were not found:\n%s",
<                              paste(sprintf("  %s", dictionaries[ind]),
<                                    collapse = "\n")),
<                     domain = NA)
---
>             warning(gettextf("The following dictionaries were not found:\n%s", paste(sprintf("  %s", dictionaries[ind]), collapse = "\n")), domain = "R-utils")
146,147c139
<             message(gettextf("Processing file %s", fname),
<                     domain = NA)
---
>             message(gettextf("Processing file %s", fname), domain = "R-utils")
176,178c168
< 	    stop(gettextf("Running aspell failed with diagnostics:\n%s",
< 			  paste(out$stderr, collapse = "\n")),
<                  domain = NA)
---
> 	    stop(gettextf("Running aspell failed with diagnostics:\n%s", paste(out$stderr, collapse = "\n")), domain = "R-utils")
277c267
<         writeLines("Possibly mis-spelled words:")
---
>         writeLines(gettext("Possibly mis-spelled words:"))
373,374c363,364
<         writeLines(c(sprintf("File '%s':", nms[i]),
<                      sprintf("  Line %s: \"%s\", \"%s\", \"%s\"",
---
>         writeLines(c(gettextf("File '%s':", nms[i]),
>                      gettextf("  Line %s: \"%s\", \"%s\", \"%s\"",
555,557c545
<     files <- Sys.glob(file.path(tools:::.R_top_srcdir_from_Rd(),
<                                 "src", "library", "*", "vignettes",
<                                 "*.Rnw"))
---
>     files <- Sys.glob(file.path(tools:::.R_top_srcdir_from_Rd(), "src", "library", "*", "vignettes", "*.Rnw"))
612,614c600
<             control <- c(control,
<                          sprintf("-p %s",
<                                  shQuote(file.path(dir, ".aspell", d))))
---
>             control <- c(control, sprintf("-p %s", shQuote(file.path(dir, ".aspell", d))))
1027c1013
< function(ifile, encoding, keep = c("Title", "Description"),
---
> function(ifile, encoding, keep = c(gettext("Title"), gettext("Description")),
1095,1096c1081
<         header <- sprintf("personal_ws-1.1 %s %d UTF-8",
<                           language, length(x))
---
>         header <- sprintf("personal_ws-1.1 %s %d UTF-8", language, length(x))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/browseVignettes.R R/src/library/utils/R/browseVignettes.R
40,42c40
<         message(gettextf("No vignettes found by %s",
<                          paste(deparse(attr(x, "call")), collapse=" ")),
<                 domain = NA)
---
>         message(gettextf("No vignettes found by %s", paste(deparse(attr(x, "call")), collapse=" ")), domain = "R-utils")
60,62c58
<                        sprintf("<a href='%s/%s'>%s</a>&nbsp;",
<                                prefix, pdf, toupper(pdfext)),
<                        ""),
---
>                        sprintf("<a href='%s/%s'>%s</a>&nbsp;", prefix, pdf, toupper(pdfext)), ""),
64,66c60
< 		ifelse(nzchar(rcode),
<                        sprintf("<a href='%s/%s'>R code</a>&nbsp;", prefix, rcode),
<                        ""))
---
> 		ifelse(nzchar(rcode), sprintf("<a href='%s/%s'>R code</a>&nbsp;", prefix, rcode), ""))
86,87c80
<     cat(sprintf("<h2>Vignettes found by <code><q>%s</q></code></h2>",
<                 paste(deparse(attr(x, "call")), collapse=" ")))
---
>     cat(sprintf("<h2>Vignettes found by <code><q>%s</q></code></h2>", paste(deparse(attr(x, "call")), collapse=" ")))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/bug.report.R R/src/library/utils/R/bug.report.R
39,42c39
<         writeLines(c("  Bug reports on R and the base packages need to be submitted",
<                      "  to the tracker at http://bugs.r-project.org/ .",
<                      "",
<                      "  We will now try to open that website in a browser"))
---
>         writeLines(gettext("  Bug reports on R and the base packages need to be submitted\n  to the tracker at http://bugs.r-project.org/ .\n\n  We will now try to open that website in a browser"))
58c55
<                       sQuote(package)), domain = NA)
---
>                       sQuote(package)), domain = "R-utils")
67,71c64
<         cat("\nThis package has a bug submission web page, which we will now attempt\n",
<             "to open.  The information above may be useful in your report. If the web\n",
<             "page doesn't work, you should send email to the maintainer,\n",
<             DESC$Maintainer, ".\n",
<             sep = "")
---
>         cat("\n", gettextf("This package has a bug submission web page, which we will now attempt to open. The information above may be useful in your report. If the web page doesn't work, you should send email to the maintainer, %s.", DESC$Maintainer), "\n", sep = "")
79,80c72,73
<     create.post(instructions = c("", "<<insert bug report here>>", rep("", 3)),
<                 description = "bug report",
---
>     create.post(instructions = c("", gettext("<<insert bug report here>>"), rep("", 3)),
>                 description = gettext("bug report"),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/changedFiles.R R/src/library/utils/R/changedFiles.R
24c24
< 	stop("'full.names' must be TRUE for multiple paths.")
---
> 	stop("'full.names' argument must be TRUE for multiple paths")
124,131c124,132
<     cat("File snapshot:\n path = ", x$path, 
<         "\n timestamp = ", x$timestamp, 
< 	"\n file.info = ", x$file.info, 
< 	"\n md5sum = ", x$md5sum, 
< 	"\n digest = ", deparse(x$digest, control = NULL),
< 	"\n full.names = ", x$full.names,
< 	"\n args = ", deparse(x$args, control = NULL), 
< 	"\n ", nrow(x$info), " files recorded.\n", sep="")
---
>     cat(sprintf(ngettext(nrow(x$info), "File snapshot:\n path = %s\n timestamp = %s\n file.info = %s\n md5sum = %s\n digest = %s\n full.names = %s\n args = %s\n %d file recorded.", "File snapshot:\n path = %s\n timestamp = %s\n file.info = %s\n md5sum = %s\n digest = %s\n full.names = %s\n args = %s\n %d files recorded.", domain = "R-utils"),
> 	 x$path, 
>         x$timestamp, 
> 	x$file.info, 
> 	x$md5sum, 
> 	deparse(x$digest, control = NULL),
> 	x$full.names,
> 	deparse(x$args, control = NULL), 
> 	nrow(x$info), domain = "R-utils"), "\n", sep = "")
134c135
< 	else cat("Files:", rownames(x$info), sep="\n ")
---
> 	else cat(gettext("Files:", domain = "R-utils"), rownames(x$info), sep = "\n ")
141c142
<     	cat("Files added:\n",  paste0("  ", x$added, collapse="\n"), "\n", sep="")
---
>     	cat(gettext("Files added:", domain = "R-utils"), "\n",  paste0("  ", x$added, collapse="\n"), "\n", sep = "")
143c144
<     	cat("Files deleted:\n",  paste0("  ", x$deleted, collapse="\n"), "\n", sep="")
---
>     	cat(gettext("Files deleted:", domain = "R-utils"), "\n",  paste0("  ", x$deleted, collapse="\n"), "\n", sep = "")
150c151
<         cat("File changes:\n")
---
>         cat(gettext("File changes:", domain = "R-utils"), "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/citation.R R/src/library/utils/R/citation.R
40,42c40
<                          paste(names(args)[!args_length_ok],
<                                collapse = ", ")),
<                 domain = NA)
---
>                          paste(names(args)[!args_length_ok], collapse = ", ")), domain = "R-utils")
57,60c55
<                 stop(gettextf("Use either %s or %s/%s but not both.",
<                               sQuote("given"),
<                               sQuote("first"), sQuote("middle")),
<                      domain = NA)
---
>                 stop(gettextf("Use either %s or %s but not both", sQuote("given"), paste(sQuote("first"), sQuote("middle"), sep = "/", collapse = "")), domain = "R-utils")
63,65c58
<             message(gettextf("It is recommended to use %s instead of %s.",
<                              sQuote("given"), sQuote("first")),
<                     domain = NA)
---
>             message(gettextf("It is recommended to use %s instead of %s", sQuote("given"), sQuote("first")), domain = "R-utils")
72,74c65
<             message(gettextf("It is recommended to use %s instead of %s.",
<                              sQuote("given"), sQuote("middle")),
<                     domain = NA)
---
>             message(gettextf("It is recommended to use %s instead of %s", sQuote("given"), sQuote("middle")), domain = "R-utils")
81,83c72
<                 stop(gettextf("Use either %s or %s but not both.",
<                               sQuote("family"), sQuote("last")),
<                      domain = NA)
---
>                 stop(gettextf("Use either %s or %s but not both", sQuote("family"), sQuote("last")), domain = "R-utils")
86,88c75
<             message(gettextf("It is recommended to use %s instead of %s.",
<                              sQuote("family"), sQuote("last")),
<                     domain = NA)
---
>             message(gettextf("It is recommended to use %s instead of %s", sQuote("family"), sQuote("last")), domain = "R-utils")
100,101c87,88
<                                          "Invalid role specification: %s.",
<                                          "Invalid role specifications: %s."),
---
>                                          "Invalid role specification: %s",
>                                          "Invalid role specifications: %s", domain = "R-utils"),
163,164c150,151
<                                      "Invalid role specification: %s.",
<                                      "Invalid role specifications: %s."),
---
>                                      "Invalid role specification: %s",
>                                      "Invalid role specifications: %s", domain = "R-utils"),
198,199c185
<                       c("given", "family", "role", "email", "comment",
<                         "first", "last", "middle")) # for now ...
---
>                       c("given", "family", "role", "email", "comment", "first", "last", "middle")) # for now ...
204,207c190,193
<         message(gettextf("It is recommended to use %s/%s instead of %s/%s/%s.",
<                          sQuote("given"), sQuote("family"),
<                          sQuote("first"), sQuote("middle"), sQuote("last")),
<                 domain = NA)
---
>         message(gettextf("It is recommended to use %s instead of %s",
>                          paste(sQuote("given"), sQuote("family"), sep = "/", collapse = ""),
>                          paste(sQuote("first"), sQuote("middle"), sQuote("last"), sep = "/", collapse = "")),
>                 domain = "R-utils")
256,258c242
<         warning(gettextf("method is only applicable to %s objects",
<                          sQuote("person")),
<                 domain = NA)
---
>         warning(gettextf("method is only applicable to %s objects", sQuote("person")), domain = "R-utils")
349,351c333
<         stop(gettextf("all arguments must be of class %s",
<                       dQuote("person")),
<              domain = NA)
---
>         stop(gettextf("all arguments must be of class %s", dQuote("person")), domain = "R-utils")
459,461c441,442
<                          paste(names(args)[!args_length_ok],
<                                collapse = ", ")),
<                 domain = NA)
---
>                          paste(names(args)[!args_length_ok], collapse = ", ")),
>                 domain = "R-utils")
467,469c448,449
<                          paste(names(other)[!other_length_ok],
<                                collapse = ", ")),
<                 domain = NA)
---
>                          paste(names(other)[!other_length_ok], collapse = ", ")),
>                 domain = "R-utils")
480,483c460
<             stop(gettextf("%s has to be one of %s",
<                           sQuote("bibtype"),
<                           paste(BibTeX_names, collapse = ", ")),
<                  domain = NA)
---
>             stop(gettextf("%s has to be one of %s", sQuote("bibtype"), paste(BibTeX_names, collapse = ", ")), domain = "R-utils")
548c525
<                                   "A bibentry of bibtype %s has to specify the fields: %s"),
---
>                                   "A bibentry of bibtype %s has to specify the fields: %s", domain = "R-utils"),
605,609c582
<         stop(gettextf("%s should be one of %s",
<                       sQuote("style"),
<                       paste(dQuote(bibentry_format_styles),
<                             collapse = ", ")),
<              domain = NA)
---
>         stop(gettextf("%s should be one of %s", sQuote("style"), paste(dQuote(bibentry_format_styles), collapse = ", ")), domain = "R-utils")
657,658c630
<                           c(gettext("\nA BibTeX entry for LaTeX users is\n"),
< 			    paste0("  ", unclass(toBibtex(y))))
---
>                           c(gettextf("\nA BibTeX entry for LaTeX users is\n%s", paste0("  ", unclass(toBibtex(y)))))
731,733c703
<                 warning(gettextf("Dropping invalid entry %d:\n%s",
<                                  pc[b],
<                                  conditionMessage(status[[b]])))
---
>                 warning(gettextf("Dropping invalid entry %d:\n%s", pc[b], conditionMessage(status[[b]])))
920,923c890
<             stop(gettextf("%s has to be one of %s",
<                           sQuote("bibtype"),
<                           paste(BibTeX_names, collapse = ", ")),
<                  domain = NA)
---
>             stop(gettextf("%s has to be one of %s", sQuote("bibtype"), paste(BibTeX_names, collapse = ", ")), domain = "R-utils")
954,956c921
<         warning(gettextf("method is only applicable to %s objects",
<                          sQuote("bibentry")),
<                 domain = NA)
---
>         warning(gettextf("method is only applicable to %s objects", sQuote("bibentry")), domain = "R-utils")
1104c1069
<                  domain = NA)
---
>                  domain = "R-utils")
1123c1088
< 	    paste0("The ", sQuote(package), " package is part of R.  ",
---
> 	    paste0(gettextf("The %s package is part of R.", sQuote(package), domain = "R-utils"), "  ",
1133,1135c1098
<             warning(gettextf("no date field in DESCRIPTION file of package %s",
<                              sQuote(package)),
<                     domain = NA)
---
>             warning(gettextf("no date field in DESCRIPTION file of package %s", sQuote(package)), domain = "R-utils")
1138,1140c1101
<             warning(gettextf("could not determine year for %s from package DESCRIPTION file",
<                              sQuote(package)),
<                     domain = NA)
---
>             warning(gettextf("could not determine year for %s from package DESCRIPTION file", sQuote(package)), domain = "R-utils")
1183,1184c1144
<         gettextf("To cite package %s in publications use:",
<                  sQuote(package))
---
>         gettextf("To cite package %s in publications use:", sQuote(package))
1306,1307c1266
<         header <- paste(strwrap(header, indent = 0L, exdent = 2L),
<                         collapse = "\n")
---
>         header <- paste(strwrap(header, indent = 0L, exdent = 2L), collapse = "\n")
1311,1312c1270
<         footer <- paste(strwrap(footer, indent = 2L, exdent = 2L),
<                         collapse = "\n")
---
>         footer <- paste(strwrap(footer, indent = 2L, exdent = 2L), collapse = "\n")
1330,1331c1288
<     paste(format(x, include = c("given", "family", "email")),
<           collapse = ",\n  ")
---
>     paste(format(x, include = c("given", "family", "email")), collapse = ",\n  ")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/combn.R R/src/library/utils/R/combn.R
49c49
< 	stop("'FUN' must be a function or NULL")
---
> 	stop("'FUN' argument must be a function or NULL")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/completion.R R/src/library/utils/R/completion.R
282,283c282
<             suppressWarnings(gregexpr("['\"]", linebuffer,
<                                       perl = TRUE))[[1L]]
---
>             suppressWarnings(gregexpr("['\"]", linebuffer, perl = TRUE))[[1L]]
288,290c287
<             suppressWarnings(gregexpr("[^\\.\\w:?$@[\\]]+",
<                                       linebuffer,
<                                       perl = TRUE))[[1L]]
---
>             suppressWarnings(gregexpr("[^\\.\\w:?$@[\\]]+", linebuffer, perl = TRUE))[[1L]]
755c752
<                                data()$results[, "Item"])
---
>                                data()$results[, 3L])
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/data.R R/src/library/utils/R/data.R
36c36
<             stop("'package' must be a character string or NULL")
---
>             stop("'package' argument must be a character string or NULL")
85,87c85
<                     warning(gettextf("data index for package %s is invalid and will be ignored",
<                                      sQuote(packageName)),
<                             domain=NA, call.=FALSE)
---
>                     warning(gettextf("data index for package %s is invalid and will be ignored", sQuote(packageName)), domain = "R-utils", call.=FALSE)
90,101c88,97
<         colnames(db) <- c("Package", "LibPath", "Item", "Title")
< 
<         footer <- if(missing(package))
<             paste0("Use ",
<                    sQuote(paste("data(package =",
<                                 ".packages(all.available = TRUE))")),
<                    "\n",
<                    "to list the data sets in all *available* packages.")
<         else
<             NULL
<         y <- list(title = "Data sets", header = NULL, results = db,
<                   footer = footer)
---
> 	#data() powoduje wyswietlenie komunikatu: Błąd w db[, "Package"]: indeks poza granicami
>         colnames(db) <- c(gettext("Package", domain = "R-utils"), gettext("LibPath", domain = "R-utils"), gettext("Item", domain = "R-utils"), gettext("Title", domain = "R-utils"))
>         #colnames(db) <- c("Package", "LibPath", "Item", "Title")
> 
>         if(missing(package)) {
>          footer <- gettextf("Use %s\nto list the data sets in all *available* packages.", sQuote("data(package = .packages(all.available = TRUE))"), domain = "R-utils")
>         } else {
>          footer <- NULL
> 	}
>         y <- list(title = gettext("Data sets", domain = "R-utils"), header = NULL, results = db, footer = footer)
117,118c113
<                         message(sprintf("name=%s:\t found in Rdata.rds", name),
<                                 domain=NA)
---
>                         message(gettextf("name=%s: found in Rdata.rds", name, domain = "R-utils"), domain = NA)
127,129c122,123
< 		    message(sprintf("name=%s:\t NOT found in names() of Rdata.rds, i.e.,\n\t%s\n",
< 				    name, paste(names(rds), collapse=",")),
< 				domain=NA)
---
> 		    message(gettextf("name=%s: NOT found in names() of Rdata.rds, i.e.,\n\t%s",
> 				    name, paste(names(rds), collapse = ",")), domain = "R-utils", "\n", sep = "")
133,136c127
<                 warning("zipped data found for package ",
<                         sQuote(basename(dirname(p))),
<                         ".\nThat is defunct, so please re-install the package.",
<                         domain = NA)
---
>                 warning(gettextf("zipped data found for package %s.\nThat is defunct, so please re-install the package.", sQuote(basename(dirname(p)))), domain = "R-utils")
140c131
<                     warning(gettextf("file 'filelist' is missing for directory %s", sQuote(p)), domain = NA)
---
>                     warning(gettextf("file 'filelist' is missing for directory %s", sQuote(p)), domain = "R-utils")
159,161c150
<                         message("name=", name, ":\t file= ...",
<                                 .Platform$file.sep, basename(file), "::\t",
<                                 appendLF = FALSE, domain = NA)
---
>                         message(gettextf("name=%s:\t file= ... %s::\t%s", name, .Platform$file.sep, basename(file)), appendLF = FALSE, domain = "R-utils")
182,183c171
<                                    sys.source(zfile, chdir = TRUE,
<                                               envir = envir)
---
>                                    sys.source(zfile, chdir = TRUE, envir = envir)
205c193
<                 if(verbose) message(if(!found) "*NOT* ", "found", domain = NA)
---
>                 if(verbose) message(if(!found) gettext("data *NOT* found") else gettext("data found"), domain = "R-utils")
211,212c199
<             warning(gettextf("data set %s not found", sQuote(name)),
<                     domain = NA)
---
>             warning(gettextf("data set %s not found", sQuote(name)), domain = "R-utils")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/databrowser.R R/src/library/utils/R/databrowser.R
32c32
< 	cat("Empty environment, nothing to do!\n")
---
> 	cat(gettext("Empty environment, nothing to do!", domain = "R-utils"), "\n", sep = "")
169c169
< 	main <- paste("R objects in", deparse(substitute(envir)))
---
> 	main <- paste(gettextf("R objects in %s", paste(deparse(substitute(envir)), collapse = ""), domain = "R-utils"))
191c191
< 		      main = "R Workspace", properties = list(),
---
> 		      main = gettext("R Workspace", domain = "R-utils"), properties = list(),
195c195
<         stop(gettextf("kind '%s' not yet implemented", kind), domain = NA)
---
>         stop(gettextf("kind '%s' not yet implemented", kind), domain = "R-utils")
265,266c265,268
<     cat(main, "environment is shown in browser",
< 	if(is.character(browser)) sQuote(browser),"\n")
---
>     if(is.character(browser))
>      cat(gettextf("%s environment is shown in browser %s", main, sQuote(browser), domain = "R-utils"),"\n", sep = "")
>     else
>      cat(gettextf("%s environment is shown in browser", main, domain = "R-utils"), "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/de.R R/src/library/utils/R/de.R
30c30
< 		if( !is.vector(telt2) ) stop("wrong argument to 'dataentry'")
---
> 		if( !is.vector(telt2) ) stop("wrong argument passed to 'dataentry'")
38c38
< 	else stop("wrong argument to 'dataentry'")
---
> 	else stop("wrong argument passed to 'dataentry'")
78c78
< 	else stop("wrong argument to 'dataentry'")
---
> 	else stop("wrong argument passed to 'dataentry'")
148c148
< 		warning("'modes' argument ignored")
---
> 		warning(gettextf("'%s' argument ignored", "modes"))
164c164
< 		warning("'names' argument ignored")
---
> 		warning(gettextf("'%s' argument ignored", "names"))
168c168
< 		warning("'modes' argument ignored")
---
> 		warning(gettextf("'%s' argument ignored", "modes"))
191c191
<     if(j == 1L) warning("did not assign() anything")
---
>     if(j == 1L) warning("did not assign anything")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/debugger.R R/src/library/utils/R/debugger.R
42,43c42
<         cat(gettext("Browsing in the environment with call:\n   "),
<             calls[.selection], "\n", sep = "")
---
>         cat(gettext("Browsing in the environment with call:", domain = "R-utils"), "\n   ", calls[.selection], "\n", sep = "")
48,49c47
<         cat(gettextf("'dump' is not an object of class %s\n",
<                      dQuote("dump.frames")))
---
>         cat(gettextf("'%s' argument is not an object of class %s", "dump", dQuote("dump.frames"), domain = "R-utils"), "\n", sep = "")
55c53
<         cat(gettext("Message: "), msg)
---
>         cat(gettext("Message: ", domain = "R-utils"), msg)
58c56
< 	cat(gettextf("'dump' is empty\n"))
---
> 	cat(gettextf("'dump' is empty", domain = "R-utils"), "\n", sep = "")
63c61
<         cat(gettext("Available environments had calls:\n"))
---
>         cat(gettext("Available environments had calls:", domain = "R-utils"), "\n", sep = "")
65c63
<         cat(gettext("\nEnter an environment number, or 0 to exit  "))
---
>         cat("\n", gettext("Enter an environment number, or 0 to exit  ", domain = "R-utils"), sep = "")
131c129
<             cat(gettext("recover called non-interactively; frames dumped, use debugger() to view\n"))
---
>             cat(gettext("recover called non-interactively; frames dumped, use debugger() to view", domain = "R-utils"), "\n", sep = "")
138,139c136
<             which <- menu(calls,
<                           title="\nEnter a frame number, or 0 to exit  ")
---
>             which <- menu(calls, title=gettext("\nEnter a frame number, or 0 to exit  ", domain = "R-utils"))
141,142c138
<                 eval(substitute(browser(skipCalls=skip),
<                                 list(skip=7-which)), envir = sys.frame(which))
---
>                 eval(substitute(browser(skipCalls=skip), list(skip=7-which)), envir = sys.frame(which))
148c144
<         cat(gettext("No suitable frames for recover()\n"))
---
>         cat(gettext("No suitable frames for recover()", domain = "R-utils"), "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/demo.R R/src/library/utils/R/demo.R
49c49
< 	colnames(db) <- c("Package", "LibPath", "Item", "Title")
---
> 	colnames(db) <- c(gettext("Package", domain = "R-utils"), gettext("LibPath", domain = "R-utils"), gettext("Item", domain = "R-utils"), gettext("Title", domain = "R-utils"))
51,60c51,56
< 	footer <- if(missing(package))
< 	    paste0("Use ",
<                    sQuote(paste("demo(package =",
<                                 ".packages(all.available = TRUE))")),
<                    "\n",
<                    "to list the demos in all *available* packages.")
< 	else
< 	    NULL
< 	y <- list(title = "Demos", header = NULL, results = db,
< 		  footer = footer)
---
> 	if(missing(package)) {
> 	   footer <- gettextf("Use: %s to list the demos in all *available* packages.", sQuote("demo(package = .packages(all.available = TRUE))"), domain = "R-utils")
> 	} else {
> 	footer <- NULL
> 	}
> 	y <- list(title = gettext("Demos"), header = NULL, results = db, footer = footer)
84c80
< 	stop(gettextf("No demo found for topic %s", sQuote(topic)), domain = NA)
---
> 	stop(gettextf("No demo found for topic %s", sQuote(topic)), domain = "R-utils")
87,88c83
< 	warning(gettextf("Demo for topic %s' found more than once,\nusing the one found in %s",
<                 sQuote(topic), sQuote(dirname(available[1L]))), domain = NA)
---
> 	warning(gettextf("Demo for topic %s' found more than once,\nusing the one found in %s", sQuote(topic), sQuote(dirname(available[1L]))), domain = "R-utils")
118c113
< 	    readline("\nType  <Return>	 to start : ")
---
> 	    readline(paste("\n", gettext("Type  <Return> to start:"), " ", sep = ""))
120,121c115
<     source(available, echo = echo, max.deparse.length = Inf,
<            keep.source = TRUE, encoding = encoding)
---
>     source(available, echo = echo, max.deparse.length = Inf, keep.source = TRUE, encoding = encoding)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/edit.R R/src/library/utils/R/edit.R
28c28
<                 stop("X11 library is missing: install XQuartz from xquartz.macosforge.org", domain = NA)
---
>                 stop("X11 library is missing: install XQuartz from xquartz.macosforge.org", domain = "R-utils")
36c36
<     msg <- "dataentry() should not be used in examples etc"
---
>     msg <- gettextf("'%s' function should not be used in examples etc", "dataentry()", domain = "R-utils")
43c43
<         stop("invalid 'data' argument")
---
>         stop(gettextf("invalid '%s' argument", "data"))
46c46
<         stop("invalid 'modes' argument")
---
>         stop(gettextf("invalid '%s' argument", "modes"))
54c54
<     msg <- "View() should not be used in examples etc"
---
>     msg <- gettextf("'%s' function should not be used in examples etc", "View()", domain = "R-utils")
74c74
<         stop("invalid 'x' argument")
---
>         stop(gettextf("invalid '%s' argument", "x"))
132c132
<                                     "classes discarded from columns %s"),
---
>                                     "classes discarded from columns %s", domain = "R-utils"),
168c168
<                         domain = NA)
---
>                         domain = "R-utils")
177c177
<                         domain = NA)
---
>                         domain = "R-utils")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/example.R R/src/library/utils/R/example.R
36c36
< 	warning(gettextf("no help found for %s", sQuote(topic)), domain = NA)
---
> 	warning(gettextf("no help found for %s", sQuote(topic)), domain = "R-utils")
47,48c47
<         warning(gettextf("%s has a help file but no examples", sQuote(topic)),
<                 domain = NA)
---
>         warning(gettextf("%s has a help file but no examples", sQuote(topic)), domain = "R-utils")
60,61c59
< 	    on.exit(assign(".Random.seed", oldSeed, envir = .GlobalEnv),
<                     add = TRUE)
---
> 	    on.exit(assign(".Random.seed", oldSeed, envir = .GlobalEnv), add = TRUE)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/findLineNum.R R/src/library/utils/R/findLineNum.R
174c174
<     if (!length(x)) cat("No source refs found.\n")
---
>     if (!length(x)) cat(gettext("No source refs found.", domain = "R-utils"), "\n", sep = "")
184,187c184,193
<         cat(" ", x[[i]]$name, if (steps) paste(" step ", paste(x[[i]]$at, collapse=",")) else "", sep = "")
<         if (!is.null(x[[i]]$signature))
<             cat(" signature ", paste(x[[i]]$signature, collapse=","), sep = "")
<         cat(" in ", format(x[[i]]$env), "\n", sep = "")
---
> 
> 	if(steps && !is.null(x[[i]]$signature))
> 	 cat(gettextf(" %s step %s signature %s in %s", x[[i]]$name, paste(x[[i]]$at, collapse=","), paste(x[[i]]$signature, collapse=","), format(x[[i]]$env)))
> 	else if(steps && is.null(x[[i]]$signature))
> 	 cat(gettextf(" %s step %s in %s", x[[i]]$name, paste(x[[i]]$at, collapse=","), format(x[[i]]$env)))
> 	else if(!steps && !is.null(x[[i]]$signature))
> 	 cat(gettextf(" %s signature %s in %s", x[[i]]$name, paste(x[[i]]$signature, collapse=","), format(x[[i]]$env)))
> 	else if(!steps && is.null(x[[i]]$signature))
> 	 cat(gettextf(" %s in %s", x[[i]]$name, format(x[[i]]$env)))
> 	cat("\n")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/fix.R R/src/library/utils/R/fix.R
25c25
<         stop("'fix' requires a name")
---
>         stop(gettextf("'%s' function requires a name", "fix"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/format.R R/src/library/utils/R/format.R
44,45c44
<             stop(gettextf("too many list items (at most up to %d)", 26L),
<                  domain = NA)
---
>             stop(gettextf("too many list items (at most up to %d)", 26L), domain = "R-utils")
53,54c52
<             stop(gettextf("too many list items (at most up to %d)", 3899L),
<                  domain = NA)
---
>             stop(gettextf("too many list items (at most up to %d)", 3899L), domain = "R-utils")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/help.R R/src/library/utils/R/help.R
109,112c109
<         writeLines(c(gettextf("No documentation for %s in specified packages and libraries:",
<                               sQuote(topic)),
<                      gettextf("you could try %s",
<                               sQuote(paste0("??", topic)))))
---
>         writeLines(gettextf("No documentation for %s in specified packages and libraries.\nYou could try %s", sQuote(topic), sQuote(paste0("??", topic)), domain = "R-utils"))
121,122c118
<         msg <- gettextf("Help for topic %s is not in any loaded package but can be found in the following packages:",
<                         sQuote(topic))
---
>         msg <- gettextf("Help for topic %s is not in any loaded package but can be found in the following packages:", sQuote(topic))
156,157c152
< 		browseURL(paste0("http://127.0.0.1:", tools:::httpdPort,
<                                  "/library/NULL/help/", topic), browser)
---
> 		browseURL(paste0("http://127.0.0.1:", tools:::httpdPort, "/library/NULL/help/", topic), browser)
162,163c157
<             msg <- gettextf("Help on topic %s was found in the following packages:",
<                             sQuote(topic))
---
>             msg <- gettextf("Help on topic %s was found in the following packages:", sQuote(topic), domain = "R-utils")
266c260
<         stop(gettextf("invalid %s argument", sQuote("file")), domain = NA)
---
>         stop(gettextf("invalid '%s' argument", "file"), domain = "R-utils")
270c264
<         stop(gettextf("package %s exists but was not installed under R >= 2.10.0 so help cannot be accessed", sQuote(pkgname)), domain = NA)
---
>         stop(gettextf("package %s exists but was not installed under R >= 2.10.0 so help cannot be accessed", sQuote(pkgname)), domain = "R-utils")
284c278
<         stop(gettextf("creation of %s failed", sQuote(ofile2)), domain = NA)
---
>         stop(gettextf("creation of %s failed", sQuote(ofile2)), domain = "R-utils")
287,288c281
<         message(gettextf("Saving help page to %s", sQuote(basename(ofile2))),
<                 domain = NA)
---
>         message(gettextf("Saving help page to %s", sQuote(basename(ofile2))), domain = "R-utils")
290c283
<         message(gettextf("Saving help page to %s", sQuote(ofile)), domain = NA)
---
>         message(gettextf("Saving help page to %s", sQuote(ofile)), domain = "R-utils")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/history.R R/src/library/utils/R/history.R
40c40
<     file.show(file2, title = "R History", delete.file = TRUE)
---
>     file.show(file2, title = gettext("R History", domain = "R-utils"), delete.file = TRUE)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/indices.R R/src/library/utils/R/indices.R
54c54
<         warning(gettextf("no package '%s' was found", pkg), domain = NA)
---
>         warning(gettextf("no package '%s' was found", pkg), domain = "R-utils")
65,66c65
<             stop(gettextf("metadata of package '%s' is corrupt", pkg),
<                  domain = NA)
---
>             stop(gettextf("metadata of package '%s' is corrupt", pkg), domain = "R-utils")
71,72c70
<             stop(gettextf("DESCRIPTION file of package '%s' is corrupt", pkg),
<                  domain = NA)
---
>             stop(gettextf("DESCRIPTION file of package '%s' is corrupt", pkg), domain = "R-utils")
98c96
<         warning(gettextf("DESCRIPTION file of package '%s' is missing or broken", pkg), domain = NA)
---
>         warning(gettextf("DESCRIPTION file of package '%s' is missing or broken", pkg), domain = "R-utils")
146c144
<                                                fields = "Version"))
---
>                                                fields = gettext("Version")))
148c146
<     stop(gettextf("package %s not found", sQuote(pkg)), domain = NA)
---
>     stop(gettextf("package %s not found", sQuote(pkg), domain = "R-utils"), domain = NA)
181,183c179,180
<         lapply(split(1 : nrow(db), db[, "Package"]),
<                function(ind) db[ind, c("Item", "Title"),
<                                 drop = FALSE])
---
>         lapply(split(1 : nrow(db), db[, 1L]),
>                function(ind) db[ind, 3L:4L, drop = FALSE])
188,193c185,189
<         writeLines(paste0(ifelse(first, "", "\n"), x$title,
<                           " in package ", sQuote(pkg), ":\n"),
<                    outConn)
<         writeLines(formatDL(out[[pkg]][, "Item"],
<                             out[[pkg]][, "Title"]),
<                    outConn)
---
> 	if(first)
>         writeLines(paste(gettextf("%s in package %s:", x$title, sQuote(pkg), domain = "R-utils"), "\n", sep = ""), outConn)
> 	else
>         writeLines(paste("\n", gettextf("%s in package %s:", x$title, sQuote(pkg), domain = "R-utils"), "\n", sep = ""), outConn)
>         writeLines(formatDL(out[[pkg]][, 1L], out[[pkg]][, 2L]), outConn)
199c195
<         writeLines(paste("no", tolower(x$title), "found"))
---
>         writeLines(gettextf("no %s found", tolower(x$title)))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/linkhtml.R R/src/library/utils/R/linkhtml.R
59c59
<         message("Making 'packages.html' ...", appendLF = FALSE, domain = NA)
---
>         message("Making 'packages.html' ...", appendLF = FALSE, domain = "R-utils")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/menu.R R/src/library/utils/R/menu.R
21c21
<     if(!interactive()) stop("menu() cannot be used non-interactively")
---
>     if(!interactive()) stop("'menu()' function cannot be used non-interactively")
48c48
< 	cat(gettext("Enter an item from the menu, or 0 to exit\n"))
---
> 	cat(gettext("Enter an item from the menu, or 0 to exit", domain = "R-utils"), "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/news.R R/src/library/utils/R/news.R
56,58c56
<     pos <- regexpr(sprintf("^%s",
<                            .standard_regexps()$valid_numeric_version),
<                    version)
---
>     pos <- regexpr(sprintf("^%s", .standard_regexps()$valid_numeric_version), version)
111,115c109,118
<             vheaders <-
<                 sprintf("Changes in %s%s:",
<                         vstrings,
<                         ifelse(is.na(dates), "",
<                                sprintf(" (%s)", dates)))
---
> #            vheaders <-
> #                sprintf("Changes in %s%s:",
> #                        vstrings,
> #                        ifelse(is.na(dates), "",
> #                               sprintf(" (%s)", dates)))
> 	 if(is.na(dates)) {
> 	  vheaders <- gettextf("Changes in %s:", vstrings, domain = "R-utils")
> 	 } else {
> 	  vheaders <- gettextf("Changes in %s (%s):", vstrings, dates, domain = "R-utils")
> 	 }
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/objects.R R/src/library/utils/R/objects.R
39,41c39
< 	    warning(gettextf(
< 	"'%s' is a formal generic function; S3 methods will not likely be found",
< 			     fname), domain = NA)
---
> 	    warning(gettextf("%s is a formal generic function; S3 methods will not likely be found", sQuote(fname)), domain = "R-utils")
108,109c106
<             stop(gettextf("no function '%s' is visible", generic.function),
<                  domain = NA)
---
>             stop(gettextf("no function '%s' is visible", generic.function), domain = "R-utils")
113,114c110
<                 warning(gettextf("function '%s' appears not to be generic",
<                                  generic.function), domain = NA)
---
>                 warning(gettextf("function '%s' appears not to be generic", generic.function), domain = "R-utils")
116,117c112
<                 warning(gettextf("generic function '%s' dispatches methods for generic '%s'",
<                         generic.function, truegf), domain = NA)
---
>                 warning(gettextf("generic function '%s' dispatches methods for generic '%s'", generic.function, truegf), domain = "R-utils")
149,150c144
<                               paste("registered S3method for",
<                                     generic.function))
---
>                               gettextf("registered S3method for %s", generic.function, domain = "R-utils"))
187c181
<             info <- rbindSome(info, S3reg, msg = "registered S3method")
---
>             info <- rbindSome(info, S3reg, msg = gettext("registered S3method", domain = "R-utils"))
189c183
<     else stop("must supply 'generic.function' or 'class'")
---
>     else stop("must supply 'generic.function' or 'class' argument")
205,207c199,200
<             cat("\n", "   ",
<                 "Non-visible functions are asterisked", "\n", sep = "")
<     } else cat("no methods were found\n")
---
>             cat("\n   ", gettext("Non-visible functions are asterisked", domain = "R-utils"), "\n", sep = "")
>     } else cat(gettext("no methods were found", domain = "R-utils"), "\n", sep = "")
220c213
<             else stop(gettextf("no function '%s' could be found", f), domain = NA)
---
>             else stop(gettextf("no function '%s' could be found", f), domain = "R-utils")
240,241c233
<     if(optional) NULL else stop(gettextf("S3 method '%s' not found", method),
<                                 domain = NA)
---
>     if(optional) NULL else stop(gettextf("S3 method '%s' not found", method), domain = "R-utils")
307,308c299
<             stop("locked binding of ", sQuote(x), " cannot be changed",
<                  domain = NA)
---
>             stop(gettextf("locked binding of %s cannot be changed", sQuote(x), domain = "R-utils"), domain = "R-utils")
315,317c306
<                 msg <-
<                     gettextf("changing locked binding for %s in %s whilst loading %s",
<                              sQuote(x), sQuote(ns_name), sQuote(in_load))
---
>                 msg <- gettextf("changing locked binding for %s in %s whilst loading %s", sQuote(x), sQuote(ns_name), sQuote(in_load))
319c308
<                     warning(msg, call. = FALSE, domain = NA, immediate. = TRUE)
---
>                     warning(msg, call. = FALSE, domain = "R-utils", immediate. = TRUE)
323,325c312,313
<             warning(gettextf("changing locked binding for %s in %s",
<                              sQuote(x), sQuote(ns_name)),
<                     call. = FALSE, domain = NA, immediate. = TRUE)
---
>             warning(gettextf("changing locked binding for %s in %s", sQuote(x), sQuote(ns_name)),
>                     call. = FALSE, domain = "R-utils", immediate. = TRUE)
364c352
<         stop("'fixInNamespace' requires a name")
---
>         stop(gettextf("'%s' function requires a name", "fixInNamespace"))
404d391
<                 msg <- paste("registered S3 method for", gen)
406c393,395
<                     msg <- paste(msg, "from namespace", nmev)
---
>                     msg <- gettextf("registered S3 method for %s from namespace %s", gen, nmev)
> 		else
>                     msg <- gettextf("registered S3 method for %s", gen)
442c431
<         cat("no object named", sQuote(x$name), "was found\n")
---
>         cat(gettextf("no object named %s was found", sQuote(x$name), domain = "R-utils"), "\n", sep = "")
444,447c433,436
<         cat("A single object matching", sQuote(x$name), "was found\n")
<         cat("It was found in the following places\n")
< 	cat(paste0("  ", x$where), sep="\n")
<         cat("with value\n\n")
---
>         cat(gettextf("A single object matching %s was found", sQuote(x$name), domain = "R-utils"), "\n", sep = "")
>         cat(gettextf("It was found in the following places\n%s\nwith value:", paste0("  ", x$where, collapse = "\n"), domain = "R-utils"))
> #	cat(paste0("  ", x$where, collapse = "\n"), sep="\n")
>         cat("\n\n")
450,452c439,440
<         cat(n, "differing objects matching", sQuote(x$name),
<             "were found\n")
<         cat("in the following places\n")
---
>         cat(sprintf(ngettext(n, "%d differing object matching %s was found\nin the following places:",
> 		"%d differing objects matching %s were found\nin the following places:", domain = "R-utils"), n, sQuote(x$name)), "\n", sep = "")
454c442
<         cat("Use [] to view one of them\n")
---
>         cat(gettextf("Use [] to view one of them", domain = "R-utils"), "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/packageStatus.R R/src/library/utils/R/packageStatus.R
107c107
<     cat("\nInstalled packages:\n")
---
>     cat("\n", gettext("Installed packages:", domain = "R-utils"), "\n", sep = "")
110c110
<         cat("\n*** Library ", names(x$Libs)[k], "\n", sep = "")
---
>         cat("\n*** ", gettextf("Library %s", names(x$Libs)[k], domain = "R-utils"), "\n", sep = "")
113c113
<     cat("\n\nAvailable packages:\n")
---
>     cat("\n\n", gettext("Available packages:", domain = "R-utils"), "\n", sep = "")
115c115
<     cat("(each package appears only once)\n")
---
>     cat(gettext("(each package appears only once)", domain = "R-utils"), "\n", sep = "")
117c117
<         cat("\n*** Repository ", names(x$Repos)[k], "\n", sep = "")
---
>         cat("\n*** ", gettextf("Repository %s", names(x$Repos)[k], domain = "R-utils"), "\n", sep = "")
125c125
<     cat("Number of installed packages:\n")
---
>     cat(gettext("Number of installed packages:", domain = "R-utils"), "\n", sep = "")
128c128
<     cat("\nNumber of available packages (each package counted only once):\n")
---
>     cat("\n", gettext("Number of available packages (each package counted only once):", domain = "R-utils"), "\n", sep = "")
150c150
<         cat("Nothing to do!\n")
---
>         cat(gettext("Nothing to do!", domain = "R-utils"), "\n", sep = "")
169c169
<             answer <- substr(readline("Update (y/N/x)?  "), 1L, 1L)
---
>             answer <- substr(readline(gettext("Update (y/N/x)?  ", domain = "R-utils")), 1L, 1L)
171c171
<                 cat("cancelled by user\n")
---
>                 cat(gettext("cancelled by user", domain = "R-utils"), "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/packages.R R/src/library/utils/R/packages.R
83c83
< 				call. = FALSE, immediate. = TRUE, domain = NA)
---
> 				call. = FALSE, immediate. = TRUE, domain = "R-utils")
137c137
<             stop("invalid 'filters' argument.")
---
>             stop(gettextf("invalid '%s' argument", "filters"))
353,354c353,354
< 		    warning(sprintf("package '%s' in library '%s' will not be updated",
< 				    oldPkgs[pkg], oldPkgs[pkg, 2]),
---
> 		    warning(gettextf("package %s in library %s will not be updated",
> 				    sQuote(oldPkgs[pkg]), sQuote(oldPkgs[pkg, 2])),
458c458
<                       lib.loc), domain = NA)
---
>                       lib.loc), domain = "R-utils")
529c529
<                         domain = NA)
---
>                         domain = "R-utils")
536c536
<                                      sQuote(pkgpath)), domain = NA)
---
>                                      sQuote(pkgpath)), domain = "R-utils")
555c555
<             stop("'priority' must be character or NULL")
---
>             stop(gettextf("'%s' argument must be character or NULL", "priority"))
638c638
<                                  "Removing packages from %s\n(as %s is unspecified)"),
---
>                                  "Removing packages from %s\n(as %s is unspecified)", domain = "R-utils"),
668c668
<                     domain = NA, immediate. = TRUE)
---
>                     domain = "R-utils", immediate. = TRUE)
706c706
<                             domain = NA, immediate. = TRUE)
---
>                             domain = "R-utils", immediate. = TRUE)
716c716
<                             domain = NA, immediate. = TRUE)
---
>                             domain = "R-utils", immediate. = TRUE)
731,732c731
<         cat(gettext("--- Please select a CRAN mirror for use in this session ---"),
<             "\n", sep = "")
---
>         cat(gettext("--- Please select a CRAN mirror for use in this session ---", domain = "R-utils"), "\n", sep = "")
742c741
<     if("@CRAN@" %in% repos) stop("trying to use CRAN without setting a mirror")
---
>     if("@CRAN@" %in% repos) stop("trying to use CRAN without setting a mirror", domain = "R-utils")
968c967
<         stop(gettextf("%s must be supplied", sQuote("available")), domain = NA)
---
>         stop(gettextf("%s must be supplied", sQuote("available")), domain = "R-utils")
1016c1015
<                     domain = NA)
---
>                     domain = "R-utils")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/packages2.R R/src/library/utils/R/packages2.R
49,50c49,56
<         msg <- paste0(if(binary) "as a binary package ", "for ",
<                       sub(" *\\(.*","", R.version.string))
---
>       msg <- sub(" *\\(.*","", R.version.string)
>         if(binary) {
> 	warning(sprintf(ngettext(sum(miss),
> 				 "package %s is not available (as a binary package for %s)",
> 				 "packages %s are not available (as a binary packages for %s)", domain = "R-utils"),
> 			paste(sQuote(p0[miss]), collapse = ", "), msg),
>                 domain = NA, call. = FALSE)
>         } else {
52,53c58,59
< 				 "package %s is not available (%s)",
< 				 "packages %s are not available (%s)"),
---
> 				 "package %s is not available (for %s)",
> 				 "packages %s are not available (for %s)", domain = "R-utils"),
55a62
>         }
59c66
<             warning(sprintf("Perhaps you meant %s ?",
---
>             warning(gettextf("Perhaps you meant %s?",
61c68
<                     call. = FALSE, domain = NA)
---
>                     call. = FALSE, domain = "R-utils")
93c100
<                                      "dependencies %s are not available"),
---
>                                      "dependencies %s are not available", domain = "R-utils"),
105c112
<                                      "also installing the dependencies %s"),
---
>                                      "also installing the dependencies %s", domain = "R-utils"),
231,232c238,239
<                                      "Installing package into %s\n(as %s is unspecified)",
<                                      "Installing packages into %s\n(as %s is unspecified)"),
---
>                                      "Installing package into %s directory\n(as %s directory is unspecified)",
>                                      "Installing packages into %s directory\n(as %s directory is unspecified)", domain = "R-utils"),
241c248
<                               "'lib' elements %s are not writable directories"),
---
>                               "'lib' elements %s are not writable directories", domain = "R-utils"),
257c264
<                 domain = NA, immediate. = TRUE)
---
>                 domain = "R-utils", immediate. = TRUE)
263c270
< 		msg <- gettext(msg)
---
> 		#msg <- gettext(msg)
273c280
< 	    ans <- ask.yes.no("Would you like to use a personal library instead?")
---
> 	    ans <- ask.yes.no(gettext("Would you like to use a personal library instead?", domain = "R-utils"))
278c285
< 		ans <- ask.yes.no("Would you like to create a personal library\n%s\nto install packages into?")
---
> 		ans <- ask.yes.no(gettext("Would you like to create a personal library\n%s\nto install packages into?", domain = "R-utils"))
282c289
<                          domain = NA)
---
>                          domain = "R-utils")
324c331
<                      domain = NA)
---
>                      domain = "R-utils")
382c389
<                             "There are binary versions available but the source versions are later")
---
>                             "There are binary versions available but the source versions are later", domain = "R-utils")
397c404
<                                  "Do you want to install from sources the packages which need compilation?")
---
>                                  "Do you want to install from sources the packages which need compilation?", domain = "R-utils")
402c409
<                     cat("  Binaries will be installed\n")
---
>                     cat("  ", gettext("Binaries will be installed", domain = "R-utils"), "\n", sep = "")
415c422
<                              "Packages which are only available in source form, and may need compilation of C/C++/Fortran")
---
>                              "Packages which are only available in source form, and may need compilation of C/C++/Fortran", domain = "R-utils")
424c431
<                     cat("  These will not be installed\n")
---
>                     cat("  ", gettext("These will not be installed", domain = "R-utils"), "\n", sep = "")
449c456
<                                      "installing the source packages %s"),
---
>                                      "installing the source packages %s", domain = "R-utils"),
480c487
<                                          "packages %s are available as source packages but not as binaries"),
---
>                                          "packages %s are available as source packages but not as binaries", domain = "R-utils"),
492c499
<                                     "There are binary versions available (and will be installed) but the source versions are later")
---
>                                     "There are binary versions available (and will be installed) but the source versions are later", domain = "R-utils")
571,572c578
<             stop(gettextf("unable to create %s", sQuote(keep_outputs)),
<                  domain = NA)
---
>             stop(gettextf("unable to create %s", sQuote(keep_outputs)), domain = "R-utils")
576,577c582
<         stop(gettextf("invalid %s argument", sQuote("keep_outputs")),
<              domain = NA)
---
>         stop(gettextf("invalid '%s' argument", "keep_outputs"), domain = "R-utils")
609,611c614
<         message(gettextf("system (cmd0): %s",
<                          paste(c(cmd0, args0), collapse = " ")),
<                 domain = NA)
---
>         message(gettextf("system (cmd0): %s", paste(c(cmd0, args0), collapse = " ")), domain = "R-utils")
628,630c631
<                warning(gettextf("installation of package %s had non-zero exit status",
<                                 sQuote(update[i, 1L])),
<                        domain = NA)
---
>                warning(gettextf("installation of package %s had non-zero exit status", sQuote(update[i, 1L]), domain = "R-utils"))
633c634
<                message(sprintf("%d): succeeded '%s'", i, cmd), domain = NA)
---
>                message(gettextf("%d): succeeded '%s'", i, cmd), domain = "R-utils")
644,646c645
<             stop(gettextf("unable to create temporary directory %s",
<                           sQuote(tmpd)),
<                  domain = NA)
---
>             stop(gettextf("unable to create temporary directory %s", sQuote(tmpd)), domain = "R-utils")
661,663c660
< 	if(verbose) message(gettextf("foundpkgs: %s",
<                                      paste(foundpkgs, collapse=", ")),
<                             domain = NA)
---
> 	if(verbose) message(gettextf("foundpkgs: %s", paste(foundpkgs, collapse=", ")), domain = "R-utils")
668,670c665
< 	if(verbose) message(gettextf("files: %s",
<                                      paste(files, collapse=", \n\t")),
<                             domain = NA)
---
> 	if(verbose) message(gettextf("files: %s", paste(files, collapse=", \n\t")), domain = "R-utils")
686,688c681
<                 stop(gettextf("unable to create temporary directory %s",
<                               sQuote(tmpd)),
<                      domain = NA)
---
>                 stop(gettextf("unable to create temporary directory %s", sQuote(tmpd)), domain = "R-utils")
723c716
<                     paste("\t@echo begin installing package", sQuote(pkg)),
---
>                     paste("\t@echo ", gettextf("begin installing package %s", sQuote(pkg), domain = "R-utils"), sep = ""),
742,744c735
<                 warning(gettextf("installation of one or more packages failed,\n  probably %s",
<                                  paste(sQuote(failed), collapse = ", ")),
<                         domain = NA)
---
>                 warning(gettextf("installation of one or more packages failed,\n  probably %s", paste(sQuote(failed), collapse = ", ")), domain = "R-utils")
765,767c756
<                     warning(gettextf("installation of package %s had non-zero exit status",
<                                      sQuote(update[i, 1L])),
<                             domain = NA)
---
>                     warning(gettextf("installation of package %s had non-zero exit status", sQuote(update[i, 1L]), domain = "R-utils"))
770,771c759
<                     message(sprintf("%d): succeeded '%s'", i, cmd),
<                             domain = NA)
---
>                     message(gettextf("%d): succeeded '%s'", i, cmd, domain = "R-utils"))
780,782c768
<             cat("\n", gettextf("The downloaded source packages are in\n\t%s",
<                                sQuote(normalizePath(tmpd, mustWork = FALSE))),
<                 "\n", sep = "")
---
>             cat("\n", gettext("The downloaded source packages are in:", domain = "R-utils"), "\n\t",sQuote(normalizePath(tmpd, mustWork = FALSE)), "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/page.R R/src/library/utils/R/page.R
36c36
<             stop(gettextf("no object named '%s' to show", x), domain = NA)
---
>             stop(gettextf("no object named '%s' to show", x), domain = "R-utils")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/progressBar.R R/src/library/utils/R/progressBar.R
108c108
<             domain = NA)
---
>             domain = "R-utils")
117c117
<              domain = NA)
---
>              domain = "R-utils")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/prompt.R R/src/library/utils/R/prompt.R
164,167c164
<     message(gettextf("Created file named %s.", sQuote(filename)),
<             "\n",
<             gettext("Edit the file and move it to the appropriate directory."),
<             domain = NA)
---
>     message(gettextf("Created file named %s.", sQuote(filename)), "\n", gettext("Edit the file and move it to the appropriate directory."), domain = "R-utils", sep = "")
317c314
<             domain = NA)
---
>             domain = "R-utils")
388,391c385
<     message(gettextf("Created file named %s.", sQuote(filename)),
<             "\n",
<             gettext("Edit the file and move it to the appropriate directory."),
<             domain = NA)
---
>     message(gettextf("Created file named %s.", sQuote(filename)), "\n", gettext("Edit the file and move it to the appropriate directory."), domain = "R-utils", sep = "")
444c438
<     message(gettextf("Created file named %s.", sQuote(filename)),
---
>     message(gettextf("Created file named %s.", sQuote(filename), domain = "R-utils"),
446c440
<             gettext("Edit the file and move it to the appropriate directory."),
---
>             gettext("Edit the file and move it to the appropriate directory.", domain = "R-utils"),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/question.R R/src/library/utils/R/question.R
34c34
< 	    cat("Contacting Delphi...")
---
> 	    cat(gettext("Contacting Delphi...", domain = "R-utils"))
37c37
< 	    cat("the oracle is unavailable.\nWe apologize for any inconvenience.\n")
---
> 	    cat(gettext("the oracle is unavailable.\nWe apologize for any inconvenience.", domain = "R-utils"), "\n", sep = "")
89,91c89
< 		stop(gettextf("no documentation of type %s and topic %s (or error in processing help)",
< 			      sQuote(type), sQuote(topicExpr)),
<                      domain = NA)
---
> 		stop(gettextf("no documentation of type %s and topic %s (or error in processing help)", sQuote(type), sQuote(topicExpr)), domain = "R-utils")
122,124c120
<             stop(gettextf("the object of class %s in the function call %s could not be used as a documentation topic",
<                           dQuote(class(f)), sQuote(deparse(expr))),
<                  domain = NA)
---
>             stop(gettextf("the object of class %s in the function call %s could not be used as a documentation topic", dQuote(class(f)), sQuote(deparse(expr))), domain = "R-utils")
127,129c123
<             stop(gettextf("no methods for %s and no documentation for it as a function",
<                           sQuote(f)),
<                  domain = NA)
---
>             stop(gettextf("no methods for %s and no documentation for it as a function", sQuote(f)), domain = "R-utils")
163,165c157
<                         stop(gettextf("error in trying to evaluate the expression for argument %s (%s)",
<                                       sQuote(arg), deparse(argExpr)),
<                              domain = NA)
---
>                         stop(gettextf("error in trying to evaluate the expression for argument %s (%s)", sQuote(arg), deparse(argExpr)), domain = "R-utils")
182,185c174
<             warning(gettextf("no method defined for function %s and signature %s",
<                              sQuote(f),
<                              sQuote(sigFormat(sigNames, sigClasses))),
<                     domain = NA)
---
>             warning(gettextf("no method defined for function %s and signature %s", sQuote(f), sQuote(sigFormat(sigNames, sigClasses))), domain = "R-utils")
189,192c178
<             stop(gettextf("no documentation for function %s and signature %s",
<                           sQuote(f),
<                           sQuote(sigFormat(sigNames, sigClasses))),
<                  domain = NA)
---
>             stop(gettextf("no documentation for function %s and signature %s", sQuote(f), sQuote(sigFormat(sigNames, sigClasses))), domain = "R-utils")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/read.DIF.R R/src/library/utils/R/read.DIF.R
137c137
<             warning("header and 'col.names' are of different lengths")
---
>             warning("header and 'col.names' argument are of different lengths")
187,188c187
< 	warning("cols = ", cols, " != length(data) = ", length(data),
<                 domain = NA)
---
> 	warning(gettextf("cols = %d != length(data) = %d", cols, length(data)), domain = "R-utils")
208,209c207
< 	stop(gettextf("'as.is' has the wrong length %d  != cols = %d",
<                      length(as.is), cols), domain = NA)
---
> 	stop(gettextf("'as.is' has the wrong length %d != cols = %d", length(as.is), cols), domain = "R-utils")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/readhttp.R R/src/library/utils/R/readhttp.R
45,46c45
<         stop(gettextf("%s option must be a length one character vector or NULL",
<                       sQuote("HTTPUserAgent")), domain = NA)
---
>         stop(gettextf("%s option must be a length one character vector or NULL", sQuote("HTTPUserAgent")), domain = "R-utils")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/readtable.R R/src/library/utils/R/readtable.R
28,30c28,29
<         stop("'file' must be a character string or connection")
<     .External(C_countfields, file, sep, quote, skip, blank.lines.skip,
<               comment.char)
---
>         stop(gettextf("'%s' argument must be a character string or connection", "file"))
>     .External(C_countfields, file, sep, quote, skip, blank.lines.skip, comment.char)
64c63
<         stop("'file' must be a character string or connection")
---
>         stop(gettextf("'%s' argument must be a character string or connection", "file"))
125c124
<                 warning("header and 'col.names' are of different lengths")
---
>                 warning("header and 'col.names' argument are of different lengths")
185,186c184
< 	warning("cols = ", cols, " != length(data) = ", length(data),
<                 domain = NA)
---
> 	warning(gettextf("cols = %d != length(data) = %d", cols, length(data)), domain = "R-utils")
206,207c204
< 	stop(gettextf("'as.is' has the wrong length %d  != cols = %d",
<                      length(as.is), cols), domain = NA)
---
> 	stop(gettextf("'as.is' has the wrong length %d != cols = %d", length(as.is), cols), domain = "R-utils")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/relist.R R/src/library/utils/R/relist.R
93c93
< 	warning("relist() requires recursively unlisted objects.")
---
> 	warning("'relist()' requires recursively unlisted objects.")
106,107c106
< 	stop("The 'flesh' argument does not contain a skeleton attribute.\n",
< 	     "Either ensure you unlist a relistable object, or specify the skeleton separately.")
---
> 	stop("The 'flesh' argument does not contain a skeleton attribute.\nEither ensure you unlist a relistable object, or specify the skeleton separately.")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/roman.R R/src/library/utils/R/roman.R
65,68c65,66
<     romans <- c("M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX",
<                 "V", "IV", "I")
<     numbers <- c(1000L, 900L, 500L, 400L, 100L, 90L, 50L, 40L, 10L, 9L,
<                  5L, 4L, 1L)
---
>     romans <- c("M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I")
>     numbers <- c(1000L, 900L, 500L, 400L, 100L, 90L, 50L, 40L, 10L, 9L, 5L, 4L, 1L)
97,100c95,96
<     romans <- c("M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX",
<                 "V", "IV", "I")
<     numbers <- c(1000L, 900L, 500L, 400L, 100L, 90L, 50L, 40L, 10L, 9L,
<                  5L, 4L, 1L)
---
>     romans <- c("M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I")
>     numbers <- c(1000L, 900L, 500L, 400L, 100L, 90L, 50L, 40L, 10L, 9L, 5L, 4L, 1L)
116c112
<                                      "invalid roman numerals: %s"),
---
>                                      "invalid roman numerals: %s", domain = "R-utils"),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/rtags.R R/src/library/utils/R/rtags.R
80,83c80
<         paste(sprintf("%s\x7f%s\x01%d,%d",
<                       lines, tokens, startlines,
<                       as.integer(offsets)),
<               collapse = "\n")
---
>         paste(sprintf("%s\x7f%s\x01%d,%d", lines, tokens, startlines, as.integer(offsets)), collapse = "\n")
153c150
<         stop("length mismatch: bug in code!", domain = NA)
---
>         stop("length mismatch: bug in code!", domain = "R-utils")
185,186c182
<             stop(gettextf("Could not create file %s, aborting", ofile),
<                  domain = NA)
---
>             stop(gettextf("Could not create file %s, aborting", sQuote(ofile)), domain = "R-utils")
192c188
<         if (verbose) message(gettextf("Processing file %s", s), domain = NA)
---
>         if (verbose) message(gettextf("Processing file %s", s), domain = "R-utils")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/sessionInfo.R R/src/library/utils/R/sessionInfo.R
114,115c114,115
<     cat("Platform: ", x$platform, "\n", sep = "")
<     if (!is.null(x$running)) cat("Running under: ",  x$running, "\n", sep = "")
---
>     cat(gettext("Platform: ", domain = "R-utils"), x$platform, "\n", sep = "")
>     if (!is.null(x$running)) cat(gettext("Running under:", domain = "R-utils"), " ", x$running, "\n", sep = "")
118c118
<         cat("locale:\n")
---
>         cat(gettext("locale:", domain = "R-utils"), "\n", sep = "")
122c122
<     cat("attached base packages:\n")
---
>     cat(gettext("attached base packages:", domain = "R-utils"), "\n", sep = "")
125c125
<         cat("\nother attached packages:\n")
---
>         cat("\n", gettext("other attached packages:", domain = "R-utils"), "\n", sep = "")
129c129
<         cat("\nloaded via a namespace (and not attached):\n")
---
>         cat("\n", gettext("loaded via a namespace (and not attached):", domain = "R-utils"), "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/sock.R R/src/library/utils/R/sock.R
21,22c21,22
<     if(length(as.integer(x$socket)) != 1L) stop("invalid 'socket' argument")
<     cat("Socket connection #", x$socket, "to", x$host, "on port", x$port, "\n")
---
>     if(length(as.integer(x$socket)) != 1L) stop(gettextf("invalid '%s' argument", "socket"))
>     cat(gettextf("Socket connection #%s to %s on port %s", x$socket, x$host, x$port, domain = "R-utils"), "\n", sep = "")
29c29
< 	stop("'port' must be integer of length 1")
---
> 	stop(gettextf("'%s' argument must be integer of length 1", "port"))
31c31
< 	stop("'host' must be character of length 1")
---
> 	stop(gettextf("'%s' argument must be character of length 1", "host"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/str.R R/src/library/utils/R/str.R
34d33
<     if(0 < length(cl)) cat("Classes", paste(sQuote(cl), collapse=", "), "and ")
36,38c35,60
<     cat("'data.frame':	", nrow(object), " obs. of  ",
< 	(p <- length(object)), " variable", if(p != 1)"s", if(p > 0)":",
< 	"\n", sep = "")
---
>     p <- length(object)
>     if(length(cl) > 0) {
>      if(p == 1)
>       {
>       cat(sprintf(ngettext(nrow(object), "Classes %s and 'data.frame':	%d observation of %d variable",
> 				"Classes %s and 'data.frame':	%d observations of %d variable", domain = "R-utils"), paste(sQuote(cl), collapse=", "), nrow(object), p), ":\n", sep = "")
>       }
>      else
>       {
>       cat(sprintf(ngettext(nrow(object), "Classes %s and 'data.frame':	%d observation of %d variables",
> 				"Classes %s and 'data.frame':	%d observations of %d variables", domain = "R-utils"), paste(sQuote(cl), collapse=", "), nrow(object), p), if(p > 0) ":", "\n", sep = "")
>       }
>     }
>     else
>     {
>      if(p == 1)
>       {
>       cat(sprintf(ngettext(nrow(object), "'data.frame':	%d observation of %d variable",
> 				"'data.frame':	%d observations of %d variable", domain = "R-utils"), nrow(object), p), ":\n", sep = "")
>       }
>      else
>       {
>       cat(sprintf(ngettext(nrow(object), "'data.frame':	%d observation of %d variables",
> 				"'data.frame':	%d observations of %d variables", domain = "R-utils"), nrow(object), p), if(p > 0) ":", "\n", sep = "")
>       }
>     }
108c130
< 	warning('invalid options("str") -- using defaults instead')
---
> 	warning("invalid options(\"str\") -- using defaults instead")
113,115c135
<             warning(gettextf("invalid components in options(\"str\"): %s",
<                              paste(setdiff(names(strO), oDefs), collapse = ", ")),
<                     domain = NA)
---
>             warning(gettextf("invalid components in options(\"str\"): %s", paste(setdiff(names(strO), oDefs), collapse = ", ")), domain = "R-utils")
156c176
<         warning("'str.default': 'le' is NA, so taken as 0", immediate. = TRUE)
---
>         warning("'str.default': 'object' argument is of length NA, so taken as 0", immediate. = TRUE)
161c181
<     maybe_truncate <- function(x, e.x = x, Sep = "\"", ch = "| __truncated__")
---
>     maybe_truncate <- function(x, e.x = x, Sep = "\"", ch = gettext("| __truncated__"))
169,171c189
<     pClass <- function(cls)
< 	paste0("Class", if(length(cls) > 1) "es",
< 	       " '", paste(cls, collapse = "', '"), "' ")
---
> 
194c212
< 	if(is.na(le)) " __no length(.)__ "
---
> 	if(is.na(le)) gettext(" __no length(.)__ ")
215,216c233
< 		cat("Prototypical reference class", " '", paste(cl, collapse = "', '"),
< 		    "' [package \"", attr(cl,"package"), "\"]\n", sep="")
---
> 	    cat(gettextf("Prototypical reference class %s [package %s]", paste(dQuote(cl), collapse = ", "), sQuote(attr(cl,"package")), domain = "R-tools"), "\n", sep = "")
222,224c239
< 	    cat("Reference class", " '", paste(cl, collapse = "', '"),
< 		"' [package \"", attr(cl,"package"), "\"] with ",
<                 n.of(length(a), "field"), "\n", sep = "")
---
> 	    cat(sprintf(ngettext(length(a), "Reference class %s [package %s] with %d field", "Reference class %s [package %s] with %d fields", domain = "R-utils"), paste(sQuote(cl), collapse = ", "), dQuote(attr(cl,"package")), length(a)), "\n", sep = "")
229d243
< 	    cat(indent.str, "and ", n.of(length(meths), "method"), sep = "")
231,232c245,246
< 	    if(lo <- length(oMeths)) {
< 		cat(", of which", lo, ngettext(lo, "is", "are"), " possibly relevant")
---
> 	    if(length(oMeths)) {
> 		cat(sprintf(ngettext(length(meths), "%s and %d method, of which %d are possibly relevant", "%s and %d methods, of which %d are possibly relevant", domain = "R-utils"), indent.str, length(meths), length(oMeths)))
239a254,255
> 	    } else {
> 		cat(sprintf(ngettext(length(meths), "%s and %d method,", "%s and %d methods,", domain = "R-utils"), indent.str, length(meths)))
244c260
< 		cat(" and ", n.of(length(sNms), "slot"), "\n", sep="")
---
> 		cat(sprintf(ngettext(length(sNms), " and %d slot", " and %d slots", domain = "R-utils"), length(sNms)), "\n", sep = "")
248,250c264,265
< 	    else if(lo == 0) cat(".\n")
< 	}
< 	else { ## S4 non-envRefClass
---
> 
> 	} else {
253,257c268,269
< 	    cat("Formal class", " '", paste(cl, collapse = "', '"),
< 		"' [package \"", attr(cl,"package"), "\"] with ",
< 		n.of(length(a), "slot"), "\n", sep = "")
< 	    strSub(a, comp.str = "@ ", no.list=TRUE, give.length=give.length,
< 		   indent.str = paste(indent.str,".."), nest.lev = nest.lev + 1)
---
> 	    cat(sprintf(ngettext(length(a), "Formal class %s [package %s] with %d slot", "Formal class %s [package %s] with %d slots", domain = "R-utils"), paste(sQuote(cl), collapse = ", "), dQuote(attr(cl,"package")),  length(a)), "\n", sep = "")
> 	    strSub(a, comp.str = "@ ", no.list=TRUE, give.length=give.length, indent.str = paste(indent.str,".."), nest.lev = nest.lev + 1)
270,271c282,288
< 	    else cat(" ", if(!is.null(names(object))) "Named ",
< 		     if(i.pl)"pair", "list()\n", sep = "")
---
> 	    else
> 		{
> 		if(!is.null(names(object)) && i.pl) cat(" ", gettext("Named pairlist()", domain = "R-utils"),"\n",  sep = "")
> 		else if(!is.null(names(object))) cat(" ", gettext("Named list()", domain = "R-utils"), "\n", sep = "")
> 		else if(i.pl) cat(" pairlist()\n")
> 		else cat(" list()\n")
> 		}
285,287c302,309
< 		cat(if(i.pl) "Dotted pair list" else
< 		    if(irregCl) paste(pClass(cl), "hidden list") else "List",
< 		    " of ", as.character(le), "\n", sep = "")
---
> 		if(i.pl) cat(sprintf(ngettext(as.integer(le), "Dotted pair list of %s component", "Dotted pair list of %s components", domain = "R-utils"), as.character(le)), "\n", sep = "")
> 		else if(irregCl) {
> 		 if(length(cl) == 1L) 
> 			cat(sprintf(ngettext(as.integer(le), "Class %s hidden list of %s component", "Class %s hidden list of %s components", domain = "R-utils"), dQuote(cl), as.character(le)), "\n", sep = "")
> 		 else
> 			cat(sprintf(ngettext(as.integer(le), "Classes %s hidden list of %s component", "Classes %s hidden list of %s components", domain = "R-utils"), dQuote(cl), as.character(le)), "\n", sep = "")
>  }
> 		else cat(sprintf(ngettext(as.integer(le), "List of %s component", "List of %s components", domain = "R-utils"), as.character(le)), "\n", sep = "")
309c331
< 		cat(indent.str, "[list output truncated]\n")
---
> 		cat(indent.str, gettext("[list output truncated]", domain = "R-utils"), "\n", sep = "")
322,326c344,349
< 		if     (mod == "nume")
< 		    mod <- if(is.integer(object)) "int"
< 		    else if(has.class) cl[1L] else "num"
< 		else if(mod == "char") { mod <- "chr"; char.like <- TRUE }
< 		else if(mod == "comp") mod <- "cplx" #- else: keep 'logi'
---
> 		if(mod == "nume" && is.integer(object)) mod <- gettext("integer", domain = "R-utils")
> 		else if(mod == "nume" && has.class) mod <- cl[1L]
> 		else if(mod == "nume" && !is.integer(object) && !has.class) mod <- gettext("numeric", domain = "R-utils")
> 		else if(mod == "char") { mod <- gettext("character", domain = "R-utils"); char.like <- TRUE }
> 		else if(mod == "comp") mod <- gettext("complex", domain = "R-utils")
> 		else if(mod == "logi") mod <- gettext("logical", domain = "R-utils") #- else: keep 'logi'
336c359,364
< 		    mod <- paste("Named", mod)
---
> 		    if(mod == gettext("integer", domain = "R-utils") && is.integer(object)) mod <- gettext("Named integer", domain = "R-utils")
> 		    else if(mod == gettext("numeric", domain = "R-utils") && !is.integer(object) && !has.class) mod <- gettext("Named numeric", domain = "R-utils")
> 		    else if(mod == gettext("numeric", domain = "R-utils") && has.class) mod <- gettext("Named numeric", domain = "R-utils")
> 		    else if(mod == gettext("character", domain = "R-utils")) mod <- gettext("Named character", domain = "R-utils")
> 		    else if(mod == gettext("complex", domain = "R-utils"))  mod <- gettext("Named complex", domain = "R-utils")
> 		    else if(mod == gettext("logical", domain = "R-utils"))  mod <- gettext("Named logical", domain = "R-utils")
382,383c410
< 	    str1 <- paste0(" Time-Series ", le.str, " from ", format(tsp.a[1L]),
< 			   " to ", format(tsp.a[2L]), ":")
---
> 	    str1 <- gettextf(" Time-Series %s from %s to %s:", le.str, format(tsp.a[1L]), format(tsp.a[2L]))
409,415c436,455
< 	    str1 <-
< 		paste0(if(ord)" Ord.f" else " F",
< 		       "actor w/ ", nl, " level", if(nl != 1) "s",
< 		       if(nl) " ",
< 		       if(nl) paste0(lev.att, collapse = lsep),
< 		       if(ml < nl) paste0(lsep, ".."), ":")
< 
---
> 	    if(ord && nl)
> 	      str1 <- cat(sprintf(ngettext(nl,
> 				" Ord.factor w/ %d level %s%s:",
> 				" Ord.factor w/ %d levels %s%s:", domain = "R-utils"),
> 				nl, paste0(lev.att, collapse = lsep), if(ml < nl) paste0(lsep, "..") else ""))
> 	    else if(ord && !nl)
> 	      str1 <- cat(sprintf(ngettext(nl,
> 				" Ord.factor w/ %d level",
> 				" Ord.factor w/ %d levels", domain = "R-utils"),
> 				nl))
> 	    else if(!ord && nl)
> 	      str1 <- cat(sprintf(ngettext(nl,
> 				" Factor w/ %d level %s%s:",
> 				" Factor w/ %d levels %s%s:", domain = "R-utils"),
> 				nl, paste0(lev.att, collapse = lsep), if(ml < nl) paste0(lsep, "..") else ""))
> 	    else
> 	      str1 <- cat(sprintf(ngettext(nl,
> 				" Factor w/ %d level",
> 				" Factor w/ %d levels", domain = "R-utils"),
> 				nl))
421c461
<                 cat(pClass(cl))
---
>                 cat(sprintf(ngettext(length(cl), "Class %s ", "Classes %s ", domain = "R-utils"), paste(sQuote(cl), collapse = ", ")))
431,432c471
< 	    cat("Class", if(length(cl) > 1) "es",
< 		" '", paste(cl, collapse = "', '"), "' ", sep = "")
---
> 	    cat(sprintf(ngettext(length(cl), "Class %s", "Classes %s", domain = "R-utils"), paste(sQuote(cl), collapse = ", ")), " ", sep = "")
447c486
< 		str1 <- paste(" Named vector", le.str)
---
> 		str1 <- gettextf(" Named vector %s", le.str, domain = "R-utils")
453d491
< 	    cat(" promise ")
456c494
< 		cat("to ")
---
> 		cat("promise to ")
458c496
< 	    } else cat(" <...>\n")
---
> 	    } else cat("promise <...>\n")
463c501
< 	    str1 <- paste("length", le)
---
> 	    str1 <- gettextf("length %d", le, domain = "R-utils")
502c540
< 	    if(give.mode) str1 <- paste0(str1, ', mode "', mod,'":')
---
> 	    if(give.mode) str1 <- paste0(str1, gettextf(", mode %s:", dQuote(mod)))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/summRprof.R R/src/library/utils/R/summRprof.R
36c36
<         stop(gettextf("no lines found in %s", sQuote(filename)), domain = NA)
---
>         stop(gettextf("no lines found in %s", sQuote(filename)), domain = "R-utils")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/tar.R R/src/library/utils/R/tar.R
27c27
<         stop("invalid 'tarfile' argument")
---
>         stop(gettextf("invalid '%s' argument", "tarfile"))
48c48
<     } else stop("'compressed' must be logical or character")
---
>     } else stop(gettextf("'%s' argument argument must be logical or character", "compressed"))
82c82
<         if (verbose) message("untar: using cmd = ", sQuote(cmd), domain = NA)
---
>         if (verbose) message(gettextf("untar: using cmd = %s", sQuote(cmd)), domain = "R-utils")
90c90
<                          domain = NA)
---
>                          domain = "R-utils")
101c101
<         if (verbose) message("untar: using cmd = ", sQuote(cmd), domain = NA)
---
>         if (verbose) message(gettextf("untar: using cmd = %s", sQuote(cmd)), domain = "R-utils")
103,104c103
<         if (res) warning(sQuote(cmd), " returned error code ", res,
<                          domain = NA)
---
>         if (res) warning(gettextf("command %s returned error code %s", sQuote(cmd), res), domain = "R-utils")
135,136c134
<            stop(gettextf("failed to create directory %s", sQuote(path)),
<                 domain = NA)
---
>            stop(gettextf("failed to create directory %s", sQuote(path)), domain = "R-utils")
148c146
<     else stop("'tarfile' must be a character string or a connection")
---
>     else stop(gettextf("'%s' argument must be a character string or connection", "tarfile"))
187,188c185
<                 warning(gettextf("checksum error for entry '%s'", name),
<                         domain = NA)
---
>                 warning(gettextf("checksum error for entry '%s'", name), domain = "R-utils")
235c232
<                             warning(gettextf("failed to copy %s to %s", sQuote(name2), sQuote(name)), domain = NA)
---
>                             warning(gettextf("failed to copy %s to %s", sQuote(name2), sQuote(name)), domain = "R-utils")
243c240
<                             warning(gettextf("failed to copy %s to %s", sQuote(from), sQuote(name)), domain = NA)
---
>                             warning(gettextf("failed to copy %s to %s", sQuote(from), sQuote(name)), domain = "R-utils")
245c242
<                             warn1 <- c(warn1, "restoring symbolic link as a file copy")
---
>                             warn1 <- c(warn1, gettext("restoring symbolic link as a file copy"))
254c251
<                             warn1 <- c(warn1, "restoring symbolic link as a file copy")
---
>                             warn1 <- c(warn1, gettext("restoring symbolic link as a file copy"))
256c253
<                                warning(gettextf("failed to copy %s to %s", sQuote(from), sQuote(name)), domain = NA)
---
>                                warning(gettextf("failed to copy %s to %s", sQuote(from), sQuote(name)), domain = "R-utils")
264c261
<             warn1 <- c(warn1, "skipping devices")
---
>             warn1 <- c(warn1, gettext("skipping devices"))
275c272
<             warn1 <- c(warn1, "skipping fifos")
---
>             warn1 <- c(warn1, gettext("skipping fifos"))
292c289
<             warn1 <- c(warn1, "using pax extended headers")
---
>             warn1 <- c(warn1, gettext("using pax extended headers"))
295,296c292
<             hcs <- grep("[0-9]* hdrcharset=", info, useBytes = TRUE,
<                         value = TRUE)
---
>             hcs <- grep("[0-9]* hdrcharset=", info, useBytes = TRUE, value = TRUE)
306,307c302
<             linkpath <- grep("[0-9]* linkpath=", info, useBytes = TRUE,
<                              value = TRUE)
---
>             linkpath <- grep("[0-9]* linkpath=", info, useBytes = TRUE, value = TRUE)
316c311
<             warn1 <- c(warn1, "skipping pax global extended headers")
---
>             warn1 <- c(warn1, gettext("skipping pax global extended headers"))
318c313
<         } else stop("unsupported entry type ", sQuote(ctype))
---
>         } else stop(gettextf("unsupported entry type %s", sQuote(ctype)))
322c317
<         for (w in warn1) warning(w, domain = NA)
---
>         for (w in warn1) warning(w, domain = "R-utils")
363c358
<     else stop("'tarfile' must be a character string or a connection")
---
>     else stop(gettextf("'%s' argument must be a character string or connection", "tarfile"))
386,387c381
<     files <- list.files(files, recursive = TRUE, all.files = TRUE,
<                         full.names = TRUE, include.dirs = TRUE)
---
>     files <- list.files(files, recursive = TRUE, all.files = TRUE, full.names = TRUE, include.dirs = TRUE)
393c387
<             warning(gettextf("file '%s' not found", f), domain = NA)
---
>             warning(gettextf("file '%s' was not found", f), domain = "R-utils")
410,411c404
<             warning("storing paths of more than 100 bytes is not portable:\n  ",
<                     sQuote(f), domain = NA)
---
>             warning(gettextf("storing paths of more than 100 bytes is not portable:\n  %s", sQuote(f)), domain = "R-utils")
419c412
<                 warn1 <- c(warn1, "using GNU extension for long pathname")
---
>                 warn1 <- c(warn1, gettext("using GNU extension for long pathname"))
427c420
<             warning(gettextf("file '%s' did not have execute permissions: corrected", f), domain = NA, call. = FALSE)
---
>             warning(gettextf("file '%s' did not have execute permissions: corrected", f), domain = "R-utils", call. = FALSE)
454c447
<                     warn1 <- c(warn1, "using GNU extension for long linkname")
---
>                     warn1 <- c(warn1, gettext("using GNU extension for long linkname"))
495c488
<                 domain = NA, call. = FALSE)
---
>                 domain = "R-utils", call. = FALSE)
498c491
<                 domain = NA, call. = FALSE)
---
>                 domain = "R-utils", call. = FALSE)
505c498
<         for (w in warn1) warning(w, domain = NA)
---
>         for (w in warn1) warning(w, domain = "R-utils")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/unix/mac.install.R R/src/library/utils/R/unix/mac.install.R
47,48c47
<             warning(gettextf("'tar' returned non-zero exit code %d", xcode),
<                     domain = NA, call. = FALSE)
---
>             warning(gettextf("'tar' returned non-zero exit code %d", xcode), domain = "R-utils", call. = FALSE)
58,60c57
<             stop(gettextf("unable to create temporary directory %s",
<                           sQuote(tmpDir)),
<                  domain = NA, call. = FALSE)
---
>             stop(gettextf("unable to create temporary directory %s", sQuote(tmpDir)), domain = "R-utils", call. = FALSE)
67,68c64
<             stop(gettextf("file %s is not an OS X binary package", sQuote(pkg)),
<                  domain = NA, call. = FALSE)
---
>             stop(gettextf("file %s is not an OS X binary package", sQuote(pkg)), domain = "R-utils", call. = FALSE)
71,72c67
<             stop(gettextf("file %s is not an OS X binary package", sQuote(pkg)),
<                  domain = NA, call. = FALSE)
---
>             stop(gettextf("file %s is not an OS X binary package", sQuote(pkg)), domain = "R-utils", call. = FALSE)
75,76c70
<             stop(gettextf("file %s is not an OS X binary package", sQuote(pkg)),
<                  domain = NA, call. = FALSE)
---
>             stop(gettextf("file %s is not an OS X binary package", sQuote(pkg)), domain = "R-utils", call. = FALSE)
80,81c74,75
<             cat(gettextf("package %s successfully unpacked and MD5 sums checked\n",
<                          sQuote(pkgname)))
---
>             cat(gettextf("package %s successfully unpacked and MD5 sums checked",
>                          sQuote(pkgname)), "\n", sep = "")
92c86
<                               sQuote(lib), sQuote(lockdir)), domain = NA)
---
>                               sQuote(lib), sQuote(lockdir)), domain = "R-utils")
96,97c90
<                 stop(gettextf("ERROR: failed to create lock directory %s",
<                               sQuote(lockdir)), domain = NA)
---
>                 stop(gettextf("ERROR: failed to create lock directory %s", sQuote(lockdir)), domain = "R-utils")
106,107c99
<         	    	warning(gettextf("restored %s", sQuote(pkgname)),
<                                 domain = NA, call. = FALSE, immediate. = TRUE)
---
>         	    	warning(gettextf("restored %s", sQuote(pkgname)), domain = "R-utils", call. = FALSE, immediate. = TRUE)
125c117
<                         domain = NA, call. = FALSE)
---
>                         domain = "R-utils", call. = FALSE)
129,130c121
<         stop(gettextf("cannot remove prior installation of package %s",
<                       sQuote(pkgname)), call. = FALSE, domain = NA)
---
>         stop(gettextf("cannot remove prior installation of package %s", sQuote(pkgname)), call. = FALSE, domain = "R-utils")
156,158c147
<             stop(gettextf("unable to create temporary directory %s",
<                           sQuote(tmpd)),
<                  domain = NA)
---
>             stop(gettextf("unable to create temporary directory %s", sQuote(tmpd)), domain = "R-utils")
184c173
<             cat("\n", gettextf("The downloaded binary packages are in\n\t%s", tmpd),
---
>             cat("\n", gettext("The downloaded binary packages are in:", domain = "R-utils"), "\n\t", sQuote(tmpd),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/unix/sysutils.R R/src/library/utils/R/unix/sysutils.R
21c21
<     warning("'memory.size()' is Windows-specific", call.=FALSE)
---
>     warning(gettextf("'%s' function is Windows-specific", "memory.size()"), call.=FALSE)
27c27
<    warning("'memory.limit()' is Windows-specific", call.=FALSE)
---
>    warning(gettextf("'%s' function is Windows-specific", "memory.limit()"), call.=FALSE)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/vignette.R R/src/library/utils/R/vignette.R
28,30c28
<             pos <- which(file_test("-f",
<                                    file.path(vinfo[, "Dir"], "doc",
<                                              vinfo[, "PDF"])))
---
>             pos <- which(file_test("-f", file.path(vinfo[, "Dir"], "doc", vinfo[, "PDF"])))
40,43c38,39
<                                      sQuote(topic),
<                                      sQuote(file.path(vinfo[pos, "Dir"],
<                                                       "doc"))),
<                             call. = FALSE, domain = NA)
---
>                                      sQuote(topic), sQuote(file.path(vinfo[pos, "Dir"], "doc"))),
>                             call. = FALSE, domain = "R-utils")
54,55c50
<             warning(gettextf("vignette %s not found", sQuote(topic)),
<                     call. = FALSE, domain = NA)
---
>             warning(gettextf("vignette %s not found", sQuote(topic)), call. = FALSE, domain = "R-utils")
65,68c60
<                                paste0(", ",
<                                       tools::file_ext(vinfo[, "PDF"])),
<                                ""),
<                          ")"))
---
>                                paste0(", ", tools::file_ext(vinfo[, "PDF"])), ""), ")"))
78,81c70
< 		  paste0("Use ",
<                          sQuote("vignette(all = TRUE)"),
<                          "\n",
<                          "to list the vignettes in all *available* packages.")
---
> 		  gettextf("Use %s to list the vignettes in all *available* packages.", sQuote("vignette(all = TRUE)"))
83,84c72
<         y <- list(type = "vignette", title = "Vignettes", header = NULL,
<                   results = db, footer = footer)
---
>         y <- list(type = "vignette", title = "Vignettes", header = NULL, results = db, footer = footer)
108,110c96
<         warning(gettextf("vignette %s has no PDF/HTML",
<                          sQuote(x$Topic)),
<                 call. = FALSE, domain = NA)
---
>         warning(gettextf("vignette %s has no PDF/HTML", sQuote(x$Topic)), call. = FALSE, domain = "R-utils")
128,130c114
<         warning(gettextf("vignette %s has no R code",
<                          sQuote(name$Topic)),
<                 call. = FALSE, domain = NA)
---
>         warning(gettextf("vignette %s has no R code", sQuote(name$Topic)), call. = FALSE, domain = "R-utils")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/widgets.R R/src/library/utils/R/widgets.R
23c23
<     if(!interactive()) stop("select.list() cannot be used non-interactively")
---
>     if(!interactive()) stop("'select.list()' cannot be used non-interactively")
25c25
<         stop("'title' must be NULL or a length-1 character vector")
---
>         stop(gettextf("'%s' argument must be NULL or a length-1 character vector", "title"))
48,49c48
<         op <- paste0(format(seq_len(nc)), ": ",
<                      ifelse(def, "+", " "), " ", choices)
---
>         op <- paste0(format(seq_len(nc)), ": ", ifelse(def, "+", " "), " ", choices)
55,56c54
<                 op <- paste(fop, c(rep("  ", ncol - 1L), "\n"),
<                             sep = "", collapse="")
---
>                 op <- paste(fop, c(rep("  ", ncol - 1L), "\n"), sep = "", collapse="")
59c57
<         cat(gettext("Enter one or more numbers separated by spaces, or an empty line to cancel\n"))
---
>         cat(gettext("Enter one or more numbers separated by spaces, or an empty line to cancel", domain = "R-utils"), "\n", sep = "")
61,62c59
<             res <- tryCatch(scan("", what = 0, quiet = TRUE, nlines = 1),
<                             error = identity)
---
>             res <- tryCatch(scan("", what = 0, quiet = TRUE, nlines = 1), error = identity)
64c61
< 	    cat(gettext("Invalid input, please try again\n"))
---
> 	    cat(gettext("Invalid input, please try again", domain = "R-utils"), "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/windows/winDialog.R R/src/library/utils/R/windows/winDialog.R
58c58
< winProgressBar <- function(title = "R progress bar", label = "",
---
> winProgressBar <- function(title = gettext("R progress bar", domain = "R-utils"), label = "",
73,75c73
<        stop(gettextf("'pb' is not from class %s",
<                      dQuote("winProgressBar")),
<             domain = NA)
---
>        stop(gettextf("'pb' is not from class %s", dQuote("winProgressBar")), domain = "R-utils")
85,87c83
<         stop(gettextf("'pb' is not from class %s",
<                       dQuote("winProgressBar")),
<              domain = NA)
---
>         stop(gettextf("'pb' is not from class %s", dQuote("winProgressBar")), domain = "R-utils")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/R/zip.R R/src/library/utils/R/zip.R
27,28c27
<         res <- .External(C_unzip, zipfile, files, exdir, list, overwrite,
<                          junkpaths, setTimes)
---
>         res <- .External(C_unzip, zipfile, files, exdir, list, overwrite, junkpaths, setTimes)
31,32c30
<             data.frame(Name = res[[1]], Length = res[[2]], Date = dates,
<                        stringsAsFactors = FALSE)
---
>             data.frame(Name = res[[1]], Length = res[[2]], Date = dates, stringsAsFactors = FALSE)
37c35
<             stop("'unzip' must be a single character string")
---
>             stop(gettextf("'%s' argument must be a single character string", "unzip"))
43,44c41
<                     system2(unzip, c("-l", shQuote(zipfile)), stdout = TRUE,
<                             env = c("TZ=UTC"))
---
>                     system2(unzip, c("-l", shQuote(zipfile)), stdout = TRUE, env = c("TZ=UTC"))
76,77c73
<             system2(unzip, args, stdout = NULL, stderr = NULL,
<                     invisible = TRUE)
---
>             system2(unzip, args, stdout = NULL, stderr = NULL, invisible = TRUE)
88,89c84
<     args <- c(flags, shQuote(path.expand(zipfile)),
<               shQuote(files), extras)
---
>     args <- c(flags, shQuote(path.expand(zipfile)), shQuote(files), extras)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/man/windows/winProgressBar.Rd R/src/library/utils/man/windows/winProgressBar.Rd
16c16
< winProgressBar(title = "R progress bar", label = "",
---
> winProgressBar(title = gettext("R progress bar", domain = "R-utils"), label = "",
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/src/io.c R/src/library/utils/src/io.c
41a42
> #include "localization.h"
45,53d45
< #undef _
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("utils", String)
< #else
< #define _(String) (String)
< #endif
< 
< 
923c915
< 		warning("line %d appears to contain embedded nulls", nread);
---
> 		warning(_("line %d appears to contain embedded nulls"), nread);
1049c1041
< 	error(_("'file' is not a connection"));
---
> 	error(_("'file' argument is not a connection"));
1082c1074
< 	error(_("'dec' must be a single character"));
---
> 	error(_("'dec' argument must be a single character"));
1154c1146
< 	    UNIMPLEMENTED_TYPE("write.table, matrix method", x);
---
> 	    UNIMPLEMENTED_TYPE("write.table()", x);
Only in R/src/library/utils/src: localization.h
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/src/size.c R/src/library/utils/src/size.c
124c124
< 	UNIMPLEMENTED_TYPE("object.size", s);
---
> 	UNIMPLEMENTED_TYPE("object.size()", s);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/src/stubs.c R/src/library/utils/src/stubs.c
26,34c26
< 
< #undef _
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("utils", String)
< #else
< #define _(String) (String)
< #endif
< 
---
> #include "localization.h"
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/src/utils.c R/src/library/utils/src/utils.c
27a28
> #include "localization.h"
61c62
<     if (!isString(in)) error("input must be a character string");
---
>     if (!isString(in)) error(_("'%s' argument must be a character string"), "input");
83c84
< 	error(_("'hostname' must be a character vector of length 1"));
---
> 	error(_("'hostname' argument must be a character vector of length 1"));
89c90
< 	warning(_("nsl() was unable to resolve host '%s'"), name);
---
> 	warning(_("'nsl()' was unable to resolve host '%s'"), name);
96c97
< 	    warning(_("unknown format returned by 'gethostbyname'"));
---
> 	    warning(_("unknown format returned by 'gethostbyname()'"));
105c106
<     warning(_("nsl() is not supported on this platform"));
---
>     warning(_("'nsl()' is not supported on this platform"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/src/utils.h R/src/library/utils/src/utils.h
20,25d19
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("utils", String)
< #else
< #define _(String) (String)
< #endif
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/src/windows/dataentry.c R/src/library/utils/src/windows/dataentry.c
30c30
< #include "win-nls.h"
---
> #include "localization.h"
40a41
> #include <R_ext/Minmax.h>
52,57d52
< #ifndef max
< #define max(a, b) (((a)>(b))?(a):(b))
< #endif
< #ifndef min
< #define min(a, b) (((a)<(b))?(a):(b))
< #endif
282c277
< 	error("unable to start data editor");
---
> 	error(G_("unable to start data editor"));
496c491
< 	UNIMPLEMENTED("advancerect");
---
> 	UNIMPLEMENTED("advancerect()");
1892c1887
< 	error("unable to start data viewer");
---
> 	error(G_("unable to start data viewer"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/src/windows/dialogs.c R/src/library/utils/src/windows/dialogs.c
33c33
< #include "win-nls.h"
---
> #include "localization.h"
245c245
< 	snprintf(msgbuf, 256, _("unable to retrieve items for %s (%s)"),
---
> 	snprintf(msgbuf, 256, _("unable to retrieve items for '%s' (%s)"),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/src/windows/registry.c R/src/library/utils/src/windows/registry.c
25c25
< #include "win-nls.h"
---
> 
35c35
< 
---
> #include "localization.h"
177c177
< 	error("RegQueryInfoKey error code %d: '%s'", (int) res,
---
> 	error(_("RegQueryInfoKey error code %d: '%s'"), (int) res,
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/src/windows/util.c R/src/library/utils/src/windows/util.c
30c30
< #include "win-nls.h"
---
> #include "localization.h"
275c275
< 	error(_("argument must be a character vector or a raw vector"));
---
> 	error(_("'%s' argument must be a character vector or a raw vector"), "text");
396c396
< 	error(_("'title' must be a character string"));
---
> 	error(_("'%s' argument must be a character string"), "title");
405c405
< 	error(_("'text' must be a character string"));
---
> 	error(_("'%s' argument must be a character string"), "text");
444c444
<     if(length(which) != 1) error(_("'%s' must be length 1"), "which");
---
>     if(length(which) != 1) error(_("'%s' argument must be of length 1"), "which");
557c557
< 	if (TYPEOF(windows) != VECSXP) error(_("'%s' must be a list"), "windows");
---
> 	if (TYPEOF(windows) != VECSXP) error(_("'%s' argument must be a list"), "windows");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/library/utils/src/windows/widgets.c R/src/library/utils/src/windows/widgets.c
32c32
< #include "win-nls.h"
---
> #include "localization.h"
182c182
< 	error(_("'default' must be a character string"));
---
> 	error(_("'%s' argument must be a character string"), "default");
184c184
<     if(wcslen(p) >= 32768) error(_("'default' is overlong"));
---
>     if(wcslen(p) >= 32768) error(_("'default' argument is overlong"));
188c188
< 	error(_("'caption' must be a character string"));
---
> 	error(_("'%s' argument must be a character string"), "caption");
190c190
< 	error(_("'multi' must be a logical value"));
---
> 	error(_("'multi' argument must be a logical value"));
192c192
< 	error(_("'filterindex' must be an integer value"));
---
> 	error(_("'filterindex' argument must be an integer value"));
247c247
< 	error(_("'default' must be a character string"));
---
> 	error(_("'%s' argument must be a character string"), "default");
249c249
<     if(strlen(p) >= MAX_PATH) error(_("'default' is overlong"));
---
>     if(strlen(p) >= MAX_PATH) error(_("'default' argument is overlong"));
253c253
< 	error(_("'caption' must be a character string"));
---
> 	error(_("'%s' argument must be a character string"), "caption");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/CommandLineArgs.c R/src/main/CommandLineArgs.c
25a26
> #include <Localization.h>
170c171,173
< 		    R_ShowMessage(_("WARNING: no value given for --encoding"));
---
> 		    snprintf(msg, 1024,
> 			     _("WARNING: no value given for '%s'"), *av);
> 		    R_ShowMessage(msg);
195c198
< 			 _("WARNING: option '%s' no longer supported"), *av);
---
> 			 _("WARNING: option '%s' is no longer supported"), *av);
234c237,239
< 		    R_ShowMessage(_("WARNING: no value given for '--max-ppsize'"));
---
> 		    snprintf(msg, 1024,
> 			     _("WARNING: no value given for '%s'"), *av);
> 		    R_ShowMessage(msg);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/RNG.c R/src/main/RNG.c
25a26
> #include <Localization.h>
301c302
< 	if (!User_unif_fun) error(_("'user_unif_rand' not in load table"));
---
> 	if (!User_unif_fun) error(_("'%s' is not in load table"), "user_unif_rand");
351,352c352,353
< 	    error(_("'.Random.seed' is a missing argument with no default"));
< 	warning(_("'.Random.seed' is not an integer vector but of type '%s', so ignored"),
---
> 	    error(_("'%s' argument is missing, with no default"), ".Random.seed");
> 	warning(_("'.Random.seed' is not an integer vector but of type '%s'"),
431c432
< 	warning("Internal .Random.seed is corrupt: not saving");
---
> 	warning(_("Internal .Random.seed is corrupt: not saving"));
471c472
< 	warning("someone corrupted the random-number generator: re-initializing");
---
> 	warning(_("someone corrupted the random-number generator: re-initializing"));
488c489
< 	if (!User_norm_fun) error(_("'user_norm_rand' not in load table"));
---
> 	if (!User_norm_fun) error(_("'%s' is not in load table"), "user_norm_rand");
769c770
< 	error("function '.TAOCP1997init' is missing");
---
> 	error(_("function '.TAOCP1997init' is missing"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/Rdynload.c R/src/main/Rdynload.c
86a87
> #include <Localization.h>
248c249
< 	error(_("R_RegisterRoutines called with invalid DllInfo object."));
---
> 	error(_("'R_RegisterRoutines()' called with invalid DllInfo object."));
310c311
< 	error("allocation failure in R_setPrimitiveArgTypes");
---
> 	error(_("allocation failure in '%s' function"), "R_setPrimitiveArgTypes()");
324c325
< 	error("allocation failure in R_setArgStyles");
---
> 	error(_("allocation failure in '%s' function"), "R_setArgStyles()");
533c534
< 	strcpy(DLLerror, _("`maximal number of DLLs reached..."));
---
> 	strcpy(DLLerror, _("maximal number of DLL files reached..."));
590c591
< 	strcpy(DLLerror, _("could not allocate space for 'path'"));
---
> 	sprintf(DLLerror, _("could not allocate space for '%s'"), "path");
623c624
< 	strcpy(DLLerror, _("could not allocate space for 'name'"));
---
> 	sprintf(DLLerror, _("could not allocate space for '%s'"), "name");
900c901
< 	error(_("shared object '%s\' was not loaded"), buf);
---
> 	error(_("shared object '%s' was not loaded"), buf);
979c980
<         error(ngettext("cannot allocate memory for registered native symbol (%d byte)",
---
>         error(n_("cannot allocate memory for registered native symbol (%d byte)",
1199,1200c1200,1201
< 	    error(_("unimplemented type %d in 'createRSymbolObject'"),
< 		  symbol->type);
---
> 	    error(_("unimplemented type %d in '%s' function"),
> 		  symbol->type, "createRSymbolObject()");
1281c1282
< 	error(_("R_getRegisteredRoutines() expects a DllInfo reference"));
---
> 	error(_("'R_getRegisteredRoutines()' expects a DllInfo reference"));
1375c1376
< 	error(_("R_getRegisteredRoutines() expects a DllInfo reference"));
---
> 	error(_("'R_getRegisteredRoutines()' expects a DllInfo reference"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/Renviron.c R/src/main/Renviron.c
30a31
> #include <Localization.h>
126c127
<     if(!buf) R_Suicide("allocation failure in reading Renviron");
---
>     if(!buf) R_Suicide(_("allocation failure in reading Renviron"));
130c131
<     if(!buf) R_Suicide("allocation failure in reading Renviron");
---
>     if(!buf) R_Suicide(_("allocation failure in reading Renviron"));
181,182c182
<     snprintf(msg, MSG_SIZE+50,
< 	     "\n   File %s contains invalid line(s)", filename);
---
>     snprintf(msg, MSG_SIZE+50, _("\n   File %s contains invalid line(s)"), filename);
203c203
< 	strcat(msg, "\n   They were ignored\n");
---
> 	strcat(msg, _("\n   Invalid lines were ignored\n"));
217c217
< 	R_ShowMessage("path to system Renviron is too long: skipping");
---
> 	R_ShowMessage(_("path to system Renviron is too long: skipping"));
226c226
< 	R_ShowMessage("path to system Renviron is too long: skipping");
---
> 	R_ShowMessage(_("path to system Renviron is too long: skipping"));
233c233
< 	R_ShowMessage("cannot find system Renviron");
---
> 	R_ShowMessage(_("cannot find system Renviron"));
251c251
< 	R_ShowMessage("path to arch-specific Renviron.site is too long: skipping");
---
> 	R_ShowMessage(_("path to arch-specific Renviron.site is too long: skipping"));
261c261
< 	R_ShowMessage("path to Renviron.site is too long: skipping");
---
> 	R_ShowMessage(_("path to Renviron.site is too long: skipping"));
311c311
< 	errorcall(call, _("argument 'x' must be a character string"));
---
> 	errorcall(call, _("'%s' argument must be a character string"), "x");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/agrep.c R/src/main/agrep.c
28a29
> #include <Localization.h>
190c191
< 	error(_("'pattern' must be a non-empty character string"));
---
> 	error(_("'%s' argument must be a non-empty character string"), "pattern");
290,291c291,292
< #define ANS(I, J)		REAL(ans)[I + J * nx]
< #define COUNTS(I, J, K)		INTEGER(counts)[I + J * nx + K * nxy]
---
> #define ANS(I, J)		REAL(ans)[I + (J) * nx]
> #define COUNTS(I, J, K)		INTEGER(counts)[I + (J) * nx + (K) * nxy]
484c485
< #define OFFSETS(I, J, K)	INTEGER(offsets)[I + J * nx + K * nxy]
---
> #define OFFSETS(I, J, K)	INTEGER(offsets)[I + (J) * nx + (K) * nxy]
615,616c616
< 		    error(_("input string x[%d] is invalid in this locale"),
< 			  i + 1);
---
> 		    error(_("input string x[%d] is invalid in this locale"), i + 1);
661,662c661
< 			    error(_("input string y[%d] is invalid in this locale"),
< 				  j + 1);
---
> 			    error(_("input string y[%d] is invalid in this locale"), j + 1);
766,767c765
< 	warning(_("argument '%s' will be ignored"),
< 		"ignore.case = TRUE");
---
> 	warning(_("argument '%s' will be ignored"), "ignore.case = TRUE");
820c818
< 	error(_("'pattern' must be a non-empty character string"));
---
> 	error(_("'%s' argument must be a non-empty character string"), "pattern");
874,875c872
< 		    error(_("input string %d is invalid in this locale"),
< 			  i + 1);
---
> 		    error(_("input string %d is invalid in this locale"), i + 1);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/apply.c R/src/main/apply.c
23a24
> #include <Localization.h>
103c104
<     if (!isVector(value)) error(_("'FUN.VALUE' must be a vector"));
---
>     if (!isVector(value)) error(_("'%s' argument must be a vector"), "FUN.VALUE");
168,169c169
< 	    	error(_("values must be length %d,\n but FUN(X[[%d]]) result is length %d"),
< 	               commonLen, i+1, length(val));
---
> 	    	error(_("values must be length %d, but 'FUN(X[[%d]])' result is length %d"), commonLen, i+1, length(val));
180c180
< 	            error(_("values must be type '%s',\n but FUN(X[[%d]]) result is type '%s'"),
---
> 	            error(_("values must be type '%s', but 'FUN(X[[%d]])' result is type '%s'"),
257,258c257
< 			error(_("dimnames(<value>) is neither NULL nor list of length %d"),
< 			      rnk_v);
---
> 			error(_("dimnames(<value>) is neither NULL nor list of length %d"), rnk_v);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/arithmetic.c R/src/main/arithmetic.c
34a35
> #include <Localization.h>
42,43c43,44
< #define R_MSG_NA	_("NaNs produced")
< #define R_MSG_NONNUM_MATH _("non-numeric argument to mathematical function")
---
> #define R_MSG_NA	_("NaN values produced")
> #define R_MSG_NONNUM_MATH _("non-numeric argument passed to mathematical function")
193,196c194,195
<     double q = x1 / x2, tmp;
< 
<     if (x2 == 0.0) return q;
<     tmp = x1 - floor(q) * x2;
---
>     if (x2 == 0.0) return R_NaN;
>     double q = x1 / x2, tmp = x1 - floor(q) * x2;
294c293
< #define INTEGER_OVERFLOW_WARNING _("NAs produced by integer overflow")
---
> #define INTEGER_OVERFLOW_WARNING _("NA values produced by integer overflow")
511c510
<     default: errorcall(lcall, _("non-numeric argument to binary operator")); \
---
>     default: errorcall(lcall, _("non-numeric argument passed to binary operator")); \
615c614
< 		errorcall(lcall, _("non-conformable time-series"));
---
> 		errorcall(lcall, _("non-conformable time series"));
636,637c635
< 	warningcall(lcall,
< 		    _("longer object length is not a multiple of shorter object length"));
---
> 	warningcall(lcall, _("longer object length is not a multiple of shorter object length"));
708c706
< 	errorcall(call, _("invalid argument to unary operator"));
---
> 	errorcall(call, _("invalid argument passed to unary operator"));
786,795d783
< /* i1 = i % n1; i2 = i % n2;
<  * this macro is quite a bit faster than having real modulo calls
<  * in the loop (tested on Intel and Sparc)
<  */
< #define mod_iterate(n1,n2,i1,i2) for (i=i1=i2=0; i<n; \
< 	i1 = (++i1 == n1) ? 0 : i1,\
< 	i2 = (++i2 == n2) ? 0 : i2,\
< 	++i)
< 
< 
1193c1181
< 	errorcall(call, _("unimplemented real function of 1 argument"));
---
> 	errorcall(call, n_("unimplemented real function of %d numeric argument", "unimplemented real function of %d numeric arguments", 1), 1);
1480,1481c1468
< 	errorcall(call,
< 		  _("unimplemented real function of %d numeric arguments"), 2);
---
> 	errorcall(call, n_("unimplemented real function of %d numeric argument", "unimplemented real function of %d numeric arguments", 2), 2);
1508,1509c1495
<         error(ngettext("%d argument passed to '%s' which requires 1 or 2 arguments",
<                        "%d arguments passed to '%s'which requires 1 or 2 arguments", n),
---
> 	error(n_("%d argument passed to '%s' function which requires 1 or 2 arguments", "%d arguments passed to '%s' function which requires 1 or 2 arguments", n),
1621c1607
< 	    error(_("argument \"%s\" is missing, with no default"), "x");
---
> 	    error(_("argument '%s' is missing, with no default"), "x");
1639c1625
< 	    error(_("argument \"%s\" is missing, with no default"), "x");
---
> 	    error(_("argument '%s' is missing, with no default"), "x");
1668,1673d1653
< #define mod_iterate3(n1,n2,n3,i1,i2,i3) for (i=i1=i2=i3=0; i<n; \
< 	i1 = (++i1==n1) ? 0 : i1,				\
< 	i2 = (++i2==n2) ? 0 : i2,				\
< 	i3 = (++i3==n3) ? 0 : i3,				\
< 	++i)
< 
1878,1879c1858
< 	errorcall(call,
< 		  _("unimplemented real function of %d numeric arguments"), 3);
---
> 	errorcall(call, n_("unimplemented real function of %d numeric argument", "unimplemented real function of %d numeric arguments", 3), 3);
1893,1899d1871
< #define mod_iterate4(n1,n2,n3,n4,i1,i2,i3,i4) for (i=i1=i2=i3=i4=0; i<n; \
< 	i1 = (++i1==n1) ? 0 : i1,					\
< 	i2 = (++i2==n2) ? 0 : i2,					\
< 	i3 = (++i3==n3) ? 0 : i3,					\
< 	i4 = (++i4==n4) ? 0 : i4,					\
< 	++i)
< 
2057,2058c2029
< 	errorcall(call,
< 		  _("unimplemented real function of %d numeric arguments"), 4);
---
> 	errorcall(call, n_("unimplemented real function of %d numeric argument", "unimplemented real function of %d numeric arguments", 4), 4);
2074,2082d2044
< #define mod_iterate5(n1,n2,n3,n4,n5, i1,i2,i3,i4,i5)	\
<  for (i=i1=i2=i3=i4=i5=0; i<n;				\
< 	i1 = (++i1==n1) ? 0 : i1,			\
< 	i2 = (++i2==n2) ? 0 : i2,			\
< 	i3 = (++i3==n3) ? 0 : i3,			\
< 	i4 = (++i4==n4) ? 0 : i4,			\
< 	i5 = (++i5==n5) ? 0 : i5,			\
< 	++i)
< 
2169,2170c2131
< 	errorcall(call,
< 		  _("unimplemented real function of %d numeric arguments"), 5);
---
> 	errorcall(call, n_("unimplemented real function of %d numeric argument", "unimplemented real function of %d numeric arguments", 5), 5);
2187c2148
<     default: error("bad arith function index"); return NULL;
---
>     default: error(_("bad arithmetic function index")); return NULL;
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/array.c R/src/main/array.c
25a26
> #include <Localization.h>
79,80c80
< 	    error(_("'data' must be of a vector type, was '%s'"),
< 		type2char(TYPEOF(vals)));
---
> 	    error(_("'data' argument must be of a vector type, was '%s'"), type2char(TYPEOF(vals)));
97c97
< 	    error(_("invalid 'nrow' value (too large or NA)"));
---
> 	    error(_("invalid '%s' value (too large or NA)"), "nrow");
99c99
< 	    error(_("invalid 'nrow' value (< 0)"));
---
> 	    error(_("invalid '%s' value (< 0)"), "nrow");
105c105
< 	    error(_("invalid 'ncol' value (too large or NA)"));
---
> 	    error(_("invalid '%s' value (too large or NA)"), "ncol");
107c107
< 	    error(_("invalid 'ncol' value (< 0)"));
---
> 	    error(_("invalid '%s' value (< 0)"), "ncol");
110c110
< 	if (lendat > INT_MAX) error("data is too long");
---
> 	if (lendat > INT_MAX) error(_("data is too long"));
113c113
< 	if (lendat > (double) nc * INT_MAX) error("data is too long");
---
> 	if (lendat > (double) nc * INT_MAX) error(_("data is too long"));
121c121
< 	if (lendat > (double) nr * INT_MAX) error("data is too long");
---
> 	if (lendat > (double) nr * INT_MAX) error(_("data is too long"));
205c205
< 	error(_("negative extents to matrix"));
---
> 	error(_("negative extents passed to matrix"));
208c208
< 	error(_("allocMatrix: too many elements specified"));
---
> 	error(_("'allocMatrix()': too many elements specified"));
236c236
< 	error(_("negative extents to 3D array"));
---
> 	error(_("negative extents passed to 3D array"));
239c239
< 	error(_("'alloc3Darray': too many elements specified"));
---
> 	error(_("'alloc3Darray()': too many elements specified"));
264c264
< 	    error(_("'allocArray': too many elements specified by 'dims'"));
---
> 	    error(_("'allocArray()': too many elements specified by 'dims' argument"));
448,449c448
< 	error(_("a matrix-like object is required as argument to '%s'"),
< 	      (PRIMVAL(op) == 2) ? "col" : "row");
---
> 	error(_("a matrix-like object is required as argument passed to '%s'"), (PRIMVAL(op) == 2) ? "col" : "row");
662c661
< 	errorcall(call, _("requires numeric/complex matrix/vector arguments"));
---
> 	errorcall(call, _("numeric/complex matrix/vector arguments are required"));
1155c1154
< 	else error(_("value out of range in 'perm'"));
---
> 	else error(_("value is out of range in 'perm' argument"));
1232c1231
< 	UNIMPLEMENTED_TYPE("aperm", a);
---
> 	UNIMPLEMENTED_TYPE("aperm()", a);
1237c1236
<     if (resize == NA_LOGICAL) error(_("'resize' must be TRUE or FALSE"));
---
>     if (resize == NA_LOGICAL) error(_("'%s' argument must be TRUE or FALSE"), "resize");
1295c1294
< 	error(_("'x' must be numeric"));
---
> 	error(_("'%s' must be numeric"), "x");
1430c1429
<             stop("'dim' specifies too large an array")
---
>             stop(_("'dim' specifies too large array"))
1461,1462c1460
< 	    error(_("'data' must be of a vector type, was '%s'"),
< 		type2char(TYPEOF(vals)));
---
> 	    error(_("'data' argument must be of a vector type, was '%s'"), type2char(TYPEOF(vals)));
1469c1467
<     if (nd == 0) error(_("'dims' cannot be of length 0"));
---
>     if (nd == 0) error(_("'%s' argument cannot be of length 0"), "dims");
1570c1568
< 	error(_("invalid 'nrow' value (too large or NA)"));
---
> 	error(_("invalid '%s' value (too large or NA)"), "nrow");
1572c1570
< 	error(_("invalid 'nrow' value (< 0)"));
---
> 	error(_("invalid '%s' value (< 0)"), "nrow");
1575c1573
< 	error(_("invalid 'ncol' value (too large or NA)"));
---
> 	error(_("invalid '%s' value (too large or NA)"), "ncol");
1577c1575
< 	error(_("invalid 'ncol' value (< 0)"));
---
> 	error(_("invalid '%s' value (< 0)"), "ncol");
1580c1578
< 	error(_("'x' must have positive length"));
---
> 	error(_("'%s' must have positive length"), "x");
1640,1641c1638
< 	    error(_("singular matrix in 'backsolve'. First zero in diagonal [%d]"),
< 		  i + 1);
---
> 	    error(_("singular matrix in 'backsolve()'. First zero in diagonal [%d]"), i + 1);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/attrib.c R/src/main/attrib.c
24a25
> #include <Localization.h>
72,73c73
< 	error(_("row names must be 'character' or 'integer', not '%s'"),
< 	      type2char(TYPEOF(val)));
---
> 	error(_("row names must be 'character' or 'integer', not '%s'"), type2char(TYPEOF(val)));
124,125c124
< 		    error(_("getAttrib: invalid type (%s) for TAG"),
< 			  type2char(TYPEOF(TAG(vec))));
---
> 		    error(_("'getAttrib()': invalid type (%s) for TAG"), type2char(TYPEOF(TAG(vec))));
160c159
< 	error("cannot have attributes on a CHARSXP");
---
> 	error(_("cannot have attributes on a 'CHARSXP'"));
336c335
< 	error("cannot set attribute on a CHARSXP");
---
> 	error(_("cannot set attribute on a 'CHARSXP'"));
359c358
< 	error("cannot set attribute on a CHARSXP");
---
> 	error(_("cannot set attribute on a 'CHARSXP'"));
387c386
<     else error(_("names() applied to a non-vector"));
---
>     else error(_("'names()' function applied to a non-vector"));
409c408
< 	    error(_("'tsp' attribute must be numeric"));
---
> 	    error(_("'%s' attribute must be numeric"), "tsp");
829c828
< 	  error("invalid class argument to internal .class_cache");
---
> 	  error(_("invalid class argument passed to internal '.class_cache'"));
859c858
< 		error(_("class '%s' has no 'names' slot"), klass);
---
> 		error(_("class \"%s\" has no 'names' slot"), klass);
861c860
< 		warning(_("class '%s' has no 'names' slot; assigning a names attribute will create an invalid object"), klass);
---
> 		warning(_("class \"%s\" has no 'names' slot; assigning a 'names' attribute will create an invalid object"), klass);
864c863
< 	    error(_("invalid to use names()<- to set the 'names' slot in a non-vector class ('%s')"), klass);
---
> 	    error(_("invalid to use 'names()<-' to set the 'names' slot in a non-vector class (\"%s\")"), klass);
949,950c948
< 	error(_("invalid type (%s) to set 'names' attribute"),
< 	      type2char(TYPEOF(vec)));
---
> 	error(_("invalid type (%s) to set 'names' attribute"), type2char(TYPEOF(vec)));
1020c1018
< 	error(_("'dimnames' applied to non-array"));
---
> 	error(_("'dimnames()' applied to non-array"));
1025c1023
< 	error(_("'dimnames' must be a list"));
---
> 	error(_("'%s' argument must be a list"), "dimnames");
1028,1029c1026
< 	error(_("length of 'dimnames' [%d] must match that of 'dims' [%d]"),
< 	      length(val), k);
---
> 	error(_("length of 'dimnames' [%d] must match that of 'dims' [%d]"), length(val), k);
1062,1063c1059
< 		error(_("invalid type (%s) for 'dimnames' (must be a vector)"),
< 		      type2char(TYPEOF(_this)));
---
> 		error(_("invalid type (%s) for 'dimnames' (must be a vector)"), type2char(TYPEOF(_this)));
1065,1066c1061
< 		error(_("length of 'dimnames' [%d] not equal to array extent"),
< 		      i+1);
---
> 		error(_("length of 'dimnames' [%d] not equal to array extent"), i+1);
1153c1148
< 	    error(_("the dims contain missing values"));
---
> 	    error(_("the dimensions contain missing values"));
1155c1150
< 	    error(_("the dims contain negative values"));
---
> 	    error(_("the dimensions contain negative values"));
1160c1155
< 	    error(_("dims do not match the length of object"), total, len);
---
> 	    error(_("dimensions do not match the length of object"), total, len);
1162c1157
< 	    error(_("dims [product %d] do not match the length of object [%d]"), total, len);
---
> 	    error(_("dimensions [product %d] do not match the length of object [%d]"), total, len);
1234c1229
< 	warningcall(call, "duplicated levels in factors are deprecated");
---
> 	warningcall(call, _("duplicated levels in factors are deprecated"));
1339c1334
< 	    stop("attribute name must be of mode character")
---
> 	    stop(_("attribute name must be of mode character"))
1341c1336
< 	    stop("exactly one attribute name must be given")
---
> 	    stop(_("exactly one attribute name must be given"))
1366c1361
< 	errorcall(call, "either 2 or 3 arguments are required");
---
> 	errorcall(call, _("either 2 or 3 arguments are required"));
1373c1368
< 	errorcall(call, _("'which' must be of mode character"));
---
> 	errorcall(call, _("'which' attribute must be of mode character"));
1456,1457c1451
< 	warningcall(call, _("partial match of '%s' to '%s'"), str,
< 		    CHAR(PRINTNAME(tag)));
---
> 	warningcall(call, _("partial match of '%s' to '%s'"), str, CHAR(PRINTNAME(tag)));
1495,1496c1489
< 	    error(_("invalid type '%s' for slot name"),
< 		  type2char(TYPEOF(nlist)));
---
> 	    error(_("invalid type '%s' for slot name"), type2char(TYPEOF(nlist)));
1531c1524
< 	error(_("'name' must be non-null character string"));
---
> 	error(_("'%s' argument must be a non-empty character string"), "name");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/bind.c R/src/main/bind.c
27a28
> #include <Localization.h>
31c32
< #define imax2(x, y) ((x < y) ? y : x)
---
> #include <R_ext/Minmax.h>
291,292c292,293
< 	errorcall(call, _("type '%s' is unimplemented in '%s'"),
< 		  type2char(TYPEOF(x)), "LogicalAnswer");
---
> 	errorcall(call, _("type '%s' is unimplemented in '%s' function"),
> 		  type2char(TYPEOF(x)), "LogicalAnswer()");
327,328c328,329
< 	errorcall(call, _("type '%s' is unimplemented in '%s'"),
< 		  type2char(TYPEOF(x)), "IntegerAnswer");
---
> 	errorcall(call, _("type '%s' is unimplemented in '%s' function"),
> 		  type2char(TYPEOF(x)), "IntegerAnswer()");
376,377c377,378
< 	errorcall(call, _("type '%s' is unimplemented in '%s'"),
< 		  type2char(TYPEOF(x)), "RealAnswer");
---
> 	errorcall(call, _("type '%s' is unimplemented in '%s' function"),
> 		  type2char(TYPEOF(x)), "RealAnswer()");
449,450c450,451
< 	errorcall(call, _("type '%s' is unimplemented in '%s'"),
< 		  type2char(TYPEOF(x)), "ComplexAnswer");
---
> 	errorcall(call, _("type '%s' is unimplemented in '%s' function"),
> 		  type2char(TYPEOF(x)), "ComplexAnswer()");
477,478c478,479
< 	errorcall(call, _("type '%s' is unimplemented in '%s'"),
< 		  type2char(TYPEOF(x)), "RawAnswer");
---
> 	errorcall(call, _("type '%s' is unimplemented in '%s' function"),
> 		  type2char(TYPEOF(x)), "RawAnswer()");
685c686
< 		errorcall(call, _("repeated formal argument 'recursive'"));
---
> 		errorcall(call, _("repeated formal argument '%s'"), "recursive");
696c697
< 		errorcall(call, _("repeated formal argument 'use.names'"));
---
> 		errorcall(call, _("repeated formal argument '%s'"), "user.names");
894c895
< 	else error(_("argument not a list"));
---
> 	else error(_("argument is not a list"));
1038c1039
< 		    error(_("class name too long in '%s'"), generic);
---
> 		    error(_("class name is too long in '%s'"), generic);
1114,1115c1115
< 	error(_("cannot create a matrix from type '%s'"),
< 	      type2char(mode));
---
> 	error(_("cannot create a matrix from type '%s'"), type2char(mode));
1185,1186c1185
< 		error(_("number of rows of matrices must match (see arg %d)"),
< 		      na + 1);
---
> 		error(_("number of rows of matrices must match (see argument %d)"), na + 1);
1190c1189
< 	    rows = imax2(rows, length(u));
---
> 	    rows = max(rows, length(u));
1213c1212
< 		warning("number of rows of result is not a multiple of vector length (arg %d)", na + 1);
---
> 		warning(_("number of rows of result is not a multiple of vector length (argument %d)"), na + 1);
1221c1220
< 	    nnames = imax2(nnames, length(dn));
---
> 	    nnames = max(nnames, length(dn));
1430,1431c1429
< 		error(_("number of columns of matrices must match (see arg %d)"),
< 		      na + 1);
---
> 		error(_("number of columns of matrices must match (see argument %d)"), na + 1);
1435c1433
< 	    cols = imax2(cols, length(u));
---
> 	    cols = max(cols, length(u));
1460c1458
< 		warning("number of columns of result is not a multiple of vector length (arg %d)", na + 1);
---
> 		warning(_("number of columns of result is not a multiple of vector length (argument %d)"), na + 1);
1468c1466
< 	    nnames = imax2(nnames, length(dn));
---
> 	    nnames = max(nnames, length(dn));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/builtin.c R/src/main/builtin.c
26a27
> #include <Localization.h>
332c333
< 	error(_("'enclos' must be an environment"));
---
> 	error(_("'%s' argument must be an environment"), "enclos");
381c382
< 	error(_("'parent' is not an environment"));
---
> 	error(_("'%s' argument is not an environment"), "parent");
618,620c619
< 		errorcall(call,
< 			  _("argument %d (type '%s') cannot be handled by 'cat'"),
< 			  1+iobj, type2char(TYPEOF(s)));
---
> 		errorcall(call, _("argument %d (type '%s') cannot be handled by 'cat()' function"), 1+iobj, type2char(TYPEOF(s)));
760c759
< 	if (len > INT_MAX) error("too long for a pairlist");
---
> 	if (len > INT_MAX) error(_("too long for a pairlist"));
764c763
< 	error(_("vector: cannot make a vector of mode '%s'."),
---
> 	error(_("'vector()': cannot make a vector of mode '%s'."),
997c996
<     if (nargs < 1) errorcall(call, _("'EXPR' is missing"));
---
>     if (nargs < 1) errorcall(call, _("'%s' argument is missing"), "EXPR");
1001c1000
< 	errorcall(call, _("EXPR must be a length 1 vector"));
---
> 	errorcall(call, _("'%s' argument must be a vector of length 1"), "EXPR");
1004,1005c1003
< 		    _("EXPR is a \"factor\", treated as integer.\n"
< 		      " Consider using '%s' instead."),
---
> 		    _("'EXPR' is a \"factor\", treated as integer.\n Consider using '%s' instead."),
1052c1050
< 		    error("empty alternative in numeric switch");
---
> 		    error(_("empty alternative in numeric switch"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/character.c R/src/main/character.c
71a72
> #include <Localization.h>
105c106
< 	error(_("'%s' requires a character vector"), "nzchar()");
---
> 	error(_("'%s' function requires a character vector"), "nzchar()");
108c109
< 	error(_("'%s' requires a character vector"), "nzchar()");
---
> 	error(_("'%s' function requires a character vector"), "nzchar()");
132c133
< 	error(_("'%s' requires a character vector"), "nchar()");
---
> 	error(_("'%s' function requires a character vector"), "nchar()");
135c136
< 	error(_("'%s' requires a character vector"), "nchar()");
---
> 	error(_("'%s' function requires a character vector"), "nchar()");
169c170
< 		    error(_("invalid multibyte string %d"), i+1);
---
> 		    error(_("invalid multibyte input string %d"), i+1);
197c198
< 		    error(_("invalid multibyte string %d"), i+1);
---
> 		    error(_("invalid multibyte input string %d"), i+1);
597c598
< 	error(_("invalid '%s' value"), "allow_");
---
> 	error(_("invalid '%s' value"), "allow");
655c656
< 	    } else error(_("invalid multibyte string %d"), i+1);
---
> 	    } else error(_("invalid multibyte input string %d"), i+1);
752c753
< 		    error(_("invalid multibyte string %d"), i+1);
---
> 		    error(_("invalid multibyte input string %d"), i+1);
807,808c808
< 		error(_("decreasing range specification ('%lc-%lc')"),
< 		      s[i], s[i + 2]);
---
> 		error(_("decreasing range specification ('%lc-%lc')"), s[i], s[i + 2]);
893,894c893
< 		error(_("decreasing range specification ('%c-%c')"),
< 		      s[i], s[i + 2]);
---
> 		error(_("decreasing range specification ('%c-%c')"), s[i], s[i + 2]);
1046c1045
<     if (!isString(x)) error("invalid '%s' argument", "x");
---
>     if (!isString(x)) error(_("invalid '%s' argument"), "x");
1081c1080
< 	    if (nc < 0) error(_("invalid UTF-8 string 'old'"));
---
> 	    if (nc < 0) error(_("invalid UTF-8 string '%s'"), "old");
1087c1086
< 	    if (nc < 0) error(_("invalid multibyte string 'old'"));
---
> 	    if (nc < 0) error(_("invalid multibyte string '%s'"), "old");
1100c1099
< 	    if (nc < 0) error(_("invalid UTF-8 string 'new'"));
---
> 	    if (nc < 0) error(_("invalid UTF-8 string '%s'"), "new");
1106c1105
< 	    if (nc < 0) error(_("invalid multibyte string 'new'"));
---
> 	    if (nc < 0) error(_("invalid multibyte string '%s'"), "new");
1166c1165
< 		    error(_("invalid input multibyte string %d"), i+1);
---
> 		    error(_("invalid multibyte input string %d"), i+1);
1273c1272
< 	error(_("strtrim() requires a character vector"));
---
> 	error(_("'strtrim()' function  requires a character vector"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/coerce.c R/src/main/coerce.c
28a29
> #include <Localization.h>
32,33d32
< #define R_MSG_mode	_("invalid 'mode' argument")
< #define R_MSG_list_vec	_("applies only to lists and vectors")
77c76
< 	warning(_("NAs introduced by coercion"));
---
> 	warning(_("NA values introduced by coercion"));
384,385c383
< 	error(_("invalid data of mode '%s' (too short)"),
< 	      type2char(TYPEOF(v)));
---
> 	error(_("invalid data of mode '%s' (too short)"), type2char(TYPEOF(v)));
407c405
< 	UNIMPLEMENTED_TYPE("coerceToSymbol", v);
---
> 	UNIMPLEMENTED_TYPE("coerceToSymbol()", v);
460c458
< 	UNIMPLEMENTED_TYPE("coerceToLogical", v);
---
> 	UNIMPLEMENTED_TYPE("coerceToLogical()", v);
512c510
< 	UNIMPLEMENTED_TYPE("coerceToInteger", v);
---
> 	UNIMPLEMENTED_TYPE("coerceToInteger()", v);
564c562
< 	UNIMPLEMENTED_TYPE("coerceToReal", v);
---
> 	UNIMPLEMENTED_TYPE("coerceToReal()", v);
616c614
< 	UNIMPLEMENTED_TYPE("coerceToComplex", v);
---
> 	UNIMPLEMENTED_TYPE("coerceToComplex()", v);
694c692
< 	UNIMPLEMENTED_TYPE("coerceToRaw", v);
---
> 	UNIMPLEMENTED_TYPE("coerceToRaw()", v);
753c751
< 	UNIMPLEMENTED_TYPE("coerceToString", v);
---
> 	UNIMPLEMENTED_TYPE("coerceToString()", v);
799c797
< 	    UNIMPLEMENTED_TYPE("coerceToExpression", v);
---
> 	    UNIMPLEMENTED_TYPE("coerceToExpression()", v);
868c866
< 	UNIMPLEMENTED_TYPE("coerceToVectorList", v);
---
> 	UNIMPLEMENTED_TYPE("coerceToVectorList()", v);
915c913
< 	    UNIMPLEMENTED_TYPE("coerceToPairList", v);
---
> 	    UNIMPLEMENTED_TYPE("coerceToPairList()", v);
982c980
< 	    UNIMPLEMENTED_TYPE("coercePairList", v);
---
> 	    UNIMPLEMENTED_TYPE("coercePairList()", v);
986,987c984
< 	error(_("'pairlist' object cannot be coerced to type '%s'"),
< 	      type2char(type));
---
> 	error(_("an object of class \"%s\" cannot be coerced to type '%s'"), "pairlist", type2char(type));
1100c1097
< 	    UNIMPLEMENTED_TYPE("coerceVectorList", v);
---
> 	    UNIMPLEMENTED_TYPE("coerceVectorList()", v);
1104,1105c1101
< 	error(_("(list) object cannot be coerced to type '%s'"),
< 	      type2char(type));
---
> 	error(_("an object of class \"%s\" cannot be coerced to type '%s'"), "list", type2char(type));
1127,1128c1123
< 	warning(_("(symbol) object cannot be coerced to type '%s'"),
< 		type2char(type));
---
> 	warning(_("an object of class \"%s\" cannot be coerced to type '%s'"), "symbol", type2char(type));
1215c1210
< #define COERCE_ERROR_STRING "cannot coerce type '%s' to vector of type '%s'"
---
> #define COERCE_ERROR_STRING _("cannot coerce type '%s' to vector of type '%s'")
1427c1422
< 	errorcall_return(call, R_MSG_mode);
---
> 	errorcall(call, _("invalid '%s' argument"), "mode");
1476c1471
< 	errorcall_return(call, R_MSG_mode);
---
> 	errorcall(call, _("invalid '%s' argument"), "mode");
1562c1557
< 	    errorcall(call, _("invalid length 0 argument"));
---
> 	    errorcall(call, _("invalid argument of length 0"));
1608c1603
< 	    UNIMPLEMENTED_TYPE("asLogical", x);
---
> 	    UNIMPLEMENTED_TYPE("asLogical()", x);
1639c1634
< 	    UNIMPLEMENTED_TYPE("asInteger", x);
---
> 	    UNIMPLEMENTED_TYPE("asInteger()", x);
1675c1670
< 	    UNIMPLEMENTED_TYPE("asReal", x);
---
> 	    UNIMPLEMENTED_TYPE("asReal()", x);
1711c1706
< 	    UNIMPLEMENTED_TYPE("asComplex", x);
---
> 	    UNIMPLEMENTED_TYPE("asComplex()", x);
1889c1884
< 	errorcall(call, _("type \"single\" unimplemented in R"));
---
> 	errorcall(call, _("type \"single\" is unimplemented in R"));
1910c1905
< 	errorcall_return(call, R_MSG_mode);
---
> 	errorcall(call, _("invalid '%s' argument"), "mode");
1962c1957
< 	errorcall_return(call, "is.na " R_MSG_list_vec);
---
> 	errorcall_return(call, strcat(_("'%s' function applies only to lists and vectors"), "is.na()"));
2042,2043c2037
< 	warningcall(call, _("%s() applied to non-(list or vector) of type '%s'"),
< 		    "is.na", type2char(TYPEOF(x)));
---
> 	warningcall(call, _("'%s' method applied to non-(list or vector) of type '%s'"), "is.na()", type2char(TYPEOF(x)));
2157,2158c2151
< 	error("anyNA() applied to non-(list or vector) of type '%s'",
< 	      type2char(TYPEOF(x)));
---
> 	error(_("'%s' method applied to non-(list or vector) of type '%s'"), "anyNA()", type2char(TYPEOF(x)));
2169c2162
< 	errorcall(call, "anyNA takes 1 or 2 arguments");
---
> 	errorcall(call, _("'anyNA()' function takes 1 or 2 arguments"));
2207c2200
< 	errorcall_return(call, "is.nan " R_MSG_list_vec);
---
> 	errorcall_return(call, strcat(_("'%s' function applies only to lists and vectors"), "is.nan()"));
2268c2261
< 	errorcall_return(call, "is.finite " R_MSG_list_vec);
---
> 	errorcall_return(call, strcat(_("'%s' function applies only to lists and vectors"), "is.finite()"));
2328c2321
< 	errorcall_return(call, "is.infinite " R_MSG_list_vec);
---
> 	errorcall_return(call, strcat(_("'%s' function applies only to lists and vectors"), "is.infinite()"));
2388c2381
<     if (length(args) < 1) errorcall(call, _("'name' is missing"));
---
>     if (length(args) < 1) errorcall(call, _("'%s' argument is missing"), "name");
2397c2390
<     if (streql(str, ".Internal")) error("illegal usage");
---
>     if (streql(str, ".Internal")) error(_("illegal usage"));
2428c2421
< 	error(_("'what' must be a character string or a function"));
---
> 	error(_("'%s' argument must be a character string or a function"), "what");
2432c2425
< 	error(_("'args' must be a list or expression"));
---
> 	error(_("'%s' argument must be a list or expression"), "args");
2435c2428
< 	error(_("'args' must be a list"));
---
> 	error(_("'%s' argument must be a list"), "args");
2439c2432
< 	error(_("'envir' must be an environment"));
---
> 	error(_("'%s' argument must be an environment"), "envir");
2448c2441
< 	if (streql(str, ".Internal")) error("illegal usage");
---
> 	if (streql(str, ".Internal")) error(_("illegal usage"));
2452c2445
< 	    error("illegal usage");
---
> 	    error(_("illegal usage"));
2662c2655
<     warning(_("Setting class(x) to NULL;   result will no longer be an S4 object"));
---
>     warning(_("Setting 'class(x)' to NULL. Result will no longer be an S4 object"));
2665,2667c2658,2659
<     warning(_("Setting class(x) to multiple strings (\"%s\", \"%s\", ...); result will no longer be an S4 object"),
< 	    translateChar(STRING_ELT(newClass, 0)),
< 	    translateChar(STRING_ELT(newClass, 1)));
---
>     warning(_("Setting 'class(x)' to multiple strings (\"%s\", \"%s\", ...). Result will no longer be an S4 object"),
> 	    translateChar(STRING_ELT(newClass, 0)), translateChar(STRING_ELT(newClass, 1)));
2669,2670c2661
<     warning(_("Setting class(x) to \"%s\" sets attribute to NULL; result will no longer be an S4 object"),
< 	    CHAR(asChar(newClass)));
---
>     warning(_("Setting 'class(x)' to \"%s\" sets attribute to NULL. Result will no longer be an S4 object"), CHAR(asChar(newClass)));
2785c2776
< 	error(_("'value' must be non-null character string"));
---
> 	error(_("'%s' argument must be a non-empty character string"), "value");
2790c2781
< 	    error("use of 'real' is defunct: use 'double' instead");
---
> 	    error(_("use of 'real' is defunct: use 'double' instead"));
2792c2783
< 	    error("use of 'single' is defunct: use mode<- instead");
---
> 	    error(_("use of 'single' is defunct: use mode<- instead"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/colors.c R/src/main/colors.c
26a27
> #include <Localization.h>
53c54
<     if (!ptr_RGBpar3) error("package grDevices must be loaded");
---
>     if (!ptr_RGBpar3) error(_("package 'grDevices' must be loaded"));
67c68
<     if (!ptr_col2name) error("package grDevices must be loaded");
---
>     if (!ptr_col2name) error(_("package 'grDevices' must be loaded"));
75c76
<     if (!ptr_R_GE_str2col) error("package grDevices must be loaded");
---
>     if (!ptr_R_GE_str2col) error(_("package 'grDevices' must be loaded"));
83c84
<     if (!ptr_savePalette) error("package grDevices must be loaded");
---
>     if (!ptr_savePalette) error(_("package 'grDevices' must be loaded"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/complex.c R/src/main/complex.c
59a60
> #include <Localization.h>
62a64
> #include <R_ext/Itermacros.h>
201,206d202
< /* See arithmetic.c */
< #define mod_iterate(n1,n2,i1,i2) for (i=i1=i2=0; i<n; \
< 	i1 = (++i1 == n1) ? 0 : i1,\
< 	i2 = (++i2 == n2) ? 0 : i2,\
< 	++i)
< 
363c359
<     else errorcall(call, _("non-numeric argument to function"));
---
>     else errorcall(call, _("non-numeric argument passed to function"));
651c647
< 	warningcall(call, "NaNs produced in function \"%s\"", PRIMNAME(op));
---
> 	warningcall(call, _("NaN values produced in '%s' function"), PRIMNAME(op));
744c740
< 	warningcall(call, "NaNs produced in function \"%s\"", PRIMNAME(op));
---
> 	warningcall(call, _("NaN values produced in '%s' function"), PRIMNAME(op));
808c804
< 	UNIMPLEMENTED_TYPE("polyroot", z);
---
> 	UNIMPLEMENTED_TYPE("polyroot()", z);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/connections.c R/src/main/connections.c
76a77
> #include <Localization.h>
163c164
< 	error(_("connection not found"));
---
> 	error(_("connection was not found"));
204,207c205,207
< 	Rconnection this = getConnection(ncon);
< 	if(strcmp(this->class, "textConnection"))
< 	    warning(_("closing unused connection %d (%s)\n"),
< 		    ncon, this->description);
---
> 	Rconnection thiscon = getConnection(ncon);
> 	if(strcmp(thiscon->conclass, "textConnection"))
> 	    warning(_("closing unused connection %d (%s)"), ncon, thiscon->description);
287c287
<     error(_("%s not enabled for this connection"), "open");
---
>     error(_("'%s' is not enabled for this connection"), "open");
297c297
<     if(con->private) free(con->private);
---
>     if(con->conprivate) free(con->conprivate);
302c302
<     error(_("%s not enabled for this connection"), "printing");
---
>     error(_("'%s' is not enabled for this connection"), "printing");
436,437c436
< 		    warning(_("invalid input found on input connection '%s'"),
< 			    con->description);
---
> 		    warning(_("invalid input found on input connection '%s'"), con->description);
453c452
<     error(_("%s not enabled for this connection"), "'getc'");
---
>     error(_("'%s' is not enabled for this connection"), "getc");
458c457
<     error(_("%s not enabled for this connection"), "'seek'");
---
>     error(_("'%s' is not enabled for this connection"), "seek");
463c462
<     error(_("%s not enabled for this connection"), "truncation");
---
>     error(_("'%s' is not enabled for this connection"), "truncation");
474c473
<     error(_("%s not enabled for this connection"), "'read'");
---
>     error(_("'%s' is not enabled for this connection"), "read");
480c479
<     error(_("%s not enabled for this connection"), "'write'");
---
>     error(_("'%s' is not enabled for this connection"), "write");
483c482
< void init_con(Rconnection new, const char *description, int enc,
---
> void init_con(Rconnection newcon, const char *description, int enc,
486,507c485,506
<     strcpy(new->description, description);
<     new->enc = enc;
<     strncpy(new->mode, mode, 4); new->mode[4] = '\0';
<     new->isopen = new->incomplete = new->blocking = new->isGzcon = FALSE;
<     new->canread = new->canwrite = TRUE; /* in principle */
<     new->canseek = FALSE;
<     new->text = TRUE;
<     new->open = &null_open;
<     new->close = &null_close;
<     new->destroy = &null_destroy;
<     new->vfprintf = &null_vfprintf;
<     new->fgetc = new->fgetc_internal = &null_fgetc;
<     new->seek = &null_seek;
<     new->truncate = &null_truncate;
<     new->fflush = &null_fflush;
<     new->read = &null_read;
<     new->write = &null_write;
<     new->nPushBack = 0;
<     new->save = new->save2 = -1000;
<     new->private = NULL;
<     new->inconv = new->outconv = NULL;
<     new->UTF8out = FALSE;
---
>     strcpy(newcon->description, description);
>     newcon->enc = enc;
>     strncpy(newcon->mode, mode, 4); newcon->mode[4] = '\0';
>     newcon->isopen = newcon->incomplete = newcon->blocking = newcon->isGzcon = FALSE;
>     newcon->canread = newcon->canwrite = TRUE; /* in principle */
>     newcon->canseek = FALSE;
>     newcon->text = TRUE;
>     newcon->open = &null_open;
>     newcon->close = &null_close;
>     newcon->destroy = &null_destroy;
>     newcon->vfprintf = &null_vfprintf;
>     newcon->fgetc = newcon->fgetc_internal = &null_fgetc;
>     newcon->seek = &null_seek;
>     newcon->truncate = &null_truncate;
>     newcon->fflush = &null_fflush;
>     newcon->read = &null_read;
>     newcon->write = &null_write;
>     newcon->nPushBack = 0;
>     newcon->save = newcon->save2 = -1000;
>     newcon->conprivate = NULL;
>     newcon->inconv = newcon->outconv = NULL;
>     newcon->UTF8out = FALSE;
511,513c510,512
<     new->id = current_id;
<     new->ex_ptr = NULL;
<     new->status = NA_INTEGER;
---
>     newcon->id = current_id;
>     newcon->ex_ptr = NULL;
>     newcon->status = NA_INTEGER;
551c550
<     Rfileconn this = con->private;
---
>     Rfileconn thiscon = con->conprivate;
584c583
< 		"fdopen is not supported on this platform");
---
> 		_("'fdopen' is not supported on this platform"));
602,603c601,602
< 	strncpy(this->name, name, PATH_MAX);
<         this->name[PATH_MAX - 1] = '\0';
---
> 	strncpy(thiscon->name, name, PATH_MAX);
>         thiscon->name[PATH_MAX - 1] = '\0';
608c607
<     this->anon_file = temp;
---
>     thiscon->anon_file = temp;
610c609
<     this->fp = fp;
---
>     thiscon->fp = fp;
616,618c615,617
<     this->last_was_write = !con->canread;
<     this->rpos = 0;
<     if(con->canwrite) this->wpos = f_tell(fp);
---
>     thiscon->last_was_write = !con->canread;
>     thiscon->rpos = 0;
>     if(con->canwrite) thiscon->wpos = f_tell(fp);
637c636
<     Rfileconn this = con->private;
---
>     Rfileconn thiscon = con->conprivate;
639c638
< 	con->status = fclose(this->fp);
---
> 	con->status = fclose(thiscon->fp);
642c641
<     if(this->anon_file) unlink(this->name);
---
>     if(thiscon->anon_file) unlink(thiscon->name);
648c647
<     Rfileconn this = con->private;
---
>     Rfileconn thiscon = con->conprivate;
650,653c649,652
<     if(!this->last_was_write) {
< 	this->rpos = f_tell(this->fp);
< 	this->last_was_write = TRUE;
< 	f_seek(this->fp, this->wpos, SEEK_SET);
---
>     if(!thiscon->last_was_write) {
> 	thiscon->rpos = f_tell(thiscon->fp);
> 	thiscon->last_was_write = TRUE;
> 	f_seek(thiscon->fp, thiscon->wpos, SEEK_SET);
656c655
<     else return vfprintf(this->fp, format, ap);
---
>     else return vfprintf(thiscon->fp, format, ap);
661,662c660,661
<     Rfileconn this = con->private;
<     FILE *fp = this->fp;
---
>     Rfileconn thiscon = con->conprivate;
>     FILE *fp = thiscon->fp;
665,668c664,667
<     if(this->last_was_write) {
< 	this->wpos = f_tell(this->fp);
< 	this->last_was_write = FALSE;
< 	f_seek(this->fp, this->rpos, SEEK_SET);
---
>     if(thiscon->last_was_write) {
> 	thiscon->wpos = f_tell(thiscon->fp);
> 	thiscon->last_was_write = FALSE;
> 	f_seek(thiscon->fp, thiscon->rpos, SEEK_SET);
676,677c675,676
<     Rfileconn this = con->private;
<     FILE *fp = this->fp;
---
>     Rfileconn thiscon = con->conprivate;
>     FILE *fp = thiscon->fp;
683c682
<     if(this->last_was_write) this->wpos = pos; else this->rpos = pos;
---
>     if(thiscon->last_was_write) thiscon->wpos = pos; else thiscon->rpos = pos;
686,687c685,686
< 	pos = this->rpos;
< 	this->last_was_write = FALSE;
---
> 	pos = thiscon->rpos;
> 	thiscon->last_was_write = FALSE;
691,692c690,691
< 	pos = this->wpos;
< 	this->last_was_write = TRUE;
---
> 	pos = thiscon->wpos;
> 	thiscon->last_was_write = TRUE;
708,709c707,708
<     if(this->last_was_write) this->wpos = f_tell(this->fp);
<     else this->rpos = f_tell(this->fp);
---
>     if(thiscon->last_was_write) thiscon->wpos = f_tell(thiscon->fp);
>     else thiscon->rpos = f_tell(thiscon->fp);
715c714
<     Rfileconn this = con->private;
---
>     Rfileconn thiscon = con->conprivate;
717c716
<     FILE *fp = this->fp;
---
>     FILE *fp = thiscon->fp;
730c729
<     if(!this->last_was_write) this->rpos = f_tell(this->fp);
---
>     if(!thiscon->last_was_write) thiscon->rpos = f_tell(thiscon->fp);
736c735
<     error(_("file truncation unavailable on this platform"));
---
>     error(_("file truncation is unavailable on this platform"));
738,739c737,738
<     this->last_was_write = TRUE;
<     this->wpos = f_tell(this->fp);
---
>     thiscon->last_was_write = TRUE;
>     thiscon->wpos = f_tell(thiscon->fp);
744c743
<     FILE *fp = ((Rfileconn)(con->private))->fp;
---
>     FILE *fp = ((Rfileconn)(con->conprivate))->fp;
752,753c751,752
<     Rfileconn this = con->private;
<     FILE *fp = this->fp;
---
>     Rfileconn thiscon = con->conprivate;
>     FILE *fp = thiscon->fp;
755,758c754,757
<     if(this->last_was_write) {
< 	this->wpos = f_tell(this->fp);
< 	this->last_was_write = FALSE;
< 	f_seek(this->fp, this->rpos, SEEK_SET);
---
>     if(thiscon->last_was_write) {
> 	thiscon->wpos = f_tell(thiscon->fp);
> 	thiscon->last_was_write = FALSE;
> 	f_seek(thiscon->fp, thiscon->rpos, SEEK_SET);
766,767c765,766
<     Rfileconn this = con->private;
<     FILE *fp = this->fp;
---
>     Rfileconn thiscon = con->conprivate;
>     FILE *fp = thiscon->fp;
769,772c768,771
<     if(!this->last_was_write) {
< 	this->rpos = f_tell(this->fp);
< 	this->last_was_write = TRUE;
< 	f_seek(this->fp, this->wpos, SEEK_SET);
---
>     if(!thiscon->last_was_write) {
> 	thiscon->rpos = f_tell(thiscon->fp);
> 	thiscon->last_was_write = TRUE;
> 	f_seek(thiscon->fp, thiscon->wpos, SEEK_SET);
780,785c779,784
<     Rconnection new;
<     new = (Rconnection) malloc(sizeof(struct Rconn));
<     if(!new) error(_("allocation of file connection failed"));
<     new->class = (char *) malloc(strlen("file") + 1);
<     if(!new->class) {
< 	free(new);
---
>     Rconnection newcon;
>     newcon = (Rconnection) malloc(sizeof(struct Rconn));
>     if(!newcon) error(_("allocation of file connection failed"));
>     newcon->conclass = (char *) malloc(strlen("file") + 1);
>     if(!newcon->conclass) {
> 	free(newcon);
788,791c787,790
<     strcpy(new->class, "file");
<     new->description = (char *) malloc(strlen(description) + 1);
<     if(!new->description) {
< 	free(new->class); free(new);
---
>     strcpy(newcon->conclass, "file");
>     newcon->description = (char *) malloc(strlen(description) + 1);
>     if(!newcon->description) {
> 	free(newcon->conclass); free(newcon);
794,808c793,807
<     init_con(new, description, enc, mode);
<     new->open = &file_open;
<     new->close = &file_close;
<     new->vfprintf = &file_vfprintf;
<     new->fgetc_internal = &file_fgetc_internal;
<     new->fgetc = &dummy_fgetc;
<     new->seek = &file_seek;
<     new->truncate = &file_truncate;
<     new->fflush = &file_fflush;
<     new->read = &file_read;
<     new->write = &file_write;
<     new->canseek = (raw == 0);
<     new->private = (void *) malloc(sizeof(struct fileconn));
<     if(!new->private) {
< 	free(new->description); free(new->class); free(new);
---
>     init_con(newcon, description, enc, mode);
>     newcon->open = &file_open;
>     newcon->close = &file_close;
>     newcon->vfprintf = &file_vfprintf;
>     newcon->fgetc_internal = &file_fgetc_internal;
>     newcon->fgetc = &dummy_fgetc;
>     newcon->seek = &file_seek;
>     newcon->truncate = &file_truncate;
>     newcon->fflush = &file_fflush;
>     newcon->read = &file_read;
>     newcon->write = &file_write;
>     newcon->canseek = (raw == 0);
>     newcon->conprivate = (void *) malloc(sizeof(struct fileconn));
>     if(!newcon->conprivate) {
> 	free(newcon->description); free(newcon->conclass); free(newcon);
811,812c810,811
<     ((Rfileconn)(new->private))->raw = raw;
<     return new;
---
>     ((Rfileconn)(newcon->conprivate))->raw = raw;
>     return newcon;
839c838
<     Rfifoconn this = con->private;
---
>     Rfifoconn thiscon = con->conprivate;
860,861c859
< 		warning(_("cannot create fifo '%s', reason '%s'"), name,
< 			strerror(errno));
---
> 		warning(_("cannot create fifo connection '%s', reason '%s'"), name, strerror(errno));
866c864
< 		warning(_("'%s' exists but is not a fifo"), name);
---
> 		warning(_("'%s' exists but is not a fifo connection"), name);
880,881c878,879
< 	if(errno == ENXIO) warning(_("fifo '%s' is not ready"), name);
< 	else warning(_("cannot open fifo '%s'"), name);
---
> 	if(errno == ENXIO) warning(_("fifo connection '%s' is not ready"), name);
> 	else warning(_("cannot open fifo connection '%s'"), name);
889c887
<     this->fd = fd;
---
>     thiscon->fd = fd;
901c899
<     con->status = close(((Rfifoconn)(con->private))->fd);
---
>     con->status = close(((Rfifoconn)(con->conprivate))->fd);
907c905
<     Rfifoconn this = con->private;
---
>     Rfifoconn thiscon = con->conprivate;
911c909
<     n = read(this->fd, (char *)&c, 1);
---
>     n = read(thiscon->fd, (char *)&c, 1);
918c916
<     Rfifoconn this = con->private;
---
>     Rfifoconn thiscon = con->conprivate;
922,923c920,921
< 	error(_("too large a block specified"));
<     return read(this->fd, ptr, size * nitems)/size;
---
> 	error(_("specified block is too large"));
>     return read(thiscon->fd, ptr, size * nitems)/size;
929c927
<     Rfifoconn this = con->private;
---
>     Rfifoconn thiscon = con->conprivate;
933,934c931,932
< 	error(_("too large a block specified"));
<     return write(this->fd, ptr, size * nitems)/size;
---
>       error(_("specified block is too large"));
>     return write(thiscon->fd, ptr, size * nitems)/size;
977c975
<     Rfifoconn this = con->private;
---
>     Rfifoconn thiscon = con->conprivate;
1015,1017c1013,1015
<     this->hdl_namedpipe = NULL;
<     this->overlapped_write = (LPOVERLAPPED)malloc(sizeof(OVERLAPPED));
<     this->overlapped_write = CreateEventA(NULL, TRUE, TRUE, NULL);
---
>     thiscon->hdl_namedpipe = NULL;
>     thiscon->overlapped_write = (LPOVERLAPPED)malloc(sizeof(OVERLAPPED));
>     thiscon->overlapped_write = CreateEventA(NULL, TRUE, TRUE, NULL);
1024c1022
< 	this->hdl_namedpipe = 
---
> 	thiscon->hdl_namedpipe =
1030c1028
< 	if (this->hdl_namedpipe == INVALID_HANDLE_VALUE) {
---
> 	if (thiscon->hdl_namedpipe == INVALID_HANDLE_VALUE) {
1037,1038c1035
< 		warning(_("cannot create fifo '%s', reason '%s'"), 
< 			hch_pipename, hch_err_msg);
---
> 		warning(_("cannot create fifo '%s', reason '%s'"), hch_pipename, hch_err_msg);
1047c1044
< 	this->hdl_namedpipe <= (HANDLE)(LONG_PTR) 0) {
---
> 	thiscon->hdl_namedpipe <= (HANDLE)(LONG_PTR) 0) {
1051c1048
< 	this->hdl_namedpipe = 
---
> 	thiscon->hdl_namedpipe =
1057c1054
< 	if (this->hdl_namedpipe == INVALID_HANDLE_VALUE) {
---
> 	if (thiscon->hdl_namedpipe == INVALID_HANDLE_VALUE) {
1059,1060c1056
< 	    warning(_("cannot open fifo '%s', reason '%s'"), 
< 		    hch_pipename, hch_err_msg);
---
> 	    warning(_("cannot open fifo '%s', reason '%s'"), hch_pipename, hch_err_msg);
1071c1067
<     if (boo_retvalue && this->hdl_namedpipe) {
---
>     if (boo_retvalue && thiscon->hdl_namedpipe) {
1084c1080
<     Rfifoconn this = con->private;
---
>     Rfifoconn thiscon = con->conprivate;
1086,1087c1082,1083
<     con->status = CloseHandle(this->hdl_namedpipe) ? 0 : -1;
<     if (this->overlapped_write) CloseHandle(this->overlapped_write);
---
>     con->status = CloseHandle(thiscon->hdl_namedpipe) ? 0 : -1;
>     if (thiscon->overlapped_write) CloseHandle(thiscon->overlapped_write);
1092c1088
<     Rfifoconn this = con->private;
---
>     Rfifoconn thiscon = con->conprivate;
1097c1093
< 	error(_("too large a block specified"));
---
> 	error(_("specified block is too large"));
1101c1097
<     ReadFile(this->hdl_namedpipe, buffer, 
---
>     ReadFile(thiscon->hdl_namedpipe, buffer,
1103c1099
< 	     this->overlapped_write);
---
> 	     thiscon->overlapped_write);
1112c1108
<     Rfifoconn this = con->private;
---
>     Rfifoconn thiscon = con->conprivate;
1116c1112
< 	error(_("too large a block specified"));
---
> 	error(_("specified block is too large"));
1119c1115
<     ConnectNamedPipe(this->hdl_namedpipe, NULL);
---
>     ConnectNamedPipe(thiscon->hdl_namedpipe, NULL);
1128c1124
<     if (WriteFile(this->hdl_namedpipe, buffer, 
---
>     if (WriteFile(thiscon->hdl_namedpipe, buffer,
1145c1141
<     Rfifoconn  this = con->private;
---
>     Rfifoconn  thiscon = con->conprivate;
1152c1148
<     PeekNamedPipe(this->hdl_namedpipe, NULL, 0, NULL, &available_bytes, NULL);
---
>     PeekNamedPipe(thiscon->hdl_namedpipe, NULL, 0, NULL, &available_bytes, NULL);
1156c1152
< 	ReadFile(this->hdl_namedpipe, &c, len, &read_byte, NULL);
---
> 	ReadFile(thiscon->hdl_namedpipe, &c, len, &read_byte, NULL);
1166,1171c1162,1167
<     Rconnection new;
<     new = (Rconnection) malloc(sizeof(struct Rconn));
<     if(!new) error(_("allocation of fifo connection failed"));
<     new->class = (char *) malloc(strlen("fifo") + 1);
<     if(!new->class) {
< 	free(new);
---
>     Rconnection newcon;
>     newcon = (Rconnection) malloc(sizeof(struct Rconn));
>     if(!newcon) error(_("allocation of fifo connection failed"));
>     newcon->conclass = (char *) malloc(strlen("fifo") + 1);
>     if(!newcon->conclass) {
> 	free(newcon);
1174,1177c1170,1173
<     strcpy(new->class, "fifo");
<     new->description = (char *) malloc(strlen(description) + 1);
<     if(!new->description) {
< 	free(new->class); free(new);
---
>     strcpy(newcon->conclass, "fifo");
>     newcon->description = (char *) malloc(strlen(description) + 1);
>     if(!newcon->description) {
> 	free(newcon->conclass); free(newcon);
1180,1193c1176,1189
<     init_con(new, description, CE_NATIVE, mode);
<     new->open = &fifo_open;
<     new->close = &fifo_close;
<     new->vfprintf = &dummy_vfprintf;
<     new->fgetc_internal = &fifo_fgetc_internal;
<     new->fgetc = &dummy_fgetc;
<     new->seek = &null_seek;
<     new->truncate = &null_truncate;
<     new->fflush = &null_fflush;
<     new->read = &fifo_read;
<     new->write = &fifo_write;
<     new->private = (void *) malloc(sizeof(struct fifoconn));
<     if(!new->private) {
< 	free(new->description); free(new->class); free(new);
---
>     init_con(newcon, description, CE_NATIVE, mode);
>     newcon->open = &fifo_open;
>     newcon->close = &fifo_close;
>     newcon->vfprintf = &dummy_vfprintf;
>     newcon->fgetc_internal = &fifo_fgetc_internal;
>     newcon->fgetc = &dummy_fgetc;
>     newcon->seek = &null_seek;
>     newcon->truncate = &null_truncate;
>     newcon->fflush = &null_fflush;
>     newcon->read = &fifo_read;
>     newcon->write = &fifo_write;
>     newcon->conprivate = (void *) malloc(sizeof(struct fifoconn));
>     if(!newcon->conprivate) {
> 	free(newcon->description); free(newcon->conclass); free(newcon);
1196c1192
<     return new;
---
>     return newcon;
1202c1198
<     SEXP sfile, sopen, ans, class, enc;
---
>     SEXP sfile, sopen, ans, classs, enc;
1212c1208
< 	warning(_("only first element of 'description' argument used"));
---
> 	warning(_("only first element of '%s' argument will be used"), "description");
1229c1225
< 	    warning(_("fifo(\"\") only supports open = \"w+\" and open = \"w+b\": using the former"));
---
> 	    warning(_("'%s' only supports 'open = \"w+\"' and 'open = \"w+b\"': using the former"), "fifo(\"\")");
1249,1252c1245,1248
<     PROTECT(class = allocVector(STRSXP, 2));
<     SET_STRING_ELT(class, 0, mkChar("fifo"));
<     SET_STRING_ELT(class, 1, mkChar("connection"));
<     classgets(ans, class);
---
>     PROTECT(classs = allocVector(STRSXP, 2));
>     SET_STRING_ELT(classs, 0, mkChar("fifo"));
>     SET_STRING_ELT(classs, 1, mkChar("connection"));
>     classgets(ans, classs);
1270c1266
<     Rfileconn this = con->private;
---
>     Rfileconn thiscon = con->conprivate;
1289c1285
< 	    warning(_("cannot pipe() cmd '%ls': %s"), wname, strerror(errno));
---
> 	    warning(_("cannot open 'pipe()' command '%ls': %s"), wname, strerror(errno));
1296,1297c1292
< 	warning(_("cannot open pipe() cmd '%s': %s"), con->description,
< 		strerror(errno));
---
> 	warning(_("cannot open 'pipe()' command '%s': %s"), con->description, strerror(errno));
1300c1295
<     this->fp = fp;
---
>     thiscon->fp = fp;
1306,1307c1301,1302
<     this->last_was_write = !con->canread;
<     this->rpos = this->wpos = 0;
---
>     thiscon->last_was_write = !con->canread;
>     thiscon->rpos = thiscon->wpos = 0;
1315c1310
<     con->status = pclose(((Rfileconn)(con->private))->fp);
---
>     con->status = pclose(((Rfileconn)(con->conprivate))->fp);
1322,1327c1317,1322
<     Rconnection new;
<     new = (Rconnection) malloc(sizeof(struct Rconn));
<     if(!new) error(_("allocation of pipe connection failed"));
<     new->class = (char *) malloc(strlen("pipe") + 1);
<     if(!new->class) {
< 	free(new);
---
>     Rconnection newcon;
>     newcon = (Rconnection) malloc(sizeof(struct Rconn));
>     if(!newcon) error(_("allocation of pipe connection failed"));
>     newcon->conclass = (char *) malloc(strlen("pipe") + 1);
>     if(!newcon->conclass) {
> 	free(newcon);
1330,1333c1325,1328
<     strcpy(new->class, "pipe");
<     new->description = (char *) malloc(strlen(description) + 1);
<     if(!new->description) {
< 	free(new->class); free(new);
---
>     strcpy(newcon->conclass, "pipe");
>     newcon->description = (char *) malloc(strlen(description) + 1);
>     if(!newcon->description) {
> 	free(newcon->conclass); free(newcon);
1336,1347c1331,1342
<     init_con(new, description, ienc, mode);
<     new->open = &pipe_open;
<     new->close = &pipe_close;
<     new->vfprintf = &file_vfprintf;
<     new->fgetc_internal = &file_fgetc_internal;
<     new->fgetc = &dummy_fgetc;
<     new->fflush = &file_fflush;
<     new->read = &file_read;
<     new->write = &file_write;
<     new->private = (void *) malloc(sizeof(struct fileconn));
<     if(!new->private) {
< 	free(new->description); free(new->class); free(new);
---
>     init_con(newcon, description, ienc, mode);
>     newcon->open = &pipe_open;
>     newcon->close = &pipe_close;
>     newcon->vfprintf = &file_vfprintf;
>     newcon->fgetc_internal = &file_fgetc_internal;
>     newcon->fgetc = &dummy_fgetc;
>     newcon->fflush = &file_fflush;
>     newcon->read = &file_read;
>     newcon->write = &file_write;
>     newcon->conprivate = (void *) malloc(sizeof(struct fileconn));
>     if(!newcon->conprivate) {
> 	free(newcon->description); free(newcon->conclass); free(newcon);
1350c1345
<     return new;
---
>     return newcon;
1360c1355
<     SEXP scmd, sopen, ans, class, enc;
---
>     SEXP scmd, sopen, ans, classs, enc;
1371c1366
< 	warning(_("only first element of 'description' argument used"));
---
> 	warning(_("only first element of '%s' argument will be used"), "description");
1414,1415c1409,1410
<     PROTECT(class = allocVector(STRSXP, 2));
<     SET_STRING_ELT(class, 0, mkChar("pipe"));
---
>     PROTECT(classs = allocVector(STRSXP, 2));
>     SET_STRING_ELT(classs, 0, mkChar("pipe"));
1418c1413
< 	SET_STRING_ELT(class, 0, mkChar("pipeWin32"));
---
> 	SET_STRING_ELT(classs, 0, mkChar("pipeWin32"));
1420,1421c1415,1416
<     SET_STRING_ELT(class, 1, mkChar("connection"));
<     classgets(ans, class);
---
>     SET_STRING_ELT(classs, 1, mkChar("connection"));
>     classgets(ans, classs);
1456c1451
<     Rgzfileconn gzcon = con->private;
---
>     Rgzfileconn gzcon = con->conprivate;
1470c1465
<     ((Rgzfileconn)(con->private))->fp = fp;
---
>     ((Rgzfileconn)(con->conprivate))->fp = fp;
1482c1477
<     R_gzclose(((Rgzfileconn)(con->private))->fp);
---
>     R_gzclose(((Rgzfileconn)(con->conprivate))->fp);
1488c1483
<     gzFile fp = ((Rgzfileconn)(con->private))->fp;
---
>     gzFile fp = ((Rgzfileconn)(con->conprivate))->fp;
1498c1493
<     gzFile  fp = ((Rgzfileconn)(con->private))->fp;
---
>     gzFile  fp = ((Rgzfileconn)(con->conprivate))->fp;
1506c1501
<     case 3: error(_("whence = \"end\" is not implemented for gzfile connections"));
---
>     case 3: error(_("'whence = \"end\"' option is not implemented for gzfile connections"));
1523c1518
<     gzFile fp = ((Rgzfileconn)(con->private))->fp;
---
>     gzFile fp = ((Rgzfileconn)(con->conprivate))->fp;
1526c1521
< 	error(_("too large a block specified"));
---
> 	error(_("specified block is too large"));
1533c1528
<     gzFile fp = ((Rgzfileconn)(con->private))->fp;
---
>     gzFile fp = ((Rgzfileconn)(con->conprivate))->fp;
1536c1531
< 	error(_("too large a block specified"));
---
> 	error(_("specified block is too large"));
1543,1548c1538,1543
<     Rconnection new;
<     new = (Rconnection) malloc(sizeof(struct Rconn));
<     if(!new) error(_("allocation of gzfile connection failed"));
<     new->class = (char *) malloc(strlen("gzfile") + 1);
<     if(!new->class) {
< 	free(new);
---
>     Rconnection newcon;
>     newcon = (Rconnection) malloc(sizeof(struct Rconn));
>     if(!newcon) error(_("allocation of gzfile connection failed"));
>     newcon->conclass = (char *) malloc(strlen("gzfile") + 1);
>     if(!newcon->conclass) {
> 	free(newcon);
1551,1554c1546,1549
<     strcpy(new->class, "gzfile");
<     new->description = (char *) malloc(strlen(description) + 1);
<     if(!new->description) {
< 	free(new->class); free(new);
---
>     strcpy(newcon->conclass, "gzfile");
>     newcon->description = (char *) malloc(strlen(description) + 1);
>     if(!newcon->description) {
> 	free(newcon->conclass); free(newcon);
1557c1552
<     init_con(new, description, CE_NATIVE, mode);
---
>     init_con(newcon, description, CE_NATIVE, mode);
1559,1571c1554,1566
<     new->canseek = TRUE;
<     new->open = &gzfile_open;
<     new->close = &gzfile_close;
<     new->vfprintf = &dummy_vfprintf;
<     new->fgetc_internal = &gzfile_fgetc_internal;
<     new->fgetc = &dummy_fgetc;
<     new->seek = &gzfile_seek;
<     new->fflush = &gzfile_fflush;
<     new->read = &gzfile_read;
<     new->write = &gzfile_write;
<     new->private = (void *) malloc(sizeof(struct gzfileconn));
<     if(!new->private) {
< 	free(new->description); free(new->class); free(new);
---
>     newcon->canseek = TRUE;
>     newcon->open = &gzfile_open;
>     newcon->close = &gzfile_close;
>     newcon->vfprintf = &dummy_vfprintf;
>     newcon->fgetc_internal = &gzfile_fgetc_internal;
>     newcon->fgetc = &dummy_fgetc;
>     newcon->seek = &gzfile_seek;
>     newcon->fflush = &gzfile_fflush;
>     newcon->read = &gzfile_read;
>     newcon->write = &gzfile_write;
>     newcon->conprivate = (void *) malloc(sizeof(struct gzfileconn));
>     if(!newcon->conprivate) {
> 	free(newcon->description); free(newcon->conclass); free(newcon);
1574,1575c1569,1570
<     ((Rgzfileconn)new->private)->compress = compress;
<     return new;
---
>     ((Rgzfileconn)newcon->conprivate)->compress = compress;
>     return newcon;
1587c1582
<     Rbzfileconn bz = (Rbzfileconn) con->private;
---
>     Rbzfileconn bz = (Rbzfileconn) con->conprivate;
1636c1631
<     Rbzfileconn bz = con->private;
---
>     Rbzfileconn bz = con->conprivate;
1649c1644
<     Rbzfileconn bz = con->private;
---
>     Rbzfileconn bz = con->conprivate;
1655c1650
< 	error(_("too large a block specified"));
---
> 	error(_("specified block is too large"));
1710c1705
<     Rbzfileconn bz = con->private;
---
>     Rbzfileconn bz = con->conprivate;
1715c1710
< 	error(_("too large a block specified"));
---
> 	error(_("specified block is too large"));
1724,1729c1719,1724
<     Rconnection new;
<     new = (Rconnection) malloc(sizeof(struct Rconn));
<     if(!new) error(_("allocation of bzfile connection failed"));
<     new->class = (char *) malloc(strlen("bzfile") + 1);
<     if(!new->class) {
< 	free(new);
---
>     Rconnection newcon;
>     newcon = (Rconnection) malloc(sizeof(struct Rconn));
>     if(!newcon) error(_("allocation of bzfile connection failed"));
>     newcon->conclass = (char *) malloc(strlen("bzfile") + 1);
>     if(!newcon->conclass) {
> 	free(newcon);
1732,1735c1727,1730
<     strcpy(new->class, "bzfile");
<     new->description = (char *) malloc(strlen(description) + 1);
<     if(!new->description) {
< 	free(new->class); free(new);
---
>     strcpy(newcon->conclass, "bzfile");
>     newcon->description = (char *) malloc(strlen(description) + 1);
>     if(!newcon->description) {
> 	free(newcon->conclass); free(newcon);
1738c1733
<     init_con(new, description, CE_NATIVE, mode);
---
>     init_con(newcon, description, CE_NATIVE, mode);
1740,1752c1735,1747
<     new->canseek = FALSE;
<     new->open = &bzfile_open;
<     new->close = &bzfile_close;
<     new->vfprintf = &dummy_vfprintf;
<     new->fgetc_internal = &bzfile_fgetc_internal;
<     new->fgetc = &dummy_fgetc;
<     new->seek = &null_seek;
<     new->fflush = &null_fflush;
<     new->read = &bzfile_read;
<     new->write = &bzfile_write;
<     new->private = (void *) malloc(sizeof(struct bzfileconn));
<     if(!new->private) {
< 	free(new->description); free(new->class); free(new);
---
>     newcon->canseek = FALSE;
>     newcon->open = &bzfile_open;
>     newcon->close = &bzfile_close;
>     newcon->vfprintf = &dummy_vfprintf;
>     newcon->fgetc_internal = &bzfile_fgetc_internal;
>     newcon->fgetc = &dummy_fgetc;
>     newcon->seek = &null_seek;
>     newcon->fflush = &null_fflush;
>     newcon->read = &bzfile_read;
>     newcon->write = &bzfile_write;
>     newcon->conprivate = (void *) malloc(sizeof(struct bzfileconn));
>     if(!newcon->conprivate) {
> 	free(newcon->description); free(newcon->conclass); free(newcon);
1755,1756c1750,1751
<     ((Rbzfileconn)new->private)->compress = compress;
<     return new;
---
>     ((Rbzfileconn)newcon->conprivate)->compress = compress;
>     return newcon;
1774c1769
<     Rxzfileconn xz = con->private;
---
>     Rxzfileconn xz = con->conprivate;
1808c1803
< 	    error("problem setting presets");
---
> 	    error(_("problem with setting presets"));
1828c1823
<     Rxzfileconn xz = con->private;
---
>     Rxzfileconn xz = con->conprivate;
1840c1835
< 	    if (res != nout) error("fwrite error");
---
> 	    if (res != nout) error(_("'fwrite' error"));
1852c1847
<     Rxzfileconn xz = con->private;
---
>     Rxzfileconn xz = con->conprivate;
1875c1870
< 		    warning("lzma decoder needed more memory");
---
> 		    warning(_("lzma decoder needed more memory"));
1878c1873
< 		    warning("lzma decoder format error");
---
> 		    warning(_("lzma decoder format error"));
1881c1876
< 		    warning("lzma decoder corrupt data");
---
> 		    warning(_("lzma decoder corrupt data"));
1884c1879
< 		    warning("lzma decoding result %d", ret);
---
> 		    warning(_("lzma decoding result %d"), ret);
1907c1902
<     Rxzfileconn xz = con->private;
---
>     Rxzfileconn xz = con->conprivate;
1924c1919
< 		warning("lzma encoder needed more memory");
---
> 		warning(_("lzma encoder needed more memory"));
1927c1922
< 		warning("lzma encoding result %d", ret);
---
> 		warning(_("lzma encoding result %d"), ret);
1933c1928
< 	if (res != nout) error("fwrite error");
---
> 	if (res != nout) error(_("'fwrite' error"));
1941,1946c1936,1941
<     Rconnection new;
<     new = (Rconnection) malloc(sizeof(struct Rconn));
<     if(!new) error(_("allocation of xzfile connection failed"));
<     new->class = (char *) malloc(strlen("xzfile") + 1);
<     if(!new->class) {
< 	free(new);
---
>     Rconnection newcon;
>     newcon = (Rconnection) malloc(sizeof(struct Rconn));
>     if(!newcon) error(_("allocation of xzfile connection failed"));
>     newcon->conclass = (char *) malloc(strlen("xzfile") + 1);
>     if(!newcon->conclass) {
> 	free(newcon);
1949,1952c1944,1947
<     strcpy(new->class, "xzfile");
<     new->description = (char *) malloc(strlen(description) + 1);
<     if(!new->description) {
< 	free(new->class); free(new);
---
>     strcpy(newcon->conclass, "xzfile");
>     newcon->description = (char *) malloc(strlen(description) + 1);
>     if(!newcon->description) {
> 	free(newcon->conclass); free(newcon);
1955c1950
<     init_con(new, description, CE_NATIVE, mode);
---
>     init_con(newcon, description, CE_NATIVE, mode);
1957,1970c1952,1965
<     new->canseek = FALSE;
<     new->open = &xzfile_open;
<     new->close = &xzfile_close;
<     new->vfprintf = &dummy_vfprintf;
<     new->fgetc_internal = &xzfile_fgetc_internal;
<     new->fgetc = &dummy_fgetc;
<     new->seek = &null_seek;
<     new->fflush = &null_fflush;
<     new->read = &xzfile_read;
<     new->write = &xzfile_write;
<     new->private = (void *) malloc(sizeof(struct xzfileconn));
<     memset(new->private, 0, sizeof(struct xzfileconn));
<     if(!new->private) {
< 	free(new->description); free(new->class); free(new);
---
>     newcon->canseek = FALSE;
>     newcon->open = &xzfile_open;
>     newcon->close = &xzfile_close;
>     newcon->vfprintf = &dummy_vfprintf;
>     newcon->fgetc_internal = &xzfile_fgetc_internal;
>     newcon->fgetc = &dummy_fgetc;
>     newcon->seek = &null_seek;
>     newcon->fflush = &null_fflush;
>     newcon->read = &xzfile_read;
>     newcon->write = &xzfile_write;
>     newcon->conprivate = (void *) malloc(sizeof(struct xzfileconn));
>     memset(newcon->conprivate, 0, sizeof(struct xzfileconn));
>     if(!newcon->conprivate) {
> 	free(newcon->description); free(newcon->conclass); free(newcon);
1973,1975c1968,1970
<     ((Rxzfileconn) new->private)->type = type;
<     ((Rxzfileconn) new->private)->compress = compress;
<     return new;
---
>     ((Rxzfileconn) newcon->conprivate)->type = type;
>     ((Rxzfileconn) newcon->conprivate)->compress = compress;
>     return newcon;
1981c1976
<     SEXP sfile, sopen, ans, class, enc;
---
>     SEXP sfile, sopen, ans, classs, enc;
1993c1988
< 	warning(_("only first element of 'description' argument used"));
---
> 	warning(_("only first element of '%s' argument will be used"), "description");
2030c2025
< 		    error(_("this is a %s-compressed file which this build of R does not support"), "lzop");
---
> 		    error(_("this is a file compressed using '%s' which this build of R does not support"), "lzop");
2065c2060
<     PROTECT(class = allocVector(STRSXP, 2));
---
>     PROTECT(classs = allocVector(STRSXP, 2));
2068c2063
< 	SET_STRING_ELT(class, 0, mkChar("gzfile"));
---
> 	SET_STRING_ELT(classs, 0, mkChar("gzfile"));
2071c2066
< 	SET_STRING_ELT(class, 0, mkChar("bzfile"));
---
> 	SET_STRING_ELT(classs, 0, mkChar("bzfile"));
2074c2069
< 	SET_STRING_ELT(class, 0, mkChar("xzfile"));
---
> 	SET_STRING_ELT(classs, 0, mkChar("xzfile"));
2077,2078c2072,2073
<     SET_STRING_ELT(class, 1, mkChar("connection"));
<     classgets(ans, class);
---
>     SET_STRING_ELT(classs, 1, mkChar("connection"));
>     classgets(ans, classs);
2100c2095
<     Rclpconn this = con->private;
---
>     Rclpconn thiscon = con->conprivate;
2105c2100
<     this->pos = 0;
---
>     thiscon->pos = 0;
2116,2119c2111,2114
< 	    this->buff = (char *)malloc(len + 1);
< 	    this->last = this->len = len;
< 	    if(this->buff) {
< 		strcpy(this->buff, pc);
---
> 	    thiscon->buff = (char *)malloc(len + 1);
> 	    thiscon->last = thiscon->len = len;
> 	    if(thiscon->buff) {
> 		strcpy(thiscon->buff, pc);
2125c2120
< 		this->buff = NULL; this->last = this->len = 0;
---
> 		thiscon->buff = NULL; thiscon->last = thiscon->len = 0;
2130c2125
< 	    this->buff = NULL; this->last = this->len = 0;
---
> 	    thiscon->buff = NULL; thiscon->last = thiscon->len = 0;
2135c2130
< 	Rboolean res = R_ReadClipboard(this, con->description);
---
> 	Rboolean res = R_ReadClipboard(thiscon, con->description);
2139,2141c2134,2136
< 	int len = (this->sizeKB)*1024;
< 	this->buff = (char *) malloc(len + 1);
< 	if(!this->buff) {
---
> 	int len = (thiscon->sizeKB)*1024;
> 	thiscon->buff = (char *) malloc(len + 1);
> 	if(!thiscon->buff) {
2145,2146c2140,2141
< 	this->len = len;
< 	this->last = 0;
---
> 	thiscon->len = len;
> 	thiscon->last = 0;
2151c2146
<     this->warned = FALSE;
---
>     thiscon->warned = FALSE;
2159c2154
<     Rclpconn this = con->private;
---
>     Rclpconn thiscon = con->conprivate;
2163c2158
<     if ( (hglb = GlobalAlloc(GHND, this->len)) &&
---
>     if ( (hglb = GlobalAlloc(GHND, thiscon->len)) &&
2165,2166c2160,2161
< 	p = this->buff;
< 	while(p < this->buff + this->pos) *s++ = *p++;
---
> 	p = thiscon->buff;
> 	while(p < thiscon->buff + thiscon->pos) *s++ = *p++;
2185c2180
<     Rclpconn this = con->private;
---
>     Rclpconn thiscon = con->conprivate;
2190c2185
<     if(this-> buff) free(this->buff);
---
>     if(thiscon-> buff) free(thiscon->buff);
2195c2190
<     Rclpconn this = con->private;
---
>     Rclpconn thiscon = con->conprivate;
2197,2198c2192,2193
<     if (this->pos >= this->len) return R_EOF;
<     return this->buff[this->pos++];
---
>     if (thiscon->pos >= thiscon->len) return R_EOF;
>     return thiscon->buff[thiscon->pos++];
2203,2204c2198,2199
<     Rclpconn this = con->private;
<     int newpos, oldpos = this->pos;
---
>     Rclpconn thiscon = con->conprivate;
>     int newpos, oldpos = thiscon->pos;
2209,2210c2204,2205
<     case 2: newpos = this->pos + (int) where; break;
<     case 3: newpos = this->last + (int) where; break;
---
>     case 2: newpos = thiscon->pos + (int) where; break;
>     case 3: newpos = thiscon->last + (int) where; break;
2213c2208
<     if(newpos < 0 || newpos >= this->last)
---
>     if(newpos < 0 || newpos >= thiscon->last)
2215c2210
<     else this->pos = newpos;
---
>     else thiscon->pos = newpos;
2222c2217
<     Rclpconn this = con->private;
---
>     Rclpconn thiscon = con->conprivate;
2226c2221
<     this->last = this->pos;
---
>     thiscon->last = thiscon->pos;
2239,2240c2234,2235
<     Rclpconn this = con->private;
<     int available = this->len - this->pos, request = (int)(size*nitems), used;
---
>     Rclpconn thiscon = con->conprivate;
>     int available = thiscon->len - thiscon->pos, request = (int)(size*nitems), used;
2242c2237
< 	error(_("too large a block specified"));
---
> 	error(_("specified block is too large"));
2244,2245c2239,2240
<     strncpy(ptr, this->buff, used);
<     this->pos += used;
---
>     strncpy(ptr, thiscon->buff, used);
>     thiscon->pos += used;
2252c2247
<     Rclpconn this = con->private;
---
>     Rclpconn thiscon = con->conprivate;
2254c2249
<     char c, *p = (char *) ptr, *q = this->buff + this->pos;
---
>     char c, *p = (char *) ptr, *q = thiscon->buff + thiscon->pos;
2259c2254
< 	error(_("too large a block specified"));
---
> 	error(_("specified block is too large"));
2262c2257
< 	if(this->pos >= this->len) break;
---
> 	if(thiscon->pos >= thiscon->len) break;
2268,2269c2263,2264
< 	    this->pos++;
< 	    if(this->pos >= this->len) break;
---
> 	    thiscon->pos++;
> 	    if(thiscon->pos >= thiscon->len) break;
2273c2268
< 	this->pos++;
---
> 	thiscon->pos++;
2276c2271
<     if (used < len && !this->warned) {
---
>     if (used < len && !thiscon->warned) {
2278c2273
< 	this->warned = TRUE;
---
> 	thiscon->warned = TRUE;
2280c2275
<     if(this->last < this->pos) this->last = this->pos;
---
>     if(thiscon->last < thiscon->pos) thiscon->last = thiscon->pos;
2286c2281
<     Rconnection new;
---
>     Rconnection newcon;
2303,2304c2298,2299
<     new = (Rconnection) malloc(sizeof(struct Rconn));
<     if(!new) error(_("allocation of clipboard connection failed"));
---
>     newcon = (Rconnection) malloc(sizeof(struct Rconn));
>     if(!newcon) error(_("allocation of clipboard connection failed"));
2307,2309c2302,2304
<     new->class = (char *) malloc(strlen(description) + 1);
<     if(!new->class) {
< 	free(new);
---
>     newcon->conclass = (char *) malloc(strlen(description) + 1);
>     if(!newcon->conclass) {
> 	free(newcon);
2312,2315c2307,2310
<     strcpy(new->class, description);
<     new->description = (char *) malloc(strlen(description) + 1);
<     if(!new->description) {
< 	free(new->class); free(new);
---
>     strcpy(newcon->conclass, description);
>     newcon->description = (char *) malloc(strlen(description) + 1);
>     if(!newcon->description) {
> 	free(newcon->conclass); free(newcon);
2318,2332c2313,2327
<     init_con(new, description, CE_NATIVE, mode);
<     new->open = &clp_open;
<     new->close = &clp_close;
<     new->vfprintf = &dummy_vfprintf;
<     new->fgetc_internal = &clp_fgetc_internal;
<     new->fgetc = &dummy_fgetc;
<     new->seek = &clp_seek;
<     new->truncate = &clp_truncate;
<     new->fflush = &clp_fflush;
<     new->read = &clp_read;
<     new->write = &clp_write;
<     new->canseek = TRUE;
<     new->private = (void *) malloc(sizeof(struct clpconn));
<     if(!new->private) {
< 	free(new->description); free(new->class); free(new);
---
>     init_con(newcon, description, CE_NATIVE, mode);
>     newcon->open = &clp_open;
>     newcon->close = &clp_close;
>     newcon->vfprintf = &dummy_vfprintf;
>     newcon->fgetc_internal = &clp_fgetc_internal;
>     newcon->fgetc = &dummy_fgetc;
>     newcon->seek = &clp_seek;
>     newcon->truncate = &clp_truncate;
>     newcon->fflush = &clp_fflush;
>     newcon->read = &clp_read;
>     newcon->write = &clp_write;
>     newcon->canseek = TRUE;
>     newcon->conprivate = (void *) malloc(sizeof(struct clpconn));
>     if(!newcon->conprivate) {
> 	free(newcon->description); free(newcon->conclass); free(newcon);
2335c2330
<     ((Rclpconn)new->private)->buff = NULL;
---
>     ((Rclpconn)newcon->conprivate)->buff = NULL;
2341,2342c2336,2337
<     ((Rclpconn)new->private)->sizeKB = sizeKB;
<     return new;
---
>     ((Rclpconn)newcon->conprivate)->sizeKB = sizeKB;
>     return newcon;
2400,2405c2395,2400
<     Rconnection new;
<     new = (Rconnection) malloc(sizeof(struct Rconn));
<     if(!new) error(_("allocation of terminal connection failed"));
<     new->class = (char *) malloc(strlen("terminal") + 1);
<     if(!new->class) {
< 	free(new);
---
>     Rconnection newcon;
>     newcon = (Rconnection) malloc(sizeof(struct Rconn));
>     if(!newcon) error(_("allocation of terminal connection failed"));
>     newcon->conclass = (char *) malloc(strlen("terminal") + 1);
>     if(!newcon->conclass) {
> 	free(newcon);
2408,2411c2403,2406
<     strcpy(new->class, "terminal");
<     new->description = (char *) malloc(strlen(description) + 1);
<     if(!new->description) {
< 	free(new->class); free(new);
---
>     strcpy(newcon->conclass, "terminal");
>     newcon->description = (char *) malloc(strlen(description) + 1);
>     if(!newcon->description) {
> 	free(newcon->conclass); free(newcon);
2414,2420c2409,2415
<     init_con(new, description, CE_NATIVE, mode);
<     new->isopen = TRUE;
<     new->canread = (strcmp(mode, "r") == 0);
<     new->canwrite = (strcmp(mode, "w") == 0);
<     new->destroy = &null_close;
<     new->private = NULL;
<     return new;
---
>     init_con(newcon, description, CE_NATIVE, mode);
>     newcon->isopen = TRUE;
>     newcon->canread = (strcmp(mode, "r") == 0);
>     newcon->canwrite = (strcmp(mode, "w") == 0);
>     newcon->destroy = &null_close;
>     newcon->conprivate = NULL;
>     return newcon;
2426c2421
<     SEXP ans, class;
---
>     SEXP ans, classs;
2431,2434c2426,2429
<     PROTECT(class = allocVector(STRSXP, 2));
<     SET_STRING_ELT(class, 0, mkChar(con->class));
<     SET_STRING_ELT(class, 1, mkChar("connection"));
<     classgets(ans, class);
---
>     PROTECT(classs = allocVector(STRSXP, 2));
>     SET_STRING_ELT(classs, 0, mkChar(con->conclass));
>     SET_STRING_ELT(classs, 1, mkChar("connection"));
>     classgets(ans, classs);
2441c2436
<     SEXP ans, class;
---
>     SEXP ans, classs;
2446,2449c2441,2444
<     PROTECT(class = allocVector(STRSXP, 2));
<     SET_STRING_ELT(class, 0, mkChar(con->class));
<     SET_STRING_ELT(class, 1, mkChar("connection"));
<     classgets(ans, class);
---
>     PROTECT(classs = allocVector(STRSXP, 2));
>     SET_STRING_ELT(classs, 0, mkChar(con->conclass));
>     SET_STRING_ELT(classs, 1, mkChar("connection"));
>     classgets(ans, classs);
2457c2452
<     SEXP ans, class;
---
>     SEXP ans, classs;
2462,2465c2457,2460
<     PROTECT(class = allocVector(STRSXP, 2));
<     SET_STRING_ELT(class, 0, mkChar(con->class));
<     SET_STRING_ELT(class, 1, mkChar("connection"));
<     classgets(ans, class);
---
>     PROTECT(classs = allocVector(STRSXP, 2));
>     SET_STRING_ELT(classs, 0, mkChar(con->conclass));
>     SET_STRING_ELT(classs, 1, mkChar("connection"));
>     classgets(ans, classs);
2498c2493
<     Rrawconn this = con->private;
---
>     Rrawconn thiscon = con->conprivate;
2500,2503c2495,2498
<     this->data = MAYBE_REFERENCED(raw) ? duplicate(raw) : raw;
<     R_PreserveObject(this->data);
<     this->nbytes = XLENGTH(this->data);
<     this->pos = 0;
---
>     thiscon->data = MAYBE_REFERENCED(raw) ? duplicate(raw) : raw;
>     R_PreserveObject(thiscon->data);
>     thiscon->nbytes = XLENGTH(thiscon->data);
>     thiscon->pos = 0;
2517c2512
<     Rrawconn this = con->private;
---
>     Rrawconn thiscon = con->conprivate;
2519,2520c2514,2515
<     R_ReleaseObject(this->data);
<     free(this);
---
>     R_ReleaseObject(thiscon->data);
>     free(thiscon);
2523c2518
< static void raw_resize(Rrawconn this, size_t needed)
---
> static void raw_resize(Rrawconn thiscon, size_t needed)
2531,2534c2526,2529
<     memcpy(RAW(tmp), RAW(this->data), this->nbytes);
<     R_ReleaseObject(this->data);
<     this->data = tmp;
<     R_PreserveObject(this->data);
---
>     memcpy(RAW(tmp), RAW(thiscon->data), thiscon->nbytes);
>     R_ReleaseObject(thiscon->data);
>     thiscon->data = tmp;
>     R_PreserveObject(thiscon->data);
2541,2542c2536,2537
<     Rrawconn this = con->private;
<     size_t freespace = XLENGTH(this->data) - this->pos, bytes = size*nitems;
---
>     Rrawconn thiscon = con->conprivate;
>     size_t freespace = XLENGTH(thiscon->data) - thiscon->pos, bytes = size*nitems;
2544c2539
<     if ((double) size * (double) nitems + (double) this->pos > R_LEN_T_MAX)
---
>     if ((double) size * (double) nitems + (double) thiscon->pos > R_LEN_T_MAX)
2547c2542
<     if(bytes >= freespace) raw_resize(this, bytes + this->pos);
---
>     if(bytes >= freespace) raw_resize(thiscon, bytes + thiscon->pos);
2549,2551c2544,2546
<     memmove(RAW(this->data) + this->pos, ptr, bytes);
<     this->pos += bytes;
<     if(this->nbytes < this->pos) this->nbytes = this->pos;
---
>     memmove(RAW(thiscon->data) + thiscon->pos, ptr, bytes);
>     thiscon->pos += bytes;
>     if(thiscon->nbytes < thiscon->pos) thiscon->nbytes = thiscon->pos;
2557,2558c2552,2553
<     Rrawconn this = con->private;
<     this->nbytes = this->pos;
---
>     Rrawconn thiscon = con->conprivate;
>     thiscon->nbytes = thiscon->pos;
2564,2565c2559,2560
<     Rrawconn this = con->private;
<     size_t available = this->nbytes - this->pos, request = size*nitems, used;
---
>     Rrawconn thiscon = con->conprivate;
>     size_t available = thiscon->nbytes - thiscon->pos, request = size*nitems, used;
2567,2568c2562,2563
<     if ((double) size * (double) nitems + (double) this->pos > R_LEN_T_MAX)
< 	error(_("too large a block specified"));
---
>     if ((double) size * (double) nitems + (double) thiscon->pos > R_LEN_T_MAX)
> 	error(_("specified block is too large"));
2570,2571c2565,2566
<     memmove(ptr, RAW(this->data) + this->pos, used);
<     this->pos += used;
---
>     memmove(ptr, RAW(thiscon->data) + thiscon->pos, used);
>     thiscon->pos += used;
2577,2579c2572,2574
<     Rrawconn this = con->private;
<     if(this->pos >= this->nbytes) return R_EOF;
<     else return (int) RAW(this->data)[this->pos++];
---
>     Rrawconn thiscon = con->conprivate;
>     if(thiscon->pos >= thiscon->nbytes) return R_EOF;
>     else return (int) RAW(thiscon->data)[thiscon->pos++];
2584c2579
<     Rrawconn this = con->private;
---
>     Rrawconn thiscon = con->conprivate;
2586c2581
<     size_t oldpos = this->pos;
---
>     size_t oldpos = thiscon->pos;
2592,2593c2587,2588
<     case 2: newpos = (double) this->pos + where; break;
<     case 3: newpos = (double) this->nbytes + where; break;
---
>     case 2: newpos = (double) thiscon->pos + where; break;
>     case 3: newpos = (double) thiscon->nbytes + where; break;
2596c2591
<     if(newpos < 0 || newpos > this->nbytes)
---
>     if(newpos < 0 || newpos > thiscon->nbytes)
2598c2593
<     else this->pos = (size_t) newpos;
---
>     else thiscon->pos = (size_t) newpos;
2605c2600
<     Rconnection new;
---
>     Rconnection newcon;
2607,2611c2602,2606
<     new = (Rconnection) malloc(sizeof(struct Rconn));
<     if(!new) error(_("allocation of raw connection failed"));
<     new->class = (char *) malloc(strlen("rawConnection") + 1);
<     if(!new->class) {
< 	free(new);
---
>     newcon = (Rconnection) malloc(sizeof(struct Rconn));
>     if(!newcon) error(_("allocation of raw connection failed"));
>     newcon->conclass = (char *) malloc(strlen("rawConnection") + 1);
>     if(!newcon->conclass) {
> 	free(newcon);
2614,2617c2609,2612
<     strcpy(new->class, "rawConnection");
<     new->description = (char *) malloc(strlen(description) + 1);
<     if(!new->description) {
< 	free(new->class); free(new);
---
>     strcpy(newcon->conclass, "rawConnection");
>     newcon->description = (char *) malloc(strlen(description) + 1);
>     if(!newcon->description) {
> 	free(newcon->conclass); free(newcon);
2620,2643c2615,2638
<     init_con(new, description, CE_NATIVE, mode);
<     new->isopen = TRUE;
<     new->text = FALSE;
<     new->blocking = TRUE;
<     new->canseek = TRUE;
<     new->canwrite = (mode[0] == 'w' || mode[0] == 'a');
<     new->canread = mode[0] == 'r';
<     if(strlen(mode) >= 2 && mode[1] == '+') new->canread = new->canwrite = TRUE;
<     new->open = &raw_open;
<     new->close = &raw_close;
<     new->destroy = &raw_destroy;
<     if(new->canwrite) {
< 	new->write = &raw_write;
< 	new->vfprintf = &dummy_vfprintf;
< 	new->truncate = &raw_truncate;
<     }
<     if(new->canread) {
< 	new->read = &raw_read;
< 	new->fgetc = &raw_fgetc;
<     }
<     new->seek = &raw_seek;
<     new->private = (void*) malloc(sizeof(struct rawconn));
<     if(!new->private) {
< 	free(new->description); free(new->class); free(new);
---
>     init_con(newcon, description, CE_NATIVE, mode);
>     newcon->isopen = TRUE;
>     newcon->text = FALSE;
>     newcon->blocking = TRUE;
>     newcon->canseek = TRUE;
>     newcon->canwrite = (mode[0] == 'w' || mode[0] == 'a');
>     newcon->canread = mode[0] == 'r';
>     if(strlen(mode) >= 2 && mode[1] == '+') newcon->canread = newcon->canwrite = TRUE;
>     newcon->open = &raw_open;
>     newcon->close = &raw_close;
>     newcon->destroy = &raw_destroy;
>     if(newcon->canwrite) {
> 	newcon->write = &raw_write;
> 	newcon->vfprintf = &dummy_vfprintf;
> 	newcon->truncate = &raw_truncate;
>     }
>     if(newcon->canread) {
> 	newcon->read = &raw_read;
> 	newcon->fgetc = &raw_fgetc;
>     }
>     newcon->seek = &raw_seek;
>     newcon->conprivate = (void*) malloc(sizeof(struct rawconn));
>     if(!newcon->conprivate) {
> 	free(newcon->description); free(newcon->conclass); free(newcon);
2646,2648c2641,2643
<     raw_init(new, raw);
<     if(mode[0] == 'a') raw_seek(new, 0, 3, 0);
<     return new;
---
>     raw_init(newcon, raw);
>     if(mode[0] == 'a') raw_seek(newcon, 0, 3, 0);
>     return newcon;
2653c2648
<     SEXP sfile, sraw, sopen, ans, class;
---
>     SEXP sfile, sraw, sopen, ans, classs;
2678,2681c2673,2676
<     PROTECT(class = allocVector(STRSXP, 2));
<     SET_STRING_ELT(class, 0, mkChar("rawConnection"));
<     SET_STRING_ELT(class, 1, mkChar("connection"));
<     classgets(ans, class);
---
>     PROTECT(classs = allocVector(STRSXP, 2));
>     SET_STRING_ELT(classs, 0, mkChar("rawConnection"));
>     SET_STRING_ELT(classs, 1, mkChar("connection"));
>     classgets(ans, classs);
2692c2687
<     Rrawconn this;
---
>     Rrawconn thiscon;
2697c2692
< 	error(_("'con' is not a rawConnection"));
---
> 	error(_("'%s' argument is not an object of class %s"), "con", "\"rawConnection\"");
2700,2703c2695,2698
< 	error(_("'con' is not an output rawConnection"));
<     this = con->private;
<     ans = allocVector(RAWSXP, this->nbytes); /* later, use TRUELENGTH? */
<     memcpy(RAW(ans), RAW(this->data), this->nbytes);
---
> 	error(_("'%s' is not an output of class %s"), "con", "\"rawConnection\"");
>     thiscon = con->conprivate;
>     ans = allocVector(RAWSXP, thiscon->nbytes); /* later, use TRUELENGTH? */
>     memcpy(RAW(ans), RAW(thiscon->data), thiscon->nbytes);
2726c2721
<     R_xlen_t i, nlines = xlength(text);  // not very plausible that this is long
---
>     R_xlen_t i, nlines = xlength(text);  // not very plausible that thiscon is long
2729c2724
<     Rtextconn this = con->private;
---
>     Rtextconn thiscon = con->conprivate;
2740,2742c2735,2737
<     this->data = (char *) malloc(nchars+1);
<     if(!this->data) {
< 	free(this); free(con->description); free(con->class); free(con);
---
>     thiscon->data = (char *) malloc(nchars+1);
>     if(!thiscon->data) {
> 	free(thiscon); free(con->description); free(con->conclass); free(con);
2745c2740
<     *(this->data) = '\0';
---
>     *(thiscon->data) = '\0';
2747c2742
< 	strcat(this->data,
---
> 	strcat(thiscon->data,
2751c2746
< 	strcat(this->data, "\n");
---
> 	strcat(thiscon->data, "\n");
2753,2754c2748,2749
<     this->nchars = nchars;
<     this->cur = this->save = 0;
---
>     thiscon->nchars = nchars;
>     thiscon->cur = thiscon->save = 0;
2770c2765
<     Rtextconn this = con->private;
---
>     Rtextconn thiscon = con->conprivate;
2772,2774c2767,2769
<     free(this->data);
<     /* this->cur = this->nchars = 0; */
<     free(this);
---
>     free(thiscon->data);
>     /* thiscon->cur = thiscon->nchars = 0; */
>     free(thiscon);
2779,2780c2774,2775
<     Rtextconn this = con->private;
<     if(this->save) {
---
>     Rtextconn thiscon = con->conprivate;
>     if(thiscon->save) {
2782,2783c2777,2778
< 	c = this->save;
< 	this->save = 0;
---
> 	c = thiscon->save;
> 	thiscon->save = 0;
2786,2787c2781,2782
<     if(this->cur >= this->nchars) return R_EOF;
<     else return (int) (this->data[this->cur++]);
---
>     if(thiscon->cur >= thiscon->nchars) return R_EOF;
>     else return (int) (thiscon->data[thiscon->cur++]);
2798,2803c2793,2798
<     Rconnection new;
<     new = (Rconnection) malloc(sizeof(struct Rconn));
<     if(!new) error(_("allocation of text connection failed"));
<     new->class = (char *) malloc(strlen("textConnection") + 1);
<     if(!new->class) {
< 	free(new);
---
>     Rconnection newcon;
>     newcon = (Rconnection) malloc(sizeof(struct Rconn));
>     if(!newcon) error(_("allocation of text connection failed"));
>     newcon->conclass = (char *) malloc(strlen("textConnection") + 1);
>     if(!newcon->conclass) {
> 	free(newcon);
2806,2809c2801,2804
<     strcpy(new->class, "textConnection");
<     new->description = (char *) malloc(strlen(description) + 1);
<     if(!new->description) {
< 	free(new->class); free(new);
---
>     strcpy(newcon->conclass, "textConnection");
>     newcon->description = (char *) malloc(strlen(description) + 1);
>     if(!newcon->description) {
> 	free(newcon->conclass); free(newcon);
2812,2822c2807,2817
<     init_con(new, description, CE_NATIVE, "r");
<     new->isopen = TRUE;
<     new->canwrite = FALSE;
<     new->open = &text_open;
<     new->close = &text_close;
<     new->destroy = &text_destroy;
<     new->fgetc = &text_fgetc;
<     new->seek = &text_seek;
<     new->private = (void*) malloc(sizeof(struct textconn));
<     if(!new->private) {
< 	free(new->description); free(new->class); free(new);
---
>     init_con(newcon, description, CE_NATIVE, "r");
>     newcon->isopen = TRUE;
>     newcon->canwrite = FALSE;
>     newcon->open = &text_open;
>     newcon->close = &text_close;
>     newcon->destroy = &text_destroy;
>     newcon->fgetc = &text_fgetc;
>     newcon->seek = &text_seek;
>     newcon->conprivate = (void*) malloc(sizeof(struct textconn));
>     if(!newcon->conprivate) {
> 	free(newcon->description); free(newcon->conclass); free(newcon);
2825,2826c2820,2821
<     text_init(new, text, type);
<     return new;
---
>     text_init(newcon, text, type);
>     return newcon;
2840c2835
<     Routtextconn this = con->private;
---
>     Routtextconn thiscon = con->conprivate;
2844,2850c2839,2845
<     if(this->namesymbol &&
<        findVarInFrame3(env, this->namesymbol, FALSE) != R_UnboundValue)
< 	R_unLockBinding(this->namesymbol, env);
<     if(strlen(this->lastline) > 0) {
< 	PROTECT(tmp = xlengthgets(this->data, ++this->len));
< 	SET_STRING_ELT(tmp, this->len - 1, mkCharLocal(this->lastline));
< 	if(this->namesymbol) defineVar(this->namesymbol, tmp, env);
---
>     if(thiscon->namesymbol &&
>        findVarInFrame3(env, thiscon->namesymbol, FALSE) != R_UnboundValue)
> 	R_unLockBinding(thiscon->namesymbol, env);
>     if(strlen(thiscon->lastline) > 0) {
> 	PROTECT(tmp = xlengthgets(thiscon->data, ++thiscon->len));
> 	SET_STRING_ELT(tmp, thiscon->len - 1, mkCharLocal(thiscon->lastline));
> 	if(thiscon->namesymbol) defineVar(thiscon->namesymbol, tmp, env);
2852c2847
< 	this->data = tmp;
---
> 	thiscon->data = tmp;
2859c2854
<     Routtextconn this = con->private;
---
>     Routtextconn thiscon = con->conprivate;
2863c2858
<        However, this could be quite expensive.
---
>        However, thiscon could be quite expensive.
2866,2867c2861,2862
<     if(!this->namesymbol) R_ReleaseObject(this->data);
<     free(this->lastline); free(this);
---
>     if(!thiscon->namesymbol) R_ReleaseObject(thiscon->data);
>     free(thiscon->lastline); free(thiscon);
2874c2869
<     Routtextconn this = con->private;
---
>     Routtextconn thiscon = con->conprivate;
2878c2873
< 	already = (int) strlen(this->lastline); // we do not allow longer lines
---
> 	already = (int) strlen(thiscon->lastline); // we do not allow longer lines
2890c2885
< 	strcpy(b, this->lastline);
---
> 	strcpy(b, thiscon->lastline);
2899c2894
< 	strcpy(b, this->lastline);
---
> 	strcpy(b, thiscon->lastline);
2906c2901
< 	strncpy(b, this->lastline, NBUFSIZE);
---
> 	strncpy(b, thiscon->lastline, NBUFSIZE);
2923,2929c2918,2924
< 	    PROTECT(tmp = xlengthgets(this->data, ++this->len));
< 	    SET_STRING_ELT(tmp, this->len - 1, mkCharLocal(p));
< 	    if(this->namesymbol) {
< 		if(findVarInFrame3(env, this->namesymbol, FALSE)
< 		   != R_UnboundValue) R_unLockBinding(this->namesymbol, env);
< 		defineVar(this->namesymbol, tmp, env);
< 		R_LockBinding(this->namesymbol, env);
---
> 	    PROTECT(tmp = xlengthgets(thiscon->data, ++thiscon->len));
> 	    SET_STRING_ELT(tmp, thiscon->len - 1, mkCharLocal(p));
> 	    if(thiscon->namesymbol) {
> 		if(findVarInFrame3(env, thiscon->namesymbol, FALSE)
> 		   != R_UnboundValue) R_unLockBinding(thiscon->namesymbol, env);
> 		defineVar(thiscon->namesymbol, tmp, env);
> 		R_LockBinding(thiscon->namesymbol, env);
2931c2926
< 		R_ReleaseObject(this->data);
---
> 		R_ReleaseObject(thiscon->data);
2934c2929
< 	    this->data = tmp;
---
> 	    thiscon->data = tmp;
2939c2934
< 	    if(strlen(p) >= this->lastlinelength) {
---
> 	    if(strlen(p) >= thiscon->lastlinelength) {
2941,2942c2936,2937
< 		if (newlen > INT_MAX) error("last line is too long");
< 		void * tmp = realloc(this->lastline, newlen);
---
> 		if (newlen > INT_MAX) error(_("last line is too long"));
> 		void * tmp = realloc(thiscon->lastline, newlen);
2944,2945c2939,2940
< 		    this->lastline = tmp;
< 		    this->lastlinelength = (int) newlen;
---
> 		    thiscon->lastline = tmp;
> 		    thiscon->lastlinelength = (int) newlen;
2947,2949c2942,2944
< 		    warning("allocation problem for last line");
< 		    this->lastline = NULL;
< 		    this->lastlinelength = 0;
---
> 		    warning(_("allocation problem for last line"));
> 		    thiscon->lastline = NULL;
> 		    thiscon->lastlinelength = 0;
2952,2953c2947,2948
< 	    strcpy(this->lastline, p);
< 	    con->incomplete = strlen(this->lastline) > 0;
---
> 	    strcpy(thiscon->lastline, p);
> 	    con->incomplete = strlen(thiscon->lastline) > 0;
2963c2958
<     Routtextconn this = con->private;
---
>     Routtextconn thiscon = con->conprivate;
2967c2962
< 	this->namesymbol = NULL;
---
> 	thiscon->namesymbol = NULL;
2972c2967
< 	this->namesymbol = install(con->description);
---
> 	thiscon->namesymbol = install(con->description);
2976c2971
< 	    defineVar(this->namesymbol, val, VECTOR_ELT(OutTextData, idx));
---
> 	    defineVar(thiscon->namesymbol, val, VECTOR_ELT(OutTextData, idx));
2982c2977
< 	    val = findVar1(this->namesymbol, VECTOR_ELT(OutTextData, idx),
---
> 	    val = findVar1(thiscon->namesymbol, VECTOR_ELT(OutTextData, idx),
2987c2982
< 		defineVar(this->namesymbol, val, VECTOR_ELT(OutTextData, idx));
---
> 		defineVar(thiscon->namesymbol, val, VECTOR_ELT(OutTextData, idx));
2991c2986
< 	    R_LockBinding(this->namesymbol, VECTOR_ELT(OutTextData, idx));
---
> 	    R_LockBinding(thiscon->namesymbol, VECTOR_ELT(OutTextData, idx));
2994,2997c2989,2992
<     this->len = LENGTH(val);
<     this->data = val;
<     this->lastline[0] = '\0';
<     this->lastlinelength = LAST_LINE_LEN;
---
>     thiscon->len = LENGTH(val);
>     thiscon->data = val;
>     thiscon->lastline[0] = '\0';
>     thiscon->lastlinelength = LAST_LINE_LEN;
3004c2999
<     Rconnection new;
---
>     Rconnection newcon;
3007,3011c3002,3006
<     new = (Rconnection) malloc(sizeof(struct Rconn));
<     if(!new) error(_("allocation of text connection failed"));
<     new->class = (char *) malloc(strlen("textConnection") + 1);
<     if(!new->class) {
< 	free(new);
---
>     newcon = (Rconnection) malloc(sizeof(struct Rconn));
>     if(!newcon) error(_("allocation of text connection failed"));
>     newcon->conclass = (char *) malloc(strlen("textConnection") + 1);
>     if(!newcon->conclass) {
> 	free(newcon);
3014,3017c3009,3012
<     strcpy(new->class, "textConnection");
<     new->description = (char *) malloc(strlen(description) + 1);
<     if(!new->description) {
< 	free(new->class); free(new);
---
>     strcpy(newcon->conclass, "textConnection");
>     newcon->description = (char *) malloc(strlen(description) + 1);
>     if(!newcon->description) {
> 	free(newcon->conclass); free(newcon);
3020,3030c3015,3025
<     init_con(new, description, CE_NATIVE, mode);
<     new->isopen = TRUE;
<     new->canread = FALSE;
<     new->open = &text_open;
<     new->close = &outtext_close;
<     new->destroy = &outtext_destroy;
<     new->vfprintf = &text_vfprintf;
<     new->seek = &text_seek;
<     new->private = (void*) malloc(sizeof(struct outtextconn));
<     if(!new->private) {
< 	free(new->description); free(new->class); free(new);
---
>     init_con(newcon, description, CE_NATIVE, mode);
>     newcon->isopen = TRUE;
>     newcon->canread = FALSE;
>     newcon->open = &text_open;
>     newcon->close = &outtext_close;
>     newcon->destroy = &outtext_destroy;
>     newcon->vfprintf = &text_vfprintf;
>     newcon->seek = &text_seek;
>     newcon->conprivate = (void*) malloc(sizeof(struct outtextconn));
>     if(!newcon->conprivate) {
> 	free(newcon->description); free(newcon->conclass); free(newcon);
3033c3028
<     ((Routtextconn)new->private)->lastline = tmp = malloc(LAST_LINE_LEN);
---
>     ((Routtextconn)newcon->conprivate)->lastline = tmp = malloc(LAST_LINE_LEN);
3035,3036c3030,3031
< 	free(new->private);
< 	free(new->description); free(new->class); free(new);
---
> 	free(newcon->conprivate);
> 	free(newcon->description); free(newcon->conclass); free(newcon);
3039,3040c3034,3035
<     outtext_init(new, stext, mode, idx);
<     return new;
---
>     outtext_init(newcon, stext, mode, idx);
>     return newcon;
3045c3040
<     SEXP sfile, stext, sopen, ans, class, venv;
---
>     SEXP sfile, stext, sopen, ans, classs, venv;
3093,3096c3088,3091
<     PROTECT(class = allocVector(STRSXP, 2));
<     SET_STRING_ELT(class, 0, mkChar("textConnection"));
<     SET_STRING_ELT(class, 1, mkChar("connection"));
<     classgets(ans, class);
---
>     PROTECT(classs = allocVector(STRSXP, 2));
>     SET_STRING_ELT(classs, 0, mkChar("textConnection"));
>     SET_STRING_ELT(classs, 1, mkChar("connection"));
>     classgets(ans, classs);
3107c3102
<     Routtextconn this;
---
>     Routtextconn thiscon;
3111c3106
< 	error(_("'con' is not a textConnection"));
---
> 	error(_("'%s' argument is not an object of class %s"), "con", "\"textConnection\"");
3114,3116c3109,3111
< 	error(_("'con' is not an output textConnection"));
<     this = con->private;
<     return this->data;
---
> 	error(_("'%s' is not an output of class %s"), "con", "\"rawConnection\"");
>     thiscon = con->conprivate;
>     return thiscon->data;
3127c3122
<     SEXP scmd, sopen, ans, class, enc;
---
>     SEXP scmd, sopen, ans, concl, enc;
3181,3184c3176,3179
<     PROTECT(class = allocVector(STRSXP, 2));
<     SET_STRING_ELT(class, 0, mkChar("sockconn"));
<     SET_STRING_ELT(class, 1, mkChar("connection"));
<     classgets(ans, class);
---
>     PROTECT(concl = allocVector(STRSXP, 2));
>     SET_STRING_ELT(concl, 0, mkChar("sockconn"));
>     SET_STRING_ELT(concl, 1, mkChar("connection"));
>     classgets(ans, concl);
3199c3194
<     SEXP sfile, sopen, ans, class, enc;
---
>     SEXP sfile, sopen, ans, classs, enc;
3209c3204
< 	warning(_("only first element of 'description' argument used"));
---
> 	warning(_("only first element of '%s' argument will be used"), "description");
3235,3238c3230,3233
<     PROTECT(class = allocVector(STRSXP, 2));
<     SET_STRING_ELT(class, 0, mkChar("unz"));
<     SET_STRING_ELT(class, 1, mkChar("connection"));
<     classgets(ans, class);
---
>     PROTECT(classs = allocVector(STRSXP, 2));
>     SET_STRING_ELT(classs, 0, mkChar("unz"));
>     SET_STRING_ELT(classs, 1, mkChar("connection"));
>     classgets(ans, classs);
3258c3253
< 	error(_("'con' is not a connection"));
---
> 	error(_("'%s' argument is not an object of class %s"), "con", "\"connection\"");
3307c3302
< 	error(_("'con' is not a connection"));
---
> 	error(_("'%s' argument is not an object of class %s"), "con", "\"connection\"");
3318c3313
< 	error(_("'con' is not a connection"));
---
> 	error(_("'%s' argument is not an object of class %s"), "con", "\"connection\"");
3327c3322
< 	Rgzconn priv = con->private;
---
> 	Rgzconn priv = con->conprivate;
3335c3330
<     free(con->class);
---
>     free(con->conclass);
3365c3360
< 	error(_("'con' is not a connection"));
---
> 	error(_("'%s' argument is not an object of class %s"), "con", "\"connection\"");
3390c3385
< 	error(_("'con' is not a connection"));
---
> 	error(_("'%s' argument is not an object of class %s"), "con", "\"connection\"");
3413c3408
< 	error(_("'con' is not a connection"));
---
> 	error(_("'%s' argument is not an object of class %s"), "con", "\"connection\"");
3425c3420
< 	error(_("'con' is not a connection"));
---
> 	error(_("'%s' argument is not an object of class %s"), "con", "\"connection\"");
3488c3483
< 	if(nbuf+1 >= bufsize) error(_("line longer than buffer size"));
---
> 	if(nbuf+1 >= bufsize) error(_("line is longer than buffer size"));
3500c3495
< 	if(nbuf+1 >= bufsize) error(_("line longer than buffer size"));
---
> 	if(nbuf+1 >= bufsize) error(_("line is longer than buffer size"));
3541c3536
< 	error(_("'con' is not a connection"));
---
> 	error(_("'%s' argument is not an object of class %s"), "con", "\"connection\"");
3586c3581
< 	error(_("cannot allocate buffer in readLines"));
---
> 	error(_("cannot allocate buffer in 'readLines()'"));
3593c3588
< 	    if (dnn > R_XLEN_T_MAX) error("too many items");
---
> 	    if (dnn > R_XLEN_T_MAX) error(_("too many items"));
3608c3603
< 		    error(_("cannot allocate buffer in readLines"));
---
> 		    error(_("cannot allocate buffer in 'readLines()'"));
3638,3639c3633
< 		warning(_("incomplete final line found on '%s'"),
< 			con->description);
---
> 		warning(_("incomplete final line found on '%s'"), con->description);
3644c3638
< 	error(_("too few lines read in readLines"));
---
> 	error(_("too few lines read in 'readLines()'"));
3666c3660
< 	error(_("'con' is not a connection"));
---
> 	error(_("'%s' argument is not an object of class %s"), "con", "\"connection\"");
3745c3739
< 	if (m < 0) error("error reading from the connection");
---
> 	if (m < 0) error(_("error reading from the connection"));
3754c3748
< 	warning(_("null terminator not found: breaking string at 10000 bytes"));
---
> 	warning(_("null terminator was not found: breaking string at 10000 bytes"));
3880c3874
< 		if (m0 < 0) error("error reading from the connection");
---
> 		if (m0 < 0) error(_("error reading from the connection"));
3971c3965
< 		    if (m0 < 0) error("error reading from the connection");
---
> 		    if (m0 < 0) error(_("error reading from the connection"));
3987c3981
< 		    if (s < 0) error("error reading from the connection");
---
> 		    if (s < 0) error(_("error reading from the connection"));
4020c4014
< 		    if (s < 0) error("error reading from the connection");
---
> 		    if (s < 0) error(_("error reading from the connection"));
4033,4035c4027
< 			error(
< 				  _("size %d is unknown on this machine"),
< 				  size);
---
> 			error(_("size %d is unknown on this machine"), size);
4064c4056
< 	error(_("'x' is not an atomic vector type"));
---
> 	error(_("'x' argument is not an atomic vector type"));
4091c4083
< 	    error(_("only 2^31-1 bytes can be written in a single writeBin() call"));
---
> 	    error(_("only 2^31-1 bytes can be written in a single 'writeBin()' call"));
4140c4132
< 		    warning(_("problem writing to connection"));
---
> 		    warning(_("problem with writing to connection"));
4188c4180
< 	    UNIMPLEMENTED_TYPE("writeBin", object);
---
> 	    UNIMPLEMENTED_TYPE("writeBin()", object);
4293c4285
< 	    if(nwrite < len) warning(_("problem writing to connection"));
---
> 	    if(nwrite < len) warning(_("problem with writing to connection"));
4328c4320
< 		if(m < clen - 1) error(_("invalid UTF-8 input in readChar()"));
---
> 		if(m < clen - 1) error(_("invalid UTF-8 input in 'readChar()'"));
4332c4324
< 		    error(_("invalid UTF-8 input in readChar()"));
---
> 		    error(_("invalid UTF-8 input in 'readChar()'"));
4371c4363
< 		error(_("invalid UTF-8 input in readChar()"));
---
> 		error(_("invalid UTF-8 input in 'readChar()'"));
4510c4502
< 	error(_("'object' is too short"));
---
> 	error(_("'object' argument is too short"));
4536c4528
< 	    error("too much data for a raw vector on this platform");
---
> 	    error(_("too much data for a raw vector on this platform"));
4574c4566
< 		    warning(_("problem writing to connection"));
---
> 		    warning(_("problem with writing to connection"));
4614c4606
< 		    warning(_("problem writing to connection"));
---
> 		    warning(_("problem with writing to connection"));
4648c4640
<     if(!q) error(_("could not allocate space for pushback"));
---
>     if(!q) error(_("could not allocate space for '%s'"), "pushback");
4652c4644
<     if(!(*q)) error(_("could not allocate space for pushback"));
---
>     if(!(*q)) error(_("could not allocate space for '%s'"), "pushback");
4689c4681
< 	if(!q) error(_("could not allocate space for pushback"));
---
> 	if(!q) error(_("could not allocate space for '%s'"), "pushback");
4697c4689
< 	    if(!(*q)) error(_("could not allocate space for pushback"));
---
> 	    if(!(*q)) error(_("could not allocate space for '%s'"), "pushback");
4747c4739
< 	error(_("cannot switch output to stdin"));
---
> 	error(_("cannot switch output to 'stdin'"));
4887c4879
<     SEXP ans, class;
---
>     SEXP ans, classs;
4900,4903c4892,4895
<     PROTECT(class = allocVector(STRSXP, 2));
<     SET_STRING_ELT(class, 0, mkChar(con->class));
<     SET_STRING_ELT(class, 1, mkChar("connection"));
<     classgets(ans, class);
---
>     PROTECT(classs = allocVector(STRSXP, 2));
>     SET_STRING_ELT(classs, 0, mkChar(con->conclass));
>     SET_STRING_ELT(classs, 1, mkChar("connection"));
>     classgets(ans, classs);
4927c4919
<     SET_VECTOR_ELT(ans, 1, mkString(Rcon->class));
---
>     SET_VECTOR_ELT(ans, 1, mkString(Rcon->conclass));
4954c4946
<     SEXP scmd, sopen, ans, class, enc;
---
>     SEXP scmd, sopen, ans, classs, enc;
4969c4961
< 	warning(_("only first element of 'description' argument used"));
---
> 	warning(_("only first element of '%s' argument will be used"), "description");
5023c5015
<        ((Rurlconn)con->private)->type = type;
---
>        ((Rurlconn)con->conprivate)->type = type;
5031c5023
< 		    warning(_("file(\"\") only supports open = \"w+\" and open = \"w+b\": using the former"));
---
> 	            warning(_("'%s' only supports 'open = \"w+\"' and 'open = \"w+b\"': using the former"), "file(\"\")");
5113,5116c5105,5108
<     PROTECT(class = allocVector(STRSXP, 2));
<     SET_STRING_ELT(class, 0, mkChar(class2));
<     SET_STRING_ELT(class, 1, mkChar("connection"));
<     classgets(ans, class);
---
>     PROTECT(classs = allocVector(STRSXP, 2));
>     SET_STRING_ELT(classs, 0, mkChar(class2));
>     SET_STRING_ELT(classs, 1, mkChar("connection"));
>     classgets(ans, classs);
5148c5140
<     Rgzconn priv = con->private;
---
>     Rgzconn priv = con->conprivate;
5239c5231
<     Rgzconn priv = con->private;
---
>     Rgzconn priv = con->conprivate;
5252c5244
< 		    error(_("writing error whilst flushing 'gzcon' connection"));
---
> 		    error(_("writing error while flushing gzcon connection"));
5298c5290
<     Rgzconn priv = con->private;
---
>     Rgzconn priv = con->conprivate;
5308c5300
< 	error(_("too large a block specified"));
---
> 	error(_("specified block is too large"));
5368c5360
<     Rgzconn priv = con->private;
---
>     Rgzconn priv = con->conprivate;
5372c5364
< 	error(_("too large a block specified"));
---
> 	error(_("specified block is too large"));
5381c5373
< 		warning(_("write error on 'gzcon' connection"));
---
> 		warning(_("write error on gzcon connection"));
5404c5396
<     SEXP ans, class;
---
>     SEXP ans, classs;
5406c5398
<     Rconnection incon = NULL, new = NULL;
---
>     Rconnection incon = NULL, newcon = NULL;
5411c5403
< 	error(_("'con' is not a connection"));
---
> 	error(_("'%s' argument is not an object of class %s"), "con", "\"connection\"");
5415c5407
< 	error(_("'level' must be one of 0 ... 9"));
---
> 	error(_("'level' argument must be one of 0 ... 9"));
5418c5410
< 	error(_("'allowNonCompression' must be TRUE or FALSE"));
---
> 	error(_("'%s' argument must be TRUE or FALSE"), "allowNonCompression");
5421c5413
< 	warning(_("this is already a 'gzcon' connection"));
---
> 	warning(_("this is already a gzcon connection"));
5428c5420
<     if(strcmp(incon->class, "file") == 0 &&
---
>     if(strcmp(incon->conclass, "file") == 0 &&
5432,5433c5424,5425
<     else if(strcmp(incon->class, "textConnection") == 0 && strcmp(m, "w") == 0)
< 	error(_("cannot create a 'gzcon' connection from a writable textConnection; maybe use rawConnection"));
---
>     else if(strcmp(incon->conclass, "textConnection") == 0 && strcmp(m, "w") == 0)
> 	error(_("cannot create a gzcon connection from a writable textConnection; maybe use rawConnection"));
5435,5440c5427,5432
<     new = (Rconnection) malloc(sizeof(struct Rconn));
<     if(!new) error(_("allocation of 'gzcon' connection failed"));
<     new->class = (char *) malloc(strlen("gzcon") + 1);
<     if(!new->class) {
< 	free(new);
< 	error(_("allocation of 'gzcon' connection failed"));
---
>     newcon = (Rconnection) malloc(sizeof(struct Rconn));
>     if(!newcon) error(_("allocation of gzcon connection failed"));
>     newcon->conclass = (char *) malloc(strlen("gzcon") + 1);
>     if(!newcon->conclass) {
> 	free(newcon);
> 	error(_("allocation of gzcon connection failed"));
5442c5434
<     strcpy(new->class, "gzcon");
---
>     strcpy(newcon->conclass, "gzcon");
5444,5466c5436,5458
<     new->description = (char *) malloc(strlen(description) + 1);
<     if(!new->description) {
< 	free(new->class); free(new);
< 	error(_("allocation of 'gzcon' connection failed"));
<     }
<     init_con(new, description, CE_NATIVE, mode);
<     new->text = FALSE;
<     new->isGzcon = TRUE;
<     new->open = &gzcon_open;
<     new->close = &gzcon_close;
<     new->vfprintf = &dummy_vfprintf;
<     new->fgetc = &gzcon_fgetc;
<     new->read = &gzcon_read;
<     new->write = &gzcon_write;
<     new->private = (void *) malloc(sizeof(struct gzconn));
<     if(!new->private) {
< 	free(new->description); free(new->class); free(new);
< 	error(_("allocation of 'gzcon' connection failed"));
<     }
<     ((Rgzconn)(new->private))->con = incon;
<     ((Rgzconn)(new->private))->cp = level;
<     ((Rgzconn)(new->private))->nsaved = -1;
<     ((Rgzconn)(new->private))->allow = allow;
---
>     newcon->description = (char *) malloc(strlen(description) + 1);
>     if(!newcon->description) {
> 	free(newcon->conclass); free(newcon);
> 	error(_("allocation of gzcon connection failed"));
>     }
>     init_con(newcon, description, CE_NATIVE, mode);
>     newcon->text = FALSE;
>     newcon->isGzcon = TRUE;
>     newcon->open = &gzcon_open;
>     newcon->close = &gzcon_close;
>     newcon->vfprintf = &dummy_vfprintf;
>     newcon->fgetc = &gzcon_fgetc;
>     newcon->read = &gzcon_read;
>     newcon->write = &gzcon_write;
>     newcon->conprivate = (void *) malloc(sizeof(struct gzconn));
>     if(!newcon->conprivate) {
> 	free(newcon->description); free(newcon->conclass); free(newcon);
> 	error(_("allocation of gzcon connection failed"));
>     }
>     ((Rgzconn)(newcon->conprivate))->con = incon;
>     ((Rgzconn)(newcon->conprivate))->cp = level;
>     ((Rgzconn)(newcon->conprivate))->nsaved = -1;
>     ((Rgzconn)(newcon->conprivate))->allow = allow;
5471,5474c5463,5466
<     Connections[icon] = new;
<     strncpy(new->encname, incon->encname, 100);
<     new->encname[100 - 1] = '\0';
<     new->ex_ptr = PROTECT(R_MakeExternalPtr((void *)new->id, install("connection"),
---
>     Connections[icon] = newcon;
>     strncpy(newcon->encname, incon->encname, 100);
>     newcon->encname[100 - 1] = '\0';
>     newcon->ex_ptr = PROTECT(R_MakeExternalPtr((void *)newcon->id, install("connection"),
5476c5468
<     if(incon->isopen) new->open(new);
---
>     if(incon->isopen) newcon->open(newcon);
5479,5483c5471,5475
<     PROTECT(class = allocVector(STRSXP, 2));
<     SET_STRING_ELT(class, 0, mkChar("gzcon"));
<     SET_STRING_ELT(class, 1, mkChar("connection"));
<     classgets(ans, class);
<     setAttrib(ans, R_ConnIdSymbol, new->ex_ptr);
---
>     PROTECT(classs = allocVector(STRSXP, 2));
>     SET_STRING_ELT(classs, 0, mkChar("gzcon"));
>     SET_STRING_ELT(classs, 1, mkChar("connection"));
>     classgets(ans, classs);
>     setAttrib(ans, R_ConnIdSymbol, newcon->ex_ptr);
5518c5510
< 	error("R_compress1 requires a raw vector");
---
> 	error(_("'%s' function requires a raw vector"), "R_compress1()");
5525c5517
<     if(res != Z_OK) error("internal error %d in R_compress1", res);
---
>     if(res != Z_OK) error(_("internal error %d in '%s' function"), res, "R_compress1()");
5543c5535
< 	error("R_decompress1 requires a raw vector");
---
> 	error(_("'%s' function requires a raw vector"), "R_decompress1()");
5549c5541
< 	warning("internal error %d in R_decompress1", res);
---
> 	warning(_("internal error %d in '%s' function"), res, "R_decompress1()");
5569c5561
< 	error("R_compress2 requires a raw vector");
---
> 	error(_("'%s' function requires a raw vector"), "R_compress2()");
5579c5571
<     if(res != BZ_OK) error("internal error %d in R_compress2", res);
---
>     if(res != BZ_OK) error(_("internal error %d in '%s' function"), res, "R_compress2()");
5602c5594
< 	error("R_decompress2 requires a raw vector");
---
> 	error(_("'%s' function requires a raw vector"), "R_decompress2()");
5610c5602
< 	    warning("internal error %d in R_decompress2", res);
---
> 	    warning(_("internal error %d in '%s' function"), res, "R_decompress2()");
5619c5611
< 	    warning("internal error %d in R_decompress1");
---
> 	    warning(_("internal error %d in '%s' function"), res, "R_decompress1()");
5626c5618
< 	warning("unknown type in R_decompress2");
---
> 	warning(_("unknown type in '%s' function"), "R_decompress2()");
5648c5640
< 	error(_("not a list of sockets"));
---
> 	error(_("'%s' argument is not a list of sockets"), "socklist");
5662,5664c5654,5656
< 	Rsockconn scp = conn->private;
< 	if (strcmp(conn->class, "sockconn") != 0)
< 	    error(_("not a socket connection"));
---
> 	Rsockconn scp = conn->conprivate;
> 	if (strcmp(conn->conclass, "sockconn") != 0)
> 	    error(_("this is not a socket connection"));
5690c5682
< 	error("problem setting presets");
---
> 	error(_("problem with setting presets"));
5712c5704
< 	error("R_compress3 requires a raw vector");
---
> 	error(_("'%s' function requires a raw vector"), "R_compress3()");
5722c5714
<     if (ret != LZMA_OK) error("internal error %d in R_compress3", ret);
---
>     if (ret != LZMA_OK) error(_("internal error %d in '%s' function"), ret, "R_compress3()");
5729c5721
< 	warning("internal error %d in R_compress3", ret);
---
> 	warning(_("internal error %d in '%s' function"), ret, "R_compress3()");
5752c5744
< 	error("R_decompress3 requires a raw vector");
---
> 	error(_("'%s' function requires a raw vector"), "R_decompress3()");
5763c5755
< 	    warning("internal error %d in R_decompress3", ret);
---
> 	    warning(_("internal error %d in '%s' function"), ret, "R_decompress3()");
5773,5774c5765
< 	    warning("internal error %d in R_decompress3 %d",
< 		    ret, strm.avail_in);
---
> 	    warning(_("internal error %d in '%s' function (%d)"), ret, "R_decompress3()", strm.avail_in);
5784c5775
< 	    warning("internal error %d in R_decompress2", res);
---
> 	    warning(_("internal error %d in '%s' function"), res, "R_decompress2()");
5792c5783
< 	    warning("internal error %d in R_decompress1");
---
> 	    warning(_("internal error %d in '%s' function"), res, "R_decompress1()");
5799c5790
< 	warning("unknown type in R_decompress3");
---
> 	warning(_("unknown type in '%s' function"), "R_decompress3()");
5817c5808
<     if(TYPEOF(from) != RAWSXP) error("'from' must be raw or character");
---
>     if(TYPEOF(from) != RAWSXP) error(_("'from' argument must be raw or character"));
5829c5820
< 	if(res != Z_OK) error("internal error %d in memCompress", res);
---
> 	if(res != Z_OK) error(_("internal error %d in '%s' function"), res, "memCompress()");
5842c5833
< 	if(res != BZ_OK) error("internal error %d in memCompress", res);
---
> 	if(res != BZ_OK) error(_("internal error %d in '%s' function"), res, "memCompress()");
5858c5849
< 	    error("problem setting presets");
---
> 	    error(_("problem with setting presets"));
5864c5855
< 	if (ret != LZMA_OK) error("internal error %d in memCompress", ret);
---
> 	if (ret != LZMA_OK) error(_("internal error %d in '%s' function"), ret, "memCompress()");
5874c5865
< 	    error("internal error %d in memCompress", ret);
---
> 	    error(_("internal error %d in '%s' function"), ret, "memCompress()");
5897c5888
<     if(TYPEOF(from) != RAWSXP) error("'from' must be raw or character");
---
>     if(TYPEOF(from) != RAWSXP) error(_("'from' argument must be raw or character"));
5928c5919
< 	    error("internal error %d in memDecompress(%d)", res, type);
---
> 	    error(_("internal error %d in '%s' function (%d)"), res, "memDecompress()", type);
5944c5935
< 	    error("internal error %d in memDecompress(%d)", res, type);
---
> 	    error(_("internal error %d in '%s' function (%d)"), res, "memDecompress()", type);
5990,5991c5981
< 		    error("internal error %d in memDecompress(%d) at %d",
< 			  ret, type, strm.avail_in);
---
> 		    error(_("internal error %d in '%s' function (%d) at %d"), ret, "memDecompress()", type, strm.avail_in);
6020,6021c6010,6011
<     Rconnection new;
<     SEXP ans, class;
---
>     Rconnection newcon;
>     SEXP ans, classs;
6026,6030c6016,6020
<     new = (Rconnection) malloc(sizeof(struct Rconn));
<     if(!new) error(_("allocation of %s connection failed"), class_name);
<     new->class = (char *) malloc(strlen(class_name) + 1);
<     if(!new->class) {
<         free(new);
---
>     newcon = (Rconnection) malloc(sizeof(struct Rconn));
>     if(!newcon) error(_("allocation of %s connection failed"), class_name);
>     newcon->conclass = (char *) malloc(strlen(class_name) + 1);
>     if(!newcon->conclass) {
>         free(newcon);
6033,6036c6023,6026
<     strcpy(new->class, class_name);
<     new->description = (char *) malloc(strlen(description) + 1);
<     if(!new->description) {
<         free(new->class); free(new);
---
>     strcpy(newcon->conclass, class_name);
>     newcon->description = (char *) malloc(strlen(description) + 1);
>     if(!newcon->description) {
>         free(newcon->conclass); free(newcon);
6039c6029
<     init_con(new, description, CE_NATIVE, mode);
---
>     init_con(newcon, description, CE_NATIVE, mode);
6042,6043c6032,6033
<     new->vfprintf = &dummy_vfprintf;
<     new->fgetc = &dummy_fgetc;
---
>     newcon->vfprintf = &dummy_vfprintf;
>     newcon->fgetc = &dummy_fgetc;
6046c6036
<     Connections[ncon] = new;
---
>     Connections[ncon] = newcon;
6048,6049c6038,6039
<     new->encname[0] = 0; /* "" (should have the same effect as "native.enc") */
<     new->ex_ptr = PROTECT(R_MakeExternalPtr(new->id, install("connection"), R_NilValue));
---
>     newcon->encname[0] = 0; /* "" (should have the same effect as "native.enc") */
>     newcon->ex_ptr = PROTECT(R_MakeExternalPtr(newcon->id, install("connection"), R_NilValue));
6052,6057c6042,6047
<     PROTECT(class = allocVector(STRSXP, 2));
<     SET_STRING_ELT(class, 0, mkChar(class_name));
<     SET_STRING_ELT(class, 1, mkChar("connection"));
<     classgets(ans, class);
<     setAttrib(ans, R_ConnIdSymbol, new->ex_ptr);
<     R_RegisterCFinalizerEx(new->ex_ptr, conFinalizer, FALSE);
---
>     PROTECT(classs = allocVector(STRSXP, 2));
>     SET_STRING_ELT(classs, 0, mkChar(class_name));
>     SET_STRING_ELT(classs, 1, mkChar("connection"));
>     classgets(ans, classs);
>     setAttrib(ans, R_ConnIdSymbol, newcon->ex_ptr);
>     R_RegisterCFinalizerEx(newcon->ex_ptr, conFinalizer, FALSE);
6060c6050
<     if (ptr) ptr[0] = new;
---
>     if (ptr) ptr[0] = newcon;
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/context.c R/src/main/context.c
110a111
> #include <Localization.h>
127c128
< 	    error("bad target context--should NEVER happen if R was called correctly");
---
> 	    error(_("bad target context--should NEVER happen if R was called correctly"));
338,339c339
< 	errorcall(R_GlobalContext->call,
< 		  _("not that many frames on the stack"));
---
> 	errorcall(R_GlobalContext->call, _("not that many frames on the stack"));
354,355c354
< 	errorcall(R_GlobalContext->call,
< 		  _("not that many frames on the stack"));
---
> 	errorcall(R_GlobalContext->call, _("not that many frames on the stack"));
371,372c370
< 	errorcall(R_ToplevelContext->call,
< 		  _("only positive values of 'n' are allowed"));
---
> 	errorcall(R_ToplevelContext->call, _("only positive values of 'n' are allowed"));
421,422c419
< 	errorcall(R_GlobalContext->call,
< 		  _("not that many frames on the stack"));
---
> 	errorcall(R_GlobalContext->call, _("not that many frames on the stack"));
454,455c451
< 	errorcall(R_GlobalContext->call,
< 		  _("not that many frames on the stack"));
---
> 	errorcall(R_GlobalContext->call, _("not that many frames on the stack"));
660c656
< 	error(_("internal error in 'do_sys'"));
---
> 	error(_("internal error in '%s' function"), "do_sys()");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/contour-common.h R/src/main/contour-common.h
330c330
< 		else error("k = %d, should be 2 or 4", k);
---
> 		else error(_("k = %d, should be 2 or 4"), k);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/cum.c R/src/main/cum.c
24a25
> #include <Localization.h>
49c50
< 	    warning(_("integer overflow in 'cumsum'; use 'cumsum(as.numeric(.))'"));
---
> 	    warning(_("integer overflow in '%s' function; use '%s'"), "cumsum()", "cumsum(as.numeric(.))");
178c179
< 	    errorcall(call, _("'cummax' not defined for complex numbers"));
---
> 	    errorcall(call, _("'%s' function is not defined for complex numbers"), "cummax()");
181c182
< 	    errorcall(call, _("'cummin' not defined for complex numbers"));
---
> 	    errorcall(call, _("'%s' function is not defined for complex numbers"), "cummin()");
184c185
< 	    errorcall(call, "unknown cumxxx function");
---
> 	    errorcall(call, _("unknown '%s' function"), "cumxxx()");
206c207
< 	    errorcall(call, _("unknown cumxxx function"));
---
> 	    errorcall(call, _("unknown '%s' function"), "cumxxx()");
230c231
< 	    errorcall(call, _("unknown cumxxx function"));
---
> 	    errorcall(call, _("unknown '%s' function"), "cumxxx()");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/datetime.c R/src/main/datetime.c
100a101
> #include <Localization.h>
544c545
< 	    error("time zone specification is too long");
---
> 	    error(_("time zone specification is too long"));
554c555
< 	    error("time zone specification is too long");
---
> 	    error(_("time zone specification is too long"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/dcf.c R/src/main/dcf.c
24a25
> #include <Localization.h>
113c114
<     if(!buf) error(_("could not allocate memory for 'read.dcf'"));
---
>     if(!buf) error(_("could not allocate memory for 'read.dcf()' function"));
156,157c157
< 		    error(_("Found continuation line starting '%s ...' at begin of record."),
< 			  line);
---
> 		    error(_("Found continuation line starting '%s ...' at begin of record."), line);
181c181
< 			    error(_("could not allocate memory for 'read.dcf'"));
---
> 			    error(_("could not allocate memory for 'read.dcf()' function"));
253c253
< 				error(_("could not allocate memory for 'read.dcf'"));
---
> 				error(_("could not allocate memory for 'read.dcf()' function"));
282c282
< 		    error(_("Line starting '%s ...' is malformed!"), line);
---
> 		    error(_("Line starting with '%s ...' is malformed!"), line);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/debug.c R/src/main/debug.c
25a26
> #include <Localization.h>
52c53
< 	    warningcall(call, "argument is not being debugged");
---
> 	    warningcall(call, _("argument is not being debugged"));
76c77
< 	    errorcall(call, _("argument must be a function"));
---
> 	    errorcall(call, _("'%s' argument must be a function"), "what");
111,112c112
< 	    error(_("Value for '%s' must be TRUE or FALSE"),
< 		  trace ? "tracingState" : "debuggingState");
---
> 	    error(_("'%s' argument must be TRUE or FALSE"), trace ? "tracingState" : "debuggingState");
146c146
< 		  _("'tracemem' is not useful for promise and environment objects"));
---
> 		  _("'tracemem()' function is not useful for promise and environment objects"));
149c149
< 		  _("'tracemem' is not useful for weak reference or external pointer objects"));
---
> 		  _("'tracemem()' function is not useful for weak reference or external pointer objects"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/deparse.c R/src/main/deparse.c
92a93
> #include <Localization.h>
102c103
< #define DEFAULT_Cutoff 60
---
> #define DEFAULT_Cutoff GetOptionWidth()
159c160
< 	    warning(_("invalid 'cutoff' value for 'deparse', using default"));
---
> 	    warning(_("invalid 'cutoff' value (%d) for 'deparse()', using default %d"), cut0, DEFAULT_Cutoff);
247c248
< 	warning(_("deparse of an S4 object will not be source()able"));
---
> 	warning(_("deparse of an S4 object will not be sourceable by 'source()'"));
251c252
< 	warning(_("deparse may be not be source()able in R < 2.7.0"));
---
> 	warning(_("deparse may be not be sourceable by 'source()' in R version less than 2.7.0"));
343c344
< 	error(_("'file' must be a character string or connection"));
---
> 	error(_("'%s' argument must be a character string or connection"), "file");
393c394
< 	error(_("'file' must be a character string or connection"));
---
> 	error(_("'%s' must be a character string or connection"), "file");
405c406
< 	errorcall(call, _("'opts' should be small non-negative integer"));
---
> 	errorcall(call, _("'opts' argument should be small non-negative integer"));
415c416
< 	    warning(_("object '%s' not found"), EncodeChar(PRINTNAME(TAG(o))));
---
> 	    warning(_("object '%s' was not found"), EncodeChar(PRINTNAME(TAG(o))));
1113c1114
< 		    UNIMPLEMENTED("deparse2buff");
---
> 		    UNIMPLEMENTED("deparse2buff()");
1231c1232
< 	UNIMPLEMENTED_TYPE("deparse2buff", s);
---
> 	UNIMPLEMENTED_TYPE("deparse2buff()", s);
1313c1314
< 	default: UNIMPLEMENTED_TYPE("vector2buff", vector);
---
> 	default: UNIMPLEMENTED_TYPE("vector2buff()", vector);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/devices.c R/src/main/devices.c
33a34
> #include <Localization.h>
52c53
< 	error("argument to 'getSymbolValue' is not a symbol");
---
> 	error(_("argument passed to 'getSymbolValue()' function is not a symbol"));
490c491
< 	error(_("not enough memory to allocate device (in GEcreateDevDesc)"));
---
> 	error(_("not enough memory to allocate device (in 'GEcreateDevDesc()' function)"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/dotcode.c R/src/main/dotcode.c
26a27,28
> #include <Localization.h>
> #include <R_ext/Minmax.h>
36,38d37
< #ifndef max
< #define max(a, b) ((a > b)?(a):(b))
< #endif
45c44
<     errorcall(call, "the first argument should not be named");
---
>     errorcall(call, _("the first argument should not be named"));
148,149c147
< 		  errorcall(call, _("Unimplemented type %d in createRSymbolObject"),
< 			    symbol->type);
---
> 		  errorcall(call, _("unimplemented type %d in '%s' function"), symbol->type, "createRSymbolObject()");
236c234
< 	errorcall(call, _("PACKAGE = \"\" is invalid"));
---
> 	errorcall(call, _("'PACKAGE = \"\"' is invalid"));
249,251c247
< 	    warningcall(call,
< 			"using PACKAGE = \"%s\" from namespace '%s'",
< 			dll.DLLname, ns);
---
> 	    warningcall(call, _("using 'PACKAGE = \"%s\"' from namespace '%s'"), dll.DLLname, ns);
275,276c271
< 	errorcall(call, "\"%s\" not resolved from current namespace (%s)",
< 		  buf, ns);
---
> 	errorcall(call, _("\"%s\" was not resolved from current namespace (%s)"), buf, ns);
291,293c286
< 	    errorcall(call,
< 		      _("\"%s\" not available for %s() for package \"%s\""),
< 		      buf, ".C", dll.DLLname);
---
> 	    errorcall(call, _("symbol name \"%s\" is not available for '%s' method for package '%s'"), buf, ".C()", dll.DLLname);
296,298c289
< 	    errorcall(call,
< 		      _("\"%s\" not available for %s() for package \"%s\""),
< 		      buf, ".Fortran", dll.DLLname);
---
> 	    errorcall(call, _("symbol name \"%s\" is not available for '%s' method for package '%s'"), buf, ".Fortran()", dll.DLLname);
301,303c292
< 	    errorcall(call,
< 		      _("\"%s\" not available for %s() for package \"%s\""),
< 		      buf, ".Call", dll.DLLname);
---
> 	    errorcall(call, _("symbol name \"%s\" is not available for '%s' method for package '%s'"), buf, ".Call()", dll.DLLname);
306,308c295
< 	    errorcall(call,
< 		      _("\"%s\" not available for %s() for package \"%s\""),
< 		      buf, ".External", dll.DLLname);
---
> 	    errorcall(call, _("symbol name \"%s\" is not available for '%s' method for package '%s'"), buf, ".External()", dll.DLLname);
311,313c298
< 	    errorcall(call,
< 		      _("%s symbol name \"%s\" not in DLL for package \"%s\""),
< 		      "C/Fortran", buf, dll.DLLname);
---
> 	    errorcall(call, _("'%s' symbol name \"%s\" is not in DLL for package '%s'"), "C/Fortran", buf, dll.DLLname);
317,318c302
< 	errorcall(call, _("%s symbol name \"%s\" not in load table"),
< 		  symbol->type == R_FORTRAN_SYM ? "Fortran" : "C", buf);
---
> 	errorcall(call, _("'%s' symbol name \"%s\" is not in load table"), symbol->type == R_FORTRAN_SYM ? "Fortran" : "C", buf);
368c352
< 	    if(naokused++ == 1) warning(_("'%s' used more than once"), "NAOK");
---
> 	    if(naokused++ == 1) warning(_("'%s' argument was used more than once"), "NAOK");
370c354
< 	    if(dupused++ == 1) warning(_("'%s' used more than once"), "DUP");
---
> 	    if(dupused++ == 1) warning(_("'%s' argument was used more than once"), "DUP");
376c360
< 		    error(_("DLL name is too long"));
---
> 		    error(_("DLL name '%s' is too long"), p);
380c364
< 		    warning(_("'%s' used more than once"), "PACKAGE");
---
> 		    warning(_("'%s' argument was used more than once"), "PACKAGE");
397,398c381
< 		    error("incorrect type (%s) of PACKAGE argument\n",
< 			  type2char(TYPEOF(CAR(s))));
---
> 		    error(_("incorrect type (%s) of 'PACKAGE' argument"), type2char(TYPEOF(CAR(s))));
421c404
< 	error(_("PACKAGE argument must be a single character string"));
---
> 	error(_("'%s' argument must be a single character string"), "PACKAGE");
427c410
< 	error(_("PACKAGE argument is too long"));
---
> 	error(_("'%s' argument is too long"), "PACKAGE");
445c428
< 		warning(_("'%s' used more than once"), "PACKAGE");
---
> 		warning(_("'%s' argument was used more than once"), "PACKAGE");
452c435
< 		warning(_("'%s' used more than once"), "PACKAGE");
---
> 		warning(_("'%s' argument was used more than once"), "PACKAGE");
472c455
< 	    warning("ENCODING is defunct and will be ignored");
---
> 	    warning(_("'ENCODING' argument is defunct and will be ignored"));
476c459
< 	    warning("ENCODING is defunct and will be ignored");
---
> 	    warning(_("'ENCODING' argument is defunct and will be ignored"));
530c513
<     if (length(args) < 1) errorcall(call, _("'.NAME' is missing"));
---
>     if (length(args) < 1) errorcall(call, _("'%s' is missing"), ".NAME");
1216c1199
< 	errorcall(call, _("too many arguments, sorry"));
---
> 	errorcall(call, _("too many arguments"));
1380c1363
< 	    error(_("NULL value for DLLInfoReference when looking for DLL"));
---
> 	    error(_("NULL value for 'DLLInfoReference' when looking for DLL"));
1420c1403
<     if (length(args) < 1) errorcall(call, _("'.NAME' is missing"));
---
>     if (length(args) < 1) errorcall(call, _("'%s' is missing"), ".NAME");
1481,1482c1464
< 	    errorcall(call, _("wrong type for argument %d in call to %s"),
< 		      na+1, symName);
---
> 	    errorcall(call, _("wrong type for argument %d in call to '%s'"), na+1, symName);
1541c1523
< 			error(_("NAs in foreign function call (arg %d)"), na + 1);
---
> 			error(_("NA values in foreign function call (arg %d)"), na + 1);
1564c1546
< 			error(_("NA/NaN/Inf in foreign function call (arg %d)"), na + 1);
---
> 			error(_("NA/NaN/Inf value in foreign function call (arg %d)"), na + 1);
1594c1576
< 			error(_("complex NA/NaN/Inf in foreign function call (arg %d)"), na + 1);
---
> 			error(_("complex NA/NaN/Inf value in foreign function call (arg %d)"), na + 1);
1616c1598
< 		    warning(_("only first string in char vector used in .Fortran"));
---
> 		    warning(_("only first string in character vector used in '.Fortran'"));
2290c2272
< 	errorcall(call, _("too many arguments, sorry"));
---
> 	errorcall(call, _("too many arguments"));
2314c2296
< 			    error("array over-run in %s(\"%s\") in %s argument %d\n",
---
> 			    error(_("array over-run in %s(\"%s\") in %s argument %d\n"),
2320c2302
< 			    error("array under-run in %s(\"%s\") in %s argument %d\n",
---
> 			    error(_("array under-run in %s(\"%s\") in %s argument %d\n"),
2333c2315
< 			    error("array over-run in %s(\"%s\") in %s argument %d\n",
---
> 			    error(_("array over-run in %s(\"%s\") in %s argument %d\n"),
2339c2321
< 			    error("array under-run in %s(\"%s\") in %s argument %d\n",
---
> 			    error(_("array under-run in %s(\"%s\") in %s argument %d\n"),
2356c2338
< 			    error("array over-run in %s(\"%s\") in %s argument %d\n",
---
> 			    error(_("array over-run in %s(\"%s\") in %s argument %d\n"),
2362c2344
< 			    error("array under-run in %s(\"%s\") in %s argument %d\n",
---
> 			    error(_("array under-run in %s(\"%s\") in %s argument %d\n"),
2387,2389c2369
< 				error("array over-run in %s(\"%s\") in %s argument %d\n",
< 				      Fort ? ".Fortran" : ".C",
< 				      symName, type2char(type), na+1);
---
> 				error(_("array over-run in %s(\"%s\") in %s argument %d"), Fort ? ".Fortran" : ".C", symName, type2char(type), na+1);
2393,2395c2373
< 				error("array under-run in %s(\"%s\") in %s argument %d\n",
< 				      Fort ? ".Fortran" : ".C",
< 				      symName, type2char(type), na+1);
---
> 				error(_("array under-run in %s(\"%s\") in %s argument %d"), Fort ? ".Fortran" : ".C", symName, type2char(type), na+1);
2414c2392
< 			    error("array over-run in %s(\"%s\") in %s argument %d\n",
---
> 			    error(_("array over-run in %s(\"%s\") in %s argument %d\n"),
2420c2398
< 			    error("array under-run in %s(\"%s\") in %s argument %d\n",
---
> 			    error(_("array under-run in %s(\"%s\") in %s argument %d\n"),
2445c2423
< 				    error("array under-run in .C(\"%s\") in character argument %d, element %d",
---
> 				    error(_("array under-run in .C(\"%s\") in character argument %d, element %d"),
2455c2433
< 				    error("array over-run in .C(\"%s\") in character argument %d, element %d\n'%s'->'%s'\n",
---
> 				    error(_("array over-run in .C(\"%s\") in character argument %d, element %d\n'%s'->'%s'\n"),
2510c2488
<     error(_("type \"%s\" not supported in interlanguage calls"), s);
---
>     error(_("type '%s' is not supported in interlanguage calls"), s);
2577c2555
< 	error("invalid function in call_R");
---
> 	error(_("invalid function in 'call_R()'"));
2579c2557
< 	error("invalid argument count in call_R");
---
> 	error(_("invalid argument count in 'call_R()'"));
2581c2559
< 	error("invalid return value count in call_R");
---
> 	error(_("invalid return value count in 'call_R()'"));
2615c2593
< 	    error(_("mode '%s' is not supported in call_R"), modes[i]);
---
> 	    error(_("mode '%s' is not supported in 'call_R()' function"), modes[i]);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/dounzip.c R/src/main/dounzip.c
27a28
> #include <Localization.h>
262c263
<         error("error %d with zipfile in unzGetGlobalInfo", err);
---
>         error(_("error %d with zipfile in '%s'"), err, "unzGetGlobalInfo");
277c278
<             error("error %d with zipfile in unzGetCurrentFileInfo\n", err);
---
>             error(_("error %d with zipfile in '%s'"), err, "unzGetCurrentFileInfo");
293c294
<                 error("error %d with zipfile in unzGoToNextFile\n",err);
---
>                 error(_("error %d with zipfile in '%s'"), err, "unzGoToNextFile");
333c334
< 	error(_("'exdir' is too long"));
---
> 	error(_("'%s' argument is too long"), "exdir");
374c375
< 	    warning("internal error in 'unz' code");
---
> 	    warning(_("internal error in 'unz' code"));
405c406
< 	warning(_("unz connections can only be opened for reading"));
---
> 	warning(_("'unz' connections can only be opened for reading"));
431c432
<     ((Runzconn)(con->private))->uf = uf;
---
>     ((Runzconn)(con->conprivate))->uf = uf;
444c445
<     unzFile uf = ((Runzconn)(con->private))->uf;
---
>     unzFile uf = ((Runzconn)(con->conprivate))->uf;
452c453
<     unzFile uf = ((Runzconn)(con->private))->uf;
---
>     unzFile uf = ((Runzconn)(con->conprivate))->uf;
464c465
<     unzFile uf = ((Runzconn)(con->private))->uf;
---
>     unzFile uf = ((Runzconn)(con->conprivate))->uf;
495,496c496,497
<     new->class = (char *) malloc(strlen("unz") + 1);
<     if(!new->class) {
---
>     new->conclass = (char *) malloc(strlen("unz") + 1);
>     if(!new->conclass) {
500c501
<     strcpy(new->class, "unz");
---
>     strcpy(new->conclass, "unz");
503c504
< 	free(new->class); free(new);
---
> 	free(new->conclass); free(new);
518,520c519,521
<     new->private = (void *) malloc(sizeof(struct unzconn));
<     if(!new->private) {
< 	free(new->description); free(new->class); free(new);
---
>     new->conprivate = (void *) malloc(sizeof(struct unzconn));
>     if(!new->conprivate) {
> 	free(new->description); free(new->conclass); free(new);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/dstruct.c R/src/main/dstruct.c
25a26
> #include <Localization.h>
55c56
< 	error("offset is out of R_FunTab range");
---
> 	error(_("offset is out of R_FunTab range"));
65c66
< 	error("requested primitive type is not consistent with cached value");
---
> 	error(_("requested primitive type is not consistent with cached value"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/duplicate.c R/src/main/duplicate.c
26c26,27
< #include "Defn.h"
---
> #include <Localization.h>
> #include <Defn.h>
192c193
< 	UNIMPLEMENTED_TYPE("lazy_duplicate", s);
---
> 	UNIMPLEMENTED_TYPE("lazy_duplicate()", s);
355c356
< 	UNIMPLEMENTED_TYPE("duplicate", s);
---
> 	UNIMPLEMENTED_TYPE("duplicate()", s);
370c371
< 	error("vector types do not match in copyVector");
---
> 	error(_("vector types do not match in 'copyVector()'"));
407c408
< 	UNIMPLEMENTED_TYPE("copyVector", s);
---
> 	UNIMPLEMENTED_TYPE("copyVector()", s);
495c496
< 	    UNIMPLEMENTED_TYPE("copyMatrix", s);
---
> 	    UNIMPLEMENTED_TYPE("copyMatrix()", s);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/edit.c R/src/main/edit.c
29c29,30
< #include "Defn.h"
---
> #include <Localization.h>
> #include <Defn.h>
110c111
< 	error(_("invalid argument to edit()"));
---
> 	error(_("invalid argument passed to 'edit()' function"));
121c122
< 	    errorcall(call, _("unable to open file"));
---
> 	    errorcall(call, _("unable to open file '%s'"), filename);
140c141
< 	    error(_("'title' must be a string"));
---
> 	    error(_("'%s' argument must be a character string"), "title");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/engine.c R/src/main/engine.c
23a24
> #include <Localization.h>
113c114
< 	error(_("unable to allocate memory (in GEregister)"));
---
> 	error(_("unable to allocate memory (in 'GEregister()' function)"));
118c119
< 	error(_("unable to allocate memory (in GEregister)"));
---
> 	error(_("unable to allocate memory (in 'GEregister()' function)"));
182c183
< 	error(_("unable to allocate memory (in GEregister)"));
---
> 	error(_("unable to allocate memory (in 'GEregister()' function)"));
761c762
< 	error(_("'lwd' must be non-negative and finite"));
---
> 	error(_("'lwd' argument must be non-negative and finite"));
865c866
< 	error(_("'lwd' must be non-negative and finite"));
---
> 	error(_("'lwd' argument must be non-negative and finite"));
1098c1099
< 	error(_("'lwd' must be non-negative and finite"));
---
> 	error(_("'lwd' argument must be non-negative and finite"));
1205c1206
< 	error(_("'lwd' must be non-negative and finite"));
---
> 	error(_("'lwd' argument must be non-negative and finite"));
1328c1329
< 	error(_("'lwd' must be non-negative and finite"));
---
> 	error(_("'lwd' argument must be non-negative and finite"));
1392c1393
< 	error(_("'lwd' must be non-negative and finite"));
---
> 	error(_("'lwd' argument must be non-negative and finite"));
1656,1657c1657
< 	    error(_("font face %d not supported for font family '%s'"),
< 		  fontface, VFontTable[familycode].name);
---
> 	    error(_("font face %d is not supported for font family '%s'"), fontface, VFontTable[familycode].name);
1840,1841c1840
< 					printf("metric info for %d, %f %f\n",
< 					       (unsigned char) *ss, h, d);
---
> 					printf("metric info for %d, %f %f\n", (unsigned char) *ss, h, d);
1982,1983c1981,1982
< #define SQRC	0.88622692545275801364		/* sqrt(pi / 4) */
< #define DMDC	1.25331413731550025119		/* sqrt(pi / 4) * sqrt(2) */
---
> #define SQRC	M_SQRT_PI/2 //0.88622692545275801364		/* sqrt(pi / 4) */
> #define DMDC	SQRC * M_SQRT2 //1.25331413731550025119		/* sqrt(pi / 4) * sqrt(2) */
2010c2009
< 	    error("use of negative pch with symbol font is invalid");
---
> 	    error(_("use of negative 'pch' argument with symbol font is invalid"));
2049c2048
< 	    warning(_("pch value '%d' is invalid in this locale"), pch);
---
> 	    warning(_("'pch' value '%d' is invalid in this locale"), pch);
2307c2306
< 	    warning(_("unimplemented pch value '%d'"), pch);
---
> 	    warning(_("unimplemented 'pch' value '%d'"), pch);
2330c2329
< 	error(_("invalid axis extents [GEPretty(.,.,n=%d)"), *ndiv);
---
> 	error(_("invalid axis extents '[GEPretty(.,.,n=%d)]'"), *ndiv);
2334c2333
< 	error(_("infinite axis extents [GEPretty(%g,%g,%d)]"), *lo, *up, *ndiv);
---
> 	error(_("infinite axis extents '[GEPretty(%g,%g,%d)]'"), *lo, *up, *ndiv);
2371c2370
< 	warning(_(" .. GEPretty(.): new *lo = %g < %g = x1"), *lo, x1);
---
> 	warning(_(" .. 'GEPretty(.)': new *lo = %g < %g = x1"), *lo, x1);
2373c2372
< 	warning(_(" .. GEPretty(.): new *up = %g > %g = x2"), *up, x2);
---
> 	warning(_(" .. 'GEPretty(.)': new *up = %g > %g = x2"), *up, x2);
2963c2962
< 	error(_("'expr' argument must be an expression"));
---
> 	error(_("'%s' argument must be an expression"), "expr");
2965c2964
< 	error(_("'list' argument must be a list"));
---
> 	error(_("'%s' argument must be a list"), "list");
2971c2970
< 	error(_("'env' argument must be an environment"));
---
> 	error(_("'%s' argument must be an environment"), "env");
3051c3050
< 	    else error(_("invalid multibyte char in pch=\"c\""));
---
> 	    else error(_("invalid multibyte char in 'pch=\"c\"'"));
3059c3058
< 	else error(_("invalid multibyte char in pch=\"c\""));
---
> 	else error(_("invalid multibyte char in 'pch=\"c\"'"));
3106c3105
<     /*else */ error(_("invalid hex digit in 'color' or 'lty'"));
---
>     /*else */ error(_("invalid hex digit in 'color' or 'lty' argument"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/envir.c R/src/main/envir.c
93a94
> #include <Localization.h>
101c102,123
< #define IS_USER_DATABASE(rho)  (OBJECT((rho)) && inherits((rho), "UserDefinedDatabase"))
---
> static SEXP getActiveValue(SEXP fun)
> {
>     SEXP expr = LCONS(fun, R_NilValue);
>     PROTECT(expr);
>     expr = eval(expr, R_GlobalEnv);
>     UNPROTECT(1);
>     return expr;
> }
> 
> static void setActiveValue(SEXP fun, SEXP val)
> {
>     SEXP arg = LCONS(R_QuoteSymbol, LCONS(val, R_NilValue));
>     SEXP expr = LCONS(fun, LCONS(arg, R_NilValue));
>     PROTECT(expr);
>     eval(expr, R_GlobalEnv);
>     UNPROTECT(1);
> }
> 
> //#define IS_USER_DATABASE(rho)  OBJECT((rho)) && inherits((rho), "UserDefinedDatabase")
> static R_INLINE Rboolean IS_USER_DATABASE(SEXP rho)  { 
>  return (OBJECT((rho)) && inherits((rho), "UserDefinedDatabase"));
>  }
106,107c128,135
< #define FRAME_IS_LOCKED(e) (ENVFLAGS(e) & FRAME_LOCK_MASK)
< #define LOCK_FRAME(e) SET_ENVFLAGS(e, ENVFLAGS(e) | FRAME_LOCK_MASK)
---
> //#define FRAME_IS_LOCKED(e) (ENVFLAGS(e) & FRAME_LOCK_MASK)
> static R_INLINE Rboolean FRAME_IS_LOCKED(SEXP e) {
>  return ENVFLAGS(e) & FRAME_LOCK_MASK;
>  }
> //#define LOCK_FRAME(e) SET_ENVFLAGS(e, ENVFLAGS(e) | FRAME_LOCK_MASK)
> static R_INLINE void LOCK_FRAME(SEXP e) {
>  SET_ENVFLAGS(e, ENVFLAGS(e) | FRAME_LOCK_MASK);
>  }
111c139,142
< #define BINDING_VALUE(b) ((IS_ACTIVE_BINDING(b) ? getActiveValue(CAR(b)) : CAR(b)))
---
> //#define BINDING_VALUE(b) ((IS_ACTIVE_BINDING(b) ? getActiveValue(CAR(b)) : CAR(b)))
> static R_INLINE SEXP BINDING_VALUE(SEXP b) {
>  return IS_ACTIVE_BINDING(b) ? getActiveValue(CAR(b)) : CAR(b);
>  }
113,114c144,151
< #define SYMBOL_BINDING_VALUE(s) ((IS_ACTIVE_BINDING(s) ? getActiveValue(SYMVALUE(s)) : SYMVALUE(s)))
< #define SYMBOL_HAS_BINDING(s) (IS_ACTIVE_BINDING(s) || (SYMVALUE(s) != R_UnboundValue))
---
> //#define SYMBOL_BINDING_VALUE(s) ((IS_ACTIVE_BINDING(s) ? getActiveValue(SYMVALUE(s)) : SYMVALUE(s)))
> static R_INLINE SEXP SYMBOL_BINDING_VALUE(SEXP s) {
>  return IS_ACTIVE_BINDING(s) ? getActiveValue(SYMVALUE(s)) : SYMVALUE(s);
>  }
> //#define SYMBOL_HAS_BINDING(s) (IS_ACTIVE_BINDING(s) || (SYMVALUE(s) != R_UnboundValue))
> static R_INLINE Rboolean SYMBOL_HAS_BINDING(SEXP s) {
>  return IS_ACTIVE_BINDING(s) || (SYMVALUE(s) != R_UnboundValue);
>  }
115a153
> /*
126a165,174
> */
> static R_INLINE void SET_BINDING_VALUE(SEXP b, SEXP val) {
>   if (BINDING_IS_LOCKED(b)) 
>     error(_("cannot change value of locked binding for '%s'"), 
>           CHAR(PRINTNAME(TAG(b)))); 
>   if (IS_ACTIVE_BINDING(b)) 
>     setActiveValue(CAR(b), val); 
>   else 
>     SETCAR(b, val); 
> }
127a176
> /*
139,155c188,196
< 
< static void setActiveValue(SEXP fun, SEXP val)
< {
<     SEXP arg = LCONS(R_QuoteSymbol, LCONS(val, R_NilValue));
<     SEXP expr = LCONS(fun, LCONS(arg, R_NilValue));
<     PROTECT(expr);
<     eval(expr, R_GlobalEnv);
<     UNPROTECT(1);
< }
< 
< static SEXP getActiveValue(SEXP fun)
< {
<     SEXP expr = LCONS(fun, R_NilValue);
<     PROTECT(expr);
<     expr = eval(expr, R_GlobalEnv);
<     UNPROTECT(1);
<     return expr;
---
> */
> static R_INLINE void SET_SYMBOL_BINDING_VALUE(SEXP sym, SEXP val) {
>   if (BINDING_IS_LOCKED(sym)) 
>     error(_("cannot change value of locked binding for '%s'"), 
>           CHAR(PRINTNAME(sym))); 
>   if (IS_ACTIVE_BINDING(sym)) 
>     setActiveValue(SYMVALUE(sym), val); 
>   else 
>     SET_SYMVALUE(sym, val);
159c200,203
< #define ISNULL(x) ((x) == R_NilValue)
---
> //#define ISNULL(x) ((x) == R_NilValue)
> static R_INLINE Rboolean ISNULL(SEXP x) {
>  return x == R_NilValue;
> }
188,189c232,239
< #define HASHSIZE(x)	     LENGTH(x)
< #define HASHPRI(x)	     TRUELENGTH(x)
---
> //#define HASHSIZE(x)	     LENGTH(x)
> static R_INLINE int HASHSIZE(SEXP x) {
>  return LENGTH(x);
>  }
> //#define HASHPRI(x)	     TRUELENGTH(x)
> static R_INLINE int HASHPRI(SEXP x) {
>  return TRUELENGTH(x);
>  }
192c242,245
< #define SET_HASHPRI(x,v)     SET_TRUELENGTH(x,v)
---
> //#define SET_HASHPRI(x,v)     SET_TRUELENGTH(x,v)
> static R_INLINE void SET_HASHPRI(SEXP x, int v) {
>  SET_TRUELENGTH(x, v);
>  }
194c247,250
< #define IS_HASHED(x)	     (HASHTAB(x) != R_NilValue)
---
> //#define IS_HASHED(x)	     (HASHTAB(x) != R_NilValue)
> static R_INLINE Rboolean IS_HASHED(SEXP x) {
>  return HASHTAB(x) != R_NilValue;
>  }
420c476
< 	error("first argument ('table') not of type VECSXP, from R_HashResize");
---
> 	error(_("first argument ('table') is not of type '%s', from '%s'"), "VECSXP", "R_HashResize()");
477c533
< 	error("first argument ('table') not of type VECSXP, R_HashSizeCheck");
---
> 	error(_("first argument ('table') is not of type '%s', from '%s'"), "VECSXP", "R_HashSizeCheck()");
504c560
< 	error("first argument ('table') not of type ENVSXP, from R_HashVector2Hash");
---
> 	error(_("first argument ('table') is not of type '%s', from '%s'"), "ENVSXP", "R_HashVector2Hash()");
642c698,702
< #define IS_GLOBAL_FRAME(e) (ENVFLAGS(e) & GLOBAL_FRAME_MASK)
---
> //#define IS_GLOBAL_FRAME(e) (ENVFLAGS(e) & GLOBAL_FRAME_MASK)
> static R_INLINE Rboolean IS_GLOBAL_FRAME(SEXP e) {
>  return ENVFLAGS(e) & GLOBAL_FRAME_MASK;
>  }
> /*
644a705,709
> */
> static R_INLINE void MARK_AS_GLOBAL_FRAME(SEXP e) {
>  SET_ENVFLAGS(e, ENVFLAGS(e) | GLOBAL_FRAME_MASK);
>  }
> /*
646a712,715
> */
> static R_INLINE void MARK_AS_LOCAL_FRAME(SEXP e) {
>  SET_ENVFLAGS(e, ENVFLAGS(e) & (~ GLOBAL_FRAME_MASK));
>  }
775c844
< 	error(_("invalid cached value in R_GetGlobalCache"));
---
> 	error(_("invalid cached value in 'R_GetGlobalCache()' function"));
887c956
< 	error("'findVarLocInFrame' cannot be used on the base environment");
---
> 	error(_("'findVarLocInFrame()' function cannot be used on the base environment"));
1211c1280
< 	error(_("argument to '%s' is not an environment"), "findVar");
---
> 	error(_("argument passed to '%s' function is not an environment"), "findVar()");
1372c1441
< 	    error(_("the ... list does not contain %d elements"), i);
---
> 	    error(_("the '...' list does not contain %d elements"), i);
1374c1443
<     else error(_("..%d used in an incorrect context, no ... to look in"), i);
---
>     else error(_("'..%d' used in an incorrect context, no '...' list to look in"), i);
1462,1463c1531
< 		error(_("argument \"%s\" is missing, with no default"),
< 		      CHAR(PRINTNAME(symbol)));
---
> 		error(_("'%s' argument is missing, with no default"), CHAR(PRINTNAME(symbol)));
1467c1535
<     error(_("could not find function \"%s\""), EncodeChar(PRINTNAME(symbol)));
---
>     error(_("could not find function '%s'"), EncodeChar(PRINTNAME(symbol)));
1568,1569c1636
< 	error("additional variables should now be passed as a list, "
< 	      "not in an environment");
---
> 	error(_("additional variables should now be passed as a list, not an environment"));
1712,1713c1779
< 	    error(_("cannot add binding of '%s' to the base environment"),
< 		  CHAR(PRINTNAME(symbol)));
---
> 	    error(_("cannot add binding of '%s' to the base environment"), CHAR(PRINTNAME(symbol)));
1722c1788,1791
< #define simple_as_environment(arg) (IS_S4_OBJECT(arg) && (TYPEOF(arg) == S4SXP) ? R_getS4DataSlot(arg, ENVSXP) : R_NilValue)
---
> //#define simple_as_environment(arg) (IS_S4_OBJECT(arg) && (TYPEOF(arg) == S4SXP) ? R_getS4DataSlot(arg, ENVSXP) : R_NilValue)
> static R_INLINE SEXP simple_as_environment(SEXP arg) {
>  return IS_S4_OBJECT(arg) && (TYPEOF(arg) == S4SXP) ? R_getS4DataSlot(arg, ENVSXP) : R_NilValue;
>  }
1778c1847
< 	error(_("names(x) must be a character vector of the same length as x"));
---
> 	error(_("'names(x)' must be a character vector of the same length as 'x'"));
1781c1850
< 	error(_("'envir' argument must be an environment"));
---
> 	error(_("'%s' argument must be an environment"), "envir");
1896c1965
< 	    warning(_("object '%s' not found"), EncodeChar(PRINTNAME(tsym)));
---
> 	    warning(_("object '%s' was not found"), EncodeChar(PRINTNAME(tsym)));
1970c2039
< 	error(_("argument \"%s\" is missing, with no default"),
---
> 	error(_("'%s' argument is missing, with no default"),
1981c2050
< 		error(_("object '%s' not found"), EncodeChar(PRINTNAME(t1)));
---
> 		error(_("object '%s' was not found"), EncodeChar(PRINTNAME(t1)));
2317c2386
< 	error(_("'pos' must be an integer"));
---
> 	error(_("'%s' argument must be an integer"), "pos");
2354c2423
< 	    error(_("'attach' only works for lists, data frames and environments"));
---
> 	    error(_("'attach()' function only works for lists, data frames and environments"));
2767c2836
< 	    error(_("argument must be an environment"));
---
> 	    error(_("'%s' argument must be an environment"), "env");
2848c2917
< 	error(_("argument must be an environment"));
---
> 	error(_("'%s' argument must be an environment"), "env");
3029c3098
<     errorcall(call, _("no item called \"%s\" on the search list"), what);
---
>     errorcall(call, _("no item called '%s' on the search list"), what);
3075c3144
< 	errorcall(call, _("invalid object for 'as.environment'"));
---
> 	errorcall(call, _("invalid object for 'as.environment()' function"));
3101c3170
< 	error(_("not an environment"));
---
> 	error(_("'%s' argument is not an environment"), "env");
3129c3198
< 	error(_("not an environment"));
---
> 	error(_("'%s' argument is not an environment"), "env");
3153c3222
< 	error(_("not a symbol"));
---
> 	error(_("'%s' argument is not a symbol"), "sym");
3158c3227
< 	error(_("not an environment"));
---
> 	error(_("'%s' argument is not an environment"), "env");
3166c3235
< 	    error(_("no binding for \"%s\""), EncodeChar(PRINTNAME(sym)));
---
> 	    error(_("no binding for '%s'"), EncodeChar(PRINTNAME(sym)));
3174c3243
< 	error(_("not a symbol"));
---
> 	error(_("'%s' argument is not a symbol"), "sym");
3179c3248
< 	error(_("not an environment"));
---
> 	error(_("'%s' argument is not an environment"), "env");
3187c3256
< 	    error(_("no binding for \"%s\""), EncodeChar(PRINTNAME(sym)));
---
> 	    error(_("no binding for '%s'"), EncodeChar(PRINTNAME(sym)));
3195c3264
< 	error(_("not a symbol"));
---
> 	error(_("'%s' argument is not a symbol"), "sym");
3197c3266
< 	error(_("not a function"));
---
> 	error(_("'%s' argument is not a function"), "fun");
3200,3202c3269,3270
<     if (TYPEOF(env) != ENVSXP &&
< 	TYPEOF((env = simple_as_environment(env))) != ENVSXP)
< 	error(_("not an environment"));
---
>     if (TYPEOF(env) != ENVSXP && TYPEOF((env = simple_as_environment(env))) != ENVSXP)
> 	error(_("'%s' argument is not an environment"), "env");
3232c3300
< 	error(_("not a symbol"));
---
> 	error(_("'%s' argument is not a symbol"), "sym");
3235,3237c3303,3304
<     if (TYPEOF(env) != ENVSXP &&
< 	TYPEOF((env = simple_as_environment(env))) != ENVSXP)
< 	error(_("not an environment"));
---
>     if (TYPEOF(env) != ENVSXP && TYPEOF((env = simple_as_environment(env))) != ENVSXP)
> 	error(_("'%s' argument is not an environment"), "env");
3245c3312
< 	    error(_("no binding for \"%s\""), EncodeChar(PRINTNAME(sym)));
---
> 	    error(_("no binding for '%s'"), EncodeChar(PRINTNAME(sym)));
3253c3320
< 	error(_("not a symbol"));
---
> 	error(_("'%s' argument is not a symbol"), "sym");
3256,3258c3323,3324
<     if (TYPEOF(env) != ENVSXP &&
< 	TYPEOF((env = simple_as_environment(env))) != ENVSXP)
< 	error(_("not an environment"));
---
>     if (TYPEOF(env) != ENVSXP && TYPEOF((env = simple_as_environment(env))) != ENVSXP)
> 	error(_("'%s' argument is not an environment"), "env");
3266c3332
< 	    error(_("no binding for \"%s\""), EncodeChar(PRINTNAME(sym)));
---
> 	    error(_("no binding for '%s'"), EncodeChar(PRINTNAME(sym)));
3352c3418,3419
<     if (TYPEOF(sym) != SYMSXP) error(_("not a symbol"));
---
>     if (TYPEOF(sym) != SYMSXP)
> 	error(_("'%s' argument is not a symbol"), "sym");
3511c3578
< 	errorcall(call, _("namespace already registered"));
---
> 	errorcall(call, _("namespace is already registered"));
3523c3590
< 	errorcall(call, _("namespace not registered"));
---
> 	errorcall(call, _("namespace is not registered"));
3602,3603c3669
< 		error(_("exported symbol '%s' has no value"),
< 		      CHAR(PRINTNAME(expsym)));
---
> 		error(_("exported symbol '%s' has no value"), CHAR(PRINTNAME(expsym)));
3634c3700
< 	error("argument must be a hashed environment");
---
> 	error(_("'%s' argument must be a hashed environment"), "env");
3642c3708
< 	error("R character strings are limited to 2^31-1 bytes");
---
> 	error(_("R character strings are limited to 2^31-1 bytes"));
3656c3722
< 	error("R character strings are limited to 2^31-1 bytes");
---
> 	error(_("R character strings are limited to 2^31-1 bytes"));
3740c3806
<     Rprintf("Resized: size %d => %d\tpri %d => %d\n",
---
>     Rprintf(_("Resized: size %d => %d\tpri %d => %d\n"),
3787,3788c3853
< 	error(_("embedded nul in string: '%s'"),
< 	      EncodeString(c, 0, 0, Rprt_adj_none));
---
> 	error(_("embedded nul in string: '%s'"), EncodeString(c, 0, 0, Rprt_adj_none));
3831c3896
< 	    error("unknown encoding mask: %d", enc);
---
> 	    error(_("unknown encoding mask: %d"), enc);
3867,3868c3932,3933
<     Rprintf("Cache size: %d\n", LENGTH(R_StringHash));
<     Rprintf("Cache pri:  %d\n", HASHPRI(R_StringHash));
---
>     Rprintf(_("Cache size: %d\n"), LENGTH(R_StringHash));
>     Rprintf(_("Cache pri:  %d\n"), HASHPRI(R_StringHash));
3872c3937
< 	    Rprintf("Line %d: ", i);
---
> 	    Rprintf(_("Line %d: "), i);
3894,3895c3959,3960
< 	fprintf(f, "Cache size: %d\n", LENGTH(R_StringHash));
< 	fprintf(f, "Cache pri:  %d\n", HASHPRI(R_StringHash));
---
> 	fprintf(f, _("Cache size: %d\n"), LENGTH(R_StringHash));
> 	fprintf(f, _("Cache pri:  %d\n"), HASHPRI(R_StringHash));
3899c3964
< 		fprintf(f, "Line %d: ", i);
---
> 		fprintf(f, _("Line %d: "), i);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/errors.c R/src/main/errors.c
24a25
> #include <Localization.h>
32c33
< #include <Rmath.h> /* for imax2 */
---
> #include <R_ext/Minmax.h>
35,37d35
< #ifndef min
< #define min(a, b) (a<b?a:b)
< #endif
40c38,40
< #define LONGWARN 75
---
> #define LONGWARN max(75, (GetOptionWidth()-5))
> 
> 
90,91c90
<     begincontext(&cntxt, CTXT_CCODE, R_NilValue, R_BaseEnv, R_BaseEnv,
< 		 R_NilValue, R_NilValue);
---
>     begincontext(&cntxt, CTXT_CCODE, R_NilValue, R_BaseEnv, R_BaseEnv, R_NilValue, R_NilValue);
95c94
<     errorcall(R_NilValue, "C stack usage  %ld is too close to the limit", usage);
---
>     errorcall(R_NilValue, _("C stack usage %ld is too close to the limit"), usage);
178c177
<     if(R_CollectWarnings) PrintWarnings();
---
>     if(R_CollectWarnings) PrintWarnings(NULL);
213c212
<     if(R_CollectWarnings) PrintWarnings();
---
>     if(R_CollectWarnings) PrintWarnings(NULL);
317,318c316,318
< 	if( !isLanguage(s) &&  ! isExpression(s) )
< 	    error(_("invalid option \"warning.expression\""));
---
> 	if( !isLanguage(s) &&  ! isExpression(s) ) {
> 	    error(_("invalid \"%s\" option"), "warning.expression");
> 	}
337,338c337
<     begincontext(&cntxt, CTXT_CCODE, R_NilValue, R_BaseEnv, R_BaseEnv,
< 		 R_NilValue, R_NilValue);
---
>     begincontext(&cntxt, CTXT_CCODE, R_NilValue, R_BaseEnv, R_BaseEnv, R_NilValue, R_NilValue);
359c358
< 	    REprintf(_("Warning in %s :"), dcall);
---
> 	    REprintf(_("Warning in command '%s':"), dcall);
429c428,429
< 	REprintf(_("Lost warning messages\n"));
---
>     REprintf(_("Lost warning messages"));
>     REprintf("\n");
435c437
< void PrintWarnings(void)
---
> void PrintWarnings(const char *hdr)
438c440
<     char *header;
---
>     const char *header = hdr? hdr: n_("Warning message:", "Warning messages:", R_CollectWarnings);
448c450,451
< 	    REprintf(_("Lost warning messages\n"));
---
> 	    REprintf(_("Lost warning messages"));
> 	    REprintf("\n");
453,456c456,457
<     /* set up a context which will restore inPrintWarnings if there is
<        an exit */
<     begincontext(&cntxt, CTXT_CCODE, R_NilValue, R_BaseEnv, R_BaseEnv,
< 		 R_NilValue, R_NilValue);
---
>     /* set up a context which will restore inPrintWarnings if there is an exit */
>     begincontext(&cntxt, CTXT_CCODE, R_NilValue, R_BaseEnv, R_BaseEnv, R_NilValue, R_NilValue);
460,461d460
<     header = ngettext("Warning message:", "Warning messages:", 
< 		      R_CollectWarnings);
470c469
<             REprintf(_("In %s :"), dcall);
---
>             REprintf(_("In command '%s':"), dcall);
498c497
< 		REprintf(_("In %s :"), dcall); 
---
> 		REprintf(_("In command '%s':"), dcall); 
523,524c522,523
< 	    REprintf(ngettext("There was %d warning (use warnings() to see it)", 
< 			      "There were %d warnings (use warnings() to see them)", 
---
> 	    REprintf(n_("There was %d warning (use 'warnings()' to see it)",
> 			      "There were %d warnings (use 'warnings()' to see them)", 
528c527
< 	    REprintf(_("There were %d or more warnings (use warnings() to see the first %d)"), 
---
> 	    REprintf(_("There were %d or more warnings (use 'warnings()' to see the first %d)"), 
610c609,610
< 	    REprintf(_("Lost warning messages\n"));
---
> 	    REprintf(_("Lost warning messages"));
> 	    REprintf("\n");
617,618c617
<     begincontext(&cntxt, CTXT_CCODE, R_NilValue, R_BaseEnv, R_BaseEnv,
< 		 R_NilValue, R_NilValue);
---
>     begincontext(&cntxt, CTXT_CCODE, R_NilValue, R_BaseEnv, R_BaseEnv, R_NilValue, R_NilValue);
626c625
< 	char *head = _("Error in "), *tail = "\n  ";
---
> 	char *head = _("Error in command:"), *tail = "\n  ";
642c641
< 	snprintf(tmp2, BUFSIZE,  "%s", head); 
---
> 	snprintf(tmp2, BUFSIZE,  _("Error in command '%s': "), dcall); 
648c647
< 		snprintf(tmp2, BUFSIZE,  _("Error in %s (from %s) : "), 
---
> 		snprintf(tmp2, BUFSIZE,  _("Error in command '%s' (from %s): "), 
655c654
< 			     _("Error in %s (from %s) : "),
---
> 			     _("Error in command '%s' (from %s): "),
657c656
< 	    else snprintf(errbuf, BUFSIZE,  _("Error in %s : "), dcall);
---
> 	    else snprintf(errbuf, BUFSIZE,  _("Error in command '%s': "), dcall);
704,705c703
< 	REprintf(_("In addition: "));
< 	PrintWarnings();
---
> 	PrintWarnings(n_("Additional warning message:", "Additional warning messages:", R_CollectWarnings));
824,826c822,825
< 	    if( !isLanguage(s) &&  ! isExpression(s) )  /* shouldn't happen */
< 		REprintf(_("invalid option \"error\"\n"));
< 	    else {
---
> 	    if( !isLanguage(s) &&  ! isExpression(s) ) { /* shouldn't happen */
> 		REprintf(_("invalid \"%s\" option"), "error");
> 		REprintf("\n");
> 	    } else {
844c843
< 	PrintWarnings();
---
> 	PrintWarnings(NULL);
954,955c953
< 		if(streql(cfn, "stop") || streql(cfn, "warning")
< 		   || streql(cfn, "message")) continue;
---
> 		if(streql(cfn, "stop") || streql(cfn, "warning") || streql(cfn, "message")) continue;
1011c1009
< 		REprintf("translating '%s' in domain '%s'\n", tmp, domain);
---
> 		REprintf(_("translating '%s' in domain '%s'\n"), tmp, domain); 
1046c1044
< 	error(_("'msg1' must be a character string"));
---
> 	error(_("'%s' argument must be a character string"), "msg1");
1048c1046
< 	error(_("'msg2' must be a character string"));
---
> 	error(_("'%s' argument must be a character string"), "msg2");
1110,1111c1108
< 	res = bindtextdomain(translateChar(STRING_ELT(CAR(args),0)),
< 			     translateChar(STRING_ELT(CADR(args),0)));
---
> 	res = bindtextdomain(translateChar(STRING_ELT(CAR(args),0)), translateChar(STRING_ELT(CADR(args),0)));
1145c1142
< 	  errorcall(c_call, _(" [invalid string in stop(.)]"));
---
> 	  errorcall(c_call, _(" [invalid string in '%s']"), "stop(.)");
1176c1173
< 	    warningcall(c_call, _(" [invalid string in warning(.)]"));
---
> 	    warningcall(c_call, _(" [invalid string in '%s']"), "warning(.)");
1192c1189
<     error(_("incorrect number of arguments to \"%s\""), s);
---
>     error(_("incorrect number of arguments passed to '%s' function"), s);
1198c1195
<     error(_("unimplemented feature in %s"), s);
---
>     error(_("unimplemented feature in '%s' function"), s);
1213c1210
<     { ERROR_UNIMPLEMENTED,	N_("unimplemented feature in %s")	},
---
>     { ERROR_UNIMPLEMENTED,	N_("unimplemented feature in '%s' function")	},
1222c1219
<     { WARNING_coerce_NA,	N_("NAs introduced by coercion")	},
---
>     { WARNING_coerce_NA,	N_("NA values introduced by coercion")	},
1297c1294
< 	    error(_("No function to return from, jumping to top level"));
---
> 	    error(_("no function to return from, jumping to top level"));
1333,1334c1330
< 	REprintf(_("In addition: "));
< 	PrintWarnings();
---
> 	PrintWarnings(n_("Additional warning message:", "Additional warning messages:", R_CollectWarnings));
1587,1588c1583
< 		PROTECT(qcall = LCONS(R_QuoteSymbol,
< 				      LCONS(call, R_NilValue)));
---
> 		PROTECT(qcall = LCONS(R_QuoteSymbol, LCONS(call, R_NilValue)));
1615,1616c1610
< 	    if (! strcmp(CHAR(ENTRY_CLASS(entry)),
< 			 CHAR(STRING_ELT(classes, i))))
---
> 	    if (! strcmp(CHAR(ENTRY_CLASS(entry)), CHAR(STRING_ELT(classes, i))))
1642c1636
< 		else error(_("error message not a string"));
---
> 		else error(_("error message is not a character string"));
1832c1826
< 	error(_("restart not on stack"));
---
> 	error(_("restart is not on stack"));
1861c1855
< 	error(_("error message must be a character string"));
---
> 	error(_("error message is not a character string"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/eval.c R/src/main/eval.c
28a29
> #include <Localization.h>
36d36
< #define ARGUSED(x) LEVELS(x)
307,308c307
< 	warning(_("source files skipped by Rprof; please increase '%s'"),
< 		R_Profiling_Error == 1 ? "numfiles" : "bufsize");
---
>     	warning(_("source files skipped by Rprof; please increase '%s'"), R_Profiling_Error == 1 ? "numfiles" : "bufsize");
327,328c326
< 	error(_("Rprof: cannot open profile file '%s'"),
< 	      translateChar(filename));
---
> 	error(_("Rprof: cannot open profile file '%s'"), translateChar(filename));
363c361
< 	R_Suicide("unable to create profiling thread");
---
> 	R_Suicide(_("unable to create profiling thread"));
377c375
< 	R_Suicide("setting profile timer failed");
---
> 	R_Suicide(_("setting profile timer failed"));
391c389
< 	warning("cannot use R profiling while byte code profiling");
---
> 	warning(_("cannot use R profiling while byte code profiling"));
432,433c430
<     REprintf("Warning: stack imbalance in '%s', %d then %d\n",
< 	     PRIMNAME(op), save, R_PPStackTop);
---
>     REprintf(_("Warning: stack imbalance in '%s', %d then %d\n"), PRIMNAME(op), save, R_PPStackTop);
445c442
< 			  _("promise already under evaluation: recursive default argument reference or earlier problems?"));
---
> 			  _("promise is already under evaluation: recursive default argument reference or earlier problems?"));
523c520
< 	error("'rho' cannot be C NULL: detected in C-level eval");
---
> 	error(_("'rho' argument cannot be C NULL: detected in C-level '%s' function"), "eval");
525,526c522
< 	error("'rho' must be an environment not %s: detected in C-level eval",
< 	      type2char(TYPEOF(rho)));
---
> 	error(_("'rho' argument must be an environment not %s: detected in C-level '%s' function"), type2char(TYPEOF(rho)), "eval");
542,543c538
< 	errorcall(R_NilValue,
< 		  _("evaluation nested too deeply: infinite recursion / options(expressions=)?"));
---
> 	errorcall(R_NilValue, _("evaluation is nested too deeply: infinite recursion / options(expressions=)?"));
568c563
< 	    error(_("object '%s' not found"), EncodeChar(PRINTNAME(e)));
---
> 	    error(_("object '%s' was not found"), EncodeChar(PRINTNAME(e)));
572,574c567,568
< 	    if(*n) error(_("argument \"%s\" is missing, with no default"),
< 			 CHAR(PRINTNAME(e)));
< 	    else error(_("argument is missing, with no default"));
---
> 	    if(*n) error(_("'%s' argument is missing, with no default"), CHAR(PRINTNAME(e)));
> 	    else error(_("'%s' argument is missing, with no default"), "expr");
619c613
< 	    Rprintf("trace: ");
---
> 	    Rprintf(_("trace: "));
634c628
< 		    printf("vis: special %s\n", nm);
---
> 		    printf(_("vis: special %s\n", nm));
664c658
< 		printf("vis: builtin %s\n", nm);
---
> 		printf(_("vis: builtin %s\n"), nm);
684c678
< 	UNIMPLEMENTED_TYPE("eval", e);
---
> 	UNIMPLEMENTED_TYPE("eval()", e);
701,703c695
< 		Rprintf(_("%s at %s#%d: "), prefix,
< 			CHAR(STRING_ELT(filename, 0)),
< 			asInteger(srcref));
---
> 		Rprintf(_("%s at %s#%d: "), prefix, CHAR(STRING_ELT(filename, 0)), asInteger(srcref));
879,880c871
< 	errorcall(call,
< 		  "'rho' cannot be C NULL: detected in C-level applyClosure");
---
> 	errorcall(call, _("'rho' argument cannot be C NULL: detected in C-level '%s' function"), "applyClosure()");
882,883c873
< 	errorcall(call, "'rho' must be an environment not %s: detected in C-level applyClosure",
< 		  type2char(TYPEOF(rho)));
---
> 	errorcall(call, _("'rho' argument must be an environment not %s: detected in C-level '%s' function"), type2char(TYPEOF(rho)), "applyClosure()");
984c974
< 	Rprintf("debugging in: ");
---
> 	Rprintf(_("debugging in: "));
1045c1035
< 	Rprintf("exiting from: ");
---
> 	Rprintf(_("exiting from: "));
1096c1086
< 	Rprintf("debugging in: ");
---
> 	Rprintf(_("debugging in: "));
1153c1143
< 	Rprintf("exiting from: ");
---
> 	Rprintf(_("exiting from: "));
1185,1186c1175
< 	    error(_("could not find symbol \"%s\" in environment of the generic function"),
< 		  CHAR(PRINTNAME(symbol)));
---
> 	    error(_("could not find symbol \"%s\" in environment of the generic function"), CHAR(PRINTNAME(symbol)));
1203c1192
< 		    error(_("symbol \"%s\" not in environment of method"),
---
> 		    error(_("symbol \"%s\" is not in environment of method"),
1258c1247
< 	error(_("object '%s' not found"), EncodeChar(PRINTNAME(symbol)));
---
> 	error(_("object '%s' was not found"), EncodeChar(PRINTNAME(symbol)));
1315,1316c1304
< 	warningcall(call,
< 		    _("the condition has length > 1 and only the first element will be used"));
---
> 	warningcall(call, _("the condition has length > 1 and only the first element will be used"));
1337c1325
< 	    _("argument is of length zero");
---
> 	    _("argument is of length 0");
1345a1334
> /*
1347a1337,1340
> */
> static R_INLINE Rboolean BodyHasBraces(SEXP body) {
>  return (isLanguage(body) && CAR(body) == R_BraceSymbol);
>  }
1522c1515
< 		errorcall(call, _("invalid for() loop sequence"));
---
> 		errorcall(call, _("invalid 'for()' loop sequence"));
1677c1670
<     if (length(args) < 2) WrongArgCount("function");
---
>     if (length(args) < 2) WrongArgCount("function()");
1797a1791
> /*
1808c1802,1811
< 
---
> */
> static R_INLINE void SET_TEMPVARLOC_FROM_CAR(R_varloc_t loc, SEXP lhs) {
>         SEXP v = CAR(lhs);
>         if (MAYBE_SHARED(v)) {
>             v = shallow_duplicate(v);
>             SET_NAMED(v, 1);
>             SETCAR(lhs, v);
>         }
>         R_SetVarLocValue(loc, v);
>  }
1812a1816
> /*
1818c1822,1826
< 
---
> */
> static R_INLINE void FIXUP_RHS_NAMED(SEXP rhs) {
>         if (NAMED(rhs) && NAMED(rhs) <= 1)
>             SET_NAMED(rhs, 2);
>  }
1826c1834
< 	error(_("overlong name in '%s'"), EncodeChar(PRINTNAME(fun)));
---
> 	error(_("over-long name in '%s' function"), EncodeChar(PRINTNAME(fun)));
2043c2051
< 	errorcall(call, _("invalid (do_set) left-hand side to assignment"));
---
> 	errorcall(call, _("invalid ('do_set()' function) left-hand side to assignment"));
2055a2064
> /*
2059a2069,2073
> */
> static R_INLINE void COPY_TAG(SEXP to, SEXP from) {
>   SEXP tag = TAG(from);
>   if (tag != R_NilValue) SET_TAG(to, tag);
>  }
2303c2317,2320
< #define simple_as_environment(arg) (IS_S4_OBJECT(arg) && (TYPEOF(arg) == S4SXP) ? R_getS4DataSlot(arg, ENVSXP) : R_NilValue)
---
> //#define simple_as_environment(arg) (IS_S4_OBJECT(arg) && (TYPEOF(arg) == S4SXP) ? R_getS4DataSlot(arg, ENVSXP) : R_NilValue)
> static R_INLINE SEXP simple_as_environment(SEXP arg) {
>  return (IS_S4_OBJECT(arg) && (TYPEOF(arg) == S4SXP) ? R_getS4DataSlot(arg, ENVSXP) : R_NilValue);
>  }
2327,2328c2344
< 	error(_("invalid '%s' argument of type '%s'"),
< 	      "enclos", type2char(tEncl));
---
> 	error(_("invalid '%s' argument of type '%s'"), "enclos", type2char(tEncl));
2355c2371
< 	    error(_("numeric 'envir' arg not of length one"));
---
> 	    error(_("numeric 'envir' argument is not of length one"));
2358,2359c2374
< 	    error(_("invalid '%s' argument of type '%s'"),
< 		  "envir", type2char(TYPEOF(env)));
---
> 	    error(_("invalid '%s' argument of type '%s'"), "envir", type2char(TYPEOF(env)));
2363,2364c2378
< 	error(_("invalid '%s' argument of type '%s'"),
< 	      "envir", type2char(TYPEOF(env)));
---
> 	error(_("invalid '%s' argument of type '%s'"), "envir", type2char(TYPEOF(env)));
2379c2393
< 		error(_("restarts not supported in 'eval'"));
---
> 		error(_("restarts are not supported in 'eval()' function"));
2401c2415
< 		error(_("restarts not supported in 'eval'"));
---
> 		error(_("restarts are not supported in 'eval()' function"));
2458c2472
< 	error(_("'Recall' called from outside a closure"));
---
> 	error(_("'Recall()' function called from outside a closure"));
2471c2485
< 	error(_("'Recall' called from outside a closure"));
---
> 	error(_("'Recall()' function called from outside a closure"));
2824,2825c2838
< 		warning(_("Incompatible methods (\"%s\", \"%s\") for \"%s\""),
< 			lname, rname, generic);
---
> 		warning(_("Incompatible methods (\"%s\", \"%s\") for \"%s\""), lname, rname, generic);
3325,3327c3338
< 	    error(_("\"%s\" is not a %s function"),
< 		  CHAR(PRINTNAME(symbol)),
< 		  type == BUILTINSXP ? "BUILTIN" : "SPECIAL");
---
> 	    error(_("'%s' is not a '%s' function"), CHAR(PRINTNAME(symbol)), type == BUILTINSXP ? "BUILTIN" : "SPECIAL");
3532c3543
< /* The curren (as of r66652) Windows toolchain compiles explicit sqrt
---
> /* The current (as of r66652) Windows toolchain compiles explicit sqrt
3869c3880
< #define LASTOP  default: error(_("bad opcode"))
---
> #define LASTOP  default: error(_("bad operation code"))
3999,4000c4010,4011
<     if(*n) error(_("argument \"%s\" is missing, with no default"), n);
<     else error(_("argument is missing, with no default"));
---
>     if(*n) error(_("'%s' argument is missing, with no default"), n);
>     else error(_("'%s' argument is missing, with no default"), "expr");
4002a4014
> /*
4004a4017,4020
> */
> static R_INLINE void MAYBE_MISSING_ARGUMENT_ERROR(SEXP symbol, Rboolean keepmiss) {
>     if (! keepmiss) MISSING_ARGUMENT_ERROR(symbol);
>  }
4008c4024
<     error(_("object '%s' not found"), EncodeChar(PRINTNAME(symbol)));
---
>     error(_("object '%s' was not found"), EncodeChar(PRINTNAME(symbol)));
4166a4183
> /*
4174a4192,4199
> */
> static R_INLINE void SETCALLARG_TAG(SEXP tag) {
>         if (tag != R_NilValue) {
>             SEXP cell = GETSTACK(-1);
>             if (cell != R_NilValue)
>                 SET_TAG(cell, CreateTag(tag));
> 	}
>  }
4176a4202
> /*
4181a4208,4213
> */
> static R_INLINE void SETCALLARG_TAG_SYMBOL(SEXP tag) {
>         SEXP cell = GETSTACK(-1);
>         if (cell != R_NilValue)
>             SET_TAG(cell, tag);
>  }
4837c4869
< 			  _("invalid %s type in 'x %s y'"), arg, op);	\
---
> 			  _("invalid '%s' type in 'x %s y'"), arg, op);	\
4853c4885
< 			errorcall(call, "argument %d is empty", k);
---
> 			errorcall(call, _("argument %d is empty"), k);
4867c4899
< 	    errorcall(call, "argument %d is missing", n);
---
> 	    errorcall(call, _("argument %d is missing"), n);
4897c4929,4932
< #define IS_TRUE_BUILTIN(x) ((R_FunTab[PRIMOFFSET(x)].eval % 100 )/10 == 0)
---
> //#define IS_TRUE_BUILTIN(x) ((R_FunTab[PRIMOFFSET(x)].eval % 100 )/10 == 0)
> static R_INLINE Rboolean IS_TRUE_BUILTIN(SEXP x) {
>  return ((R_FunTab[PRIMOFFSET(x)].eval % 100 )/10 == 0);
>  }
5054,5055c5089
< 	else errorcall(VECTOR_ELT(constants, callidx),
< 		       _("invalid for() loop sequence"));
---
> 	else errorcall(VECTOR_ELT(constants, callidx), _("invalid 'for()' loop sequence"));
5136c5170
< 	    error(_("invalid sequence argument in for loop"));
---
> 	    error(_("invalid sequence argument in 'for()' loop"));
5231c5265
< 	  Rprintf("trace: ");
---
> 	  Rprintf(_("trace: "));
5247c5281
< 	  Rprintf("trace: ");
---
> 	  Rprintf(_("trace: "));
5259c5293
< 	  Rprintf("trace: ");
---
> 	  Rprintf(_("trace: "));
5271,5272c5305
< 	  error(_("there is no .Internal function '%s'"),
< 		CHAR(PRINTNAME(symbol)));
---
> 	  error(_("there is no '.Internal' function '%s'"), CHAR(PRINTNAME(symbol)));
5382c5415
< 	  error(_("not a BUILTIN function"));
---
> 	  error(_("'%s' is not a '%s' function"), CHAR(PRINTNAME(fun)), "BUILTIN");
5410c5443
< 	  Rprintf("trace: ");
---
> 	  Rprintf(_("trace: "));
5804c5837
< 	   errorcall(call, _("EXPR must be a length 1 vector"));
---
> 	   errorcall(call, _("'%s' argument must be a vector of length 1"), "EXPR");
5807,5808c5840
< 		       _("EXPR is a \"factor\", treated as integer.\n"
< 			 " Consider using '%s' instead."),
---
> 		       _("'EXPR' is an object of class \"factor\", treated as integer.\n Consider using '%s' instead."),
5813c5845
< 	       errorcall(call, _("numeric EXPR required for 'switch' without named alternatives"));
---
> 	       errorcall(call, _("numeric 'EXPR' required for 'switch()' without named alternatives"));
5815c5847
< 	       errorcall(call, "bad character 'switch' offsets");
---
> 	       errorcall(call, _("bad character 'switch()' offsets"));
5817c5849
< 	       errorcall(call, "bad 'switch' names");
---
> 	       errorcall(call, _("bad 'switch()' names"));
5830c5862
< 	       errorcall(call, "bad numeric 'switch' offsets");
---
> 	       errorcall(call, _("bad numeric 'switch()' offsets"));
5908c5940
< 		error("unknown instruction code");
---
> 		error(_("unknown instruction code"));
6048c6080
<     errorcall(call, _("argument is not a byte code object"));
---
>     errorcall(call, _("'code' argument is not a byte code object"));
6073c6105
< 	errorcall(call, _("unable to open 'file'"));
---
> 	errorcall(call, _("unable to open file '%s'"), translateChar(STRING_ELT(file, 0)));
6088c6120
< 	errorcall(call, _("'file' must be non-empty string"));
---
> 	errorcall(call, _("'%s' argument must be non-empty character string"), "file");
6090c6122
< 	errorcall(call, _("'ascii' must be logical"));
---
> 	errorcall(call, _("'%s' argument must be logical"), "ascii");
6094c6126
< 	errorcall(call, _("unable to open 'file'"));
---
> 	errorcall(call, _("unable to open file '%s'"), translateChar(STRING_ELT(CADR(args), 0)));
6120c6152
< 	    error("R_CompiledFileName: buffer too small");
---
> 	    error(_("'R_CompiledFileName()': buffer is too small"));
6127c6159
< 	    error("R_CompiledFileName: buffer too small");
---
> 	    error(_("'R_CompiledFileName()': buffer is too small"));
6184c6216
< 	error("bad constCount value");
---
> 	error(_("bad '%s' value"), "constCount");
6248c6280
< 	error(_("profile timer in use"));
---
> 	error(_("profile timer is in use"));
6285c6317
< 	error(_("not byte code profiling"));
---
> 	error(_("no byte code profiling"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/format.c R/src/main/format.c
42a43
> #include <Localization.h>
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/gevents.c R/src/main/gevents.c
28a29
> #include <Localization.h>
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/gram.c R/src/main/gram.c
91a92
> #include <Localization.h>
1366c1367
<   YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
---
>   YYFPRINTF (stderr, _("Reducing stack by rule %d (line %lu):\n"),
1646c1647
<     yymsg = "Deleting";
---
>     yymsg = YY_("Deleting");
1738c1739
<   YYDPRINTF ((stderr, "Starting parse\n"));
---
>   YYDPRINTF ((stderr, YY_("Starting parse\n")));
1817c1818
<       YYDPRINTF ((stderr, "Stack size increased to %lu\n",
---
>       YYDPRINTF ((stderr, YY_("Stack size increased to %lu\n"),
1824c1825
<   YYDPRINTF ((stderr, "Entering state %d\n", yystate));
---
>   YYDPRINTF ((stderr, YY_("Entering state %d\n"), yystate));
1849c1850
<       YYDPRINTF ((stderr, "Reading a token: "));
---
>       YYDPRINTF ((stderr, YY_("Reading a token: ")));
1856c1857
<       YYDPRINTF ((stderr, "Now at end of input.\n"));
---
>       YYDPRINTF ((stderr, YY_("Now at end of input.\n")));
1861c1862
<       YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
---
>       YY_SYMBOL_PRINT (YY_("Next token is"), yytoken, &yylval, &yylloc);
1884c1885
<   YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
---
>   YY_SYMBOL_PRINT (YY_("Shifting"), yytoken, &yylval, &yylloc);
2565c2566
<           yydestruct ("Error: discarding",
---
>           yydestruct (YY_("Error: discarding"),
2622c2623
<       yydestruct ("Error: popping",
---
>       yydestruct (YY_("Error: popping"),
2640c2641
<   YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);
---
>   YY_SYMBOL_PRINT (YY_("Shifting"), yystos[yyn], yyvsp, yylsp);
2676c2677
<       yydestruct ("Cleanup: discarding lookahead",
---
>       yydestruct (YY_("Cleanup: discarding lookahead"),
2685c2686
<       yydestruct ("Cleanup: popping",
---
>       yydestruct (YY_("Cleanup: popping"),
4089c4090
< static void yyerror(const char *s)
---
> static void yyerror(const char *s) //output used in source.c method 'parseError(SEXP call, int linenum)'
4099c4100
< #define YYENGLISH 8
---
> #define YYENGLISH 10
4175a4177,4182
>                 case 8:
>                         snprintf(R_ParseErrorMsg, PARSE_ERROR_SIZE, _("unexpected '%s' value"), "NULL");
>                                 break;
>                 case 9:
>                         snprintf(R_ParseErrorMsg, PARSE_ERROR_SIZE, _("unexpected '%s' value"), "function");
>                                 break;
4177c4184
<                   snprintf(R_ParseErrorMsg, PARSE_ERROR_SIZE, _("unexpected %s"),
---
>                   snprintf(R_ParseErrorMsg, PARSE_ERROR_SIZE, _("unexpected statement %s"),
4185c4192
< 	snprintf(R_ParseErrorMsg, PARSE_ERROR_SIZE - 1, _("unexpected %s"),
---
> 	snprintf(R_ParseErrorMsg, PARSE_ERROR_SIZE - 1, _("unexpected statement %s"),
4197,4198c4204
< 	    error(_("repeated formal argument '%s' on line %d"), EncodeChar(PRINTNAME(_new)),
< 								 lloc->first_line);
---
> 	    error(_("repeated formal argument '%s' on line %d"), EncodeChar(PRINTNAME(_new)), lloc->first_line);
4593c4599
< 		    error(_("nul character not allowed (line %d)"), ParseState.xxlineno);
---
> 		    error(_("nul character is not allowed (line %d)"), ParseState.xxlineno);
4609c4615
< 			    errorcall(R_NilValue, _("'\\x' used without hex digits in character string starting \"%s\""), currtext);
---
> 			    errorcall(R_NilValue, _("'%s' used without hex digits in character string starting \"%s\""), "\\x", currtext);
4616c4622
< 		    error(_("nul character not allowed (line %d)"), ParseState.xxlineno);
---
> 		    error(_("nul character is not allowed (line %d)"), ParseState.xxlineno);
4625c4631
< 		    error(_("\\uxxxx sequences not supported inside backticks (line %d)"), ParseState.xxlineno);
---
> 		    error(_("'%s' sequences not supported inside backticks (line %d)"), "\\uxxxx", ParseState.xxlineno);
4640c4646
< 			    errorcall(R_NilValue, _("'\\u' used without hex digits in character string starting \"%s\""), currtext);
---
> 			    errorcall(R_NilValue, _("'%s' used without hex digits in character string starting \"%s\""), "\\u", currtext);
4648,4649c4654
< 			error(_("invalid \\u{xxxx} sequence (line %d)"),
< 			      ParseState.xxlineno);
---
> 			error(_("invalid %s sequence (line %d)"), "\\u{xxxx}", ParseState.xxlineno);
4653c4658
< 		    error(_("nul character not allowed (line %d)"), ParseState.xxlineno);
---
> 		    error(_("nul character is not allowed (line %d)"), ParseState.xxlineno);
4662c4667
< 		    error(_("\\Uxxxxxxxx sequences not supported inside backticks (line %d)"), ParseState.xxlineno);
---
> 		    error(_("'%s' sequences not supported inside backticks (line %d)"), "\\Uxxxxxxxx", ParseState.xxlineno);
4677c4682
< 			    errorcall(R_NilValue, _("'\\U' used without hex digits in character string starting \"%s\""), currtext);
---
> 			    errorcall(R_NilValue, _("'%s' used without hex digits in character string starting \"%s\""), "\\U", currtext);
4685c4690
< 			error(_("invalid \\U{xxxxxxxx} sequence (line %d)"), ParseState.xxlineno);
---
> 			error(_("invalid %s sequence (line %d)"), "\\U{xxxxxxxx}", ParseState.xxlineno);
4689c4694
< 		    error(_("nul character not allowed (line %d)"), ParseState.xxlineno);		
---
> 		    error(_("nul character is not allowed (line %d)"), ParseState.xxlineno);		
5566c5571
< 	    UNIMPLEMENTED_TYPE("lengthgets2", x);
---
> 	    UNIMPLEMENTED_TYPE("lengthgets2()", x);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/gram.y R/src/main/gram.y
1850,1851c1850
<        the rest are to be copied literally.  The #if 0 block below allows xgettext
<        to see these.
---
>        the rest are to be copied literally.
1853c1852
< #define YYENGLISH 8
---
> #define YYENGLISH 10
1929a1929,1934
>                 case 8:
>                         snprintf(R_ParseErrorMsg, PARSE_ERROR_SIZE, _("unexpected '%s' value"), "NULL");
>                                 break;
>                 case 9:
>                         snprintf(R_ParseErrorMsg, PARSE_ERROR_SIZE, _("unexpected '%s' value"), "function");
>                                 break;
1931c1936
<                   snprintf(R_ParseErrorMsg, PARSE_ERROR_SIZE, _("unexpected %s"),
---
>                   snprintf(R_ParseErrorMsg, PARSE_ERROR_SIZE, _("unexpected statement %s"),
1939c1944
< 	snprintf(R_ParseErrorMsg, PARSE_ERROR_SIZE - 1, _("unexpected %s"),
---
> 	snprintf(R_ParseErrorMsg, PARSE_ERROR_SIZE - 1, _("unexpected statement %s"),
2347c2352
< 		    error(_("nul character not allowed (line %d)"), ParseState.xxlineno);
---
> 		    error(_("nul character is not allowed (line %d)"), ParseState.xxlineno);
2363c2368
< 			    errorcall(R_NilValue, _("'\\x' used without hex digits in character string starting \"%s\""), currtext);
---
> 			    errorcall(R_NilValue, _("'%s' used without hex digits in character string starting \"%s\""), "\\x", currtext);
2370c2375
< 		    error(_("nul character not allowed (line %d)"), ParseState.xxlineno);
---
> 		    error(_("nul character is not allowed (line %d)"), ParseState.xxlineno);
2379c2384
< 		    error(_("\\uxxxx sequences not supported inside backticks (line %d)"), ParseState.xxlineno);
---
> 		    error(_("'%s' sequences not supported inside backticks (line %d)"), "\\uxxxx", ParseState.xxlineno);
2394c2399
< 			    errorcall(R_NilValue, _("'\\u' used without hex digits in character string starting \"%s\""), currtext);
---
> 			    errorcall(R_NilValue, _("'%s' used without hex digits in character string starting \"%s\""), "\\u", currtext);
2402,2403c2407
< 			error(_("invalid \\u{xxxx} sequence (line %d)"),
< 			      ParseState.xxlineno);
---
> 			error(_("invalid %s sequence (line %d)"), "\\u{xxxx}", ParseState.xxlineno);
2407c2411
< 		    error(_("nul character not allowed (line %d)"), ParseState.xxlineno);
---
> 		    error(_("nul character is not allowed (line %d)"), ParseState.xxlineno);
2416c2420
< 		    error(_("\\Uxxxxxxxx sequences not supported inside backticks (line %d)"), ParseState.xxlineno);
---
> 		    error(_("'%s' sequences not supported inside backticks (line %d)"), "\\Uxxxxxxxx", ParseState.xxlineno);
2431c2435
< 			    errorcall(R_NilValue, _("'\\U' used without hex digits in character string starting \"%s\""), currtext);
---
> 			    errorcall(R_NilValue, _("'%s' used without hex digits in character string starting \"%s\""), "\\U", currtext);
2439c2443
< 			error(_("invalid \\U{xxxxxxxx} sequence (line %d)"), ParseState.xxlineno);
---
> 			error(_("invalid %s sequence (line %d)"), "\\U{xxxxxxxx}", ParseState.xxlineno);
2443c2447
< 		    error(_("nul character not allowed (line %d)"), ParseState.xxlineno);		
---
> 		    error(_("nul character is not allowed (line %d)"), ParseState.xxlineno);		
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/graphics.c R/src/main/graphics.c
30a31
> #include <Localization.h>
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/grep.c R/src/main/grep.c
61a62
> #include <Localization.h>
64a66
> #include <R_ext/Minmax.h>
81,87d82
< #ifndef MAX
< # define MAX(a, b) ((a) > (b) ? (a) : (b))
< #endif
< 
< #ifndef isRaw
< #define isRaw(x) (TYPEOF(x) == RAWSXP)
< #endif
113c108
< 	error("R character strings are limited to 2^31-1 bytes");
---
> 	error(_("R character strings are limited to 2^31-1 bytes"));
336c331
< 		    bufp += MAX(slen - 1, 0);
---
> 		    bufp += max(slen - 1, 0);
359c354
< 			bufp += MAX(slen-1, 0);
---
> 			bufp += max(slen-1, 0);
442c437
< 			bufp += MAX(ovector[1], 1);
---
> 			bufp += max(ovector[1], 1);
516c511
< 			wbufp += MAX(regmatch[0].rm_eo, 1);
---
> 			wbufp += max(regmatch[0].rm_eo, 1);
598c593
< 			bufp += MAX(regmatch[0].rm_eo, 1);
---
> 			bufp += max(regmatch[0].rm_eo, 1);
1649c1644
< 	    if (!utf8Valid(s)) error(("input string %d is invalid UTF-8"), i+1);
---
> 	    if (!utf8Valid(s)) error(_("input string %d is invalid UTF-8"), i+1);
1653c1648
< 		error(("input string %d is invalid in this locale"), i+1);
---
> 		error(_("input string %d is invalid in this locale"), i+1);
2454c2449
< 	    if (n > INT_MAX) error("too long a vector");
---
> 	    if (n > INT_MAX) error(_("vector is too long"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/gzio.h R/src/main/gzio.h
37c37
< 
---
> #include <Localization.h>
289c289
< 	warning("invalid or incomplete compressed data");
---
> 	warning(_("invalid or incomplete compressed data"));
292c292
< 	warning("error reading the file");
---
> 	warning(_("error reading the file"));
349c349
< 		warning("invalid or incomplete compressed data");
---
> 		warning(_("invalid or incomplete compressed data"));
371c371
< 	    warning("invalid or incomplete compressed data");
---
> 	    warning(_("invalid or incomplete compressed data"));
373c373
< 	    warning("error reading the file");
---
> 	    warning(_("error reading the file"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/identical.c R/src/main/identical.c
23a24
> #include <Localization.h>
52,55c53,62
<     if (nargs < 5)
< 	error("%d arguments passed to .Internal(%s) which requires %d",
< 	      length(args), PRIMNAME(op), PRIMARITY(op));
< 
---
>     if (nargs < 5) {
>            char *primname = PRIMNAME(op);
>            const int bufsize = strlen(".Internal()") + strlen(primname);
>            char result [bufsize];
>            snprintf(result, bufsize, ".Internal(%s)", primname);
>             error(n_("%d argument passed to '%s' function which requires %d",
>                      "%d arguments passed to '%s' function which requires %d",
>                            (unsigned long) length(args)),
>                   length(args), result, PRIMARITY(op));
>     }
268c275
< 	printf("Unknown Type: %s (%x)\n", type2char(TYPEOF(x)), TYPEOF(x));
---
> 	printf(_("Unknown Type: %s (%x)\n"), type2char(TYPEOF(x)), TYPEOF(x));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/inspect.c R/src/main/inspect.c
30a31
> #include <Localization.h>
55,56c56
< 	Rprintf("<namespace:%s>",
< 		translateChar(STRING_ELT(R_NamespaceEnvSpec(x), 0)));
---
> 	Rprintf("<namespace:%s>", translateChar(STRING_ELT(R_NamespaceEnvSpec(x), 0)));
131,132c131,136
<     if (TYPEOF(v) == SYMSXP)
< 	Rprintf("\"%s\"%s", EncodeChar(PRINTNAME(v)), (SYMVALUE(v) == R_UnboundValue) ? "" : " (has value)");
---
>     if (TYPEOF(v) == SYMSXP) {
> 	if((SYMVALUE(v) == R_UnboundValue))
> 	  Rprintf("\"%s\"", EncodeChar(PRINTNAME(v)));
> 	else
> 	  Rprintf(_("\"%s\" (has value)"), EncodeChar(PRINTNAME(v)));
> 	}
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/internet.c R/src/main/internet.c
23a24
> #include <Localization.h>
239c240
<     if (length(sport) != 1) error("invalid 'socket' argument");
---
>     if (length(sport) != 1) error(_("invalid '%s' argument"), "socket");
253c254
<     if (length(ssock) != 1) error("invalid 'socket' argument");
---
>     if (length(ssock) != 1) error(_("invalid '%s' argument"), "socket");
271c272
<     if (length(ssock) != 1) error("invalid 'socket' argument");
---
>     if (length(ssock) != 1) error(_("invalid '%s' argument"), "socket");
283c284
<     if (length(sport) != 1) error("invalid 'port' argument");
---
>     if (length(sport) != 1) error(_("invalid '%s' argument"), "port");
295c296
<     if (length(ssock) != 1) error("invalid 'socket' argument");
---
>     if (length(ssock) != 1) error(_("invalid '%s' argument"), "socket");
314c315
<     if (length(ssock) != 1) error("invalid 'socket' argument");
---
>     if (length(ssock) != 1) error(_("invalid '%s' argument"), "socket");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/lapack.c R/src/main/lapack.c
23a24
> #include <Localization.h>
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/libcurl.c R/src/main/libcurl.c
24a25
> #include <Localization.h>
85c86
<     error("curlGetHeaders is not supported on this platform");
---
>     error(_("'curlGetHeaders()' function is not supported on this platform"));
94c95
<        error("invalid %s argument", "redirect");
---
>        error(_("invalid '%s' argument"), "redirect");
120c121
< 	error("libcurl error code %d\n\t%s\n", ret, errbuf);
---
> 	error(_("libcurl error code %d\n\t%s\n"), ret, errbuf);
142c143
<     error("curlDownload is not supported on this platform");
---
>     error(_("'curlDownload()' function is not supported on this platform"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/logic.c R/src/main/logic.c
24a25
> #include <Localization.h>
74c75
< #define isRaw(x) (TYPEOF(x) == RAWSXP)
---
> //#define isRaw(x) (TYPEOF(x) == RAWSXP)
239c240
< 	UNIMPLEMENTED_TYPE("lunary", arg);
---
> 	UNIMPLEMENTED_TYPE("lunary()", arg);
254,255c255
< 	error(_("'%s' operator requires 2 arguments"),
< 	      PRIMVAL(op) == 1 ? "&&" : "||");
---
> 	error(_("'%s' operator requires 2 arguments"), PRIMVAL(op) == 1 ? "&&" : "||");
261,262c261
< 	errorcall(call, _("invalid 'x' type in 'x %s y'"),
< 		  PRIMVAL(op) == 1 ? "&&" : "||");
---
> 	errorcall(call, _("invalid '%s' type in 'x %s y'"), "x", PRIMVAL(op) == 1 ? "&&" : "||");
268c267
< 	    errorcall(call, _("invalid 'y' type in 'x %s y'"),	\
---
> 	    errorcall(call, _("invalid '%s' type in 'x %s y'"),	"y", \
341c340
< 	error(_("Unary operator `!' called with two arguments"));
---
> 	error(_("Unary operator '!' called with two arguments"));
404c403
<         error("bad op value for do_logic3");
---
>         error(_("bad operator value for 'do_logic3()' function"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/main.c R/src/main/main.c
34c34,35
< #include "Defn.h"
---
> #include <Localization.h>
> #include <Defn.h>
104c105
< 		PrintWarnings();
---
> 		PrintWarnings(NULL);
264c265
< 	    PrintWarnings();
---
> 	    PrintWarnings(NULL);
370c371
< 	    PrintWarnings();
---
> 	    PrintWarnings(NULL);
417c418
<     if (!R_ignore_SIGPIPE) error("ignoring SIGPIPE signal");
---
>     if (!R_ignore_SIGPIPE) error(_("ignoring 'SIGPIPE' signal"));
433c434,436
< 	    REprintf("\nTraceback:\n");
---
> 	    REprintf("\n");
> 	    REprintf(_("Traceback:"));
> 	    REprintf("\n");
446,449c449,452
<     if(signum == SIGILL)
< 	error("caught access violation - continue with care");
<     else
< 	error("caught access violation - continue with care");
---
> //    if(signum == SIGILL)
> 	error(_("caught access violation - continue with care"));
> //    else
> //	error(_("caught access violation - continue with care"));
478c481,482
< 	    REprintf(_("Error: segfault from C stack overflow\n"));
---
> 	    REprintf(_("Error: segfault from C stack overflow"));
> 	    REprintf("\n");
486,489c490,493
<     /* Do not translate these messages */
<     REprintf("\n *** caught %s ***\n",
< 	     signum == SIGILL ? "illegal operation" :
< 	     signum == SIGBUS ? "bus error" : "segfault");
---
>     if(signum == SIGILL) REprintf(_("\n *** caught illegal operation ***\n"));
>     else if(signum == SIGBUS) REprintf(_("\n *** caught bus error ***\n"));
>     else REprintf(_("\n *** caught seqfault ***\n"));
> 
496c500,501
< 		s = "illegal opcode";
---
> 	REprintf(_("address %p, cause: illegal opcode"), ip->si_addr);
> 	REprintf("\n");
501c506,507
< 		s = "illegal operand";
---
> 	REprintf(_("address %p, cause: illegal operand"), ip->si_addr);
> 	REprintf("\n");
506c512,513
< 		s = "illegal addressing mode";
---
> 	REprintf(_("address %p, cause: illegal addressing mode"), ip->si_addr);
> 	REprintf("\n");
511c518,519
< 		s = "illegal trap";
---
> 	REprintf(_("address %p, cause: illegal trap"), ip->si_addr);
> 	REprintf("\n");
516c524,525
< 		s = "coprocessor error";
---
> 	REprintf(_("address %p, cause: coprocessor error"), ip->si_addr);
> 	REprintf("\n");
520c529,530
< 		s = "unknown";
---
> 	REprintf(_("address %p, cause: unknown"), ip->si_addr);
> 	REprintf("\n");
527c537,538
< 		s = "invalid alignment";
---
> 	REprintf(_("address %p, cause: invalid alignment"), ip->si_addr);
> 	REprintf("\n");
532c543,544
< 		s = "non-existent physical address";
---
> 	REprintf(_("address %p, cause: non-existent physical address"), ip->si_addr);
> 	REprintf("\n");
537c549,550
< 		s = "object specific hardware error";
---
> 	REprintf(_("address %p, cause: object specific hardware error"), ip->si_addr);
> 	REprintf("\n");
541c554,555
< 		s = "unknown";
---
> 	REprintf(_("address %p, cause: unknown"), ip->si_addr);
> 	REprintf("\n");
548c562,563
< 		s = "memory not mapped";
---
> 	REprintf(_("address %p, cause: memory not mapped"), ip->si_addr);
> 	REprintf("\n");
553c568,569
< 		s = "invalid permissions";
---
> 	REprintf(_("address %p, cause: invalid permissions"), ip->si_addr);
> 	REprintf("\n");
557c573,574
< 		s = "unknown";
---
> 	REprintf(_("address %p, cause: unknown"), ip->si_addr);
> 	REprintf("\n");
560d576
< 	REprintf("address %p, cause '%s'\n", ip->si_addr, s);
567c583,585
< 	    REprintf("\nTraceback:\n");
---
> 	    REprintf("\n");
> 	    REprintf(_("Traceback:"));
> 	    REprintf("\n");
579,583c597
< 	REprintf("\nPossible actions:\n1: %s\n2: %s\n3: %s\n4: %s\n",
< 		 "abort (with core dump, if enabled)",
< 		 "normal R exit",
< 		 "exit R without saving workspace",
< 		 "exit R saving workspace");
---
> 	REprintf(_("\nPossible actions:\n1: abort (with core dump, if enabled)\n2: normal R exit\n3: exit R without saving workspace\n4: exit R saving workspace\n"));
585,586c599
< 	    if(R_ReadConsole("Selection: ", ConsoleBuf, CONSOLE_BUFFER_SIZE,
< 			     0) > 0) {
---
> 	    if(R_ReadConsole(_("Selection: "), ConsoleBuf, CONSOLE_BUFFER_SIZE, 0) > 0) {
594c607
<     REprintf("aborting ...\n");
---
>     REprintf(_("aborting ...\n"));
623c636
< 	    warning("failed to set alternate signal stack");
---
> 	    warning(_("failed to set alternate signal stack"));
625c638
< 	warning("failed to allocate alternate signal stack");
---
> 	warning(_("failed to allocate alternate signal stack"));
723,724c736
< 	    snprintf(deferred_warnings[ndeferred_warnings++], 250,
< 		     "Setting LC_CTYPE=%s failed\n", p);
---
> 	    snprintf(deferred_warnings[ndeferred_warnings++], 250, _("Setting LC_CTYPE=%s failed\n"), p);
727,728c739
< 		snprintf(deferred_warnings[ndeferred_warnings++], 250,
< 			 "Setting LC_COLLATE=%s failed\n", p);
---
> 		snprintf(deferred_warnings[ndeferred_warnings++], 250, _("Setting LC_COLLATE=%s failed\n"), p);
732,733c743
< 		snprintf(deferred_warnings[ndeferred_warnings++], 250,
< 			 "Setting LC_TIME=%s failed\n", p);
---
> 		snprintf(deferred_warnings[ndeferred_warnings++], 250, _("Setting LC_TIME=%s failed\n"), p);
737,738c747
< 		snprintf(deferred_warnings[ndeferred_warnings++], 250,
< 			 "Setting LC_MONETARY=%s failed\n", p);
---
> 		snprintf(deferred_warnings[ndeferred_warnings++], 250, _("Setting LC_MONETARY=%s failed\n"), p);
750,751c759
< 	snprintf(deferred_warnings[ndeferred_warnings++], 250,
< 		 "Setting LC_CTYPE failed, using \"C\"\n");
---
> 	snprintf(deferred_warnings[ndeferred_warnings++], 250, _("Setting LC_CTYPE failed, using \"C\"\n"));
753,754c761
< 	snprintf(deferred_warnings[ndeferred_warnings++], 250,
< 		 "Setting LC_COLLATE failed, using \"C\"\n");
---
> 	snprintf(deferred_warnings[ndeferred_warnings++], 250, _("Setting LC_COLLATE failed, using \"C\"\n"));
756,757c763
< 	snprintf(deferred_warnings[ndeferred_warnings++], 250,
< 		 "Setting LC_TIME failed, using \"C\"\n");
---
> 	snprintf(deferred_warnings[ndeferred_warnings++], 250, _("Setting LC_TIME failed, using \"C\"\n"));
760,761c766
< 	snprintf(deferred_warnings[ndeferred_warnings++], 250,
< 		 "Setting LC_MESSAGES failed, using \"C\"\n");
---
> 	snprintf(deferred_warnings[ndeferred_warnings++], 250, _("Setting LC_MESSAGES failed, using \"C\"\n"));
766,767c771
< 	snprintf(deferred_warnings[ndeferred_warnings++], 250,
< 		 "Setting LC_MONETARY failed, using \"C\"\n");
---
> 	snprintf(deferred_warnings[ndeferred_warnings++], 250, _("Setting LC_MONETARY failed, using \"C\"\n"));
771,772c775
< 	snprintf(deferred_warnings[ndeferred_warnings++], 250,
< 		 "Setting LC_PAPER failed, using \"C\"\n");
---
> 	snprintf(deferred_warnings[ndeferred_warnings++], 250, _("Setting LC_PAPER failed, using \"C\"\n"));
776,777c779
< 	snprintf(deferred_warnings[ndeferred_warnings++], 250,
< 		 "Setting LC_MEASUREMENT failed, using \"C\"\n");
---
> 	snprintf(deferred_warnings[ndeferred_warnings++], 250, _("Setting LC_MEASUREMENT failed, using \"C\"\n"));
975,976c977
< 	REprintf(_("During startup - "));
< 	PrintWarnings();
---
> 	PrintWarnings(n_("Warning message during startup:", "Warning messages during startup:", R_CollectWarnings));
1023c1024
< 	Rprintf("where %d", lct++);
---
> 	Rprintf(_("where %d"), lct++);
1146c1147
< 	Rprintf("Called from: ");
---
> 	Rprintf(_("Called from: "));
1153c1154
<             Rprintf("top level \n");
---
>             Rprintf(_("top level \n"));
1238c1239
< 	    warning(_("save=\"ask\" in non-interactive use: command-line default will be used"));
---
> 	    warning(_("save=\"ask\" is in non-interactive use: command-line default will be used"));
1246c1247
< 	errorcall(call, _("unrecognized value of 'save'"));
---
> 	errorcall(call, _("unrecognized value of 'save' argument"));
1249c1250
< 	warning(_("invalid 'status', 0 assumed"));
---
> 	warning(_("invalid 'status' argument, 0 assumed"));
1254c1255
< 	warning(_("invalid 'runLast', FALSE assumed"));
---
> 	warning(_("invalid 'runLast' argument, FALSE assumed"));
1326c1327
< 	return(FALSE); /* error("there are no task callbacks registered"); */
---
> 	return(FALSE); /* error(_("there are no task callbacks registered")); */
1363c1364
< 	error(_("negative index passed to R_removeTaskCallbackByIndex"));
---
> 	error(_("negative index passed to 'R_removeTaskCallbackByIndex()' function"));
1473,1475c1474,1476
< 	    REprintf(_("warning messages from top-level task callback '%s'\n"),
< 		     h->name);
< 	    PrintWarnings();
---
> 	    REprintf(_("warning messages from top-level task callback '%s'"), h->name);
> 	    REprintf("\n");
> 	    PrintWarnings(NULL);
1534c1535
< 	/* warning("error occurred in top-level task callback\n"); */
---
> 	/* warning(_("error occurred in top-level task callback\n")); */
1593c1594
<     int ii;
---
>     int ii = 0;
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/mapply.c R/src/main/mapply.c
23a24
> #include <Localization.h>
76c77
< 	error(_("argument 'MoreArgs' of 'mapply' is not a list"));
---
> 	error(_("argument 'MoreArgs' of 'mapply()' function is not a list"));
113c114
< 	    warning(_("longer argument not a multiple of length of shorter"));
---
> 	    warning(_("longer argument is not a multiple of length of shorter"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/match.c R/src/main/match.c
45c45,46
< #include "Defn.h"
---
> #include <Localization.h>
> #include <Defn.h>
179,180c180,183
< #define ARGUSED(x) LEVELS(x)
< #define SET_ARGUSED(x,v) SETLEVELS(x,v)
---
> //#define ARGUSED(x) LEVELS(x)
> static R_INLINE int ARGUSED(SEXP x) { return LEVELS(x); }
> //#define SET_ARGUSED(x,v) SETLEVELS(x,v)
> static R_INLINE void SET_ARGUSED(SEXP x, int v) { SETLEVELS(x, v); }
228,229c231
< 			error(_("formal argument \"%s\" matched by multiple actual arguments"),
< 			      CHAR(PRINTNAME(TAG(f))));
---
> 			error(_("formal argument '%s' matched by multiple actual arguments"), CHAR(PRINTNAME(TAG(f))));
266,267c268
< 			    error(_("formal argument \"%s\" matched by multiple actual arguments"),
< 				  CHAR(PRINTNAME(TAG(f))));
---
> 			    error(_("formal argument '%s' matched by multiple actual arguments"), CHAR(PRINTNAME(TAG(f))));
269,272c270
< 			    warningcall(call,
< 					_("partial argument match of '%s' to '%s'"),
< 					CHAR(PRINTNAME(TAG(b))),
< 					CHAR(PRINTNAME(TAG(f))) );
---
> 			    warningcall(call, _("partial argument match of '%s' to '%s'"), CHAR(PRINTNAME(TAG(b))), CHAR(PRINTNAME(TAG(f))) );
380c378
< 		      ngettext("unused argument %s",
---
> 		      n_("unused argument %s",
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/memory.c R/src/main/memory.c
90a91
> #include <Localization.h>
155,156c156,159
< #define OLDTYPE(s) LEVELS(s)
< #define SETOLDTYPE(s, t) SETLEVELS(s, t)
---
> //#define OLDTYPE(s) LEVELS(s)
> inline int OLDTYPE(SEXP x) { return LEVELS(x); }
> //#define SETOLDTYPE(s, t) SETLEVELS(s, t)
> inline void SETOLDTYPE(SEXP x, int v) { SETLEVELS(x, v); }
162,163c165
< 	error("unprotected object (%p) encountered (was %s)",
< 	      x, sexptype2char(OLDTYPE(x)));
---
> 	error(_("unprotected object (%p) encountered (was %s)"), x, sexptype2char(OLDTYPE(x)));
744c746
< 	REprintf("untraced old-to-new reference\n");
---
> 	REprintf(_("untraced old-to-new reference\n"));
753c755
<     REprintf("Node counts %s:\n", where);
---
>     REprintf(_("Node counts %s:\n"), where);
760c762
< 		REprintf("Inconsistent class assignment for node!\n");
---
> 		REprintf(_("Inconsistent class assignment for node!\n"));
770c772
< 		    REprintf("Inconsistent class assignment for node!\n");
---
> 		    REprintf(_("Inconsistent class assignment for node!\n"));
772c774
< 		    REprintf("Inconsistent node generation\n");
---
> 		    REprintf(_("Inconsistent node generation\n"));
780c782
< 		    REprintf("Inconsistent class assignment for node!\n");
---
> 		    REprintf(_("Inconsistent class assignment for node!\n"));
782c784
< 		    REprintf("Inconsistent node generation\n");
---
> 		    REprintf(_("Inconsistent node generation\n"));
785c787
< 	REprintf("Class: %d, New = %d, Old = %d, OldToNew = %d, Total = %d\n",
---
> 	REprintf(_("Class: %d, New = %d, Old = %d, OldToNew = %d, Total = %d\n"),
795,796c797,800
<     REprintf("\n%s, VSize = %lu", full_gc ? "Full" : "Minor",
< 	     R_SmallVallocSize + R_LargeVallocSize);
---
>     if(full_gc)
>       REprintf("\nFull, VSize = %lu", R_SmallVallocSize + R_LargeVallocSize);
>     else
>       REprintf("\nMinor, VSize = %lu", R_SmallVallocSize + R_LargeVallocSize);
800c804
< 	REprintf(", class %d: %d", i, OldCount);
---
> 	REprintf((", class %d: %d"), i, OldCount);
813,814c817
<     REprintf("Node occupancy: %.0f%%\nVector occupancy: %.0f%%\n",
< 	     100.0 * node_occup, 100.0 * vect_occup);
---
>     REprintf(_("Node occupancy: %.0f%%\nVector occupancy: %.0f%%\n"), 100.0 * node_occup, 100.0 * vect_occup);
819,820c822,823
<     REprintf("Total allocation: %lu\n", alloc);
<     REprintf("Ncells %lu\nVcells %lu\n", R_NSize, R_VSize);
---
>     REprintf(_("Total allocation: %lu\n"), alloc);
>     REprintf(_("Ncells %lu\nVcells %lu\n"), R_NSize, R_VSize);
831c834
< 	REprintf("Class: %d, pages = %d, maxrel = %d, released = %d\n", i,
---
> 	REprintf(_("Class: %d, pages = %d, maxrel = %d, released = %d\n"), i,
835c838
< 	REprintf("Allocated = %d, in use = %d\n", R_GenHeap[i].AllocCount, n);
---
> 	REprintf(_("Allocated = %d, in use = %d\n"), R_GenHeap[i].AllocCount, n);
1122c1125
< 	    REprintf("****snapping into wrong generation\n");
---
> 	    REprintf(_("****snapping into wrong generation\n"));
1540c1543
< 		    REprintf("****snapping into wrong generation\n");
---
> 		    REprintf(_("****snapping into wrong generation\n"));
1818c1821
< 	REprintf("Garbage collection %d = %d", gc_count, gen_gc_counts[0]);
---
> 	REprintf(_("Garbage collection %d = %d"), gc_count, gen_gc_counts[0]);
1821c1824
< 	REprintf(" (level %d) ... ", gens_collected);
---
> 	REprintf(_(" (level %d) ... "), gens_collected);
2007c2010
< 	R_Suicide("couldn't allocate memory for pointer stack");
---
> 	R_Suicide(_("couldn't allocate memory for pointer stack"));
2064c2067
< 	R_Suicide("couldn't allocate node stack");
---
> 	R_Suicide(_("couldn't allocate node stack"));
2069c2072
< 	R_Suicide("couldn't allocate integer stack");
---
> 	R_Suicide(_("couldn't allocate integer stack"));
2469c2472
< 	error("use of allocVector(CHARSXP ...) is defunct\n");
---
> 	error(_("use of allocVector(CHARSXP ...) is defunct\n"));
2534c2537
< 	if (length > R_SHORT_LEN_MAX) error("invalid length for pairlist");
---
> 	if (length > R_SHORT_LEN_MAX) error(_("invalid length for pairlist"));
2541c2544
< 	if (length > R_SHORT_LEN_MAX) error("invalid length for pairlist");
---
> 	if (length > R_SHORT_LEN_MAX) error(_("invalid length for pairlist"));
2892c2895
< 	REprintf("\n%.1f Mbytes of cons cells used (%d%%)\n",
---
> 	REprintf(_("\n%.1f Mbytes of cons cells used (%d%%)\n"),
2897c2900
< 	REprintf("%.1f Mbytes of vectors used (%d%%)\n",
---
> 	REprintf(_("%.1f Mbytes of vectors used (%d%%)\n"),
2920,2921c2923
< 	    error("GC encountered a node (%p) with type FREESXP (was %s)"
< 		  " at memory.c:%d",
---
> 	    error(_("GC encountered a node (%p) with type FREESXP (was %s) at memory.c:%d"),
2926,2927c2928
< 	    error("GC encountered a node (%p) with an unknown SEXP type: %s"
< 		  " at memory.c:%d",
---
> 	    error(_("GC encountered a node (%p) with an unknown SEXP type: %s at memory.c:%d"),
2932,2933c2933
< 	error("GC encountered a node (%p) with an unknown SEXP type: %s"
< 	      " at memory.c:%d",
---
> 	error(_("GC encountered a node (%p) with an unknown SEXP type: %s at memory.c:%d"),
2943c2943
< 	error("internal TRUE value has been modified");
---
> 	error(_("internal TRUE value has been modified"));
2947c2947
< 	error("internal FALSE value has been modified");
---
> 	error(_("internal FALSE value has been modified"));
2952c2952
< 	error("internal logical NA value has been modified");
---
> 	error(_("internal logical NA value has been modified"));
3022c3022
<    PROTECT. error("protect(): stack overflow") would call deparse1,
---
>    PROTECT. error(_("protect(): stack overflow")) would call deparse1,
3056c3056
<     error(ngettext("unprotect(): only %d protected item",
---
>     error(n_("unprotect(): only %d protected item",
3129c3129
<     error(ngettext("R_Reprotect: only %d protected items, can't reprotect index %d",
---
>     error(n_("R_Reprotect: only %d protected items, can't reprotect index %d",
3181,3182c3181
< 	error(_("'Calloc' could not allocate memory (%.0f of %u bytes)"),
< 	      (double) nelem, elsize);
---
> 	error(_("'Calloc()' function could not allocate memory (%.0f of %u bytes)"), (double) nelem, elsize);
3192c3191
< 	error(_("'Realloc' could not re-allocate memory (%.0f bytes)"),
---
> 	error(_("'Realloc()' function could not re-allocate memory (%.0f bytes)"),
3200c3199
<     /* if(!ptr) warning("attempt to free NULL pointer by Free"); */
---
>     /* if(!ptr) warning(_("attempt to free NULL pointer by Free")); */
3323c3322
< 	error("value of 'SET_ATTRIB' must be a pairlist or NULL, not a '%s'",
---
> 	error(_("value of 'SET_ATTRIB' must be a pairlist or NULL, not a '%s'"),
3356c3355
< 	error("LENGTH or similar applied to %s object", type2char(TYPEOF(x)));
---
> 	error(_("LENGTH or similar applied to %s object"), type2char(TYPEOF(x)));
3371,3372c3370,3371
< 	error("%s() can only be applied to a '%s', not a '%s'",
< 	      "CHAR", "CHARSXP", type2char(TYPEOF(x)));
---
> 	error(_("'CHAR()' function can only be applied to a 'CHARSXP', not a '%s'"),
> 	      type2char(TYPEOF(x)));
3378,3379c3377,3378
< 	error("%s() can only be applied to a '%s', not a '%s'",
< 	      "STRING_ELT", "character vector", type2char(TYPEOF(x)));
---
> 	error(_("'STRING_ELT()' function can only be applied to a 'character vector', not a '%s'"),
> 	      type2char(TYPEOF(x)));
3388,3389c3387,3388
< 	error("%s() can only be applied to a '%s', not a '%s'",
< 	      "VECTOR_ELT", "list", type2char(TYPEOF(x)));
---
> 	error(_("'VECTOR_ELT()' function can only be applied to a 'list', not a '%s'"),
> 	      type2char(TYPEOF(x)));
3395,3396c3394,3395
< 	error("%s() can only be applied to a '%s', not a '%s'",
< 	      "LOGICAL",  "logical", type2char(TYPEOF(x)));
---
> 	error(_("'LOGICAL()' function can only be applied to a 'logical', not a '%s'"),
> 	      type2char(TYPEOF(x)));
3403,3404c3402,3403
< 	error("%s() can only be applied to a '%s', not a '%s'",
< 	      "INTEGER", "integer", type2char(TYPEOF(x)));
---
> 	error(_("'INTEGER()' function can only be applied to a 'integer', not a '%s'"),
> 	      type2char(TYPEOF(x)));
3410,3411c3409,3410
< 	error("%s() can only be applied to a '%s', not a '%s'",
< 	      "RAW", "raw", type2char(TYPEOF(x)));
---
> 	error(_("'RAW()' function can only be applied to a 'raw', not a '%s'"),
> 	      type2char(TYPEOF(x)));
3417,3418c3416,3417
< 	error("%s() can only be applied to a '%s', not a '%s'",
< 	      "REAL", "numeric", type2char(TYPEOF(x)));
---
> 	error(_("'REAL()' function can only be applied to a 'numeric', not a '%s'"),
> 	      type2char(TYPEOF(x)));
3424,3425c3423,3424
< 	error("%s() can only be applied to a '%s', not a '%s'",
< 	      "COMPLEX", "complex", type2char(TYPEOF(x)));
---
> 	error(_("'COMPLEX()' function can only be applied to a 'complex', not a '%s'"),
> 	      type2char(TYPEOF(x)));
3438,3439c3437,3438
< 	error("%s() can only be applied to a '%s', not a '%s'",
< 	      "SET_STRING_ELT", "character vector", type2char(TYPEOF(x)));
---
> 	error(_("'SET_STRING_ELT()' function can only be applied to a 'character vector', not a '%s'"),
> 	      type2char(TYPEOF(x)));
3441c3440
<        error("Value of SET_STRING_ELT() must be a 'CHARSXP' not a '%s'",
---
>        error(_("value of 'SET_STRING_ELT()' function must be a 'CHARSXP' not a '%s'"),
3444,3445c3443
< 	error(_("attempt to set index %lu/%lu in SET_STRING_ELT"),
< 	      i, XLENGTH(x));
---
> 	error(_("attempt to set index %lu/%lu in 'SET_STRING_ELT()' function"), i, XLENGTH(x));
3456,3457c3454,3455
< 	error("%s() can only be applied to a '%s', not a '%s'",
< 	      "SET_VECTOR_ELT", "list", type2char(TYPEOF(x)));
---
> 	error(_("'SET_VECTOR_ELT()' function can only be applied to a 'list', not a '%s'"),
> 	      type2char(TYPEOF(x)));
3460,3461c3458
< 	error(_("attempt to set index %lu/%lu in SET_VECTOR_ELT"),
< 	      i, XLENGTH(x));
---
> 	error(_("attempt to set index %lu/%lu in 'SET_VECTOR_ELT()' function"), i, XLENGTH(x));
3476d3472
< SEXP (CDDDR)(SEXP e) { return CHK(CDDDR(CHK(e))); }
3638c3635
< 	error("value of 'SET_CXTAIL' must be a char or NULL, not a '%s'",
---
> 	error(_("value of 'SET_CXTAIL()' function must be a 'char' or NULL, not a '%s'"),
3783c3780
< 	error(_("Rprofmem: cannot open output file '%s'"), filename);
---
> 	error(_("'Rprofmem()': cannot open output file '%s'"), filename);
3819c3816
< 	warning("R_AllocStringBuffer(-1) used: please report");
---
> 	warning(_("R_AllocStringBuffer(-1) used: please report"));
3839c3836
< 	error("could not allocate memory (%u Mb) in C function 'R_AllocStringBuffer'",
---
> 	error(_("could not allocate memory (%u Mb) in 'R_AllocStringBuffer()' function"),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/names.c R/src/main/names.c
27a28
> #include <Localization.h>
1135c1136
< 	R_Suicide("couldn't allocate memory for symbol table");
---
> 	R_Suicide(_("couldn't allocate memory for symbol table"));
1260c1261
<             error(_("class name too long in '%s'"), className);
---
>             error(_("class name is too long in '%s'"), className);
1265c1266
<         error(_("class name too long in '%s'"), className);
---
>         error(_("class name is too long in '%s'"), className);
1270c1271
<             error(_("class name too long in '%s'"), className);
---
>             error(_("class name is too long in '%s'"), className);
1275c1276
<         error(_("class name too long in '%s'"), className);
---
>         error(_("class name is too long in '%s'"), className);
1294c1295
< 	errorcall(call, _("invalid .Internal() argument"));
---
> 	errorcall(call, _("invalid '%s' argument"), ".Internal()");
1297c1298
< 	errorcall(call, _("invalid .Internal() argument"));
---
> 	errorcall(call, _("invalid '%s' argument"), ".Internal()");
1299c1300
< 	errorcall(call, _("there is no .Internal function '%s'"),
---
> 	errorcall(call, _("there is no '.Internal' function '%s'"),
1320,1321c1321
< 	    errorcall(call,
< 		      ".Internal(%s()) not called from a base namespace\n", fn);
---
> 	    errorcall(call, _("'.Internal(%s())' not called from a base namespace\n"), fn);
1328,1329c1328
< 	    errorcall(call,
< 		      ".Internal(%s()) called from namespace '%s'\n", fn, ns);
---
> 	    errorcall(call, _("'.Internal(%s())' called from namespace '%s'\n"), fn, ns);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/objects.c R/src/main/objects.c
29a30
> #include <Localization.h>
49c50
< 		    error(_("formal argument \"%s\" matched by multiple actual arguments"), tag);
---
> 		    error(_("formal argument '%s' matched by multiple actual arguments"), tag);
59c60
< 			error(_("formal argument \"%s\" matched by multiple actual arguments"), tag);
---
> 			error(_("formal argument '%s' matched by multiple actual arguments"), tag);
410c411
< 	errorcall(call, _("'generic' argument must be a character string"));
---
> 	errorcall(call, _("'%s' argument must be a character string"), "generic");
418c419
< 	errorcall(call, _("'UseMethod' used in an inappropriate fashion"));
---
> 	errorcall(call, _("'UseMethod()' used in an inappropriate fashion"));
432,433c433
<     val = findVar1(installTrChar(STRING_ELT(generic, 0)),
< 		   ENCLOS(env), FUNSXP, TRUE); /* That has evaluated promises */
---
>     val = findVar1(installTrChar(STRING_ELT(generic, 0)), ENCLOS(env), FUNSXP, TRUE); /* That has evaluated promises */
442,443c442,443
<     if (usemethod(translateChar(STRING_ELT(generic, 0)), obj, call, CDR(args),
< 		  env, callenv, defenv, &ans) == 1) {
---
> 
>     if (usemethod(translateChar(STRING_ELT(generic, 0)), obj, call, CDR(args), env, callenv, defenv, &ans) == 1) {
525c525,526
< #define ARGUSED(x) LEVELS(x)
---
> //#define ARGUSED(x) LEVELS(x)
> inline int ARGUSED(SEXP x) { return LEVELS(x); }
549c550
< 	error(_("'NextMethod' called from outside a function"));
---
> 	error(_("'NextMethod()' called from outside a function"));
555c556
<        error(_("'NextMethod' called from an anonymous function"));
---
>        error(_("'NextMethod()' called from an anonymous function"));
630c631
< 	error(_("invalid generic argument to 'NextMethod'"));
---
> 	error(_("invalid generic argument passed to 'NextMethod()'"));
642c643
<             error(_("invalid 'group' argument found in 'NextMethod'"));
---
>             error(_("invalid 'group' argument found in 'NextMethod()' function"));
816c817
< 	error(_("'what' must be a character vector"));
---
> 	error(_("'%s' argument must be a character vector"), "what");
820c821
< 	error(_("'which' must be a length 1 logical vector"));
---
> 	error(_("'%s' argument must be a logical vector of length 1"), "which");
962c963,966
< #define NOT_METHODS_DISPATCH_PTR(ptr) (ptr == 0 || ptr == dispatchNonGeneric)
---
> //#define NOT_METHODS_DISPATCH_PTR(ptr) (ptr == 0 || ptr == dispatchNonGeneric)
> static inline Rboolean NOT_METHODS_DISPATCH_PTR(R_stdGen_ptr_t ptr) {
>   return (ptr == 0 || ptr == dispatchNonGeneric);
> }
992c996
< 	    error(_("'onOff' must be TRUE or FALSE"));
---
> 	    error(_("'%s' argument must be TRUE or FALSE"), "onOff");
1057,1058c1061
< 	error(_("unable to find a non-generic version of function \"%s\""),
< 	      translateChar(asChar(name)));
---
> 	error(_("unable to find a non-generic version of function \"%s\""), translateChar(asChar(name)));
1088,1089c1091
< 	warningcall(call,
< 		    _("'standardGeneric' called without 'methods' dispatch enabled (will be ignored)"));
---
> 	warningcall(call, _("'standardGeneric' called without 'methods' dispatch enabled (will be ignored)"));
1097,1098c1099
< 	errorcall(call,
< 		  _("argument to 'standardGeneric' must be a non-empty character string"));
---
> 	errorcall(call, _("argument passed to 'standardGeneric()' must be a non-empty character string"));
1127c1128
< 	error(_("argument 'code' must be a character string"));
---
> 	error(_("'%s' argument must be a character string"), "code");
1249,1250c1250
< 	    error(_("the formal definition of a primitive generic must be a function object (got type '%s')"),
< 		  type2char(TYPEOF(fundef)));
---
> 	    error(_("the formal definition of a primitive generic must be a function object (got type '%s')"), type2char(TYPEOF(fundef)));
1279c1279
< 	error(_("object returned as generic function \"%s\" does not appear to be one"), PRIMNAME(op));
---
> 	error(_("object returned as generic function '%s' does not appear to be one"), PRIMNAME(op));
1420,1421c1420
< 	error(_("primitive function \"%s\" has been set for methods but no generic function supplied"),
< 	      PRIMNAME(op));
---
> 	error(_("primitive function '%s' has been set for methods but no generic function supplied"), PRIMNAME(op));
1471c1470
< 	error(_("R_getClassDef(.) called with NULL string pointer"));
---
> 	error(_("'R_getClassDef(.)' called with NULL string pointer"));
1517,1518c1516
< 	error(_("trying to generate an object from a virtual class (\"%s\")"),
< 	      translateChar(asChar(e)));
---
> 	error(_("trying to generate an object from a virtual class (\"%s\")"), translateChar(asChar(e)));
1549c1547
< 	error("invalid '%s' argument", "flag");
---
> 	error(_("invalid '%s' argument"), "flag");
1551c1549
< 	error("invalid '%s' argument", "complete");
---
> 	error(_("invalid '%s' argument"), "complete");
1563c1561
< 	error("'R_get_primname' called on a non-primitive");
---
> 	error(_("'R_get_primname()' called on a non-primitive"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/options.c R/src/main/options.c
24a25
> #include <Localization.h>
406c407
< 	UNIMPLEMENTED_TYPE("options", args);
---
> 	UNIMPLEMENTED_TYPE("options()", args);
423c424
< 	    UNIMPLEMENTED_TYPE("options", args);
---
> 	    UNIMPLEMENTED_TYPE("options()", args);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/paste.c R/src/main/paste.c
31c31,32
< #include "Defn.h"
---
> #include <Localization.h>
> #include <Defn.h>
33,34c34
< 
< #define imax2(x, y) ((x < y) ? y : x)
---
> #include <R_ext/Minmax.h>
118c118
< 		error(_("non-string argument to internal 'paste'"));
---
> 		error(_("non-string argument passed to internal 'paste()' function"));
321c321
< 		error(_("non-string argument to Internal paste"));
---
> 		error(_("non-string argument passed to internal 'paste()' function"));
443c443
< 	    w = imax2(w, wd);
---
> 	    w = max(w, wd);
454c454
< 	    w = imax2(w, wd);
---
> 	    w = max(w, wd);
464c464
< 	    w = imax2(w, wd);
---
> 	    w = max(w, wd);
475c475
< 	    w = imax2(w, wd); wi = imax2(wi, wd);
---
> 	    w = max(w, wd); wi = max(wi, wd);
519,520c519,520
< 			w = imax2(w, Rstrlen(STRING_ELT(xx, i), 0));
< 		    else if (na) w = imax2(w, R_print.na_width);
---
> 			w = max(w, Rstrlen(STRING_ELT(xx, i), 0));
> 		    else if (na) w = max(w, R_print.na_width);
526,527c526,527
< 		    cnt = imax2(cnt, LENGTH(STRING_ELT(xx, i)) + imax2(0, w-il));
< 		} else if (na) cnt  = imax2(cnt, R_print.na_width + imax2(0, w-R_print.na_width));
---
> 		    cnt = max(cnt, LENGTH(STRING_ELT(xx, i)) + max(0, w-il));
> 		} else if (na) cnt  = max(cnt, R_print.na_width + max(0, w-R_print.na_width));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/platform.c R/src/main/platform.c
40a41
> #include <Localization.h>
304c305
< 	error(_("invalid filename specification"));
---
> 	error(_("invalid '%s' specification"), "filename");
322c323
<             error(_("invalid filename specification"));
---
> 	    error(_("invalid '%s' specification"), "filename");
460,461c461
< 	    warning(_("cannot create file '%s', reason '%s'"),
< 		    translateChar(STRING_ELT(fn, i)), strerror(errno));
---
> 	    warning(_("cannot create file '%s', reason '%s'"), translateChar(STRING_ELT(fn, i)), strerror(errno));
487,488c487
< 		warning(_("cannot remove file '%s', reason '%s'"),
< 			translateChar(STRING_ELT(f, i)), strerror(errno));
---
> 		warning(_("cannot remove file '%s', reason '%s'"), translateChar(STRING_ELT(f, i)), strerror(errno));
581,582c580
< 		warning(_("cannot symlink '%ls' to '%ls', reason '%s'"),
< 			from, to, formatError(GetLastError()));
---
> 		warning(_("cannot symlink '%ls' to '%ls', reason '%s'"), from, to, formatError(GetLastError()));
601,602c599
< 		warning(_("cannot symlink '%s' to '%s', reason '%s'"),
< 			from, to, strerror(errno));
---
> 		warning(_("cannot symlink '%s' to '%s', reason '%s'"), from, to, strerror(errno));
649,650c646
< 		warning(_("cannot link '%ls' to '%ls', reason '%s'"),
< 			from, to, formatError(GetLastError()));
---
> 		warning(_("cannot link '%ls' to '%ls', reason '%s'"), from, to, formatError(GetLastError()));
669,670c665
< 		warning(_("cannot link '%s' to '%s', reason '%s'"),
< 			from, to, strerror(errno));
---
> 		warning(_("cannot link '%s' to '%s', reason '%s'"), from, to, strerror(errno));
709c704
< 	error(_("'from' and 'to' are of different lengths"));
---
> 	error(_("'from' and 'to' arguments are of different lengths"));
720c715
< 	    error(_("expanded 'from' name too long"));
---
> 	    error(_("expanded '%s' name is too long"), "from");
724c719
< 	    error(_("expanded 'to' name too long"));
---
> 	    error(_("expanded '%s' name is too long"), "to");
730c725
< 	    error(_("expanded 'from' name too long"));
---
> 	    error(_("expanded '%s' name is too long"), "from");
734c729
< 	    error(_("expanded 'to' name too long"));
---
> 	    error(_("expanded '%s' name is too long"), "to");
738,739c733
< 	    warning(_("cannot rename file '%s' to '%s', reason '%s'"),
< 		    from, to, strerror(errno));
---
> 	    warning(_("cannot rename file '%s' to '%s', reason '%s'"), from, to, strerror(errno));
793c787
< 	error(_("invalid filename argument"));
---
> 	error(_("invalid '%s' argument"), "filename");
975c969
< 	error(_("invalid filename argument"));
---
> 	error(_("invalid '%s' argument"), "filename");
1331c1325
< 	error(_("file choice cancelled"));
---
> 	error(_("file choice was cancelled"));
1333c1327
< 	error(_("file name too long"));
---
> 	error(_("file name is too long"));
1395,1396c1389
< 	warning("cannot get info on '%ls', reason '%s'",
< 		name, formatError(GetLastError()));
---
> 	warning(_("cannot get info on '%ls', reason '%s'"), name, formatError(GetLastError()));
1410,1411c1403
< 	warning("cannot open reparse point '%ls', reason '%s'",
< 		name, formatError(GetLastError()));
---
> 	warning(_("cannot open reparse point '%ls', reason '%s'"), name, formatError(GetLastError()));
1422,1423c1414
< 	warning("cannot delete reparse point '%ls', reason '%s'",
< 		name, formatError(GetLastError()));
---
> 	warning(_("cannot delete reparse point '%ls', reason '%s'"), name, formatError(GetLastError()));
1827,1828c1818
< 	warning(_("OS reports request to set locale to \"%s\" cannot be honored"),
< 		CHAR(STRING_ELT(locale, 0)));
---
> 	warning(_("OS reports request to set locale to \"%s\" cannot be honored"), CHAR(STRING_ELT(locale, 0)));
2147c2137
< 	error(_("'hostname' must be a character vector of length 1"));
---
> 	error(_("'%s' argument must be a character vector of length 1"), "hostname");
2153c2143
< 	warning(_("nsl() was unable to resolve host '%s'"), name);
---
> 	warning(_("'nsl()' function was unable to resolve host '%s'"), name);
2160c2150
< 	    warning(_("unknown format returned by C function 'gethostbyname'"));
---
> 	    warning(_("unknown format returned by C function 'gethostbyname()'"));
2169c2159
<     warning(_("nsl() is not supported on this platform"));
---
>     warning(_("'nsl()' function is not supported on this platform"));
2240c2230
< 	warning(_("'%s' already exists"), dir);
---
> 	warning(_("directory '%s' already exists"), dir);
2243,2244c2233
< 	warning(_("cannot create dir '%s', reason '%s'"), dir,
< 		strerror(serrno));
---
> 	warning(_("cannot create directory '%s', reason '%s'"), dir, strerror(serrno));
2289c2278
< 	warning(_("'%ls' already exists"), dir);
---
> 	warning(_("directory '%ls' already exists"), dir);
2293c2282
< 	warning(_("cannot create dir '%ls', reason '%s'"), dir,
---
> 	warning(_("cannot create directory '%ls', reason '%s'"), dir,
2335c2324
< 	warning(_("over-long path"));
---
> 	warning(_("path is too long"));
2348c2337
< 	    warning(_("over-long path"));
---
> 	    warning(_("path is too long"));
2355c2344
< 	    warning(_("problem creating directory %ls: %s"),
---
> 	    warning(_("problem with creating directory %ls: %s"),
2366c2355
< 		    warning(_("over-long path"));
---
> 		    warning(_("path is too long"));
2375c2364
< 	    warning(_("problem reading dir %ls: %s"), this, strerror(errno));
---
> 	    warning(_("problem with reading directory %ls: %s"), this, strerror(errno));
2386c2375
< 	    warning(_("over-long path length"));
---
> 	    warning(_("path is too long"));
2394c2383
< 		warning(_("problem copying %ls to %ls: %s"),
---
> 		warning(_("problem with copying %ls to %ls: %s"),
2552c2541
< 	warning(_("over-long path length"));
---
> 	warning(_("path is too long"));
2565c2554
< 	    warning(_("over-long path length"));
---
> 	    warning(_("path is too long"));
2574,2575c2563
< 	    warning(_("problem creating directory %s: %s"),
< 		    this, strerror(errno));
---
> 	    warning(_("problem with creating directory %s: %s"), this, strerror(errno));
2585c2573
< 		    warning(_("over-long path length"));
---
> 		    warning(_("path is too long"));
2594,2595c2582
< 	    warning(_("problem reading directory %s: %s"),
< 		    this, strerror(errno));
---
> 	    warning(_("problem with reading directory %s: %s"), this, strerror(errno));
2607c2594
< 	    warning(_("over-long path length"));
---
> 	    warning(_("path is too long"));
2616c2603
< 		warning(_("problem copying %s to %s: %s"),
---
> 		warning(_("problem with copying %s to %s: %s"),
2753c2740
<     if(!m && n) error(_("'mode' must be of length at least one"));
---
>     if(!m && n) error(_("'mode' argument must be of length at least one"));
2794c2781
<     warning("insufficient OS support on this platform");
---
>     warning(_("insufficient OS support on this platform"));
2969c2956
< 	warning("cannot open reparse point '%ls', reason '%s'",
---
> 	warning(_("cannot open reparse point '%ls', reason '%s'"),
2990c2977
< 	warning("cannot set reparse point '%ls', reason '%s'",
---
> 	warning(_("cannot set reparse point '%ls', reason '%s'"),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/plot.c R/src/main/plot.c
25a26
> #include <Localization.h>
81,82c82
< 		warning("CreateAtVector \"log\"(from axis()): "
< 			"usr[0] = %g > %g = usr[1] !", umin, umax);
---
> 		warning(_("CreateAtVector \"log\"(from axis()): usr[0] = %g > %g = usr[1] !"), umin, umax);
91c91
< 	    warning("CreateAtVector \"log\"(from axis()): axp[0] = %g !", dn);
---
> 	    warning(_("CreateAtVector \"log\"(from axis()): axp[0] = %g !"), dn);
93c93
< 		error("CreateAtVector [log-axis()]: axp[0] = %g < 0!", dn);
---
> 		error(_("CreateAtVector [log-axis()]: axp[0] = %g < 0!"), dn);
104c104
< 	    REprintf("CreateAtVector [log-axis(), case 1]: (nint, ne) = (%d,%d)\n",
---
> 	    REprintf(_("CreateAtVector [log-axis(), case 1]: (nint, ne) = (%d,%d)\n"),
108,110c108
< 		error("log - axis(), 'at' creation, _LARGE_ range: "
< 		      "ne = %d <= 0 !!\n"
< 		      "\t axp[0:1]=(%g,%g) ==> i = %d;	nint = %d",
---
> 		error(_("log - axis(), 'at' creation, _LARGE_ range: ne = %d <= 0 !!\n\t axp[0:1]=(%g,%g) ==> i = %d;	nint = %d"),
119,121c117
< 		error("log - axis(), 'at' creation, _LARGE_ range: "
< 		      "invalid {xy}axp or par; nint=%d\n"
< 		      "	 axp[0:1]=(%g,%g), usr[0:1]=(%g,%g); i=%d, ni=%d",
---
> 		error(_("log - axis(), 'at' creation, _LARGE_ range: invalid {xy}axp or par; nint=%d\n	 axp[0:1]=(%g,%g), usr[0:1]=(%g,%g); i=%d, ni=%d"),
141,143c137
< 		error("log - axis(), 'at' creation, _MEDIUM_ range: "
< 		      "invalid {xy}axp or par;\n"
< 		      "	 axp[0]= %g, usr[0:1]=(%g,%g)",
---
> 		error(_("log - axis(), 'at' creation, _MEDIUM_ range: invalid {xy}axp or par;\n	 axp[0]= %g, usr[0:1]=(%g,%g)"),
168,170c162
< 		error("log - axis(), 'at' creation, _SMALL_ range: "
< 		      "invalid {xy}axp or par;\n"
< 		      "	 axp[0]= %g, usr[0:1]=(%g,%g)",
---
> 		error(_("log - axis(), 'at' creation, _SMALL_ range: invalid {xy}axp or par;\n	 axp[0]= %g, usr[0:1]=(%g,%g)"),
185c177
< 	    error("log - axis(), 'at' creation: INVALID {xy}axp[3] = %g",
---
> 	    error(_("log - axis(), 'at' creation: INVALID {xy}axp[3] = %g"),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/plot3d.c R/src/main/plot3d.c
25a26
> #include <Localization.h>
118c119
< 		    warning(_("contour(): circular/long seglist -- set %s > %d?"), 
---
> 		    warning(_("contour(): circular/long segment list -- set '%s' > %d?"), 
196c197
< 	    warning(_("all z values are equal"));
---
> 	    warning(_("all 'z' values are equal"));
198c199
< 	    warning(_("all z values are NA"));
---
> 	    warning(_("all 'z' values are NA"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/plotmath.c R/src/main/plotmath.c
27a28
> #include <Localization.h>
306c307
< 	error("invalid `which' in C function TeX"); return 0;/*-Wall*/
---
> 	error(_("invalid 'which' argument in C function TeX")); return 0;/*-Wall*/
980c981
< 		if(res == -1) error("invalid multibyte string '%s'", s);
---
> 		if(res == -1) error(_("invalid multibyte string '%s'"), s);
999c1000
< 			error("invalid multibyte string");
---
> 			error(_("invalid multibyte string"));
1063c1064
< 		error("invalid character in current multibyte locale");
---
> 		error(_("invalid character in current multibyte locale"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/print.c R/src/main/print.c
63a64
> #include <Localization.h>
148c149
< 	    error(_("invalid 'na.print' specification"));
---
> 	    error(_("invalid '%s' specification"), "na.print");
161,162c162
<     printMatrix(x, 0, getAttrib(x, R_DimSymbol), quote, R_print.right,
< 		rowlab, collab, rowname, colname);
---
>     printMatrix(x, 0, getAttrib(x, R_DimSymbol), quote, R_print.right, rowlab, collab, rowname, colname);
205c205
< 	if (isByteCode(BODY(s))) Rprintf("<bytecode: %p>\n", BODY(s));
---
> 	if (isByteCode(BODY(s))) Rprintf(_("<bytecode: %p>\n"), BODY(s));
254c254
< 	    error(_("invalid 'na.print' specification"));
---
> 	    error(_("invalid '%s' specification"), "na.print");
264c264
< 	    error(_("'gap' must be non-negative integer"));
---
> 	    error(_("'%s' argument must be non-negative integer"), "gap");
302c302
< 		error("missing methods namespace: this should not happen");
---
> 		error(_("missing methods namespace: this should not happen"));
307c307
< 		error("missing show() in methods namespace: this should not happen");
---
> 		error(_("missing 'show()' in methods namespace: this should not happen"));
398c398,399
< 			strcat(pbuf, " [truncated]");
---
> 			strcat(pbuf, " ");
> 			strcat(pbuf, _("[truncated]"));
491,493c492,495
< 	    if(n_pr < ns)
< 		Rprintf(" [ reached getOption(\"max.print\") -- omitted %d entries ]\n",
< 			ns - n_pr);
---
> 	    if(n_pr < ns) {
> 		Rprintf(n_(" [ reached 'getOption(\"max.print\")' -- omitted %d entry ]", " [ reached 'getOption(\"max.print\")' -- omitted %d entries ]", ns - n_pr), ns - n_pr);
> 		Rprintf("\n");
> 		}
512c514
< 		Rprintf("An object of class \"%s\"\n", className);
---
> 		Rprintf(_("An object of class \"%s\"\n"), className);
519,520c521,522
< 		if(names != R_NilValue) Rprintf("named ");
< 		Rprintf("list()\n");
---
> 		if(names != R_NilValue) Rprintf(_("named list()\n"));
> 		else Rprintf("list()\n");
709c711
< 		Rprintf("<S4 object without a class>\n");
---
> 		Rprintf(_("<S4 object without a class>\n"));
711c713
< 		Rprintf("<Object of type '%s' with S4 bit but without a class>\n",
---
> 		Rprintf(_("<Object of type '%s' with S4 bit but without a class>\n"),
716c718
< 		Rprintf("<S4 object of class \"%s\">\n",
---
> 		Rprintf(_("<S4 object of class \"%s\">\n"),
719c721
< 		Rprintf("<S4 object of class \"%s\" from package '%s'>\n",
---
> 		Rprintf(_("<S4 object of class \"%s\" from package '%s'>\n"),
757c759
< 	Rprintf("<promise: %p>\n", s);
---
> 	Rprintf(_("<promise: %p>\n"), s);
817c819
< 	Rprintf("<pointer: %p>\n", R_ExternalPtrAddr(s));
---
> 	Rprintf(_("<pointer: %p>\n"), R_ExternalPtrAddr(s));
820c822
< 	Rprintf("<bytecode: %p>\n", s);
---
> 	Rprintf(_("<bytecode: %p>\n"), s);
823c825
< 	Rprintf("<weak reference>\n");
---
> 	Rprintf(_("<weak reference>\n"));
829c831
< 	Rprintf("<S4 Type Object>\n");
---
> 	Rprintf(_("<S4 Type Object>\n"));
832c834
< 	UNIMPLEMENTED_TYPE("PrintValueRec", s);
---
> 	UNIMPLEMENTED_TYPE("PrintValueRec()", s);
884c886
< 		sprintf(ptag, "Slot \"%s\":", EncodeChar(PRINTNAME(TAG(a))));
---
> 		sprintf(ptag, _("Slot \"%s\":"), EncodeChar(PRINTNAME(TAG(a))));
903c905
< 			error("missing methods namespace: this should not happen");
---
> 			error(_("missing methods namespace: this should not happen"));
908c910
< 			error("missing show() in methods namespace: this should not happen");
---
> 			error(_("missing 'show()' in methods namespace: this should not happen"));
986c988
< 		    error("missing methods namespace: this should not happen");
---
> 		    error(_("missing methods namespace: this should not happen"));
991c993
< 		    error("missing show() in methods namespace: this should not happen");
---
> 		    error(_("missing 'show()' in methods namespace: this should not happen"));
1045c1047
< 	warning(_("invalid character length in 'dblepr'"));
---
> 	warning(_("invalid character length in '%s' function"), "dblepr()");
1063c1065
< 	warning(_("invalid character length in 'intpr'"));
---
> 	warning(_("invalid character length in '%s' function"), "intpr()");
1082c1084
< 	warning(_("invalid character length in 'realpr'"));
---
> 	warning(_("invalid character length in '%s' function"), "realpr()");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/printarray.c R/src/main/printarray.c
35c35,36
< #include "Defn.h"
---
> #include <Localization.h>
> #include <Defn.h>
43c44,47
< #define strwidth(x) Rstrwid(x, (int) strlen(x), CE_NATIVE, 0)
---
> //#define strwidth(x) Rstrwid(x, (int) strlen(x), CE_NATIVE, 0)
> inline int strwidth(const char *x) {
>   return Rstrwid(x, (int) strlen(x), CE_NATIVE, 0);
> }
331c335,336
< 	Rprintf("<0 x 0 matrix>\n");
---
> 	Rprintf(_("<0 x 0 matrix>"));
> 	Rprintf("\n");
359c364
< 	UNIMPLEMENTED_TYPE("printMatrix", x);
---
> 	UNIMPLEMENTED_TYPE("printMatrix()", x);
361,364c366,369
< #ifdef ENABLE_NLS
<     if(r_pr < r) // number of formats must be consistent here
< 	Rprintf(ngettext(" [ reached getOption(\"max.print\") -- omitted %d row ]\n",
< 			 " [ reached getOption(\"max.print\") -- omitted %d rows ]\n",
---
> //#ifdef ENABLE_NLS
>     if(r_pr < r) { // number of formats must be consistent here
> 	Rprintf(n_(" [ reached 'getOption(\"max.print\")' -- omitted %d row ]",
> 			 " [ reached 'getOption(\"max.print\")' -- omitted %d rows ]",
367,371c372,378
< #else
<     if(r_pr < r)
< 	Rprintf(" [ reached getOption(\"max.print\") -- omitted %d rows ]\n",
< 		r - r_pr);
< #endif
---
> 	Rprintf("\n");
>     }
> //#else
> //    if(r_pr < r) 
> //	Rprintf(" [ reached 'getOption(\"max.print\")' -- omitted %d rows ]\n",
> //		r - r_pr);
> //#endif
452,455c459,490
< 	    } else { // nb == 0 -- e.g. <2 x 3 x 0 array of logical>
< 		for (i = 0; i < ndim; i++)
< 		    Rprintf("%s%d", (i == 0) ? "<" : " x ", dims[i]);
< 		Rprintf(" array of %s>\n", CHAR(type2str_nowarn(TYPEOF(x))));
---
> 	    } else { // nb == 0 -- e.g. <logical array of size 2 x 3 x 0>
> 	    	const int bufsize = 100;
> 	    	char buf[bufsize];
> 	    	int cx = 0;
> 	    	int dx = 0;
> 	    	for (i = 0; i < ndim; i++)  {
> 	    		if(i == 0) cx = snprintf(buf, bufsize, "%d", dims[i]);
> 	    		else {
> 	    			dx = snprintf(buf+cx, bufsize-cx, " x %d", dims[i]);
> 	    			cx += dx;
> 	    		}
> 	    	}
> 		    switch (TYPEOF(x)) {
> 		    case LGLSXP:
> 		    	Rprintf(_("<logical array of size %s>"), buf);
> 			break;
> 		    case INTSXP:
> 		    	Rprintf(_("<integer array of size %s>"), buf);
> 			break;
> 		    case REALSXP:
> 		    	Rprintf(_("<real array of size %s>"), buf);
> 			break;
> 		    case CPLXSXP:
> 		    	Rprintf(_("<complex array of size %s>"), buf);
> 			break;
> 		    case STRSXP:
> 		    	Rprintf(_("<character array of size %s>"), buf);
> 			break;
> 		    default: //should never happen!
> 		    	Rprintf("<%s array of size %s>", CHAR(type2str_nowarn(TYPEOF(x))), buf);
> 		    }
> 		    	Rprintf("\n");
483,485c518,529
< 	    Rprintf(" [ reached getOption(\"max.print\") -- omitted");
< 	    if(nr_last < nr) Rprintf(" %d row(s) and", nr - nr_last);
< 	    Rprintf(" %d matrix slice(s) ]\n", nb - nb_pr);
---
> 	    if(nr_last < nr) {
> 	    Rprintf(n_(" [ reached 'getOption(\"max.print\")' -- omitted %d row and %d matrix slice ]",
> 			     " [ reached 'getOption(\"max.print\")' -- omitted %d rows and %d matrix slices ]",
> 			     nr - nr_last), nr - nr_last, nb - nb_pr);
> 	   Rprintf("\n");
> 		}
> 	    else {
> 	    Rprintf(n_(" [ reached 'getOption(\"max.print\")' -- omitted %d matrix slice ]",
> 			     " [ reached 'getOption(\"max.print\")' -- omitted %d matrix slices ]",
> 			     nb - nb_pr), nb - nb_pr);
> 	   Rprintf("\n");
> 	   }
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/printutils.c R/src/main/printutils.c
60a61
> #include <Localization.h>
64a66
> #include <R_ext/Minmax.h>
82,84d83
< #ifndef min
< #define min(a, b) (((a)<(b))?(a):(b))
< #endif
156c155
< 	sprintf(ch, "<environment: R_GlobalEnv>");
---
> 	sprintf(ch, _("<environment: %s>"), "R_GlobalEnv");
158c157
< 	sprintf(ch, "<environment: base>");
---
> 	sprintf(ch, _("<environment: %s>"), "base");
160c159
< 	sprintf(ch, "<environment: R_EmptyEnv>");
---
> 	sprintf(ch, _("<environment: %s>"), "R_EmptyEnv");
162c161
< 	snprintf(ch, 1000, "<environment: %s>",
---
> 	snprintf(ch, 1000, _("<environment: %s>"),
165c164
< 	snprintf(ch, 1000, "<environment: namespace:%s>",
---
> 	snprintf(ch, 1000, _("<environment: namespace:%s>"),
167c166
<     else snprintf(ch, 1000, "<environment: %p>", (void *)x);
---
>     else snprintf(ch, 1000, _("<environment: %p>"), (void *)x);
795c794
< 	UNIMPLEMENTED_TYPE("EncodeElement", x);
---
> 	UNIMPLEMENTED_TYPE("EncodeElement()", x);
858c857
< 	    warning("printing of extremely long output is truncated");
---
> 	    warning(_("printing of extremely long output is truncated"));
872c871
< 	    warning("printing of extremely long output is truncated");
---
> 	    warning(_("printing of extremely long output is truncated"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/printvector.c R/src/main/printvector.c
33a34
> #include <Localization.h>
207,209c208,212
< 	if(n_pr < n)
< 		Rprintf(" [ reached getOption(\"max.print\") -- omitted %d entries ]\n",
< 			n - n_pr);
---
> 	if(n_pr < n) {
> 		Rprintf(n_(" [ reached 'getOption(\"max.print\")' -- omitted %d entry ]",
> 			" [ reached 'getOption(\"max.print\")' -- omitted %d entries ]", n - n_pr), n - n_pr);
> 		Rprintf("\n");
> 	}
349,351c352,356
< 	if(n_pr < n)
< 		Rprintf(" [ reached getOption(\"max.print\") -- omitted %d entries ]\n",
< 			n - n_pr);
---
> 	if(n_pr < n) {
> 		Rprintf(n_(" [ reached 'getOption(\"max.print\")' -- omitted %d entry ]",
> 			" [ reached 'getOption(\"max.print\")' -- omitted %d entries ]", n - n_pr), n - n_pr);
> 		Rprintf("\n");
> 	}
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/qsort.c R/src/main/qsort.c
30a31
> #include <Localization.h>
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/random.c R/src/main/random.c
25a26
> #include <Localization.h>
93c94
< 	warning(_("NAs produced"));
---
> 	warning(_("NA values produced"));
107c108
< 	    error("internal error in do_random1");
---
> 	    error(_("internal error in '%s' function"), "do_random1()");
110c111
< 	    warning(_("NAs produced"));
---
> 	    warning(_("NA values produced"));
175c176
< 	warning(_("NAs produced"));
---
> 	warning(_("NA values produced"));
198c199
< 	    error("internal error in do_random2");
---
> 	    error(_("internal error in '%s' function"), "do_random2()");
201c202
< 	    warning(_("NAs produced"));
---
> 	    warning(_("NA values produced"));
274c275
< 	warning(_("NAs produced"));
---
> 	warning(_("NA values produced"));
285c286
< 	    error("internal error in do_random3");
---
> 	    error(_("internal error in '%s' function"), "do_random3()");
288c289
< 	    warning(_("NAs produced"));
---
> 	    warning(_("NA values produced"));
435c436
< 	    error(_("NA in probability vector"));
---
> 	    error(_("NA values in probability vector"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/raw.c R/src/main/raw.c
23a24
> #include <Localization.h>
27c28
< #define isRaw(x) (TYPEOF(x) == RAWSXP)
---
> //#define isRaw(x) (TYPEOF(x) == RAWSXP)
37c38
< 	error(_("argument must be a character vector of length 1"));
---
> 	error(_("'%s' argument must be a character vector of length 1"), "x");
39c40
< 	warning(_("argument should be a character vector of length 1\nall but the first element will be ignored"));
---
> 	warning(_("argument should be a character vector of length 1.\nAll but the first element will be ignored"));
53c54
< 	error(_("argument 'x' must be a raw vector"));
---
> 	error(_("'%s' argument must be a raw vector"), "x");
56c57
< 	error(_("argument 'multiple' must be TRUE or FALSE"));
---
> 	error(_("'%s' argument must be TRUE or FALSE"), "multiple");
89c90
< 	error(_("argument 'x' must be a raw vector"));
---
> 	error(_("'%s' argument must be a raw vector"), "x");
110c111
< 	error(_("argument 'x' must be a raw vector"));
---
> 	error(_("'%s' argument must be a raw vector"), "x");
129c130
< 	error(_("argument 'x' must be an integer vector"));
---
> 	error(_("'%s' argument must be an integer vector"), "x");
148c149
< 	error(_("argument 'x' must be raw, integer or logical"));
---
> 	error(_("'%s' argument must be raw, integer or logical"), "x");
150c151
< 	error(_("argument 'type' must be a character string"));
---
> 	error(_("'%s' argument must be a character string"), "type");
167c168
< 			error(_("argument 'x' must not contain NAs"));
---
> 			error(_("argument 'x' must not contain NA values"));
181c182
< 			error(_("argument 'x' must not contain NAs"));
---
> 			error(_("argument 'x' must not contain NA values"));
273c274
< 	error(_("argument must be a character vector of length 1"));
---
> 	error(_("'%s' argument must be a character vector of length 1"), "x");
275c276
< 	warning(_("argument should be a character vector of length 1\nall but the first element will be ignored"));
---
> 	warning(_("argument should be a character vector of length 1.\nAll but the first element will be ignored"));
327c328
< 	error(_("argument 'x' must be an integer vector"));
---
> 	error(_("'%s' argument must be an integer vector"), "x");
330c331
< 	error(_("argument 'multiple' must be TRUE or FALSE"));
---
> 	error(_("'%s' argument must be TRUE or FALSE"), "multiple");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/relop.c R/src/main/relop.c
25a26
> #include <Localization.h>
28a30,31
> #include <R_ext/Itermacros.h>
> #include <R_ext/Minmax.h>
102c105
<     else error("operator needs two arguments");
---
>     else error(_("operator needs two arguments"));
166,167c169
< 	    warningcall(call, _("longer object length is not "
< 				"a multiple of shorter object length"));
---
> 	    warningcall(call, _("longer object length is not a multiple of shorter object length"));
323,331d324
< /* i1 = i % n1; i2 = i % n2;
<  * this macro is quite a bit faster than having real modulo calls
<  * in the loop (tested on Intel and Sparc)
<  */
< #define mod_iterate(n1,n2,i1,i2) for (i=i1=i2=0; i<n; \
< 	i1 = (++i1 == n1) ? 0 : i1,\
< 	i2 = (++i2 == n2) ? 0 : i2,\
< 	++i)
< 
755c748
< 	UNIMPLEMENTED_TYPE("bitNot", a);
---
> 	UNIMPLEMENTED_TYPE("bitNot()", a);
761d753
< #define mymax(x, y) ((x >= y) ? x : y)
767,768c759,760
<     if (TYPEOF(a) != TYPEOF(b)) error(_("'a' and 'b' must have the same type"));  \
<     R_xlen_t i, m = XLENGTH(a), n = XLENGTH(b), mn = (m && n) ? mymax(m, n) : 0;  \
---
>     if (TYPEOF(a) != TYPEOF(b)) error(_("'A' and 'B' must have the same type"));  \
>     R_xlen_t i, m = XLENGTH(a), n = XLENGTH(b), mn = (m && n) ? max(m, n) : 0;  \
785c777
<     BIT(&, "bitwAnd");
---
>     BIT(&, "bitwAnd()");
790c782
<     BIT(|, "bitwOr");
---
>     BIT(|, "bitwOr()");
795c787
<     BIT(^, "bitwXor");
---
>     BIT(^, "bitwXor()");
804c796
< 	mn = (m && n) ? mymax(m, n) : 0;
---
> 	mn = (m && n) ? max(m, n) : 0;
815c807
< 	UNIMPLEMENTED_TYPE("bitShiftL", a);
---
> 	UNIMPLEMENTED_TYPE("bitShiftL()", a);
827c819
< 	mn = (m && n) ? mymax(m, n) : 0;
---
> 	mn = (m && n) ? max(m, n) : 0;
838c830
< 	UNIMPLEMENTED_TYPE("bitShiftR", a);
---
> 	UNIMPLEMENTED_TYPE("bitShiftR()", a);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/saveload.c R/src/main/saveload.c
28a29
> #include <Localization.h>
332c333
< 	error(_("a I read error occurred"));
---
> 	error(_("a 'I' read error occurred"));
342c343
< 	error(_("a R read error occurred"));
---
> 	error(_("a 'R' read error occurred"));
352c353
< 	error(_("a C read error occurred"));
---
> 	error(_("a 'C' read error occurred"));
362c363
< 	error(_("a S read error occurred"));
---
> 	error(_("a 'S' read error occurred"));
488,489c489
< 	    error(_("restore compatibility error - no version %d compatibility"),
< 		  VersionId);
---
> 	    error(_("restore compatibility error - no version %d compatibility"), VersionId);
572c572
<     default: error(_("bad SEXP type in data file"));
---
>     default: error(_("bad 'SEXP' type in data file"));
607c607
< 	    warning(_("unrecognized internal function name \"%s\""), d->buffer.data); 
---
> 	    warning(_("unrecognized internal function name '%s'"), d->buffer.data); 
645c645
<     default: error(_("bad SEXP type in data file"));
---
>     default: error(_("bad 'SEXP' type in data file"));
709,710c709
< 	RestoreError(_("cannot save file position while restoring data"),
< 		     startup);
---
> 	RestoreError(_("cannot save file position while restoring data"), startup);
722,723c721
< 	RestoreError(_("cannot restore file position while restoring data"),
< 		     startup);
---
> 	RestoreError(_("cannot restore file position while restoring data"), startup);
765c763
< #define R_assert(e) ((e) ? (void) 0 : error("assertion `%s' failed: file `%s', line %d\n", #e, __FILE__, __LINE__))
---
> #define R_assert(e) ((e) ? (void) 0 : error(_("assertion '%s' failed: file '%s', line %d\n"), #e, __FILE__, __LINE__))
919,920c917
< 	    error(_("cannot save environment with locked/active bindings \
< in version 1 workspaces"));
---
> 	    error(_("cannot save environment with locked/active bindings in version 1 workspaces"));
1270c1267
< 	    warning(_("unrecognized internal function name \"%s\""), d->buffer.data); 
---
> 	    warning(_("unrecognized internal function name '%s'"), d->buffer.data); 
1288c1285
< 	error(_("NewReadItem: unknown type %i"), type);
---
> 	error(_("'NewReadItem()': unknown type %i"), type);
1440c1437
< 	    error(_("out of memory reading ascii string"));
---
> 	    error(_("out of memory while reading ascii string"));
1580c1577
< 	    error(_("out of memory reading binary string"));
---
> 	    error(_("out of memory while reading binary string"));
1681c1678
< 	    error(_("out of memory reading binary string"));
---
> 	    error(_("out of memory while reading binary string"));
1942c1939
< 	error(_("'file' must be non-empty string"));
---
> 	error(_("'%s' argument must be a non-empty character string"), "file");
1944c1941
< 	error(_("'ascii' must be logical"));
---
> 	error(_("'%s' argument must be logical"), "ascii");
1978c1975
< 	    error(_("object '%s' not found"), EncodeChar(PRINTNAME(TAG(t))));
---
> 	    error(_("object '%s' was not found"), EncodeChar(PRINTNAME(TAG(t))));
2012c2009
< 	    error(_("not a valid named list"));
---
> 	    error(_("'%s' is not a valid named list"), CHAR(PRINTNAME(TAG(ans))));
2018,2020c2015
< 		warningcall(R_NilValue,
< 			    _("'%s' looks like a pre-2.4.0 S4 object: please recreate it"),
< 			    CHAR(STRING_ELT(names, i)));
---
> 		warningcall(R_NilValue, _("'%s' looks like a pre-2.4.0 S4 object: please recreate it"), CHAR(STRING_ELT(names, i)));
2039,2041c2034
< 	    warningcall(R_NilValue,
< 			_("'%s' looks like a pre-2.4.0 S4 object: please recreate it"),
< 			CHAR(PRINTNAME(TAG(a))));
---
> 	    warningcall(R_NilValue, _("'%s' looks like a pre-2.4.0 S4 object: please recreate it"), CHAR(PRINTNAME(TAG(a))));
2076c2069
<     if (!fp) error(_("unable to open file"));
---
>     if (!fp) error(_("unable to open file '%s'"), translateChar(STRING_ELT(fname, 0)));
2157,2158c2150
< 	    error(_("cannot save data -- unable to open '%s': %s"),
< 		  name, strerror(errno));
---
> 	    error(_("cannot save data -- unable to open '%s': %s"), name, strerror(errno));
2180c2172
< 		Rprintf("[Previously saved workspace restored]\n\n");
---
> 		Rprintf(_("[Previously saved workspace restored]\n\n"));
2244c2236
< 	error(_("'ascii' must be logical"));
---
> 	error(_("'%s' argument must be logical"), "ascii");
2277c2269
< 	error(_("connection not open for writing"));
---
> 	error(_("connection is not open for writing"));
2310c2302
< 	    error(_("object '%s' not found"), EncodeChar(PRINTNAME(TAG(t))));
---
> 	    error(_("object '%s' was not found"), EncodeChar(PRINTNAME(TAG(t))));
2357,2358c2349,2350
<     if(!con->canread) error(_("connection not open for reading"));
<     if(con->text) error(_("can only load() from a binary connection"));
---
>     if(!con->canread) error(_("connection is not open for reading"));
>     if(con->text) error(_("can only load from a binary connection"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/scan.c R/src/main/scan.c
35a36
> #include <Localization.h>
477c478
< static R_INLINE void NORET expected(char *what, char *got, LocalData *d)
---
> static R_INLINE void expected(LocalData *d)
484d484
<     error(_("scan() expected '%s', got '%s'"), what, got);
499c499
< 	    else expected("a logical", buffer, d);
---
> 	    else { expected(d); error(_("scan() expected a logical, got '%s'"), buffer); };
508c508
< 		expected("an integer", buffer, d);
---
> 		{ expected(d); error(_("scan() expected an integer, got '%s'"), buffer); };
517c517
< 		expected("a real", buffer, d);
---
> 		{ expected(d); error(_("scan() expected a real, got '%s'"), buffer); }
526c526
< 		expected("a complex", buffer, d);
---
> 		{ expected(d); error(_("scan() expected a complex, got '%s'"), buffer); }
541c541
< 		expected("a raw", buffer, d);
---
> 		{ expected(d); error(_("scan() expected a raw, got '%s'"), buffer);  }
545c545
< 	UNIMPLEMENTED_TYPE("extractItem", ans);
---
> 	UNIMPLEMENTED_TYPE("extractItem()", ans);
613c613
<     if (!d->quiet) REprintf("Read %d item%s\n", n, (n == 1) ? "" : "s");
---
>     if (!d->quiet) REprintf(n_("Read %d item\n", "Read %d items\n", n), n );
651c651
< 	UNIMPLEMENTED_TYPEt("scanVector", type);
---
> 	UNIMPLEMENTED_TYPEt("scanVector()", type);
782c782
<     if (!d->quiet) REprintf("Read %d record%s\n", n, (n == 1) ? "" : "s");
---
>     if (!d->quiet) REprintf(n_("Read %d record\n", "Read %d records\n", n), n);
813c813
< 	    UNIMPLEMENTED_TYPE("scanFrame", old);
---
> 	    UNIMPLEMENTED_TYPE("scanFrame()", old);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/seq.c R/src/main/seq.c
28a29
> #include <Localization.h>
159c160
< 	errorcall(call, _("argument of length 0"));
---
> 	errorcall(call, _("argument is of length 0"));
162c163
< 		    ngettext("numerical expression has %d element: only the first used",
---
> 		    n_("numerical expression has %d element: only the first used",
167c168
< 		    ngettext("numerical expression has %d element: only the first used", 
---
> 		    n_("numerical expression has %d element: only the first used",
256c257
< 	UNIMPLEMENTED_TYPE("rep2", s);
---
> 	UNIMPLEMENTED_TYPE("rep2()", s);
323c324
< 	UNIMPLEMENTED_TYPE("rep3", s);
---
> 	UNIMPLEMENTED_TYPE("rep3()", s);
340,341c341
< 	error(_("attempt to replicate an object of type '%s'"), 
< 	      type2char(TYPEOF(s)));
---
> 	error(_("attempt to replicate an object of type '%s'"), type2char(TYPEOF(s)));
576c576
< 	UNIMPLEMENTED_TYPE("rep4", x);
---
> 	UNIMPLEMENTED_TYPE("rep4()", x);
615c615
< 	errorcall(call, "replication of pairlists is defunct");
---
> 	errorcall(call, _("replication of pairlists is defunct"));
630,631c630
< 	warningcall(call, _("first element used of '%s' argument"), 
< 		    "length.out");
---
> 	warningcall(call, _("first element used of '%s' argument"), "length.out");
642c641
< 	    warningcall(call, "'x' is NULL so the result will be NULL");
---
> 	    warningcall(call, _("'x' is NULL so the result will be NULL"));
650,651c649
< 	errorcall(call, "attempt to replicate an object of type '%s'",
< 		  type2char(TYPEOF(x)));
---
> 	errorcall(call, _("attempt to replicate an object of type '%s'"), type2char(TYPEOF(x)));
712d709
< #define myabs(x) (x < 0 ? x : -x)
746c743
< 		errorcall(call, "'from' cannot be NA, NaN or infinite");
---
> 		errorcall(call, _("'from' argument cannot be NA, NaN or infinite"));
764c761
< 	    errorcall(call, _("'length.out' must be a non-negative number"));
---
> 	    errorcall(call, _("'%s' argument must be a non-negative number"), "length.out");
766,767c763
< 	    warningcall(call, _("first element used of '%s' argument"), 
< 			"length.out");
---
> 	    warningcall(call, _("first element used of '%s' argument"), "length.out");
774c770
< 	else if(length(from) != 1) error("'from' must be of length 1");
---
> 	else if(length(from) != 1) error(_("'%s' argument must be of length 1"), "from");
776c772
< 	else if(length(to) != 1) error("'to' must be of length 1");
---
> 	else if(length(to) != 1) error(_("'%s' argument must be of length 1"), "to");
778c774
< 	    errorcall(call, "'from' cannot be NA, NaN or infinite");
---
> 	    errorcall(call, _("'from' argument cannot be NA, NaN or infinite"));
780c776
< 	    errorcall(call, "'to' cannot be NA, NaN or infinite");
---
> 	    errorcall(call, _("'to' argument cannot be NA, NaN or infinite"));
784c780
< 	    if(length(by) != 1) error("'by' must be of length 1");
---
> 	    if(length(by) != 1) error(_("'%s' argument must be of length 1"), "by");
788c784
< 		errorcall(call, _("'from' must be finite"));
---
> 		errorcall(call, _("'%s' argument must be finite"), "from");
790c786
< 		errorcall(call, _("'to' must be finite"));
---
> 		errorcall(call, _("'%s' argument must be finite"), "to");
802c798
< 		    errorcall(call, _("invalid '(to - from)/by' in 'seq'"));
---
> 		    errorcall(call, _("invalid '(to - from)/by' in 'seq()' function"));
854c850
< 	    errorcall(call, _("'from' must be finite"));
---
> 	    errorcall(call, _("'%s' argument must be finite"), "from");
856c852
< 	    errorcall(call, _("'to' must be finite"));
---
> 	    errorcall(call, _("'%s' argument must be finite"), "to");
871c867
< 	    errorcall(call, _("'from' must be finite"));
---
> 	    errorcall(call, _("'%s' argument must be finite"), "from");
873c869
< 	    errorcall(call, _("'by' must be finite"));
---
> 	    errorcall(call, _("'%s' argument must be finite"), "by");
893c889
< 	    errorcall(call, _("'to' must be finite"));
---
> 	    errorcall(call, _("'%s' argument must be finite"), "to");
895c891
< 	    errorcall(call, _("'by' must be finite"));
---
> 	    errorcall(call, _("'%s' argument must be finite"), "by");
930c926
< 	    error("'length' is not a BUILTIN");
---
> 	    error(_("'%s' is not a '%s' function"), "length", "BUILIN");
977,978c973
< 	warningcall(call, _("first element used of '%s' argument"),
< 		    "length.out");
---
> 	warningcall(call, _("first element used of '%s' argument"), "length.out");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/serialize.c R/src/main/serialize.c
27a28
> #include <Localization.h>
32a34
> #include <R_ext/Minmax.h>
184c186
< #define R_assert(e) ((e) ? (void) 0 : error("assertion '%s' failed: file '%s', line %d\n", #e, __FILE__, __LINE__))
---
> #define R_assert(e) ((e) ? (void) 0 : error(_("assertion '%s' failed: file '%s', line %d\n"), #e, __FILE__, __LINE__))
235c237
< 	    if (ISNA(d))
---
> 	    if (ISNAN(d))
237,238d238
< 	    else if (ISNAN(d))
< 		Rsnprintf(buf, sizeof(buf), "NaN\n");
251c251
< 	    if (ISNA(d))
---
> 	    if (ISNAN(d))
253,254d252
< 	    else if (ISNAN(d))
< 		Rsnprintf(buf, sizeof(buf), "NaN\n");
405,406d402
< 	else if (strcmp(buf, "NaN") == 0)
< 	    return R_NaN;
844d839
< #define min2(a, b) ((a) < (b)) ? (a) : (b)
857c852
< 	    this = min2(CHUNK_SIZE, length - done);
---
> 	    this = min(CHUNK_SIZE, length - done);
872c867
< 	    this = min2(CHUNK_SIZE, length - done);
---
> 	    this = min(CHUNK_SIZE, length - done);
894c889
< 	    this = min2(CHUNK_SIZE, length - done);
---
> 	    this = min(CHUNK_SIZE, length - done);
908c903
< 	    this = min2(CHUNK_SIZE, length - done);
---
> 	    this = min(CHUNK_SIZE, length - done);
931c926
< 	    this = min2(CHUNK_SIZE, length - done);
---
> 	    this = min(CHUNK_SIZE, length - done);
947c942
< 	    this = min2(CHUNK_SIZE, length - done);
---
> 	    this = min(CHUNK_SIZE, length - done);
1119c1114
< 		    this = min2(CHUNK_SIZE, len - done);
---
> 		    this = min(CHUNK_SIZE, len - done);
1391c1386
< 	    this = min2(CHUNK_SIZE, length - done);
---
> 	    this = min(CHUNK_SIZE, length - done);
1405c1400
< 	    this = min2(CHUNK_SIZE, length - done);
---
> 	    this = min(CHUNK_SIZE, length - done);
1427c1422
< 	    this = min2(CHUNK_SIZE, length - done);
---
> 	    this = min(CHUNK_SIZE, length - done);
1441c1436
< 	    this = min2(CHUNK_SIZE, length - done);
---
> 	    this = min(CHUNK_SIZE, length - done);
1464c1459
< 	    this = min2(CHUNK_SIZE, length - done);
---
> 	    this = min(CHUNK_SIZE, length - done);
1480c1475
< 	    this = min2(CHUNK_SIZE, length - done);
---
> 	    this = min(CHUNK_SIZE, length - done);
1671c1666
< 		    warning(_("unrecognized internal function name \"%s\""), cbuf); 
---
> 		    warning(_("unrecognized internal function name '%s'"), cbuf); 
1751c1746
< 		    this = min2(CHUNK_SIZE, len - done);
---
> 		    this = min(CHUNK_SIZE, len - done);
2185c2180
< 	error(_("'ascii' must be logical"));
---
> 	error(_("'%s' argument must be logical"), "ascii");
2223c2218
< 	error(_("connection not open for writing"));
---
> 	error(_("connection is not open for writing"));
2271c2266
<     if(!con->canread) error(_("connection not open for reading"));
---
>     if(!con->canread) error(_("connection is not open for reading"));
2551c2546
< 	error("character vectors are no longer accepted by unserialize()");
---
> 	error(_("character vectors are no longer accepted by unserialize()"));
2587c2582
< 	error(_("not a proper file name"));
---
> 	error(_("'%s' argument is not a proper file name"), "file");
2589c2584
< 	error(_("not a proper raw vector"));
---
> 	error(_("'%s' argument is not a proper raw vector"), "bytes");
2768c2763
< 	    error(_("object '%s' not found"), EncodeChar(STRING_ELT(vars, i)));
---
> 	    error(_("object '%s' was not found"), EncodeChar(STRING_ELT(vars, i)));
2846,2847c2841
<     if (err) error("lazy-load database '%s' is corrupt",
< 		   CHAR(STRING_ELT(file, 0)));
---
>     if (err) error(_("lazy-load database '%s' is corrupt"), CHAR(STRING_ELT(file, 0)));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/sort.c R/src/main/sort.c
25a26
> #include <Localization.h>
159c160
< 	    UNIMPLEMENTED_TYPE("isUnsorted", x);
---
> 	    UNIMPLEMENTED_TYPE("isUnsorted()", x);
326c327
< 	error(_("'decreasing' must be TRUE or FALSE"));
---
> 	error(_("'%s' argument must be TRUE or FALSE"), "decreasing");
376c377
<     if (n < 2) error("'n >= 2' is required");
---
>     if (n < 2) error(_("'n >= 2' is required"));
393c394
<     if (n < 2) error("'n >= 2' is required");
---
>     if (n < 2) error(_("'n >= 2' is required"));
410c411
<     if (n < 2) error("'n >= 2' is required");
---
>     if (n < 2) error(_("'n >= 2' is required"));
433c434
<     if (n < 2) error("'n >= 2' is required");
---
>     if (n < 2) error(_("'n >= 2' is required"));
469c470
< 	    UNIMPLEMENTED_TYPE("sortVector", s);
---
> 	    UNIMPLEMENTED_TYPE("sortVector()", s);
568c569
< 	UNIMPLEMENTED_TYPE("Psort", x);
---
> 	UNIMPLEMENTED_TYPE("Psort()", x);
677c678
< 	    UNIMPLEMENTED_TYPE("equal", x);
---
> 	    UNIMPLEMENTED_TYPE("equal()", x);
715c716
< 	    UNIMPLEMENTED_TYPE("greater", x);
---
> 	    UNIMPLEMENTED_TYPE("greater()", x);
747c748
< 	    UNIMPLEMENTED_TYPE("listgreater", x);
---
> 	    UNIMPLEMENTED_TYPE("listgreater()", x);
844c845
< 	    UNIMPLEMENTED_TYPE("listgreater", x);
---
> 	    UNIMPLEMENTED_TYPE("listgreater()", x);
994c995
< 	    UNIMPLEMENTED_TYPE("orderVector1", key);
---
> 	    UNIMPLEMENTED_TYPE("orderVector1()", key);
1128c1129
< 	    UNIMPLEMENTED_TYPE("orderVector1", key);
---
> 	    UNIMPLEMENTED_TYPE("orderVector1()", key);
1228c1229
< 	error(_("'decreasing' must be TRUE or FALSE"));
---
> 	error(_("'%s' argument must be TRUE or FALSE"), "decreasing");
1396c1397
< 	error(_("'decreasing' must be TRUE or FALSE"));
---
> 	error(_("'%s' argument must be TRUE or FALSE"), "decreasing");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/source.c R/src/main/source.c
25a26
> #include <Localization.h>
139c140
< 
---
>     //R_ParseErrorMsg comes from gram.[cy]'s 'yyerror(const char *s)'
167,168c168
< 	    error("%s in \"%s\"",
< 		  R_ParseErrorMsg, CHAR(STRING_ELT(context, 0)));
---
> 	    error(_("%s in command \"%s\""), R_ParseErrorMsg, CHAR(STRING_ELT(context, 0)));
171,173c171
< 	    error("%s in:\n\"%s\n%s\"",
< 		  R_ParseErrorMsg, CHAR(STRING_ELT(context, len-2)),
< 		  CHAR(STRING_ELT(context, len-1)));
---
> 	    error(_("%s in:\n\"%s\n%s\""),  R_ParseErrorMsg, CHAR(STRING_ELT(context, len-2)), CHAR(STRING_ELT(context, len-1)));
206c204
< 	error(_("'file' must be a character string or connection"));
---
> 	error(_("'%s' must be a character string or connection"), "file");
236c234
<     	warning(_("argument '%s = \"%s\"' will be ignored"), "encoding", encoding);
---
>     	warning(_("'%s = \"%s\"' option will be ignored"), "encoding", encoding);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/split.c R/src/main/split.c
25c25,26
< #include "Defn.h"
---
> #include <Localization.h>
> #include <Defn.h>
98c99
< 		UNIMPLEMENTED_TYPE("split", x);
---
> 		UNIMPLEMENTED_TYPE("split()", x);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/sprintf.c R/src/main/sprintf.c
25a26
> #include <Localization.h>
102c103
< 	error(_("'fmt' is not a character vector"));
---
> 	error(_("'%s' argument is not a character vector"), "fmt");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/startup.c R/src/main/startup.c
28a29
> #include <Localization.h>
181c182
< 	    R_ShowMessage("WARNING: invalid R_VSIZE ignored\n");
---
> 	    R_ShowMessage(_("WARNING: invalid 'R_VSIZE' ignored\n"));
188c189
< 	    R_ShowMessage("WARNING: invalid R_NSIZE ignored\n");
---
> 	    R_ShowMessage(_("WARNING: invalid 'R_NSIZE' ignored\n"));
200c201
< 	R_ShowMessage("WARNING: vsize ridiculously low, Megabytes assumed\n");
---
> 	R_ShowMessage(_("WARNING: 'vsize' argument is ridiculously low, Megabytes assumed\n"));
204,206c205
< 	snprintf(msg, 1024, 
< 		 "WARNING: invalid v(ector heap)size `%lu' ignored\n"
< 		 "using default = %gM\n", (unsigned long) vsize,
---
> 	snprintf(msg, 1024, _("WARNING: invalid (vector heap) 'vsize' argument '%lu' ignored\nusing default = %gM\n"), (unsigned long) vsize,
213,215c212
< 	snprintf(msg, 1024,
< 		 "WARNING: invalid language heap (n)size `%lu' ignored,"
< 		 " using default = %ld\n", (unsigned long) nsize, R_NSIZE);
---
> 	snprintf(msg, 1024, _("WARNING: invalid language heap (n)size '%lu' ignored, using default = %ld\n"), (unsigned long) nsize, R_NSIZE);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/subassign.c R/src/main/subassign.c
86a87
> #include <Localization.h>
170c171
< 	UNIMPLEMENTED_TYPE("EnlargeVector", x);
---
> 	UNIMPLEMENTED_TYPE("EnlargeVector()", x);
502c503
< 		error(_("NAs are not allowed in subscripted assignments"));
---
> 		error(_("NA values are not allowed in subscripted assignments"));
718c719
< 	warningcall(call, "sub assignment (*[*] <- *) not done; __bug?__");
---
> 	warningcall(call, _("sub assignment (*[*] <- *) not done; __bug?__"));
782c783
< 		error(_("NAs are not allowed in subscripted assignments"));
---
> 		error(_("NA values are not allowed in subscripted assignments"));
785c786
< 		error(_("NAs are not allowed in subscripted assignments"));
---
> 		error(_("NA values are not allowed in subscripted assignments"));
1076c1077
< 		    error(_("NAs are not allowed in subscripted assignments"));
---
> 		    error(_("NA values are not allowed in subscripted assignments"));
1236c1237
<     	error("internal error: index %d from length %d", ind, length(sub));
---
>     	error(_("internal error: index %d from length %d"), ind, length(sub));
1361c1362
< 	error(_("SubAssignArgs: invalid number of arguments"));
---
> 	error(_("'SubAssignArgs()': invalid number of arguments"));
1611c1612
< 	  errorcall(call, _("[[<- defined for objects of type \"S4\" only for subclasses of environment"));
---
> 	  errorcall(call, _("'[[<-' defined for objects of type \"S4\" only for subclasses of environment"));
1617c1618
< 	    error(_("wrong args for environment subassignment"));
---
> 	    error(_("wrong arguments for environment subassignment"));
1645c1646
< 	    error(_("[[ ]] with missing subscript"));
---
> 	    error(_("'[[ ]]' with missing subscript"));
1659c1660
< 		error(_("[[ ]] subscript out of bounds"));
---
> 		error(_("'[[ ]]' subscript out of bounds"));
1665c1666
< 		error(_("[[ ]] improper number of subscripts"));
---
> 		error(_("'[[ ]]' improper number of subscripts"));
1677c1678
< 		    error(_("[[ ]] subscript out of bounds"));
---
> 		    error(_("'[[ ]]' subscript (%d) out of bounds"), i+1);
1810c1811
< 	    error(_("incompatible types (from %s to %s) in [[ assignment"),
---
> 	    error(_("incompatible types (from %s to %s) in '[[' assignment"),
1843c1844
< 		error(_("[[ ]] improper number of subscripts"));
---
> 		error(_("'[[ ]]' improper number of subscripts"));
1854c1855
< 		    error(_("[[ ]] subscript (%d) out of bounds"), i+1);
---
> 		    error(_("'[[ ]]' subscript (%d) out of bounds"), i+1);
2011c2012
< 	    warning(_("Coercing LHS to a list"));
---
> 	    warning(_("coercing LHS to a list"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/subscript.c R/src/main/subscript.c
36a37
> #include <Localization.h>
297c298
< 	error("should only be called in an assignment context.");
---
> 	error(_("should only be called in an assignment context."));
313c314
< 		error("invalid subscript for pairlist");
---
> 		error(_("invalid subscript for pairlist"));
379c380
< 			ECALL(call, _("subscript out of bounds"));
---
> 			ECALL(call, _("subscript is out of bounds"));
397c398
< 			ECALL(call, _("subscript out of bounds"));
---
> 			ECALL(call, _("subscript is out of bounds"));
421c422
< 		    ECALL(call, _("subscript out of bounds"));
---
> 		    ECALL(call, _("subscript is out of bounds"));
438c439
< a subscript out of bounds error.  */
---
> a subscript is out of bounds error.  */
460c461
<             if (v == 0) errorcall(call, _("subscript out of bounds"));
---
>             if (v == 0) errorcall(call, _("subscript is out of bounds"));
588c589
< 	    ECALL(call, _("subscript out of bounds"));
---
> 	    ECALL(call, _("subscript is out of bounds"));
627c628
< 	    ECALL(call, _("subscript out of bounds"));
---
> 	    ECALL(call, _("subscript is out of bounds"));
770c771
< 		ECALL(call, _("subscript out of bounds"));
---
> 		ECALL(call, _("subscript is out of bounds"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/subset.c R/src/main/subset.c
40a41
> #include <Localization.h>
132c133
< 		error("invalid subscript for pairlist");
---
> 		error(_("invalid subscript for pairlist"));
974c975
< 		    error("getter call used outside of a complex assignment.");
---
> 		    error(_("getter call used outside of a complex assignment"));
1029c1030
< 	    error("invalid subscript for pairlist");
---
> 	    error(_("invalid subscript for pairlist"));
1059c1060
< 	    UNIMPLEMENTED_TYPE("do_subset2", x);
---
> 	    UNIMPLEMENTED_TYPE("do_subset2()", x);
1168c1169
< 	    errorcall(call, "$ operator not defined for this S4 class");
---
> 	    errorcall(call, _("$ operator not defined for this S4 class"));
1282c1283
< 	errorcall(call, "$ operator is invalid for atomic vectors");
---
> 	errorcall(call, _("$ operator is invalid for atomic vectors"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/summary.c R/src/main/summary.c
24a25
> #include <Localization.h>
27c28
< 
---
> #include <R_ext/Minmax.h>
31d31
< #define imax2(x, y) ((x < y) ? y : x)
66c66
< 		    warningcall(call, _("integer overflow - use sum(as.numeric(.))"));
---
> 		    warningcall(call, _("integer overflow in '%s' function; use '%s'"), "isum()", "sum(as.numeric(.))");
78c78
< 	warningcall(call, _("integer overflow - use sum(as.numeric(.))"));
---
> 	warningcall(call, _("integer overflow in '%s' function; use '%s'"), "isum()", "sum(as.numeric(.))");
103c103
< 	warningcall(call, _("integer overflow - use sum(as.numeric(.))"));
---
> 	warningcall(call, _("integer overflow in '%s' function; use '%s'"), "isum()", "sum(as.numeric(.))");
472c472
<     REprintf("C do_summary(op%s, *): did NOT dispatch\n", PRIMNAME(op));
---
>     REprintf(_("C do_summary(op%s, *): did NOT dispatch\n"), PRIMNAME(op));
623c623
< 				warningcall(call,_("Integer overflow - use sum(as.numeric(.))"));
---
> 				warningcall(call,_("integer overflow in '%s' function; use '%s'"), "do_summary()", "sum(as.numeric(.))");
734c734
< 		warningcall(call, _("no non-missing arguments to min; returning Inf"));
---
> 		warningcall(call, _("no non-missing arguments passed to 'min()' function; returning Inf"));
736c736
< 		warningcall(call, _("no non-missing arguments to max; returning -Inf"));
---
> 		warningcall(call, _("no non-missing arguments passed to 'max()' function; returning -Inf"));
845c845
<         error(_("argument to 'which' is not logical"));
---
>         error(_("argument passed to 'which()' function is not logical"));
926c926
< 	len = imax2(len, n);
---
> 	len = max(len, n);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/sysutils.c R/src/main/sysutils.c
26a27
> #include <Localization.h>
169,170c170
< 	error(_("unsupported conversion from '%s' in codepage %d"), 
< 	      from, localeCP);
---
> 	error(_("unsupported conversion from '%s' in codepage %d"), from, localeCP);
254c254
< 	error(_("no 'pattern'"));
---
> 	error(_("no '%s' argument"), "pattern");
256c256
< 	error(_("no 'tempdir'"));
---
> 	error(_("no '%s' argument"), "tempdir");
258c258
<         error(_("no 'fileext'"));
---
>         error(_("no '%s' argument"), "fileext");
470c470
<     error(_("'Sys.setenv' is not available on this system"));
---
>     error(_("'%s' function is not available on this system"), "Sys.setenv()");
525c525
<     warning(_("'Sys.unsetenv' is not available on this system"));
---
>     warning(_("'%s' function is not available on this system"), "Sys.unsetenv()");
622,623c622
< 	    error(_("unsupported conversion from '%s' to '%s' in codepage %d"), 
< 		  from, to, localeCP);
---
> 	    error(_("unsupported conversion from '%s' to '%s' in codepage %d"), from, to, localeCP);
637c636
< 		error(_("'x' must be a character vector"));
---
> 		error(_("'%s' argument must be a character vector"), "x");
652c651
< 		    error(_("'x' must be a list of NULL or raw vectors"));
---
> 		    error(_("'x' argument must be a list of NULL or raw vectors"));
908c907
< 	error(_("'%s' must be called on a CHARSXP"), "translateChar");
---
> 	error(_("'%s' function must be called on a CHARSXP"), "translateChar()");
1331c1330
<     if (res > ny) error("converted string too long for buffer");
---
>     if (res > ny) error(_("converted string too long for buffer"));
1643c1642
<     	error(_("temporary name too long"));
---
>     	error(_("temporary name is too long"));
1661c1660
< 	error(_("allocation failed in R_tmpnam2"));
---
> 	error(_("allocation failure in '%s' function"), "R_tmpnam2()");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/unique.c R/src/main/unique.c
27a28
> #include <Localization.h>
32,34c33,34
< #define ARGUSED(x) LEVELS(x)
< #define SET_ARGUSED(x,v) SETLEVELS(x,v)
< 
---
> static R_INLINE int ARGUSED(SEXP x) { return LEVELS(x); }
> static R_INLINE void SET_ARGUSED(SEXP x, int v) { SETLEVELS(x, v); }
338c338
< #define IMAX 4294967296L
---
> #define IMAX 4294967296L //2^32
390c390
< 	UNIMPLEMENTED_TYPE("HashTableSetup", x);
---
> 	UNIMPLEMENTED_TYPE("HashTableSetup()", x);
420c420
< 	if (d->nmax-- < 0) error("hash table is full");
---
> 	if (d->nmax-- < 0) error(_("hash table is full"));
432c432
< 	if (d->nmax-- < 0) error("hash table is full");
---
> 	if (d->nmax-- < 0) error(_("hash table is full"));
490c490
<     if (!isVector(x)) error(_("'duplicated' applies only to vectors"));
---
>     if (!isVector(x)) error(_("'%s' method applies only to vectors"), "duplicated()");
519c519
<     if (!isVector(x)) error(_("'duplicated' applies only to vectors"));
---
>     if (!isVector(x)) error(_("'%s' method applies only to vectors"), "duplicated()");
549c549
<     if (!isVector(x)) error(_("'duplicated' applies only to vectors"));
---
>     if (!isVector(x)) error(_("'%s' method applies only to vectors"), "duplicated()");
573c573
<     if (!isVector(x)) error(_("'duplicated' applies only to vectors"));
---
>     if (!isVector(x)) error(_("'%s' method applies only to vectors"), "duplicated()");
612c612
<     if (!isVector(x)) error(_("'duplicated' applies only to vectors"));
---
>     if (!isVector(x)) error(_("'%s' method applies only to vectors"), "duplicated()");
667c667
< 	error(_("'fromLast' must be length 1"));
---
> 	error(_("'%s' argument must be of length 1"), "fromLast");
670c670
< 	error(_("'fromLast' must be TRUE or FALSE"));
---
> 	error(_("'%s' argument must be TRUE or FALSE"), "fromLast");
681,683c681,683
< 	error(_("%s() applies only to vectors"),
< 	      (PRIMVAL(op) == 0 ? "duplicated" :
< 	       (PRIMVAL(op) == 1 ? "unique" : /* 2 */ "anyDuplicated")));
---
> 	error(_("'%s' method applies only to vectors"),
> 	      (PRIMVAL(op) == 0 ? "duplicated()" :
> 	       (PRIMVAL(op) == 1 ? "unique()" : /* 2 */ "anyDuplicated()")));
688c688
< 	    error(_("'nmax' must be positive"));
---
> 	    error(_("'%s' argument must be positive"), "nmax");
760c760
< 	UNIMPLEMENTED_TYPE("duplicated", x);
---
> 	UNIMPLEMENTED_TYPE("duplicated()", x);
925c925
< 	error(_("'match' requires vector arguments"));
---
> 	error(_("'match()' function requires vector arguments"));
1187,1188d1186
< #define ARGUSED(x) LEVELS(x)
< 
1236c1234
< 	error(_("... used in a situation where it does not exist"));
---
> 	error(_("'...' used in a situation where it does not exist"));
1242c1240
<         error(_("... is not a pairlist"));
---
>         error(_("'...' is not a pairlist"));
1284c1282
<         error(_("'envir' must be an environment"));
---
>         error(_("'%s' argument must be an environment"), "envir");
1386c1384
<     if(narm == NA_LOGICAL) error("'na.rm' must be TRUE or FALSE");
---
>     if(narm == NA_LOGICAL) error(_("'%s' argument must be TRUE or FALSE"), "na.rm");
1432c1430
< 	error("non-numeric matrix in rowsum(): this should not happen");
---
> 	error(_("non-numeric matrix in 'rowsum()': this should not happen"));
1434c1432
<     if (TYPEOF(rn) != STRSXP) error("row names are not character");
---
>     if (TYPEOF(rn) != STRSXP) error(_("row names are not character"));
1458c1456
<     if(narm == NA_LOGICAL) error("'na.rm' must be TRUE or FALSE");
---
>     if(narm == NA_LOGICAL) error(_("'%s' argument must be TRUE or FALSE"), "na.rm");
1470c1468
< 	    error(_("non-numeric data frame in rowsum"));
---
> 	    error(_("non-numeric data frame in 'rowsum()'"));
1506c1504
<     if (TYPEOF(rn) != STRSXP) error("row names are not character");
---
>     if (TYPEOF(rn) != STRSXP) error(_("row names are not character"));
1573c1571
< 	error(_("'names' must be a character vector"));
---
> 	error(_("'%s' argument must be a character vector"), "names");
1577c1575
< 	error(_("'sep' must be a character string"));
---
> 	error(_("'%s' argument must be a character string"), "sep");
1654c1652
< 	error("C function 'csduplicated' not called on a STRSXP");
---
> 	error(_("'csduplicated()' function was not called on a STRSXP"));
1685c1683
<     if (k > dn/2) error("This algorithm is for size <= n/2");
---
>     if (k > dn/2) error(_("This algorithm is for size <= n/2"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/util.c R/src/main/util.c
25a26
> #include <Localization.h>
28a30
> #include <R_ext/Minmax.h>
34d35
< #define R_imax2(x, y) ((x < y) ? y : x)
116c117
< 	    errorcall(call, type_msg);
---
> 	    errorcall(call, _("invalid type passed to internal function\n"));
118c119
< 	    error(type_msg);
---
> 	    error(_("invalid type passed to internal function\n"));
305c306
<     warning(_("type %d is unimplemented in '%s'"), t, "type2str");
---
>     warning(_("type %d is unimplemented in '%s' function"), t, "type2str()");
307c308
<     snprintf(buf, 50, "unknown type #%d", t);
---
>     snprintf(buf, 50, _("unknown type #%d"), t);
317,318c318
<     error(_("type %d is unimplemented in '%s'"), t, 
< 	  "type2ImmutableScalarString");
---
>     error(_("type %d is unimplemented in '%s' function"), t, "type2ImmutableScalarString()");
328c328
<     warning(_("type %d is unimplemented in '%s'"), t, "type2char");
---
>     warning(_("type %d is unimplemented in '%s' function"), t, "type2char()");
330c330
<     snprintf(buf, 50, "unknown type #%d", t);
---
>     snprintf(buf, 50, _("unknown type #%d"), t);
343c343
<     error(_("type %d is unimplemented in '%s'"), t, "type2symbol");
---
>     error(_("type %d is unimplemented in '%s' function"), t, "type2symbol()");
354c354
< 	    error(_("unimplemented type '%s' in '%s'\n"), TypeTable[i].str, s);
---
> 	    error(_("unimplemented type '%s' in '%s' function"), TypeTable[i].str, s);
356c356
<     error(_("unimplemented type (%d) in '%s'\n"), t, s);
---
>     error(_("type %d is unimplemented in '%s' function"), t, s);
490,492c490,496
< 	if (PRIMINTERNAL(op))
< 	    error(ngettext("%d argument passed to .Internal(%s) which requires %d",
< 		     "%d arguments passed to .Internal(%s) which requires %d",
---
> 	if (PRIMINTERNAL(op)) {
> 	   char *primname = PRIMNAME(op);
> 	   const int bufsize = strlen(".Internal()") + strlen(primname);
> 	   char result [bufsize];
> 	   snprintf(result, bufsize, ".Internal(%s)", primname);
> 	    error(n_("%d argument passed to '%s' function which requires %d",
> 		     "%d arguments passed to '%s' function which requires %d",
494,495c498,499
< 		  length(args), PRIMNAME(op), PRIMARITY(op));
< 	else
---
> 		  length(args), result, PRIMARITY(op));
> 	} else
497,498c501,502
< 		      ngettext("%d argument passed to '%s' which requires %d",
< 			       "%d arguments passed to '%s' which requires %d",
---
> 		      n_("%d argument passed to '%s' function which requires %d",
> 			       "%d arguments passed to '%s' function which requires %d",
512,513c516
< 	errorcall(call, _("supplied argument name '%s' does not match '%s'"),
< 		  supplied, formal);
---
> 	errorcall(call, _("supplied argument name '%s' does not match '%s'"), supplied, formal);
522c525
< 		error(_("'nthcdr' list shorter than %d"), n);
---
> 		error(_("'nthcdr()' list is shorter than %d"), n);
643c646
< 	error(_("'all.x' must be TRUE or FALSE"));
---
> 	error(_("'%s' argument must be TRUE or FALSE"), "all.x");
645c648
< 	error(_("'all.y' must be TRUE or FALSE"));
---
> 	error(_("'%s' argument must be TRUE or FALSE"), "all.y");
804c807
< 	    if (wcslen(pp) > PATH_MAX - 1) error(_("path too long"));
---
> 	    if (wcslen(pp) > PATH_MAX - 1) error(_("'%s' argument is too long"), "path");
839c842
< 		error(_("path too long"));
---
> 		error(_("'%s' argument is too long"), "path");
881c884
< 		error(_("path too long"));
---
> 		error(_("'%s' argument is too long"), "path");
922c925
< 		error(_("path too long"));
---
> 		error(_("'%s' argument is too long"), "path");
959c962
< 	error(_("'path' must be a character vector"));
---
> 	error(_("'%s' argument must be a character vector"), "path");
982c985
<     warning("this platform does not have realpath so the results may not be canonical");
---
>     warning(_("this platform does not have realpath so the results may not be canonical"));
1024c1027
<     warning("system timezone name is unknown: set environment variable TZ");
---
>     warning(_("system timezone name is unknown: set environment variable TZ"));
1057c1060
< 	warning(_("only the first character of 'quote' will be used"));
---
> 	warning(_("only the first character of 'quote' argument will be used"));
1071c1074
< 		w = R_imax2(w, Rstrlen(s, quote));
---
> 		w = max(w, Rstrlen(s, quote));
1130c1133
< 	error(_("'value' must be of positive length"));
---
> 	error(_("'value' argument must be of positive length"));
1259c1262
< 	    if (m < 0) error(_("invalid input '%s' in 'utf8towcs'"), s);
---
> 	    if (m < 0) error(_("invalid input '%s' in 'utf8towcs()' function"), s);
1267c1270
< 	    if (m < 0) error(_("invalid input '%s' in 'utf8towcs'"), s);
---
> 	    if (m < 0) error(_("invalid input '%s' in 'utf8towcs()' function"), s);
1738c1741
< 	errorcall(call, "argumemt is not a character vector");
---
> 	errorcall(call, _("'%s' argument is not a character vector"), "x");
1951c1954
< 			error("failed to set ICU locale %s (%d)", s, status);
---
> 			error(_("failed to set ICU locale %s (%d)"), s, status);
1955c1958
< 			error("failed to open ICU collator (%d)", status);
---
> 			error(_("failed to open ICU collator (%d)"), status);
1977c1980
< 		    error("failed to set ICU collator attribute");
---
> 		    error(_("failed to set ICU collator attribute"));
2002c2005
<     } else ans = "ICU not in use";
---
>     } else ans = _("ICU not in use");
2022c2025
< 		error("failed to set ICU locale (%d)", status);
---
> 		error(_("failed to set ICU locale (%d)"), status);
2026c2029
< 		error("failed to open ICU collator (%d)", status);
---
> 		error(_("failed to open ICU collator (%d)"), status);
2042c2045
<     if (U_FAILURE(status)) error("could not collate using ICU");
---
>     if (U_FAILURE(status)) error(_("could not collate using ICU"));
2057c2060
<     return mkString("ICU not in use");
---
>     return mkString(_("ICU not in use"));
2099c2102
<     if (!isString(in)) error("input must be a character string");
---
>     if (!isString(in)) error(_("input must be a character string"));
2117c2120
< 	if(breaks[i-1] > breaks[i]) error(_("'breaks' is not sorted"));
---
> 	if(breaks[i-1] > breaks[i]) error(_("'breaks' argument is not sorted"));
2171c2174
<     if (TYPEOF(in) != INTSXP)  error("invalid input");
---
>     if (TYPEOF(in) != INTSXP)  error(_("invalid input"));
2194c2197
<     if(TYPEOF(xt) != REALSXP || TYPEOF(x) != REALSXP) error("invalid input");
---
>     if(TYPEOF(xt) != REALSXP || TYPEOF(x) != REALSXP) error(_("invalid input"));
2250c2253
< 	error(_("'eps.correct' must be 0, 1, or 2"));
---
> 	error(_("'%s' argument must be 0, 1, or 2"), "eps.correct");
2278c2281
<     if (!isVector(x)) error(_("'x' must be a vector"));
---
>     if (!isVector(x)) error(_("'%s' argument must be a vector"), "x");
2297c2300
<     default: error("unsupported type ");
---
>     default: error(_("unsupported type"));
2384c2387
< 	error("width cannot be zero");
---
> 	error(_("width cannot be zero"));
2399c2402
< 	    error("'type' must be \"integer\" for  \"d\"-format");
---
> 	    error(_("'type' argument must be \"integer\" for \"d\"-format"));
2419,2420c2422
< 	fprintf(stderr, "strsignif.c: form='%s', width=%d, dig=%d\n",
< 		form, width, dig);
---
> 	fprintf(stderr, "strsignif.c: form='%s', width=%d, dig=%d\n", form, width, dig);
2462,2463c2464
< 				fprintf(stderr, "\t>>> jL=%d, j=%d; new res= '%s'\n",
< 					jL, j, result[i]);
---
> 				fprintf(stderr, "\t>>> jL=%d, j=%d; new res= '%s'\n", jL, j, result[i]);
2470,2471c2471
< 			    fprintf(stderr, "\t  iex >= -4; using %d for 'dig'\n",
< 				    (iex >= dig) ? (iex+1) : dig);
---
> 			    fprintf(stderr, "\t  iex >= -4; using %d for 'dig'\n", (iex >= dig) ? (iex+1) : dig);
2483c2483
< 	    error("'type' must be \"real\" for this format");
---
> 	    error(_("'type' argument must be \"real\" for this format"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/version.c R/src/main/version.c
25c25,26
< #include "Defn.h"
---
> #include <Localization.h>
> #include <Defn.h>
31c32
<     char buf[384];
---
>     char buf[500];
34c35
<     PrintVersion_part_1(buf, 384);
---
>     PrintVersion_part_1(buf, 500);
36c37
< 
---
>     Rprintf("Ivory is not part of the R project, so please do not report bugs\nvia r-bugs or the R website - instead refer to the author.\n\n");
112c113
<     if(R_SVN_REVISION <= 0) {// 'svn info' failed in ../../Makefile.in
---
>     if(R_SVN_BASEREVISION <= 0) {// 'svn info' failed in ../../Makefile.in
114c115
< 		R_MAJOR, R_MINOR, R_STATUS, R_YEAR, R_MONTH, R_DAY);
---
> 		R_MAJOR, R_MINOR, R_STATUS, R_BASEYEAR, R_BASEMONTH, R_BASEDAY);
117c118
< 		R_MAJOR, R_MINOR, R_YEAR, R_MONTH, R_DAY);
---
> 		R_MAJOR, R_MINOR, R_BASEYEAR, R_BASEMONTH, R_BASEDAY);
120c121
< 		R_STATUS, R_YEAR, R_MONTH, R_DAY, R_SVN_REVISION);
---
> 		R_STATUS, R_BASEYEAR, R_BASEMONTH, R_BASEDAY, R_SVN_BASEREVISION);
122a124,141
> 		R_MAJOR, R_MINOR, R_STATUS, R_BASEYEAR, R_BASEMONTH, R_BASEDAY,
> 		R_SVN_BASEREVISION);
>     }
> }
> 
> void attribute_hidden PrintIvoryVersionString(char *s, size_t len)
> {
>     if(R_SVN_REVISION <= 0) {// 'svn info' failed in ../../Makefile.in
>         snprintf(s, len, "Ivory version %s.%s %s (%s-%s-%s)",
>                 R_MAJOR, R_MINOR, R_STATUS, R_YEAR, R_MONTH, R_DAY);
>     } else if(strlen(R_STATUS) == 0) {
>         snprintf(s, len, "Ivory version %s.%s (%s-%s-%s)",
>                 R_MAJOR, R_MINOR, R_YEAR, R_MONTH, R_DAY);
>     } else if(strcmp(R_STATUS, "Under development (unstable)") == 0) {
>         snprintf(s, len, "Ivory %s (%s-%s-%s r%d)",
>                 R_STATUS, R_YEAR, R_MONTH, R_DAY, R_SVN_REVISION);
>     } else {
>         snprintf(s, len, "Ivory version %s.%s %s (%s-%s-%s r%d)",
131a151,153
>     PrintIvoryVersionString(s, len);
>     strcat(s, " -- \"Internationalized Version of R\"\n");
>     SPRINTF_2("Copyright (C) 2013-%s Lukasz Daniel (lukasz.daniel@gmail.com)\nSee README-IVORY file for details.\n\n", R_YEAR);
133c155
<     PrintVersionString(s, len);
---
>     PrintVersionString(tmp, len);
137c159
< 	strcat(s, nick);
---
> 	strcat(tmp, nick);
139,140c161,162
<     SPRINTF_2("\nCopyright (C) %s The R Foundation for Statistical Computing\n",
< 	      R_YEAR);
---
>     strcat(s, tmp);
>     SPRINTF_2("\nCopyright (C) %s The R Foundation for Statistical Computing\n", R_YEAR);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/main/xspline.c R/src/main/xspline.c
15c15
< 
---
> #include <Localization.h>
534c534
<       error(_("There must be at least three control points"));
---
>       error(_("there must be at least three control points"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/modules/X11/dataentry.c R/src/modules/X11/dataentry.c
38a39
> #include <Localization.h>
43c44
< 
---
> #include <R_ext/Minmax.h>
224,229d224
< #ifndef max
< #define max(a, b) (((a)>(b))?(a):(b))
< #endif
< #ifndef min
< #define min(a, b) (((a)<(b))?(a):(b))
< #endif
310c305
<     char *title = "R Data Editor";
---
>     char *title = _("R Data Editor");
320c315
< 	errorcall(call, "invalid argument");
---
> 	errorcall(call, _("invalid argument"));
368c363
< 	    errorcall(call, "invalid type for value");
---
> 	    errorcall(call, _("invalid type for value"));
379c374
< 	errorcall(call, "unable to start data editor");
---
> 	errorcall(call, _("unable to start data editor"));
439c434
< 		    error("dataentry: internal memory problem");
---
> 		    error(_("dataentry: internal memory problem"));
475c470
< 	errorcall(call, "invalid argument");
---
> 	errorcall(call, _("invalid argument"));
478c473
< 	errorcall(call, "invalid argument");
---
> 	errorcall(call, _("invalid argument"));
508c503
< 	    errorcall(call, "invalid argument");
---
> 	    errorcall(call, _("invalid argument"));
514c509
< 	errorcall(call, "unable to start data viewer");
---
> 	errorcall(call, _("unable to start data viewer"));
735c730
< 	UNIMPLEMENTED("advancerect");
---
> 	UNIMPLEMENTED("advancerect()");
788c783
< 	error("get_col_name: column number too big to stringify");
---
> 	error(_("get_col_name: column number too big to stringify"));
915c910
< 	error("dataentry: internal memory error");
---
> 	error(_("dataentry: internal memory error"));
1032c1027
< 	error("internal type error in dataentry");
---
> 	error(_("internal type error in 'dataentry'"));
1045c1040
< 		error("internal type error in dataentry");
---
> 		error(_("internal type error in 'dataentry'"));
1146c1141
< 			warning("dataentry: parse error on string");
---
> 			warning(_("dataentry: parse error on string"));
1348c1343
< 	warning("dataentry: expression too long");
---
> 	warning(_("dataentry: expression too long"));
1758c1753
< 	    warning("dataentry: expression too long");
---
> 	    warning(_("dataentry: expression too long"));
1881c1876
<     error("X11 fatal IO error: please save work and shut down R");
---
>     error(_("X11 fatal IO error: please save work and shut down R"));
1906,1907c1901,1902
< 	warning("locale not supported by Xlib: some X ops will operate in C locale");
<     if (!XSetLocaleModifiers ("")) warning("X cannot set locale modifiers");
---
> 	warning(_("locale not supported by Xlib: some X ops will operate in C locale"));
>     if (!XSetLocaleModifiers ("")) warning(_("X cannot set locale modifiers"));
1911c1906
< 	    warning("unable to open display");
---
> 	    warning(_("unable to open display"));
1942c1937
< 	    warning("unable to create fontset %s", opt_fontset_name);
---
> 	    warning(_("unable to create fontset %s"), opt_fontset_name);
1948c1943
< 	    warning("unable to load font %s", font_name);
---
> 	    warning(_("unable to load font %s"), font_name);
2073c2068
< 	warning("unable to open window for data editor");
---
> 	warning(_("unable to open window for data editor"));
2107c2102
< 	    warning("unable to open X Input Method");
---
> 	    warning(_("unable to open X Input Method"));
2142c2137
< 	    warning("unable to open X Input Context");
---
> 	    warning(_("unable to open X Input Context"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/modules/X11/devX11.c R/src/modules/X11/devX11.c
33c33
< 
---
> #include <Localization.h>
546c546
< 	    warning(_("X11 driver unable to obtain color cube\n  reverting to monochrome"));
---
> 	    warning(_("X11 driver is unable to obtain color cube. Reverting to monochrome"));
594,595c594
< 	error(_("Error: X11 cannot allocate additional graphics colors.\n\
< Consider using X11 with colortype=\"pseudo.cube\" or \"gray\"."));
---
> 	error(_("Error: X11 cannot allocate additional graphics colors.\nConsider using X11 with colortype=\"pseudo.cube\" or \"gray\"."));
654c653
< 	printf("Unknown Visual\n");
---
> 	printf(_("Unknown Visual\n"));
718c717
< 	printf("Unknown Visual\n");
---
> 	printf(_("Unknown Visual\n"));
797,799c796,797
< 			warning("cairo error '%s'", 
< 				cairo_status_to_string(res));
< 			error("fatal error on resize: please shut down the device");
---
> 			warning(_("cairo error '%s'"), cairo_status_to_string(res));
> 			error(_("fatal error on resize: please shut down the device"));
907c905
<     printf("loading fontset %s\n", fontset_name);
---
>     printf(_("loading fontset %s\n"), fontset_name);
919c917
< 	   warning("font for charset %s is lacking.", missing_charset_list[i]);
---
> 	   warning(_("font for charset %s is lacking."), missing_charset_list[i]);
939c937
<     printf("trying face %d size %d\n", face, size);
---
>     printf(_("trying face %d size %d\n"), face, size);
993c991
<     Rprintf("loading:\n%s\n",buf);
---
>     Rprintf(_("loading:\n%s\n"),buf);
1001c999
<     if (tmp) Rprintf("success\n"); else Rprintf("failure\n");
---
>     if (tmp) Rprintf(_("success\n")); else Rprintf(_("failure\n"));
1027c1025
< 		error(_("could not find any X11 fonts\nCheck that the Font Path is correct."));
---
> 		error(_("could not find any X11 fonts. Check that the Font Path is correct."));
1047c1045
< 	Rprintf("loading:\n%s\n",buf);
---
> 	Rprintf(_("loading:\n%s\n"),buf);
1054c1052
< 	if (tmp) Rprintf("success\n"); else Rprintf("failure\n");
---
> 	if (tmp) Rprintf(_("success\n")); else Rprintf(_("failure\n"));
1067c1065
< 	Rprintf("loading:\n%s\n",buf);
---
> 	Rprintf(_("loading:\n%s\n"),buf);
1076c1074
< 	if (tmp) Rprintf("success\n"); else Rprintf("failure\n");
---
> 	if (tmp) Rprintf(_("success\n")); else Rprintf(_("failure\n"));
1087,1088c1085
< 	    warning(_("X11 used font size %d when %d was requested"),
< 		    pixelsize, size);
---
> 	    warning(_("X11 used font size %d when %d was requested"), pixelsize, size);
1121,1122c1118
< 	    error(_("X11 font %s, face %d at size %d could not be loaded"),
< 		  family, face, size);
---
> 	    error(_("X11 font %s, face %d at size %d could not be loaded"), family, face, size);
1326c1322
< 	warning(_("locale not supported by Xlib: some X ops will operate in C locale"));
---
> 	warning(_("locale is not supported by Xlib: some X operations will operate in C locale"));
1337c1333
< 	    error(_("filename too long in png() call"));
---
> 	    error(_("filename is too long in '%s' call"), "png()");
1363c1359
< 	    error(_("filename too long in jpeg() call"));
---
> 	    error(_("filename is too long in '%s' call"), "jpeg()");
1387c1383
< 	    error(_("filename too long in tiff() call"));
---
> 	    error(_("filename is too long in '%s' call"), "tiff()");
1399c1395
< 	    error(_("filename too long in bmp() call"));
---
> 	    error(_("filename is too long in '%s' call"), "bmp()");
1459c1455
< 	warning(_("jpeg() does not support transparency: using white bg"));
---
> 	warning(_("'jpeg()' function does not support transparency: using white background"));
1564,1565c1560
< 		    warning(_("unable to obtain information on display '%s'"),
< 			    dsp);
---
> 		    warning(_("unable to obtain information on display '%s'"), dsp);
1636,1637c1631
< 			warning("cairo error '%s'",
< 				cairo_status_to_string(res));
---
> 			warning(_("cairo error '%s'"), cairo_status_to_string(res));
1644,1645c1638
< 			warning("cairo error '%s'", 
< 				cairo_status_to_string(res));
---
> 			warning(_("cairo error '%s'"), cairo_status_to_string(res));
1665c1658
< 		    warning("cairo error '%s'", cairo_status_to_string(res));
---
> 		    warning(_("cairo error '%s'"), cairo_status_to_string(res));
1674c1667
< 		    warning("cairo error '%s'", cairo_status_to_string(res));
---
> 		    warning(_("cairo error '%s'"), cairo_status_to_string(res));
1717,1718c1710
< 	    warning(_("'width=%d, height=%d' are unlikely values in pixels"),
< 		    iw, ih);
---
> 	    warning(_("'width=%d, height=%d' are unlikely values in pixels"), iw, ih);
1793c1785
< 	    warning(_("font family not found in X11 font database"));
---
> 	    warning(_("font family is not found in X11 font database"));
1844c1836
< 	    printf("--- end of fontlist ---\n\n");
---
> 	    printf(_("--- end of fontlist ---\n\n"));
2123c2115
< 	sprintf(t, "R Graphics: Device %d", ndevNumber(dd) + 1);
---
> 	sprintf(t, _("R Graphics: Device %d"), ndevNumber(dd) + 1);
2125c2117
<     strcat(t, " (ACTIVE)");
---
>     strcat(t, _(" (ACTIVE DEVICE)"));
2140c2132
< 	sprintf(t, "R Graphics: Device %d", ndevNumber(dd) + 1);
---
> 	sprintf(t, _("R Graphics: Device %d"), ndevNumber(dd) + 1);
2142c2134
<     strcat(t, " (inactive)");
---
>     strcat(t, _(" (inactive device)"));
2183c2175
<     warning(_("%s not available for this device"), "Path drawing");
---
>     warning(_("Path drawing is not available for this device"));
2527c2519
< 	error(_("attempt to use the locator after dev.hold()"));
---
> 	error(_("attempt to use the locator after 'dev.hold()'"));
2752c2744
< 	warning("that type is not supported on this platform - using \"nbcairo\"");
---
> 	warning(_("that type is not supported on this platform - using \"nbcairo\""));
2766c2758
< 	warning("cairo-based types are not supported on this build - using \"Xlib\"");
---
> 	warning(_("cairo-based types are not supported on this build - using \"Xlib\""));
3109c3101
< 	    errorcall(call, _("unable to start device %s"), devname);
---
> 	    errorcall(call, _("unable to start device '%s'"), devname);
3129c3121
< 	error("a forked child should not open a graphics device");
---
> 	error(_("a forked child should not open a graphics device"));
3136c3128
< 	errorcall(call, _("invalid 'width' or 'height'"));
---
> 	errorcall(call, _("invalid 'width' or 'height' arguments"));
3143c3135
< 	error(_("invalid colortype passed to X11 driver"));
---
> 	error(_("invalid 'colortype' argument passed to X11 driver"));
3156,3157c3148
< 	warningcall(call,
< 		    _("unknown X11 color/colour model -- using monochrome"));
---
> 	warningcall(call, _("unknown X11 color/colour model -- using monochrome"));
3249c3240
<     if (!xd->cs || !xd->useCairo) error(_("not an open X11cairo device"));
---
>     if (!xd->cs || !xd->useCairo) error(_("no open 'X11cairo' device"));
3253c3244
< 	    error("cairo error '%s'", cairo_status_to_string(res));
---
> 	    error(_("cairo error '%s'"), cairo_status_to_string(res));
3275c3266
<     error(_("savePlot() is not supported on this build"));
---
>     error(_("'savePlot()' function is not supported on this build"));
3324c3315
<       error("X11 clipboard selection is not supported on this system");
---
>       error(_("X11 clipboard selection is not supported on this system"));
3400c3391
< 	error(_("cannot allocate memory for X11Routines structure"));
---
> 	error(_("cannot allocate memory for 'X11Routines' structure"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/modules/X11/rbitmap.c R/src/modules/X11/rbitmap.c
44c44
< 
---
> #include <Localization.h>
300c300
<     warning("No png support in this version of R");
---
>     warning(_("no png support in this version of R"));
452c452
<     warning("No jpeg support in this version of R");
---
>     warning(_("no jpeg support in this version of R"));
486c486
< 	warning("unable to open TIFF file '%s'", outfile);
---
> 	warning(_("unable to open TIFF file '%s'"), outfile);
549c549
<     warning("No TIFF support in this version of R");
---
>     warning(_("no TIFF support in this version of R"));
560c560
< #define BMPERROR {error("Problems writing to 'bmp' file");return 0;}
---
> #define BMPERROR {error(_("Problems writing to 'bmp' file"));return 0;}
573c573
< 	error("Problems writing to 'bmp' file");
---
> 	error(_("Problems writing to 'bmp' file"));
582c582
< 	error("Problems writing to 'bmp' file");
---
> 	error(_("Problems writing to 'bmp' file"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/modules/internet/Rhttpd.c R/src/modules/internet/Rhttpd.c
45a46,47
> #include <Localization.h>
> 
1180c1182
< 	Rf_error("unable to create socket");
---
> 	Rf_error(_("unable to create socket"));
1198c1200
< 	    Rf_error("unable to bind socket to TCP port %d", port);
---
> 	    Rf_error(_("unable to bind socket to TCP port %d"), port);
1204c1206
< 	Rf_error("cannot listen to TCP port %d", port);
---
> 	Rf_error(_("cannot listen to TCP port %d"), port);
1252c1254
< 	Rf_error("invalid bind address specification");
---
> 	Rf_error(_("invalid bind address specification"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/modules/internet/Rsock.c R/src/modules/internet/Rsock.c
311c311
< 	} else {  /* always poll occationally--not really necessary */
---
> 	} else {  /* always poll occasionally--not really necessary */
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/modules/internet/internet.c R/src/modules/internet/internet.c
26a27,28
> #include <Localization.h>
> 
67c69
<     UrlScheme type = ((Rurlconn)(con->private))->type;
---
>     UrlScheme type = ((Rurlconn)(con->conprivate))->type;
70c72
< 	REprintf("can only open URLs for reading");
---
> 	REprintf(_("can only open URLs for reading"));
102c104
< 	((Rurlconn)(con->private))->ctxt = ctxt;
---
> 	((Rurlconn)(con->conprivate))->ctxt = ctxt;
113c115
< 	((Rurlconn)(con->private))->ctxt = ctxt;
---
> 	((Rurlconn)(con->conprivate))->ctxt = ctxt;
132c134
<     UrlScheme type = ((Rurlconn)(con->private))->type;
---
>     UrlScheme type = ((Rurlconn)(con->conprivate))->type;
136c138
< 	in_R_HTTPClose(((Rurlconn)(con->private))->ctxt);
---
> 	in_R_HTTPClose(((Rurlconn)(con->conprivate))->ctxt);
139c141
< 	in_R_FTPClose(((Rurlconn)(con->private))->ctxt);
---
> 	in_R_FTPClose(((Rurlconn)(con->conprivate))->ctxt);
147,148c149,150
<     UrlScheme type = ((Rurlconn)(con->private))->type;
<     void * ctxt = ((Rurlconn)(con->private))->ctxt;
---
>     UrlScheme type = ((Rurlconn)(con->conprivate))->type;
>     void * ctxt = ((Rurlconn)(con->conprivate))->ctxt;
167,168c169,170
<     UrlScheme type = ((Rurlconn)(con->private))->type;
<     void * ctxt = ((Rurlconn)(con->private))->ctxt;
---
>     UrlScheme type = ((Rurlconn)(con->conprivate))->type;
>     void * ctxt = ((Rurlconn)(con->conprivate))->ctxt;
190,191c192,193
<     new->class = (char *) malloc(strlen("url") + 1);
<     if(!new->class) {
---
>     new->conclass = (char *) malloc(strlen("url") + 1);
>     if(!new->conclass) {
195c197
<     strcpy(new->class, "url");
---
>     strcpy(new->conclass, "url");
198c200
< 	free(new->class); free(new);
---
> 	free(new->conclass); free(new);
208,210c210,212
<     new->private = (void *) malloc(sizeof(struct urlconn));
<     if(!new->private) {
< 	free(new->description); free(new->class); free(new);
---
>     new->conprivate = (void *) malloc(sizeof(struct urlconn));
>     if(!new->conprivate) {
> 	free(new->description); free(new->conclass); free(new);
287c289
< 	warning(_("only first element of 'url' argument used"));
---
> 	warning(_("only first element of '%s' argument will be used"), "url");
293c295
< 	warning(_("only first element of 'destfile' argument used"));
---
> 	warning(_("only first element of '%s' argument will be used"), "destfile");
318,319c320
< 	pbar.wprog = newwindow(_("Download progress"), rect(0, 0, 540, 100),
< 			       Titlebar | Centered);
---
> 	pbar.wprog = newwindow(_("Download progress"), rect(0, 0, 540, 100), Titlebar | Centered);
340,341c341
< 	    error(_("cannot open URL '%s', reason '%s'"),
< 		  url, strerror(errno));
---
> 	    error(_("cannot open URL '%s', reason '%s'"), url, strerror(errno));
347,348c347
< 	    error(_("cannot open destfile '%s', reason '%s'"),
< 		  file, strerror(errno));
---
> 	    error(_("cannot open destfile '%s', reason '%s'"), file, strerror(errno));
376,377c375
< 	    error(_("cannot open destfile '%s', reason '%s'"),
< 		  file, strerror(errno));
---
> 	    error(_("cannot open destfile '%s', reason '%s'"), file, strerror(errno));
381c379
< 	if(!quiet) REprintf(_("trying URL '%s'\n"), url);
---
> 	if(!quiet) REprintf(_("Trying URL '%s'\n"), url);
388c386
< 	    if(!quiet) REprintf(_("opened URL\n"), url);
---
> 	    if(!quiet) REprintf(_("Opened URL\n"), url);
403c401
< 		settext(pbar.wprog, "Download progress");
---
> 		settext(pbar.wprog, _("Download progress"));
427c425
< 			    snprintf(pbuf, 30, "%d%% downloaded", pc);
---
> 			    snprintf(pbuf, 30, _("%d%% downloaded"), pc);
446,447c444
< 		    REprintf("downloaded %0.1f MB\n\n",
< 			     (double)nbytes/1024/1024, url);
---
> 		    REprintf(_("Downloaded %0.1f MB"), (double)nbytes/1024/1024, url);
449c446
< 		    REprintf("downloaded %d KB\n\n", (int) nbytes/1024, url);
---
> 		    REprintf(_("Downloaded %d KB"), (int) nbytes/1024, url);
451c448,449
< 		    REprintf("downloaded %d bytes\n\n", (int) nbytes, url);
---
> 		    REprintf(n_("Downloaded %d byte", "Downloaded %d bytes", (int) nbytes), (int) nbytes, url);
> 		REprintf("\n\n");
461,462c459
< 		warning(_("downloaded length %0.f != reported length %0.f"),
< 			(double)nbytes, (double)total);
---
> 		warning(_("downloaded length %0.f != reported length %0.f"), (double)nbytes, (double)total);
488c485
< 	if(!quiet) REprintf(_("trying URL '%s'\n"), url);
---
> 	if(!quiet) REprintf(_("Trying URL '%s'\n"), url);
495c492
< 	    if(!quiet) REprintf(_("opened URL\n"), url);
---
> 	    if(!quiet) REprintf(_("Opened URL\n"), url);
510c507
< 		settext(pbar.wprog, "Download progress");
---
> 		settext(pbar.wprog, _("Download progress"));
537c534
< 			    snprintf(pbuf, 30, "%d%% downloaded", pc);
---
> 			    snprintf(pbuf, 30, _("%d%% downloaded"), pc);
556c553
< 		    REprintf("downloaded %0.1f MB\n\n",
---
> 		    REprintf(_("Downloaded %0.1f MB"),
559c556
< 		    REprintf("downloaded %d KB\n\n", (int) nbytes/1024, url);
---
> 		    REprintf(_("Downloaded %d KB"), (int) nbytes/1024, url);
561c558,559
< 		    REprintf("downloaded %d bytes\n\n", (int) nbytes, url);
---
> 		    REprintf(n_("Downloaded %d byte", "Downloaded %d bytes", (int) nbytes), (int) nbytes, url);
> 			REprintf("\n\n");
612d609
< 		REprintf("Content type '%s'", type ? type : "unknown");
615,616c612,614
< 		    REprintf(" length %0.0f bytes (%0.1f MB)\n", (double)len,
< 			len/1024.0/1024.0);
---
> 		    REprintf(n_("Content type '%s' length %0.0f byte (%0.1f MB)\n",
> 				      "Content type '%s' length %0.0f bytes (%0.1f MB)\n",
> 				      len), type ? type : "unknown", (double)len, len/1024.0/1024.0);
618,619c616,618
< 		    REprintf(" length %d bytes (%d KB)\n", 
< 			     (int)len, (int)(len/1024));
---
> 		    REprintf(n_("Content type '%s' length %d byte (%d KB)\n",
> 				      "Content type '%s' length %d bytes (%d KB)\n",
> 				      (int)len), type ? type : "unknown", (int)len, (int)(len/1024));
621,622c620,623
< 		    REprintf(" length %d bytes\n", (int)len);
< 		else REprintf(" length unknown\n", len);
---
> 		    REprintf(n_("Content type '%s' length %d byte\n",
> 				      "Content type '%s' length %d bytes\n",
> 				      (int)len), type ? type : "unknown", (int)len);
> 		else REprintf(_("Content type '%s' length unknown\n"), type ? type : "unknown", len);
665c666
< 	    REprintf("ftp data connection made, file length %ld bytes\n", len);
---
> 	    REprintf(_("ftp data connection made, file length %ld bytes\n"), len);
667c668
< 	    REprintf("ftp data connection made, file length unknown\n");
---
> 	    REprintf(_("ftp data connection made, file length unknown\n"));
856,857c857
< 	    REprintf("Content type '%s' length %0.0f bytes (%0.1f MB)\n",
< 		     buf, (double) status, status/1024.0/1024.0);
---
> 	    REprintf(n_("Content type '%s' length %0.0f byte (%0.1f MB)\n", "Content type '%s' length %0.0f bytes (%0.1f MB)\n", status), buf, (double) status, status/1024.0/1024.0);
859,860c859
< 	    REprintf("Content type '%s' length %d bytes (%d KB)\n",
< 		     buf, (int) status, (int) (status/1024));
---
> 	    REprintf(n_("Content type '%s' length %d byte (%d KB)\n", "Content type '%s' length %d bytes (%d KB)\n", (int)status), buf, (int) status, (int) (status/1024));
862c861
< 	    REprintf("Content type '%s' length %d bytes\n", buf, (int) status);
---
> 	    REprintf(n_("Content type '%s' length %d byte\n", "Content type '%s' length %d bytes\n", (int)status), buf, (int) status);
929c928
< 	REprintf("using Asynchronous WinInet calls, timeout %d secs\n",
---
> 	REprintf(n_("using Asynchronous WinInet calls, timeout %d sec\n", "using Asynchronous WinInet calls, timeout %d secs\n", timeout),
957c956
< 	REprintf("using Synchronous WinInet calls\n");
---
> 	REprintf(_("using Synchronous WinInet calls\n"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/modules/internet/nanoftp.c R/src/modules/internet/nanoftp.c
37,42c37,38
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) gettext (String)
< #else
< #define _(String) (String)
< #endif
---
> #include <Localization.h>
> 
453c449
< 	RxmlMessage(1, "error allocating FTP context");
---
> 	RxmlMessage(1, _("error allocating FTP context"));
573c569
< 	RxmlMessage(0, "RxmlNanoFTPGetMore : buffer full %d", ctxt->controlBufUsed);
---
> 	RxmlMessage(0, _("RxmlNanoFTPGetMore : buffer full %d"), ctxt->controlBufUsed);
582c578
< 	RxmlMessage(1, "recv failed");
---
> 	RxmlMessage(1, _("recv failed"));
587c583
<     RxmlMessage(0, "RxmlNanoFTPGetMore : read %d [%d - %d]", len,
---
>     RxmlMessage(0, _("RxmlNanoFTPGetMore : read %d [%d - %d]"), len,
673c669
<     RxmlMessage(1, "Got %d", res);
---
>     RxmlMessage(1, _("Got %d"), res);
748c744
< 	RxmlMessage(1, "send failed");
---
> 	RxmlMessage(1, _("send failed"));
774c770
< 	RxmlMessage(1, "send failed");
---
> 	RxmlMessage(1, _("send failed"));
928c924
< 		RxmlMessage(1, "send failed");
---
> 		RxmlMessage(1, _("send failed"));
948c944
< 			RxmlMessage(1, "send failed");
---
> 			RxmlMessage(1, _("send failed"));
987c983
< 		    RxmlMessage(1, "send failed");
---
> 		    RxmlMessage(1, _("send failed"));
1016c1012
< 		    RxmlMessage(1, "send failed");
---
> 		    RxmlMessage(1, _("send failed"));
1037c1033
< 		    RxmlMessage(1, "send failed");
---
> 		    RxmlMessage(1, _("send failed"));
1099c1095
< 	    RxmlMessage(1, "FTP server asking for ACCNT on anonymous");
---
> 	    RxmlMessage(1, _("FTP server asking for ACCNT on anonymous"));
1153c1149
< 	    RxmlMessage(1, "send failed");
---
> 	    RxmlMessage(1, _("send failed"));
1174c1170
< 	    RxmlMessage(1, "Invalid answer to PASV");
---
> 	    RxmlMessage(1, _("Invalid answer to PASV"));
1217c1213
< 	    RxmlMessage(1, "send failed");
---
> 	    RxmlMessage(1, _("send failed"));
1264c1260
< 	RxmlMessage(1, "send failed");
---
> 	RxmlMessage(1, _("send failed"));
1284c1280
< 	RxmlMessage(1, "send failed");
---
> 	RxmlMessage(1, _("send failed"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/modules/internet/nanohttp.c R/src/modules/internet/nanohttp.c
45,55c45,46
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #ifdef Win32
< #define _(String) libintl_gettext (String)
< #undef gettext /* needed for graphapp */
< #else
< #define _(String) gettext (String)
< #endif
< #else /* not NLS */
< #define _(String) (String)
< #endif
---
> #include <Localization.h>
> 
1414c1405,1407
< 	RxmlMessage(0, "ERROR: overflowed buffer by %d bytes\n", -blen);
---
> 	RxmlMessage(0, n_("Error: overflowed buffer by %d byte\n",
> 				"Error: overflowed buffer by %d bytes\n",
> 				-blen), -blen);
1439,1440c1432
< 	REprintf("%s\n%s\n", "Proxy authentication failed:",
< 		"\tplease re-enter the credentials or hit Cancel");
---
> 	REprintf("%s\n%s\n", _("Proxy authentication failed:\tplease re-enter the credentials or hit Cancel"));
1478c1470
< 	RxmlMessage(1, "Code %d, content-type '%s'",
---
> 	RxmlMessage(1, _("Code %d, content-type '%s'"),
1481c1473
< 	RxmlMessage(1, "Code %d, no content-type",
---
> 	RxmlMessage(1, _("Code %d, no content-type"),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/modules/internet/sockconn.c R/src/modules/internet/sockconn.c
31a32,33
> #include <Localization.h>
> 
46c48
<     Rsockconn this = (Rsockconn)con->private;
---
>     Rsockconn thiscon = (Rsockconn)con->conprivate;
48c50
<     int timeout = this->timeout;
---
>     int timeout = thiscon->timeout;
52c54
<     this->pend = this->pstart = this->inbuf;
---
>     thiscon->pend = thiscon->pstart = thiscon->inbuf;
54,55c56,57
<     if(this->server) {
< 	sock1 = R_SockOpen(this->port);
---
>     if(thiscon->server) {
> 	sock1 = R_SockOpen(thiscon->port);
57c59
< 	    warning("port %d cannot be opened", this->port);
---
> 	    warning(_("port %d cannot be opened"), thiscon->port);
72c74
< 	    warning("problem in listening on this socket");
---
> 	    warning(_("problem in listening on this socket"));
78c80
< 	sprintf(con->description, "<-%s:%d", buf, this->port);
---
> 	sprintf(con->description, "<-%s:%d", buf, thiscon->port);
81c83
< 	sock = R_SockConnect(this->port, con->description, timeout);
---
> 	sock = R_SockConnect(thiscon->port, con->description, timeout);
83c85
< 	    warning("%s:%d cannot be opened", con->description, this->port);
---
> 	    warning(_("%s:%d cannot be opened"), con->description, thiscon->port);
86c88
< 	sprintf(buf, "->%s:%d", con->description, this->port);
---
> 	sprintf(buf, "->%s:%d", con->description, thiscon->port);
89c91
<     this->fd = sock;
---
>     thiscon->fd = sock;
102,103c104,105
<     Rsockconn this = (Rsockconn)con->private;
<     R_SockClose(this->fd);
---
>     Rsockconn thiscon = (Rsockconn)con->conprivate;
>     R_SockClose(thiscon->fd);
109c111
<     Rsockconn this = (Rsockconn)con->private;
---
>     Rsockconn thiscon = (Rsockconn)con->conprivate;
116,117c118,119
< 	if (size > 0 && this->pstart == this->pend) {
< 	    this->pstart = this->pend = this->inbuf;
---
> 	if (size > 0 && thiscon->pstart == thiscon->pend) {
> 	    thiscon->pstart = thiscon->pend = thiscon->inbuf;
119,120c121,122
< 		res = R_SockRead(this->fd, this->inbuf, 4096, 
< 				 con->blocking, this->timeout);
---
> 		res = R_SockRead(thiscon->fd, thiscon->inbuf, 4096,
> 				 con->blocking, thiscon->timeout);
129c131
< 	    else this->pend = this->inbuf + res;
---
> 	    else thiscon->pend = thiscon->inbuf + res;
133c135
< 	if (this->pstart + size <= this->pend)
---
> 	if (thiscon->pstart + size <= thiscon->pend)
136,137c138,139
< 	    n = this->pend - this->pstart;
< 	memcpy(ptr, this->pstart, n);
---
> 	    n = thiscon->pend - thiscon->pstart;
> 	memcpy(ptr, thiscon->pstart, n);
139c141
< 	this->pstart += n;
---
> 	thiscon->pstart += n;
166c168
<     Rsockconn this = (Rsockconn)con->private;
---
>     Rsockconn thiscon = (Rsockconn)con->conprivate;
168c170
<     return R_SockWrite(this->fd, ptr, (int)(size * nitems), this->timeout)/size;
---
>     return R_SockWrite(thiscon->fd, ptr, (int)(size * nitems), thiscon->timeout)/size;
174c176
<     Rconnection new;
---
>     Rconnection newcon;
176,180c178,182
<     new = (Rconnection) malloc(sizeof(struct Rconn));
<     if(!new) error(_("allocation of socket connection failed"));
<     new->class = (char *) malloc(strlen("sockconn") + 1);
<     if(!new->class) {
< 	free(new);
---
>     newcon = (Rconnection) malloc(sizeof(struct Rconn));
>     if(!newcon) error(_("allocation of socket connection failed"));
>     newcon->conclass = (char *) malloc(strlen("sockconn") + 1);
>     if(!newcon->conclass) {
> 	free(newcon);
183,186c185,188
<     strcpy(new->class, "sockconn");
<     new->description = (char *) malloc(strlen(host) + 10);
<     if(!new->description) {
< 	free(new->class); free(new);
---
>     strcpy(newcon->conclass, "sockconn");
>     newcon->description = (char *) malloc(strlen(host) + 10);
>     if(!newcon->description) {
> 	free(newcon->conclass); free(newcon);
189,199c191,201
<     init_con(new, host, CE_NATIVE, mode);
<     new->open = &sock_open;
<     new->close = &sock_close;
<     new->vfprintf = &dummy_vfprintf;
<     new->fgetc_internal = &sock_fgetc_internal;
<     new->fgetc = &dummy_fgetc;
<     new->read = &sock_read;
<     new->write = &sock_write;
<     new->private = (void *) malloc(sizeof(struct sockconn));
<     if(!new->private) {
< 	free(new->description); free(new->class); free(new);
---
>     init_con(newcon, host, CE_NATIVE, mode);
>     newcon->open = &sock_open;
>     newcon->close = &sock_close;
>     newcon->vfprintf = &dummy_vfprintf;
>     newcon->fgetc_internal = &sock_fgetc_internal;
>     newcon->fgetc = &dummy_fgetc;
>     newcon->read = &sock_read;
>     newcon->write = &sock_write;
>     newcon->conprivate = (void *) malloc(sizeof(struct sockconn));
>     if(!newcon->conprivate) {
> 	free(newcon->description); free(newcon->conclass); free(newcon);
202,205c204,207
<     ((Rsockconn)new->private)-> port = port;
<     ((Rsockconn)new->private)-> server = server;
<     ((Rsockconn)new->private)-> timeout = timeout;
<     return new;
---
>     ((Rsockconn)newcon->conprivate)-> port = port;
>     ((Rsockconn)newcon->conprivate)-> server = server;
>     ((Rsockconn)newcon->conprivate)-> timeout = timeout;
>     return newcon;
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/modules/lapack/Lapack.c R/src/modules/lapack/Lapack.c
26a27
> #include <Localization.h>
84c85
< 	error("'jobu' must be a character string");
---
> 	error(_("'%s' argument must be a character string"), "jobu");
100c101
<     if (TYPEOF(dims) != INTSXP) error("non-integer dims");
---
>     if (TYPEOF(dims) != INTSXP) error(_("non-integer dimensions"));
103c104
<     if (TYPEOF(dims) != INTSXP) error("non-integer dims");
---
>     if (TYPEOF(dims) != INTSXP) error(_("non-integer dimensions"));
116c117
< 	error(_("error code %d from Lapack routine '%s'"), info, "dgesdd");
---
> 	error(_("error code %d from Lapack routine '%s'"), info, "dgesdd()");
123c124
< 	error(_("error code %d from Lapack routine '%s'"), info, "dgesdd");
---
> 	error(_("error code %d from Lapack routine '%s'"), info, "dgesdd()");
182c183
< 	error(_("error code %d from Lapack routine '%s'"), info, "dsyevr");
---
> 	error(_("error code %d from Lapack routine '%s'"), info, "dsyevr()");
193c194
< 	error(_("error code %d from Lapack routine '%s'"), info, "dsyevr");
---
> 	error(_("error code %d from Lapack routine '%s'"), info, "dsyevr()");
275c276
< 	error(_("error code %d from Lapack routine '%s'"), info, "dgeev");
---
> 	error(_("error code %d from Lapack routine '%s'"), info, "dgeev()");
281c282
< 	error(_("error code %d from Lapack routine '%s'"), info, "dgeev");
---
> 	error(_("error code %d from Lapack routine '%s'"), info, "dgeev()");
325c326
<     if (!isMatrix(A)) error(_("'A' must be a numeric matrix"));
---
>     if (!isMatrix(A)) error(_("'%s' must be a numeric matrix"), "A");
327c328
< 	error(_("'type' must be a character string"));
---
> 	error(_("'%s' argument must be a character string"), "type");
355c356
<     if (!isMatrix(A)) error(_("'A' must be a numeric matrix"));
---
>     if (!isMatrix(A)) error(_("'%s' must be a numeric matrix"), "A");
357c358
< 	error(_("'norm' must be a character string"));
---
> 	error(_("'%s' argument must be a character string"), "norm");
377c378
< 	    error(_("error [%d] from Lapack 'dgetrf()'"), info);
---
> 	    error(_("error code %d from Lapack routine '%s'"), info, "dgetrf()");
394c395
<     if (info) error(_("error [%d] from Lapack 'dgecon()'"), info);
---
>     if (info) error(_("error code %d from Lapack routine '%s'"), info, "dgecon()");
404,405c405,406
<     if (!isMatrix(A)) error(_("'A' must be a numeric matrix"));
<     if (!isString(norm)) error(_("'norm' must be a character string"));
---
>     if (!isMatrix(A)) error(_("'%s' must be a numeric matrix"), "A");
>     if (!isString(norm)) error(_("'%s' argument must be a character string"), "norm");
414c415
< 	error(_("'A' must be a *square* matrix"));
---
> 	error(_("'%s' must be a square matrix"), "A");
428c429
<     if (info) error(_("error [%d] from Lapack 'dtrcon()'"), info);
---
>     if (info) error(_("error code %d from Lapack routine '%s'"), info, "dtrcon()");
441c442
<     if (!isString(norm)) error(_("'norm' must be a character string"));
---
>     if (!isString(norm)) error(_("'%s' argument must be a character string"), "norm");
443c444
< 	error(_("'A' must be a complex matrix"));
---
> 	error(_("'%s' must be a complex matrix"), "A");
446c447
<     if(n != dims[1]) error(_("'A' must be a *square* matrix"));
---
>     if(n != dims[1]) error(_("'%s' must be a square matrix"), "A");
472c473
< 	error(_("error [%d] from Lapack 'zgetrf()'"), info);
---
> 	error(_("error code %d from Lapack routine '%s'"), info, "zgetrf()");
480c481
<     if (info) error(_("error [%d] from Lapack 'zgecon()'"), info);
---
>     if (info) error(_("error code %d from Lapack routine '%s'"), info, "zgecon()");
498c499
< 	error(_("'norm' must be a character string"));
---
> 	error(_("'%s' argument must be a character string"), "norm");
500c501
< 	error(_("'A' must be a complex matrix"));
---
> 	error(_("'%s' must be a complex matrix"), "A");
504c505
< 	error(_("'A' must be a *square* matrix"));
---
> 	error(_("'%s' must be a square matrix"), "A");
516c517
<     if (info) error(_("error [%d] from Lapack 'ztrcon()'"), info);
---
>     if (info) error(_("error code %d from Lapack routine '%s'"), info, "ztrcon()");
532c533
<     if (!isMatrix(A)) error(_("'a' must be a complex matrix"));
---
>     if (!isMatrix(A)) error(_("'%s' must be a complex matrix"), "A");
535c536
<     if(n == 0) error(_("'a' is 0-diml"));
---
>     if(n == 0) error(_("matrix 'A' is zero dimensional"));
537c538
<     if(n2 != n) error(_("'a' (%d x %d) must be square"), n, n2);
---
>     if(n2 != n) error(_("'A' (%d x %d) must be a square matrix"), n, n2);
546c547
< 	    error(_("'b' (%d x %d) must be compatible with 'a' (%d x %d)"),
---
> 	    error(_("'B' (%d x %d) must be compatible with 'A' (%d x %d)"),
560c561
< 	    error(_("'b' (%d x %d) must be compatible with 'a' (%d x %d)"),
---
> 	    error(_("'B' (%d x %d) must be compatible with 'A' (%d x %d)"),
581,582c582
< 	error(_("argument %d of Lapack routine %s had invalid value"),
< 	      -info, "zgesv");
---
> 	error(_("argument %d of Lapack routine '%s' had invalid value"), -info, "zgesv()");
602c602
< 	error(_("'a' must be a complex matrix"));
---
> 	error(_("'%s' must be a complex matrix"), "A");
617c617
< 	error(_("error code %d from Lapack routine '%s'"), info, "zgeqp3");
---
> 	error(_("error code %d from Lapack routine '%s'"), info, "zgeqp3()");
623c623
< 	error(_("error code %d from Lapack routine '%s'"), info, "zgeqp3");
---
> 	error(_("error code %d from Lapack routine '%s'"), info, "zgeqp3()");
662c662
<     if (!isMatrix(Bin)) error(_("'b' must be a complex matrix"));
---
>     if (!isMatrix(Bin)) error(_("'%s' must be a complex matrix"), "b");
677c677
< 	error(_("error code %d from Lapack routine '%s'"), info, "zunmqr");
---
> 	error(_("error code %d from Lapack routine '%s'"), info, "zunmqr()");
684c684
< 	error(_("error code %d from Lapack routine '%s'"), info, "zunmqr");
---
> 	error(_("error code %d from Lapack routine '%s'"), info, "zunmqr()");
688c688
< 	error(_("error code %d from Lapack routine '%s'"), info, "ztrtrs");
---
> 	error(_("error code %d from Lapack routine '%s'"), info, "ztrtrs()");
707c707
< 	error(_("'b' must be a complex matrix"));
---
> 	error(_("'%s' must be a complex matrix"), "b");
723c723
< 	error(_("error code %d from Lapack routine '%s'"), info, "zunmqr");
---
> 	error(_("error code %d from Lapack routine '%s'"), info, "zunmqr()");
730c730
< 	error(_("error code %d from Lapack routine '%s'"), info, "zunmqr");
---
> 	error(_("error code %d from Lapack routine '%s'"), info, "zunmqr()");
743c743
< 	error(_("'jobu' must be a character string"));
---
> 	error(_("'%s' argument must be a character string"), "jobu");
770c770
<     if (TYPEOF(dims) != INTSXP) error("non-integer dims");
---
>     if (TYPEOF(dims) != INTSXP) error(_("non-integer dimensions"));
773c773
<     if (TYPEOF(dims) != INTSXP) error("non-integer dims");
---
>     if (TYPEOF(dims) != INTSXP) error(_("non-integer dimensions"));
779c779
< 	error(_("error code %d from Lapack routine '%s'"), info, "zgesdd");
---
> 	error(_("error code %d from Lapack routine '%s'"), info, "zgesdd()");
786c786
< 	error(_("error code %d from Lapack routine '%s'"), info, "zgesdd");
---
> 	error(_("error code %d from Lapack routine '%s'"), info, "zgesdd()");
834c834
< 	error(_("error code %d from Lapack routine '%s'"), info, "zheev");
---
> 	error(_("error code %d from Lapack routine '%s'"), info, "zheev()");
840c840
< 	error(_("error code %d from Lapack routine '%s'"), info, "zheev");
---
> 	error(_("error code %d from Lapack routine '%s'"), info, "zheev()");
894c894
< 	error(_("error code %d from Lapack routine '%s'"), info, "zgeev");
---
> 	error(_("error code %d from Lapack routine '%s'"), info, "zgeev()");
900c900
< 	error(_("error code %d from Lapack routine '%s'"), info, "zgeev");
---
> 	error(_("error code %d from Lapack routine '%s'"), info, "zgeev()");
926c926
<     if (!isMatrix(A)) error(_("'a' must be a numeric matrix"));
---
>     if (!isMatrix(A)) error(_("'%s' must be a numeric matrix"), "A");
930c930
<     if (TYPEOF(adims) != INTSXP) error("non-integer dims");
---
>     if (TYPEOF(adims) != INTSXP) error(_("non-integer dimensions"));
933,934c933,934
<     if (m != n) error(_("'a' must be a square matrix"));
<     if (m <= 0) error(_("'a' must have dims > 0"));
---
>     if (m != n) error(_("'%s' must be a square matrix"), "A");
>     if (m <= 0) error(_("'A' matrix must have dimensions > 0"));
940c940
<     if (piv != 0 && piv != 1) error("invalid '%s' value", "pivot");
---
>     if (piv != 0 && piv != 1) error(_("invalid '%s' value"), "pivot");
946,949c946,947
< 		error(_("the leading minor of order %d is not positive definite"),
< 		      info);
< 	    error(_("argument %d of Lapack routine %s had invalid value"),
< 		  -info, "dpotrf");
---
> 		error(_("the leading minor of order %d is not positive definite"), info);
> 	    error(_("argument %d of Lapack routine '%s' had invalid value"), -info, "dpotrf()");
962,963c960
< 		error(_("argument %d of Lapack routine %s had invalid value"),
< 		      -info, "dpstrf");
---
> 		error(_("argument %d of Lapack routine '%s' had invalid value"), -info, "dpstrf()");
988c985
< 	error(_("'size' argument must be a positive integer"));
---
> 	error(_("'%s' argument must be a positive integer"), "size");
998c995
< 	    if (TYPEOF(adims) != INTSXP) error("non-integer dims");
---
> 	    if (TYPEOF(adims) != INTSXP) error(_("non-integer dimensions"));
1001c998
< 	} else error(_("'a' must be a numeric matrix"));
---
> 	} else error(_("'%s' must be a numeric matrix"), "A");
1016,1019c1013,1014
< 		error(_("element (%d, %d) is zero, so the inverse cannot be computed"),
< 		      info, info);
< 	    error(_("argument %d of Lapack routine %s had invalid value"),
< 		  -info, "dpotri");
---
> 		error(_("element (%d, %d) is zero, so the inverse cannot be computed"), info, info);
> 	    error(_("argument %d of Lapack routine '%s' had invalid value"), -info, "dpotri()");
1040c1035
< 	error(_("'a' must be a numeric matrix"));
---
> 	error(_("'%s' must be a numeric matrix"), "A");
1043c1038
<     if(n == 0) error(_("'a' is 0-diml"));
---
>     if(n == 0) error(_("matrix 'A' is zero dimensional"));
1045c1040
<     if(n2 != n) error(_("'a' (%d x %d) must be square"), n, n2);
---
>     if(n2 != n) error(_("'A' (%d x %d) must be a square matrix"), n, n2);
1054,1055c1049
< 	    error(_("'b' (%d x %d) must be compatible with 'a' (%d x %d)"),
< 		  p2, p, n, n);
---
> 	    error(_("'B' (%d x %d) must be compatible with 'A' (%d x %d)"), p2, p, n, n);
1070,1071c1064
< 	    error(_("'b' (%d x %d) must be compatible with 'a' (%d x %d)"),
< 		  length(Bin), p, n, n);	
---
> 	    error(_("'B' (%d x %d) must be compatible with 'A' (%d x %d)"), length(Bin), p, n, n);	
1092,1093c1085
< 	error(_("argument %d of Lapack routine %s had invalid value"),
< 	      -info, "dgesv");
---
> 	error(_("argument %d of Lapack routine '%s' had invalid value"), -info, "dgesv()");
1095,1096c1087
< 	error(_("Lapack routine %s: system is exactly singular: U[%d,%d] = 0"),
< 	      "dgesv", info, info);
---
> 	error(_("Lapack routine %s: system is exactly singular: U[%d,%d] = 0"), "dgesv()", info, info);
1103,1104c1094
< 	    error(_("system is computationally singular: reciprocal condition number = %g"),
< 		  rcond);
---
> 	    error(_("system is computationally singular: reciprocal condition number = %g"), rcond);
1115c1105
<     if (!isMatrix(Ain)) error(_("'a' must be a numeric matrix"));
---
>     if (!isMatrix(Ain)) error(_("'%s' must be a numeric matrix"), "A");
1135c1125
< 	error(_("error code %d from Lapack routine '%s'"), info, "dgeqp3");
---
> 	error(_("error code %d from Lapack routine '%s'"), info, "dgeqp3()");
1141c1131
< 	error(_("error code %d from Lapack routine '%s'"), info, "dgeqp3");
---
> 	error(_("error code %d from Lapack routine '%s'"), info, "dgeqp3()");
1175c1165
<     if (!isMatrix(Bin)) error(_("'b' must be a numeric matrix"));
---
>     if (!isMatrix(Bin)) error(_("'%s' must be a numeric matrix"), "b");
1189c1179
< 	error(_("error code %d from Lapack routine '%s'"), info, "dormqr");
---
> 	error(_("error code %d from Lapack routine '%s'"), info, "dormqr()");
1196c1186
< 	error(_("error code %d from Lapack routine '%s'"), info, "dormqr");
---
> 	error(_("error code %d from Lapack routine '%s'"), info, "dormqr()");
1200c1190
< 	error(_("error code %d from Lapack routine '%s'"), info, "dtrtrs");
---
> 	error(_("error code %d from Lapack routine '%s'"), info, "dtrtrs()");
1213c1203
<     if (!isMatrix(Bin)) error(_("'b' must be a numeric matrix"));
---
>     if (!isMatrix(Bin)) error(_("'%s' must be a numeric matrix"), "b");
1228c1218
< 	error(_("error code %d from Lapack routine '%s'"), info, "dormqr");
---
> 	error(_("error code %d from Lapack routine '%s'"), info, "dormqr()");
1235c1225
< 	error(_("error code %d from Lapack routine '%s'"), info, "dormqr");
---
> 	error(_("error code %d from Lapack routine '%s'"), info, "dormqr()");
1246,1247c1236,1237
<     if (!isMatrix(Ain)) error(_("'a' must be a numeric matrix"));
<     if (useLog == NA_LOGICAL) error(_("argument 'logarithm' must be logical"));
---
>     if (!isMatrix(Ain)) error(_("'%s' must be a numeric matrix"), "A");
>     if (useLog == NA_LOGICAL) error(_("'%s' argument must be logical"), "logarithm");
1251c1241
<     if (Adims[1] != n) error(_("'a' must be a square matrix"));
---
>     if (Adims[1] != n) error(_("'%s' must be a square matrix"), "A");
1255c1245
< 	error(_("error code %d from Lapack routine '%s'"), info, "dgetrf");
---
> 	error(_("error code %d from Lapack routine '%s'"), info, "dgetrf()");
1257c1247
< 	/*warning("Lapack dgetrf(): singular matrix: U[%d,%d]=0", info,info);*/
---
> 	/*warning(_("Lapack dgetrf(): singular matrix: U[%d,%d]=0"), info,info);*/
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/nmath/bessel_i.c R/src/nmath/bessel_i.c
33d32
< #define min0(x, y) (((x) <= (y)) ? (x) : (y))
52c51
< 	ML_ERROR(ME_RANGE, "bessel_i");
---
> 	ML_ERROR(ME_RANGE, "bessel_i()");
77,78c76
< 	    MATHLIB_WARNING4(_("bessel_i(%g): ncalc (=%ld) != nb (=%ld); alpha=%g. Arg. out of range?\n"),
< 			     x, ncalc, nb, alpha);
---
> 	    MATHLIB_WARNING4(_("bessel_i(%g): ncalc (=%ld) != nb (=%ld); alpha=%g. Arg. out of range?"), x, ncalc, nb, alpha);
80,81c78
< 	    MATHLIB_WARNING2(_("bessel_i(%g,nu=%g): precision lost in result\n"),
< 			     x, alpha+(double)nb-1);
---
> 	    MATHLIB_WARNING2(_("bessel_i(%g,nu=%g): precision lost in result"), x, alpha+(double)nb-1);
104c101
< 	ML_ERROR(ME_RANGE, "bessel_i");
---
> 	ML_ERROR(ME_RANGE, "bessel_i()");
122,123c119
< 	    MATHLIB_WARNING4(_("bessel_i(%g): ncalc (=%ld) != nb (=%ld); alpha=%g. Arg. out of range?\n"),
< 			     x, ncalc, nb, alpha);
---
> 	    MATHLIB_WARNING4(_("bessel_i(%g): ncalc (=%ld) != nb (=%ld); alpha=%g. Arg. out of range?"), x, ncalc, nb, alpha);
125,126c121
< 	    MATHLIB_WARNING2(_("bessel_i(%g,nu=%g): precision lost in result\n"),
< 			     x, alpha+(double)nb-1);
---
> 	    MATHLIB_WARNING2(_("bessel_i(%g,nu=%g): precision lost in result"), x, alpha+(double)nb-1);
321c316
< 			nend = min0(*nb,n);
---
> 			nend = min(*nb,n);
531c526
< 	*ncalc = min0(*nb,0) - 1;
---
> 	*ncalc = min(*nb,0) - 1;
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/nmath/bessel_j.c R/src/nmath/bessel_j.c
34d33
< #define min0(x, y) (((x) <= (y)) ? (x) : (y))
52c51
< 	ML_ERROR(ME_RANGE, "bessel_j");
---
> 	ML_ERROR(ME_RANGE, "bessel_j()");
75,76c74
< 	MATHLIB_WARNING4(_("bessel_j(%g): ncalc (=%ld) != nb (=%ld); alpha=%g. Arg. out of range?\n"),
< 			 x, ncalc, nb, alpha);
---
> 	MATHLIB_WARNING4(_("bessel_j(%g): ncalc (=%ld) != nb (=%ld); alpha=%g. Arg. out of range?"), x, ncalc, nb, alpha);
78,79c76
< 	MATHLIB_WARNING2(_("bessel_j(%g,nu=%g): precision lost in result\n"),
< 			 x, alpha+(double)nb-1);
---
> 	MATHLIB_WARNING2(_("bessel_j(%g,nu=%g): precision lost in result"), x, alpha+(double)nb-1);
102c99
< 	ML_ERROR(ME_RANGE, "bessel_j");
---
> 	ML_ERROR(ME_RANGE, "bessel_j()");
118,119c115
< 	MATHLIB_WARNING4(_("bessel_j(%g): ncalc (=%ld) != nb (=%ld); alpha=%g. Arg. out of range?\n"),
< 			 x, ncalc, nb, alpha);
---
> 	MATHLIB_WARNING4(_("bessel_j(%g): ncalc (=%ld) != nb (=%ld); alpha=%g. Arg. out of range?"), x, ncalc, nb, alpha);
121,122c117
< 	MATHLIB_WARNING2(_("bessel_j(%g,nu=%g): precision lost in result\n"),
< 			 x, alpha+(double)nb-1);
---
> 	MATHLIB_WARNING2(_("bessel_j(%g,nu=%g): precision lost in result"), x, alpha+(double)nb-1);
210c205
<     const static double pi2 = .636619772367581343075535;
---
>     const static double pi2 = M_2_PI; //.636619772367581343075535;
212c207
<     const static double twopi2 =  .001935307179586476925286767;
---
>     const static double twopi2 = M_2PI - twopi1; //.001935307179586476925286767;
245c240
< 	    ML_ERROR(ME_RANGE, "J_bessel");
---
> 	    ML_ERROR(ME_RANGE, "J_bessel()");
413c408
< 			nend = min0(*nb,n);
---
> 			nend = min(*nb,n);
575c570
< 	*ncalc = min0(*nb,0) - 1;
---
> 	*ncalc = min(*nb,0) - 1;
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/nmath/bessel_k.c R/src/nmath/bessel_k.c
34,35d33
< #define min0(x, y) (((x) <= (y)) ? (x) : (y))
< #define max0(x, y) (((x) <= (y)) ? (y) : (x))
53c51
< 	ML_ERROR(ME_RANGE, "bessel_k");
---
> 	ML_ERROR(ME_RANGE, "bessel_k()");
71,72c69
< 	MATHLIB_WARNING4(_("bessel_k(%g): ncalc (=%ld) != nb (=%ld); alpha=%g. Arg. out of range?\n"),
< 			 x, ncalc, nb, alpha);
---
> 	MATHLIB_WARNING4(_("bessel_k(%g): ncalc (=%ld) != nb (=%ld); alpha=%g. Arg. out of range?"), x, ncalc, nb, alpha);
74,75c71
< 	MATHLIB_WARNING2(_("bessel_k(%g,nu=%g): precision lost in result\n"),
< 			 x, alpha+(double)nb-1);
---
> 	MATHLIB_WARNING2(_("bessel_k(%g,nu=%g): precision lost in result"), x, alpha+(double)nb-1);
97c93
< 	ML_ERROR(ME_RANGE, "bessel_k");
---
> 	ML_ERROR(ME_RANGE, "bessel_k()");
108,109c104
< 	MATHLIB_WARNING4(_("bessel_k(%g): ncalc (=%ld) != nb (=%ld); alpha=%g. Arg. out of range?\n"),
< 			 x, ncalc, nb, alpha);
---
> 	MATHLIB_WARNING4(_("bessel_k(%g): ncalc (=%ld) != nb (=%ld); alpha=%g. Arg. out of range?"), x, ncalc, nb, alpha);
111,112c106
< 	MATHLIB_WARNING2(_("bessel_k(%g,nu=%g): precision lost in result\n"),
< 			 x, alpha+(double)nb-1);
---
> 	MATHLIB_WARNING2(_("bessel_k(%g,nu=%g): precision lost in result"), x, alpha+(double)nb-1);
251c245
<     *ncalc = min0(*nb,0) - 2;
---
>     *ncalc = min(*nb,0) - 2;
255c249
< 		if(ex < 0) ML_ERROR(ME_RANGE, "K_bessel");
---
> 		if(ex < 0) ML_ERROR(ME_RANGE, "K_bessel()");
505c499
< 	m = min0((int) (wminf - nu),iend);
---
> 	m = min((int) (wminf - nu),iend);
545c539
< 	*ncalc = max0(1, mplus1 - k);
---
> 	*ncalc = max(1, mplus1 - k);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/nmath/bessel_y.c R/src/nmath/bessel_y.c
33d32
< #define min0(x, y) (((x) <= (y)) ? (x) : (y))
51c50
< 	ML_ERROR(ME_RANGE, "bessel_y");
---
> 	ML_ERROR(ME_RANGE, "bessel_y()");
109c108
< 	ML_ERROR(ME_RANGE, "bessel_y");
---
> 	ML_ERROR(ME_RANGE, "bessel_y()");
225,226c224,225
<     const static double fivpi = 15.707963267948966192;
<     const static double pim5	=   .70796326794896619231;
---
>     const static double fivpi = 5*M_PI; //15.707963267948966192;
>     const static double pim5	= fivpi - 15;//  .70796326794896619231;
259c258
< 	     * ML_ERROR(ME_RANGE, "Y_bessel"); */
---
> 	     * ML_ERROR(ME_RANGE, "Y_bessel()"); */
506c505
< 	*ncalc = min0(*nb,0) - 1;
---
> 	*ncalc = min(*nb,0) - 1;
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/nmath/beta.c R/src/nmath/beta.c
87c87
< 	    ML_ERROR(ME_UNDERFLOW, "beta");
---
> 	    ML_ERROR(ME_UNDERFLOW, "beta()");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/nmath/choose.c R/src/nmath/choose.c
78c78
<     if (fabs(k - k0) > 1e-7)
---
>     if (R_nonint(k))
121c121
<     if (fabs(k - k0) > 1e-7)
---
>     if (R_nonint(k))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/nmath/dpq.h R/src/nmath/dpq.h
124c124
< 	MATHLIB_WARNING("non-integer x = %f", x);	\
---
> 	MATHLIB_WARNING(_("non-integer x = %f"), x);	\
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/nmath/gamma.c R/src/nmath/gamma.c
127c127
< 	ML_ERROR(ME_DOMAIN, "gammafn");
---
> 	ML_ERROR(ME_DOMAIN, "gammafn()");
155c155
< 		ML_ERROR(ME_PRECISION, "gammafn");
---
> 		ML_ERROR(ME_PRECISION, "gammafn()");
160c160
< 		ML_ERROR(ME_RANGE, "gammafn");
---
> 		ML_ERROR(ME_RANGE, "gammafn()");
185c185
< 	    ML_ERROR(ME_RANGE, "gammafn");
---
> 	    ML_ERROR(ME_RANGE, "gammafn()");
190c190
< 	    ML_ERROR(ME_UNDERFLOW, "gammafn");
---
> 	    ML_ERROR(ME_UNDERFLOW, "gammafn()");
210c210
< 	    ML_ERROR(ME_PRECISION, "gammafn");
---
> 	    ML_ERROR(ME_PRECISION, "gammafn()");
215c215
< 	    ML_ERROR(ME_RANGE, "gammafn");
---
> 	    ML_ERROR(ME_RANGE, "gammafn()");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/nmath/gamma_cody.c R/src/nmath/gamma_cody.c
58c58
<     const static double sqrtpi = .9189385332046727417803297; /* == ??? */
---
>     //const static double sqrtpi = M_LN_SQRT_2PI; //.9189385332046727417803297; /* == ln(2*pi)/2 */
228c228
< 	    sum = sum / y - y + sqrtpi;
---
> 	    sum = sum / y - y + M_LN_SQRT_2PI;
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/nmath/gammalims.c R/src/nmath/gammalims.c
66c66
<     ML_ERROR(ME_NOCONV, "gammalims");
---
>     ML_ERROR(ME_NOCONV, "gammalims()");
86c86
<     ML_ERROR(ME_NOCONV, "gammalims");
---
>     ML_ERROR(ME_NOCONV, "gammalims()");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/nmath/lgamma.c R/src/nmath/lgamma.c
75c75
< 	ML_ERROR(ME_RANGE, "lgamma");
---
> 	ML_ERROR(ME_RANGE, "lgamma()");
87c87
< 	ML_ERROR(ME_RANGE, "lgamma");
---
> 	ML_ERROR(ME_RANGE, "lgamma()");
117c117
< 	ML_ERROR(ME_PRECISION, "lgamma");
---
> 	ML_ERROR(ME_PRECISION, "lgamma()");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/nmath/lgammacor.c R/src/nmath/lgammacor.c
78c78
< 	ML_ERROR(ME_UNDERFLOW, "lgammacor");
---
> 	ML_ERROR(ME_UNDERFLOW, "lgammacor()");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/nmath/log1p.c R/src/nmath/log1p.c
135c135
< 	ML_ERROR(ME_PRECISION, "log1p");
---
> 	ML_ERROR(ME_PRECISION, "log1p()");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/nmath/nmath.h R/src/nmath/nmath.h
29,33c29,30
< #ifdef HAVE_LONG_DOUBLE
< #  define LDOUBLE long double
< #else
< #  define LDOUBLE double
< #endif
---
> #include <R_ext/Ldouble.h>
> #include <R_ext/Minmax.h>
87,92c84,86
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) gettext (String)
< #else
< #define _(String) (String)
< #endif
---
> /* Localization */
> 
> #include "Localization.h"
143c137
< 	   msg = _("argument out of domain in '%s'\n");	\
---
> 	   msg = _("argument out of domain in '%s' function");	\
146c140
< 	   msg = _("value out of range in '%s'\n");	\
---
> 	   msg = _("value out of range in '%s' function");	\
149c143
< 	   msg = _("convergence failed in '%s'\n");	\
---
> 	   msg = _("convergence failed in '%s' function");	\
152c146
< 	   msg = _("full precision may not have been achieved in '%s'\n"); \
---
> 	   msg = _("full precision may not have been achieved in '%s' function"); \
155c149
< 	   msg = _("underflow occurred in '%s'\n");	\
---
> 	   msg = _("underflow occurred in '%s' function");	\
166,170c160
< #ifdef HAVE_VISIBILITY_ATTRIBUTE
< # define attribute_hidden __attribute__ ((visibility ("hidden")))
< #else
< # define attribute_hidden
< #endif
---
> #include <R_ext/Visibility.h>
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/nmath/pbinom.c R/src/nmath/pbinom.c
37c37
< 	MATHLIB_WARNING("non-integer n = %f", n);
---
> 	MATHLIB_WARNING(_("non-integer n = %f"), n);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/nmath/pnbeta.c R/src/nmath/pnbeta.c
78c78
< 	ML_ERROR(ME_PRECISION, "pnbeta");
---
> 	ML_ERROR(ME_PRECISION, "pnbeta()");
80c80
< 	ML_ERROR(ME_NOCONV, "pnbeta");
---
> 	ML_ERROR(ME_NOCONV, "pnbeta()");
101c101
< 	if (ans > 1. - 1e-10) ML_ERROR(ME_PRECISION, "pnbeta");
---
> 	if (ans > 1. - 1e-10) ML_ERROR(ME_PRECISION, "pnbeta()");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/nmath/pnchisq.c R/src/nmath/pnchisq.c
64c64
< 	    if(ans < (log_p ? (-10. * M_LN10) : 1e-10)) ML_ERROR(ME_PRECISION, "pnchisq");
---
> 	    if(ans < (log_p ? (-10. * M_LN10) : 1e-10)) ML_ERROR(ME_PRECISION, "pnchisq()");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/nmath/pnt.c R/src/nmath/pnt.c
107,108c107,108
< 	    ML_ERROR(ME_UNDERFLOW, "pnt");
< 	    ML_ERROR(ME_RANGE, "pnt"); /* |ncp| too large */
---
> 	    ML_ERROR(ME_UNDERFLOW, "pnt()");
> 	    ML_ERROR(ME_RANGE, "pnt()"); /* |ncp| too large */
148c148
< 		ML_ERROR(ME_PRECISION, "pnt");
---
> 		ML_ERROR(ME_PRECISION, "pnt()");
163c163
< 	ML_ERROR(ME_NOCONV, "pnt");
---
> 	ML_ERROR(ME_NOCONV, "pnt()");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/nmath/ptukey.c R/src/nmath/ptukey.c
404c404
< 	ML_ERROR(ME_PRECISION, "ptukey");
---
> 	ML_ERROR(ME_PRECISION, "ptukey()");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/nmath/qbeta.c R/src/nmath/qbeta.c
193c193
<     ML_ERROR(ME_PRECISION, "qbeta");
---
>     ML_ERROR(ME_PRECISION, "qbeta()");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/nmath/qgamma.c R/src/nmath/qgamma.c
234c234
<  *    ML_ERROR(ME_PRECISION, "qgamma");
---
>  *    ML_ERROR(ME_PRECISION, "qgamma()");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/nmath/qnchisq.c R/src/nmath/qnchisq.c
68c68
< 	if(pp < 1e-10) ML_ERROR(ME_PRECISION, "qnchisq");
---
> 	if(pp < 1e-10) ML_ERROR(ME_PRECISION, "qnchisq()");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/nmath/qt.c R/src/nmath/qt.c
85c85
< 	if(iter >= 1000) ML_ERROR(ME_PRECISION, "qt");
---
> 	if(iter >= 1000) ML_ERROR(ME_PRECISION, "qt()");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/nmath/qtukey.c R/src/nmath/qtukey.c
130c130
< 	ML_ERROR(ME_DOMAIN, "qtukey");
---
> 	ML_ERROR(ME_DOMAIN, "qtukey()");
188c188
<     ML_ERROR(ME_NOCONV, "qtukey");
---
>     ML_ERROR(ME_NOCONV, "qtukey()");
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/nmath/rmultinom.c R/src/nmath/rmultinom.c
42c42
< #define ML_ERR_ret_NAN(_k_) {ML_ERROR(ME_DOMAIN, "rmultinom"); rN[_k_]=-1; return;}
---
> #define ML_ERR_ret_NAN(_k_) {ML_ERROR(ME_DOMAIN, "rmultinom()"); rN[_k_]=-1; return;}
44c44
< #define ML_ERR_ret_NAN(_k_) {ML_ERROR(ME_DOMAIN, "rmultinom"); rN[_k_]=NA_INTEGER; return;}
---
> #define ML_ERR_ret_NAN(_k_) {ML_ERROR(ME_DOMAIN, "rmultinom()"); rN[_k_]=NA_INTEGER; return;}
61c61
<     if (K < 1) { ML_ERROR(ME_DOMAIN, "rmultinom"); return;}
---
>     if (K < 1) { ML_ERROR(ME_DOMAIN, "rmultinom()"); return;}
64c64
<     if (K == NA_INTEGER || K < 1) { ML_ERROR(ME_DOMAIN, "rmultinom"); return;}
---
>     if (K == NA_INTEGER || K < 1) { ML_ERROR(ME_DOMAIN, "rmultinom()"); return;}
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/nmath/signrank.c R/src/nmath/signrank.c
127c127
<     if (fabs(x - R_forceint(x)) > 1e-7)
---
>     if (R_nonint(x))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/nmath/toms708.c R/src/nmath/toms708.c
10,13d9
< #undef min
< #define min(a,b) ((a < b)?a:b)
< #undef max
< #define max(a,b) ((a > b)?a:b)
486c482
<     static double const g = .577215664901533;
---
> //    static double const g = M_EC; //.577215664901533;
493c489
< 	c = log(x) + psi(b) + g + t;
---
> 	c = log(x) + psi(b) + M_EC + t;
495c491
< 	c = log(bx) + g + t;
---
> 	c = log(bx) + M_EC + t;
806,807c802
<     static double const__ = .398942280401433; /* == 1/sqrt(2*pi); */
<     /* R has  M_1_SQRT_2PI , and M_LN_SQRT_2PI = ln(sqrt(2*pi)) = 0.918938.. */
---
> //    static double const__ = M_1_SQRT_2PI; //.398942280401433; /* == 1/sqrt(2*pi); */
931c926
< 	       : const__ * sqrt(b * x0) * z * exp(-bcorr(a, b)));
---
> 	       : M_1_SQRT_2PI * sqrt(b * x0) * z * exp(-bcorr(a, b)));
943,944c938
<     static double const__ = .398942280401433; /* == 1/sqrt(2*pi); */
<     /* R has  M_1_SQRT_2PI */
---
> //    static double const__ = M_1_SQRT_2PI; //.398942280401433; /* == 1/sqrt(2*pi); */
1080,1081c1074,1075
< 	    ? log(const__)+ (log(b) + lx0)/2. + z      - bcorr(a, b)
< 	    :     const__ * sqrt(b * x0)      * z * exp(-bcorr(a, b));
---
> 	    ? -M_LN_SQRT_2PI + (log(b) + lx0)/2. + z      - bcorr(a, b)
> 	    :     M_1_SQRT_2PI * sqrt(b * x0)      * z * exp(-bcorr(a, b));
1319c1313
<     static double const e0 = 1.12837916709551;/* e0 == 2/sqrt(pi) */
---
> //    static double const e0 = 2.0/M_SQRT_PI; //1.12837916709551;/* e0 == 2/sqrt(pi) */
1321c1315
<     static double const ln_e0 = 0.120782237635245; /* == ln(e0) */
---
> //    static double const ln_e0 = M_LN2 - M_LN_SQRT_PI; //0.120782237635245; /* == ln(e0) */
1354c1348
<     double j0 = 0.5 / e0 * erfc1(1, z0),
---
>     double j0 = 0.5 / (2.0/M_SQRT_PI) * erfc1(1, z0),
1406c1400
< 	return ln_e0 + t - bcorr(a, b) + log(sum);
---
> 	return (M_LN2 - M_LN_SQRT_PI) + t - bcorr(a, b) + log(sum);
1409c1403
< 	return e0 * t * u * sum;
---
> 	return (2.0/M_SQRT_PI) * t * u * sum;
1428c1422
<     static double const lnb = .69314718055995;
---
>     //static double const lnb = M_LN2; //.69314718055995;
1431c1425
<     return m * lnb * .99999;
---
>     return m * M_LN2 * .99999;
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/nmath/wilcox.c R/src/nmath/wilcox.c
177c177
<     if (fabs(x - R_forceint(x)) > 1e-7)
---
>     if (R_nonint(x))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/unix/Rembedded.c R/src/unix/Rembedded.c
75c75
< 	PrintWarnings();	/* from device close and .Last */
---
> 	PrintWarnings(NULL);	/* from device close and .Last */
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/unix/Rscript.c R/src/unix/Rscript.c
37a38
> #include <Localization.h>
129c130
< 	fprintf(stderr, "malloc failure\n");
---
> 	fprintf(stderr, _("malloc failure\n"));
141c142
< 	if(!p) {fprintf(stderr, "installation problem\n"); exit(1);}
---
> 	if(!p) {fprintf(stderr, _("installation problem\n")); exit(1);}
149c150
< 	fprintf(stderr, "impossibly long path for RHOME\n");
---
> 	fprintf(stderr, _("impossibly long path for RHOME\n"));
169,170c170
< 			R_MAJOR, R_MINOR, R_STATUS, R_YEAR, R_MONTH, R_DAY,
< 			R_SVN_REVISION);
---
> 			R_MAJOR, R_MINOR, R_STATUS, R_YEAR, R_MONTH, R_DAY, R_SVN_REVISION);
181c181
< 		fprintf(stderr, "-e not followed by an expression\n");
---
> 		fprintf(stderr, _("-e not followed by an expression\n"));
197c197
< 		fprintf(stderr, "unable to set R_DEFAULT_PACKAGES\n");
---
> 		fprintf(stderr, _("unable to set R_DEFAULT_PACKAGES\n"));
202c202
< 		fprintf(stderr, "setting '%s'\n", buf2);
---
> 		fprintf(stderr, _("setting '%s'\n"), buf2);
207c207
< 		fprintf(stderr, "unable to set R_DEFAULT_PACKAGES\n");
---
> 		fprintf(stderr, _("unable to set R_DEFAULT_PACKAGES\n"));
219c219
< 	    fprintf(stderr, "file name is missing\n");
---
> 	    fprintf(stderr, _("file name is missing\n"));
223c223
< 	    fprintf(stderr, "file name is too long\n");
---
> 	    fprintf(stderr, "%s", strcat(_("file name is too long"), "\n"));
246c246
< 	    fprintf(stderr, "impossibly long string for R_ARCH\n");
---
> 	    fprintf(stderr, _("impossibly long string for R_ARCH\n"));
256c256
< 	fprintf(stderr, "running\n  '%s", cmd);
---
> 	fprintf(stderr, _("running\n  '%s"), cmd);
262c262
<     perror("Rscript execution error");
---
>     perror(_("Rscript execution error"));
268c268
<     fprintf(stderr, "Rscript is not supported on this system");
---
>     fprintf(stderr, _("Rscript is not supported on this system"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/unix/X11.c R/src/unix/X11.c
23a24
> #include <Localization.h>
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/unix/dynload.c R/src/unix/dynload.c
32a33
> #include <Localization.h>
240c241
< 	    errorcall(call, _("cannot get working directory!"));
---
> 	    errorcall(call, _("cannot get working directory"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/unix/hpdlfcn.c R/src/unix/hpdlfcn.c
37c37
< 
---
> #include <Localization.h>
150c150
<       sprintf(errbuf, "can't open %s", fname);
---
>       sprintf(errbuf, _("unable to open file '%s'"), fname);
154,155c154
<   printf("opening library %s, handle = %x, count = %d\n",
< 	 fname, handle, entry ? lib_entry_count(entry) : -1);
---
>   printf(_("opening library %s, handle = %x, count = %d\n"), fname, handle, entry ? lib_entry_count(entry) : -1);
166,167c165
<   printf("closing library handle = %x, count = %d\n",
< 	 handle, entry ? lib_entry_count(entry) : -1);
---
>   printf(("closing library handle = %x, count = %d\n"), handle, entry ? lib_entry_count(entry) : -1);
188c186
<     sprintf(errbuf, "attempt to close library failed");
---
>     sprintf(errbuf, _("attempt to close library failed"));
211c209
<     sprintf(errbuf, "symbol %s not found", name);
---
>     sprintf(errbuf, _("symbol '%s' was not found"), name);
213c211
<     printf("symbol %s not found", name);
---
>     printf(_("symbol '%s' was not found"), name);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/unix/sys-std.c R/src/unix/sys-std.c
35a36,37
> #include <Localization.h>
> #include <R_ext/Minmax.h>
72c74
<     REprintf("Fatal error: %s\n", s);
---
>     REprintf(_("Fatal error: %s\n"), s);
1048c1050
< 	    int res = R_ReadConsole("Save workspace image? [y/n/c]: ",
---
> 	    int res = R_ReadConsole(_("Save workspace image? [y/n/c]: "),
1100c1102
< 	PrintWarnings();	/* from device close and (if run) .Last */
---
> 	PrintWarnings(NULL);	/* from device close and (if run) .Last */
1156,1157c1158
< 		    fprintf(tfp, _("Cannot open file '%s': %s\n\n"),
< 			    file[i], strerror(errno));
---
> 		    fprintf(tfp, _("cannot open file '%s': %s"), file[i], strerror(errno));
1183c1184
<     R_ReadConsole("Enter file name: ", (unsigned char *)buf, len, 0);
---
>     R_ReadConsole(_("Enter file name: "), (unsigned char *)buf, len, 0);
1220c1221
< 	errorcall(call, _("'file' argument is too long"));
---
> 	errorcall(call, _("'%s' argument is too long"), "file");
1243c1244
< 	errorcall(call, _("'file' argument is too long"));
---
> 	errorcall(call, _("'%s' argument is too long"), "file");
1280c1281
< #define R_MIN(a, b) ((a) < (b) ? (a) : (b))
---
> //#define R_MIN(a, b) ((a) < (b) ? (a) : (b))
1287c1288
< 	tm = R_MIN(tm, 2e9); /* avoid integer overflow */
---
> 	tm = min(tm, 2e9); /* avoid integer overflow */
1293c1294
< 	int Timeout = (int) (wt > 0 ? R_MIN(tm, wt) : tm);
---
> 	int Timeout = (int) (wt > 0 ? min(tm, wt) : tm);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/unix/sys-unix.c R/src/unix/sys-unix.c
33a34
> #include <Localization.h>
284c285
< 		error(_("error in running command: '%s'"), strerror(errno));
---
> 		error(_("error in running command"), (": '%s'"), strerror(errno));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/src/unix/system.c R/src/unix/system.c
31a32
> #include <Localization.h>
122c123
< 	    R_ShowMessage("WARNING: invalid R_HISTSIZE ignored;");
---
> 	    R_ShowMessage(_("WARNING: invalid R_HISTSIZE ignored;"));
162c163
< 	fprintf(stderr, "%s", "R is already initialized\n");
---
> 	fprintf(stderr, "%s", _("R is already initialized\n"));
230c231
< 	R_Suicide("R home directory is not defined");
---
> 	R_Suicide(_("R home directory is not defined"));
254,255c255
< 		    snprintf(msg, 1024,
< 			    _("WARNING: --gui or -g without value ignored"));
---
> 		    snprintf(msg, 1024, _("WARNING: --gui or -g without value ignored"));
272,273c272
< 		snprintf(msg, 1024,
< 			 _("WARNING: unknown gui '%s', using X11\n"), p);
---
> 		snprintf(msg, 1024, _("WARNING: unknown gui '%s', using X11\n"), p);
275,276c274
< 		snprintf(msg, 1024,
< 			 _("WARNING: unknown gui '%s', using none\n"), p);
---
> 		snprintf(msg, 1024, _("WARNING: unknown gui '%s', using none\n"), p);
320,322c318
< 			snprintf(msg, 1024,
< 				 _("cannot open file '%s': %s"),
< 				 path, strerror(errno));
---
> 			snprintf(msg, 1024, _("cannot open file '%s': %s"), path, strerror(errno));
340,342c336
< 			snprintf(msg, 1024,
< 				 _("cannot open file '%s': %s"),
< 				 path, strerror(errno));
---
> 			snprintf(msg, 1024, _("cannot open file '%s': %s"), path, strerror(errno));
388c382
< 	if(res != 1) error("fwrite error in initialize_R");
---
> 	if(res != 1) error(_("fwrite error in initialize_R"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/tests/reg-tests-1b.R R/tests/reg-tests-1b.R
240,241c240,241
< stopifnot(sapply(R, function(ch) sub(".* : ", '', ch) ==
<                  "(converted from warning) NAs produced\n"))
---
> stopifnot(sapply(R, function(ch) sub(".*: (\\n  )?", '', ch) ==
>                  "(converted from warning) NA values produced\n"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/tests/reg-tests-2.R R/tests/reg-tests-2.R
2743,2744c2743
< (f2 <- arima(diff(x), xreg = diff(xreg), order = c(1,0,1), seasonal = c(1,0,1),
<              include.mean = FALSE))
---
> (f2 <- arima(diff(x), xreg = diff(xreg), order = c(1,0,1), seasonal = c(1,0,1), include.mean = FALSE))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=ChangeLog' R-devel/tools/GETVERSION R/tools/GETVERSION
20c20
<     y=2006
---
>     y=2013
25a26,30
>     basedat=`sed  -e 1d -e 's/^Last Changed Date: //' ../../SVN-REVISION`
>     basey=`echo ${basedat} | cut -d- -f1`
>     basem=`echo ${basedat} | cut -d- -f2`
>     based=`echo ${basedat} | cut -d- -f3`
>     svn_baserev=`sed -n -e 's/^Revision: //' -e '1p' < ../../BASE-REVISION`
43a49,52
>   echo "#define R_BASEYEAR   \"${basey}\""
>   echo "#define R_BASEMONTH  \"${basem}\""
>   echo "#define R_BASEDAY    \"${based}\""
>   echo "#define R_SVN_BASEREVISION ${svn_baserev}"
