msgid ""
msgstr ""
"Project-Id-Version: boot 1.3-14\n"
"POT-Creation-Date: 2015-01-16 19:59\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"



#: R/bootfuns.q: 0
#. R/bootfuns.q: gettextf("%s distribution not supported: using normal instead", sQuote(qdist))

msgid "%s distribution not supported: using normal instead"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("'F.surv' is required but missing")

msgid "'F.surv' is required but missing"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("'G.surv' is required but missing")

msgid "'G.surv' is required but missing"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettextf("'K' has been set to %f", K)

msgid "'K' has been set to %f"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("'K' outside allowable range")

msgid "'K' outside allowable range"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("'R' and 'alpha' have incompatible lengths")

msgid "'R' and 'alpha' have incompatible lengths"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("'R' and 'theta' have incompatible lengths")

msgid "'R' and 'theta' have incompatible lengths"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("'R' must be positive")

msgid "'R' must be positive"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: warning("'alpha' ignored; R[1L] = 0")

msgid "'alpha' ignored; R[1L] = 0"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("'data' must be a matrix with at least 2 columns")
#. R/bootfuns.q: stop("'data' must be a matrix with at least 2 columns")

msgid "'data' must be a matrix with at least 2 columns"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("'index' must contain 2 elements")

msgid "'index' must contain 2 elements"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: warning("'simple=TRUE' is only valid for 'sim=\"ordinary\", stype=\"i\", n=0', so ignored")

msgid "'simple=TRUE' is only valid for 'sim=\"ordinary\", stype=\"i\", n=0', so ignored"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("'strata' of wrong length")

msgid "'strata' of wrong length"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("'stype' must be \"w\" for type=\"inf\"")

msgid "'stype' must be \"w\" for type=\"inf\""
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("'t' and 't0' must be supplied together")

msgid "'t' and 't0' must be supplied together"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettextf("'t' must of length %d", boot.out$R)

msgid "'t' must of length %d"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("'theta' must be supplied if R[1L] = 0")

msgid "'theta' must be supplied if R[1L] = 0"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("'theta' or 'lambda' required")

msgid "'theta' or 'lambda' required"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("'u' must be a function")

msgid "'u' must be a function"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("0 elements not allowed in 'q'")

msgid "0 elements not allowed in 'q'"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("0 will terminate the function", domain = "R-boot")

msgid "0 will terminate the function"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("5, 10, 16, 50, 84, 90, 95 percentiles of (T*-t)", domain = "R-boot")

msgid "5, 10, 16, 50, 84, 90, 95 percentiles of (T*-t)"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("ANTITHETIC BOOTSTRAP", domain = "R-boot")

msgid "ANTITHETIC BOOTSTRAP"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettextf("All values of t are equal to %s", mean(t, na.rm = TRUE), domain = "R-boot")

msgid "All values of t are equal to %s"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettextf("All values of t* are equal to %s", mean(t, na.rm = TRUE))

msgid "All values of t* are equal to %s"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettextf("Average Block Length of %s", boot.out$l, domain = "R-boot")

msgid "Average Block Length of %s"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("BALANCED BOOTSTRAP", domain = "R-boot")

msgid "BALANCED BOOTSTRAP"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("BALANCED TILTED BOOTSTRAP", domain = "R-boot")

msgid "BALANCED TILTED BOOTSTRAP"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("BALANCED WEIGHTED BOOTSTRAP", domain = "R-boot")

msgid "BALANCED WEIGHTED BOOTSTRAP"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("      BCa          ", domain = "R-boot")

msgid "BCa"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: warning("BCa intervals not defined for time series bootstraps")

msgid "BCa intervals not defined for time series bootstraps"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("BLOCK BOOTSTRAP FOR TIME SERIES", domain = "R-boot")

msgid "BLOCK BOOTSTRAP FOR TIME SERIES"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS", domain = "R-boot")

msgid "BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettextf("Based on %d bootstrap replicates", R, domain = "R-boot")

msgid "Based on %d bootstrap replicates"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("     Basic         ", domain = "R-boot")

msgid "Basic"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Bootstrap Statistics:", domain = "R-boot")

msgid "Bootstrap Statistics:"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("CALL:", domain = "R-boot")

msgid "CALL:"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("CASE RESAMPLING BOOTSTRAP FOR CENSORED DATA", domain = "R-boot")

msgid "CASE RESAMPLING BOOTSTRAP FOR CENSORED DATA"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("CONDITIONAL BOOTSTRAP FOR CENSORED DATA", domain = "R-boot")

msgid "CONDITIONAL BOOTSTRAP FOR CENSORED DATA"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("CONDITIONAL BOOTSTRAP FOR COX REGRESSION MODEL", domain = "R-boot")

msgid "CONDITIONAL BOOTSTRAP FOR COX REGRESSION MODEL"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Calculations and Intervals on Original Scale", domain = "R-boot")

msgid "Calculations and Intervals on Original Scale"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Calculations and Intervals on Transformed Scale", domain = "R-boot")

msgid "Calculations and Intervals on Transformed Scale"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Calculations on Original Scale but Intervals Transformed", domain = "R-boot")

msgid "Calculations on Original Scale but Intervals Transformed"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Calculations on Transformed Scale; Intervals on Original Scale", domain = "R-boot")

msgid "Calculations on Transformed Scale; Intervals on Original Scale"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Call:", domain = "R-boot")
#. R/bootfuns.q: gettext("Call: ", domain = "R-boot")
#. R/bootfuns.q: gettext("Call:", domain = "R-boot")

msgid "Call:"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Cannot calculate confidence intervals", domain = "R-boot")

msgid "Cannot calculate confidence intervals"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Case", domain = "R-boot")

msgid "Case"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Cook statistic", domain = "R-boot")
#. R/bootfuns.q: gettext("Cook statistic", domain = "R-boot")

msgid "Cook statistic"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("DATA PERMUTATION", domain = "R-boot")

msgid "DATA PERMUTATION"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Exponential tilting used", domain = "R-boot")

msgid "Exponential tilting used"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettextf("Fixed Block Length of %s", boot.out$l, domain = "R-boot")

msgid "Fixed Block Length of %s"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Frequency Smoothing used", domain = "R-boot")

msgid "Frequency Smoothing used"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettextf("Interactive Identification for screen %d", num, domain = "R-boot")

msgid "Interactive Identification for screen %d"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Intervals:", domain = "R-boot")

msgid "Intervals:"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Iteration limit exceeded without finding solution", domain = "R-boot")

msgid "Iteration limit exceeded without finding solution"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Level", domain = "R-boot")
#. R/bootfuns.q: gettext("Level", domain = "R-boot")

msgid "Level"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Linear Programming Results", domain = "R-boot")

msgid "Linear Programming Results"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Linear predictor", domain = "R-boot")

msgid "Linear predictor"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Lugananni-Rice approximations used", domain = "R-boot")

msgid "Lugananni-Rice approximations used"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("MODEL BASED BOOTSTRAP FOR COX REGRESSION MODEL", domain = "R-boot")

msgid "MODEL BASED BOOTSTRAP FOR COX REGRESSION MODEL"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("MODEL BASED BOOTSTRAP FOR TIME SERIES", domain = "R-boot")

msgid "MODEL BASED BOOTSTRAP FOR TIME SERIES"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Maximization Problem with Objective Function Coefficients", domain = "R-boot")

msgid "Maximization Problem with Objective Function Coefficients"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Minimization Problem with Objective Function Coefficients", domain = "R-boot")

msgid "Minimization Problem with Objective Function Coefficients"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("No feasible solution could be found", domain = "R-boot")

msgid "No feasible solution could be found"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("     Normal        ", domain = "R-boot")

msgid "Normal"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Normal margins used.", domain = "R-boot")

msgid "Normal margins used."
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("ORDINARY NONPARAMETRIC BOOTSTRAP", domain = "R-boot")

msgid "ORDINARY NONPARAMETRIC BOOTSTRAP"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Observed margins used.", domain = "R-boot")

msgid "Observed margins used."
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Optimal solution has the following values", domain = "R-boot")

msgid "Optimal solution has the following values"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Ordered deviance residuals")

msgid "Ordered deviance residuals"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("PARAMETRIC BOOTSTRAP", domain = "R-boot")

msgid "PARAMETRIC BOOTSTRAP"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("PHASE SCRAMBLED BOOTSTRAP FOR TIME SERIES", domain = "R-boot")

msgid "PHASE SCRAMBLED BOOTSTRAP FOR TIME SERIES"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("POST-BLACKENED BLOCK BOOTSTRAP FOR TIME SERIES", domain = "R-boot")

msgid "POST-BLACKENED BLOCK BOOTSTRAP FOR TIME SERIES"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("POST-BLACKENED STATIONARY BOOTSTRAP FOR TIME SERIES", domain = "R-boot")

msgid "POST-BLACKENED STATIONARY BOOTSTRAP FOR TIME SERIES"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("    Percentile     ", domain = "R-boot")

msgid "Percentile"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Percentiles of (T*-t)", domain = "R-boot")

msgid "Percentiles of (T*-t)"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Please Input a screen number (1,2,3 or 4)", domain = "R-boot")

msgid "Please Input a screen number (1,2,3 or 4)"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettextf("Quantiles of Chi-squared(%d)", df)

msgid "Quantiles of Chi-squared(%d)"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Quantiles of Standard Normal")

msgid "Quantiles of Standard Normal"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Quantiles of standard normal")

msgid "Quantiles of standard normal"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Quantiles of the Distribution", domain = "R-boot")

msgid "Quantiles of the Distribution"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("R[1L] must be positive for frequency smoothing")

msgid "R[1L] must be positive for frequency smoothing"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Residuals", domain = "R-boot")

msgid "Residuals"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("STATIONARY BOOTSTRAP FOR TIME SERIES", domain = "R-boot")

msgid "STATIONARY BOOTSTRAP FOR TIME SERIES"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("STRATIFIED ANTITHETIC BOOTSTRAP", domain = "R-boot")

msgid "STRATIFIED ANTITHETIC BOOTSTRAP"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("STRATIFIED BALANCED BOOTSTRAP", domain = "R-boot")

msgid "STRATIFIED BALANCED BOOTSTRAP"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("STRATIFIED BOOTSTRAP", domain = "R-boot")

msgid "STRATIFIED BOOTSTRAP"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("STRATIFIED CASE RESAMPLING BOOTSTRAP FOR CENSORED DATA", domain = "R-boot")

msgid "STRATIFIED CASE RESAMPLING BOOTSTRAP FOR CENSORED DATA"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("STRATIFIED CONDITIONAL BOOTSTRAP FOR CENSORED DATA", domain = "R-boot")

msgid "STRATIFIED CONDITIONAL BOOTSTRAP FOR CENSORED DATA"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("STRATIFIED CONDITIONAL BOOTSTRAP FOR COX REGRESSION MODEL", domain = "R-boot")

msgid "STRATIFIED CONDITIONAL BOOTSTRAP FOR COX REGRESSION MODEL"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("STRATIFIED DATA PERMUTATION", domain = "R-boot")

msgid "STRATIFIED DATA PERMUTATION"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("STRATIFIED MODEL BASED BOOTSTRAP FOR COX REGRESSION MODEL", domain = "R-boot")

msgid "STRATIFIED MODEL BASED BOOTSTRAP FOR COX REGRESSION MODEL"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("STRATIFIED WEIGHTED BALANCED BOOTSTRAP", domain = "R-boot")

msgid "STRATIFIED WEIGHTED BALANCED BOOTSTRAP"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("STRATIFIED WEIGHTED BOOTSTRAP", domain = "R-boot")

msgid "STRATIFIED WEIGHTED BOOTSTRAP"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("STRATIFIED WEIRD BOOTSTRAP FOR CENSORED DATA", domain = "R-boot")

msgid "STRATIFIED WEIRD BOOTSTRAP FOR CENSORED DATA"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Saddlepoint Distribution Approximations", domain = "R-boot")

msgid "Saddlepoint Distribution Approximations"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettextf("Smoothing spline used %d points in the range %s to %s.", nrow(sad.d$points),     rg[1L], rg[2L], domain = "R-boot")

msgid "Smoothing spline used %d points in the range %s to %s."
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Some BCa intervals may be unstable", domain = "R-boot")

msgid "Some BCa intervals may be unstable"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Some basic intervals may be unstable", domain = "R-boot")

msgid "Some basic intervals may be unstable"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Some percentile intervals may be unstable", domain = "R-boot")

msgid "Some percentile intervals may be unstable"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Some studentized intervals may be unstable", domain = "R-boot")

msgid "Some studentized intervals may be unstable"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("   Studentized     ", domain = "R-boot")

msgid "Studentized"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("TILTED BOOTSTRAP", domain = "R-boot")

msgid "TILTED BOOTSTRAP"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("TIME SERIES BOOTSTRAP USING SUPPLIED INDICES", domain = "R-boot")

msgid "TIME SERIES BOOTSTRAP USING SUPPLIED INDICES"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("The coefficient values at termination were", domain = "R-boot")

msgid "The coefficient values at termination were"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettextf("The objective function value was %s.", simp.out$value, domain = "R-boot")

msgid "The objective function value was %s."
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettextf("The optimal value of the objective function is %s.", simp.out$value, domain = "R-boot")

msgid "The optimal value of the objective function is %s."
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettextf("WARNING: All values of %s are NA", paste("t", j, "*", sep = ""), domain = "R-boot")

msgid "WARNING: All values of %s are NA"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("WEIGHTED BOOTSTRAP", domain = "R-boot")

msgid "WEIGHTED BOOTSTRAP"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("WEIRD BOOTSTRAP FOR CENSORED DATA", domain = "R-boot")

msgid "WEIRD BOOTSTRAP FOR CENSORED DATA"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Warning: BCa Intervals used Extreme Quantiles", domain = "R-boot")

msgid "Warning: BCa Intervals used Extreme Quantiles"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Warning: Basic Intervals used Extreme Quantiles", domain = "R-boot")

msgid "Warning: Basic Intervals used Extreme Quantiles"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Warning: Percentile Intervals used Extreme Quantiles", domain = "R-boot")

msgid "Warning: Percentile Intervals used Extreme Quantiles"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("Warning: Studentized Intervals used Extreme Quantiles", domain = "R-boot")

msgid "Warning: Studentized Intervals used Extreme Quantiles"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("arguments are not all the same type of \"boot\" object")

msgid "arguments are not all the same type of \"boot\" object"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("array cannot be found for parametric bootstrap")

msgid "array cannot be found for parametric bootstrap"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext(" bias  ", domain = "R-boot")
#. R/bootfuns.q: gettext(" bias  ", domain = "R-boot")

msgid "bias"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("boot.array not implemented for this object")

msgid "boot.array not implemented for this object"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("bootstrap object needed for type=\"reg\"")

msgid "bootstrap object needed for type=\"reg\""
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("bootstrap output matrix missing")

msgid "bootstrap output matrix missing"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("bootstrap output object or 't0' required")

msgid "bootstrap output object or 't0' required"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("bootstrap replicates must be supplied")
#. R/bootfuns.q: stop("bootstrap replicates must be supplied")
#. R/bootfuns.q: stop("bootstrap replicates must be supplied")

msgid "bootstrap replicates must be supplied"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: warning("bootstrap variances needed for studentized intervals")

msgid "bootstrap variances needed for studentized intervals"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("control methods undefined when 'boot.out' has weights")

msgid "control methods undefined when 'boot.out' has weights"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("dimensions of 'R' and 'weights' do not match")

msgid "dimensions of 'R' and 'weights' do not match"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("either 'A' and 'u' or 'K.adj' and 'K2' must be supplied")

msgid "either 'A' and 'u' or 'K.adj' and 'K2' must be supplied"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("either 'boot.out' or 'w' must be specified.")
#. R/bootfuns.q: stop("either 'boot.out' or 'w' must be specified.")
#. R/bootfuns.q: stop("either 'boot.out' or 'w' must be specified.")

msgid "either 'boot.out' or 'w' must be specified."
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("estimated adjustment 'a' is NA")

msgid "estimated adjustment 'a' is NA"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("estimated adjustment 'w' is infinite")

msgid "estimated adjustment 'w' is infinite"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: warning("extreme order statistics used as endpoints")

msgid "extreme order statistics used as endpoints"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: warning("extreme values used for quantiles")

msgid "extreme values used for quantiles"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("function 'u' missing")

msgid "function 'u' missing"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("index array not defined for model-based resampling")

msgid "index array not defined for model-based resampling"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: warning("index out of bounds; minimum index only used.")

msgid "index out of bounds; minimum index only used."
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("indices are incompatible with 'ncol(data)'")

msgid "indices are incompatible with 'ncol(data)'"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("infinitesimal jackknife value", domain = "R-boot")

msgid "infinitesimal jackknife value"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("influence values cannot be found from a parametric bootstrap")

msgid "influence values cannot be found from a parametric bootstrap"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: warning("input 't' ignored; type=\"inf\"")

msgid "input 't' ignored; type=\"inf\""
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: warning("input 't' ignored; type=\"jack\"")

msgid "input 't' ignored; type=\"jack\""
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: warning("input 't' ignored; type=\"pos\"")

msgid "input 't' ignored; type=\"pos\""
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: warning("input 't0' ignored: neither 't' nor 'L' supplied")

msgid "input 't0' ignored: neither 't' nor 'L' supplied"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("invalid value of 'l'")

msgid "invalid value of 'l'"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("invalid value of 'sim' supplied")

msgid "invalid value of 'sim' supplied"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("jackknife value")
#. R/bootfuns.q: gettext("jackknife value", domain = "R-boot")

msgid "jackknife value"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("left button = Identify, center button = Exit", domain = "R-boot")

msgid "left button = Identify, center button = Exit"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("length of 'm' incompatible with 'strata'")

msgid "length of 'm' incompatible with 'strata'"
msgstr ""


#: R/bootpracs.q: 0
#. R/bootpracs.q: gettextf("likelihood exceeds %f at only one point", lim)

msgid "likelihood exceeds %f at only one point"
msgstr ""


#: R/bootpracs.q: 0
#. R/bootpracs.q: gettextf("likelihood never exceeds %f", lim)

msgid "likelihood never exceeds %f"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("mean")

msgid "mean"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext(" mean(t*)", domain = "R-boot")

msgid "mean(t*)"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("missing values not allowed in 'data'")

msgid "missing values not allowed in 'data'"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("multivariate time series not allowed")

msgid "multivariate time series not allowed"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("negative value of 'm' supplied")

msgid "negative value of 'm' supplied"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("neither 'data' nor bootstrap object specified")

msgid "neither 'data' nor bootstrap object specified"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("neither 'statistic' nor bootstrap object specified")

msgid "neither 'statistic' nor bootstrap object specified"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: warning("no coefficients in Cox model -- model ignored")

msgid "no coefficients in Cox model -- model ignored"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("no data in call to 'boot'")

msgid "no data in call to 'boot'"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettextf("number of columns of 'A' (%d) not equal to length of 'u' (%d)", d, length(u))

msgid "number of columns of 'A' (%d) not equal to length of 'u' (%d)"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("one of 't' or 't0' required")

msgid "one of 't' or 't0' required"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettextf("only columns %s and %s of 'data' used", index[1L], index[2L])

msgid "only columns %s and %s of 'data' used"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: warning("only first 2 elements of 'index' used")

msgid "only first 2 elements of 'index' used"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: warning("only first column of 't' used")

msgid "only first column of 't' used"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: warning("only first element of 'index' used")
#. R/bootfuns.q: warning("only first element of 'index' used")
#. R/bootfuns.q: warning("only first element of 'index' used")
#. R/bootfuns.q: warning("only first element of 'index' used")
#. R/bootfuns.q: warning("only first element of 'index' used")
#. R/bootfuns.q: warning("only first element of 'index' used")
#. R/bootfuns.q: warning("only first element of 'index' used")
#. R/bootfuns.q: warning("only first element of 'index' used")
#. R/bootfuns.q: warning("only first element of 'index' used")
#. R/bootfuns.q: warning("only first element of 'index' used")
#. R/bootfuns.q: warning("only first element of 'index' used")
#. R/bootfuns.q: warning("only first element of 'index' used")

msgid "only first element of 'index' used"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: warning("only first element of 'index' used in 'abc.ci'")

msgid "only first element of 'index' used in 'abc.ci'"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("original", domain = "R-boot")
#. R/bootfuns.q: gettext("original", domain = "R-boot")

msgid "original"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("regression jackknife value", domain = "R-boot")

msgid "regression jackknife value"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("sim = \"weird\" cannot be used with a \"coxph\" object")

msgid "sim = \"weird\" cannot be used with a \"coxph\" object"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("standardized infinitesimal jackknife value", domain = "R-boot")

msgid "standardized infinitesimal jackknife value"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("standardized jackknife value", domain = "R-boot")

msgid "standardized jackknife value"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("standardized regression jackknife value", domain = "R-boot")

msgid "standardized regression jackknife value"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettext("std. error")
#. R/bootfuns.q: gettext(" std. error", domain = "R-boot")
#. R/bootfuns.q: gettext(" std. error", domain = "R-boot")

msgid "std. error"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("this type not implemented for Binary")

msgid "this type not implemented for Binary"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("this type not implemented for Poisson")

msgid "this type not implemented for Poisson"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: warning("unable to achieve requested overall error rate")

msgid "unable to achieve requested overall error rate"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("unable to calculate 'var.t0'")

msgid "unable to calculate 'var.t0'"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: gettextf("unable to find multiplier for %f", theta[i])

msgid "unable to find multiplier for %f"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("unable to find range")
#. R/bootfuns.q: stop("unable to find range")
#. R/bootfuns.q: stop("unable to find range")
#. R/bootfuns.q: stop("unable to find range")

msgid "unable to find range"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("unknown value of 'sim'")

msgid "unknown value of 'sim'"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("unrecognized value of 'sim'")

msgid "unrecognized value of 'sim'"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: stop("use 'boot.ci' for scalar parameters")

msgid "use 'boot.ci' for scalar parameters"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: warning("variance required for studentized intervals")

msgid "variance required for studentized intervals"
msgstr ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: ngettext(R[2L], "First %d replicate tilted to %s", "First %d replicates tilted to %s")

msgid        "First %d replicate tilted to %s"
msgid_plural "First %d replicates tilted to %s"
msgstr[0]    ""
msgstr[1]    ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: ngettext(R[1L], "First %d replicate untilted", "First %d replicates untilted")

msgid        "First %d replicate untilted"
msgid_plural "First %d replicates untilted"
msgstr[0]    ""
msgstr[1]    ""


#: R/bootfuns.q: 0
#. R/bootfuns.q: ngettext(R[j + 1L], "Next %d replicate tilted to %s", "Next %d replicates tilted to %s")

msgid        "Next %d replicate tilted to %s"
msgid_plural "Next %d replicates tilted to %s"
msgstr[0]    ""
msgstr[1]    ""
