diff -rEZbwB '--exclude=*.[pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended/rpart/R/labels.rpart.R Recommended/rpart/R/labels.rpart.R
66,67c66
< 		warning("more than 52 levels in a predicting factor, truncated for printout",
<                         domain = NA)
---
> 		warning("more than 52 levels in a predicting factor, truncated for printout", domain = "R-rpart")
diff -rEZbwB '--exclude=*.[pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended/rpart/R/meanvar.rpart.R Recommended/rpart/R/meanvar.rpart.R
1c1
< meanvar.rpart <- function(tree, xlab = "ave(y)", ylab = "ave(deviance)", ...)
---
> meanvar.rpart <- function(tree, xlab = gettext("ave(y)"), ylab = gettext("ave(deviance)"), ...)
5c5
<         stop("Not a legitimate \"rpart\" object")
---
>         stop(gettextf("'%s' argument is not an object of class %s", "tree", dQuote("rpart")))
7c7
<         stop("Plot not useful for classification or poisson trees")
---
>         stop("Plot is not useful for classification or poisson trees")
diff -rEZbwB '--exclude=*.[pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended/rpart/R/path.rpart.R Recommended/rpart/R/path.rpart.R
6c6
<         stop("Not a legitimate \"rpart\" object")
---
> 	stop(gettextf("'%s' argument is not an object of class %s", "tree", dQuote("rpart")))
18c18
<                 cat("\n", "node number:", n[i], "\n")
---
>                 cat("\n", gettext("node number: ", domain = "R-rpart"), n[i], "\n", sep = "")
28c28
<                 cat("\n", "node number:", n[i], "\n")
---
>                 cat("\n", gettext("node number: ", domain = "R-rpart"), n[i], "\n", sep = "")
diff -rEZbwB '--exclude=*.[pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended/rpart/R/plot.rpart.R Recommended/rpart/R/plot.rpart.R
4c4
<     if (!inherits(x, "rpart")) stop("Not a legitimate \"rpart\" object")
---
>     if (!inherits(x, "rpart")) stop(gettextf("'%s' argument is not an object of class %s", "x", dQuote("rpart")))
diff -rEZbwB '--exclude=*.[pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended/rpart/R/plotcp.R Recommended/rpart/R/plotcp.R
7c7
<     if (!inherits(x, "rpart")) stop("Not a legitimate \"rpart\" object")
---
>     if (!inherits(x, "rpart")) stop(gettextf("'%s' argument is not an object of class %s", "x", dQuote("rpart")))
11c11
<         stop("'cptable' does not contain cross-validation results")
---
>         stop("'cptable' component does not contain cross-validation results")
21c21
<                          ylab = "X-val Relative Error", type = "o"), dots))
---
>                          ylab = gettext("X-val Relative Error", domain = "R-rpart"), type = "o"), dots))
29c29
<                mtext("size of tree", side = 3, line = 3)
---
>                mtext(gettext("size of tree", domain = "R-rpart"), side = 3, line = 3)
33c33
<                mtext("number of splits", side = 3, line = 3)
---
>                mtext(gettext("number of splits", domain = "R-rpart"), side = 3, line = 3)
diff -rEZbwB '--exclude=*.[pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended/rpart/R/post.rpart.R Recommended/rpart/R/post.rpart.R
22c22
<         title(paste("Endpoint =", temp), cex = 0.8)
---
>         title(gettextf("Endpoint = %s", paste(temp, collapse = " "), domain = "R-rpart"), cex = 0.8)
diff -rEZbwB '--exclude=*.[pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended/rpart/R/predict.rpart.R Recommended/rpart/R/predict.rpart.R
5c5
<     if (!inherits(object, "rpart")) stop("Not a legitimate \"rpart\" object")
---
>     if (!inherits(object, "rpart")) stop(gettextf("'%s' argument is not an object of class %s", "object", dQuote("rpart")))
diff -rEZbwB '--exclude=*.[pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended/rpart/R/print.rpart.R Recommended/rpart/R/print.rpart.R
4c4
<     if (!inherits(x, "rpart")) stop("Not a legitimate \"rpart\" object")
---
>     if (!inherits(x, "rpart")) stop(gettextf("'%s' argument is not an object of class %s", "x", dQuote("rpart")))
diff -rEZbwB '--exclude=*.[pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended/rpart/R/printcp.R Recommended/rpart/R/printcp.R
4c4
<     if (!inherits(x, "rpart")) stop ("'x' must be an \"rpart\" object")
---
>     if (!inherits(x, "rpart")) stop(gettextf("'%s' argument is not an object of class %s", "x", dQuote("rpart")))
6,9c6,9
<                anova = "\nRegression tree:\n" ,
<                class = "\nClassification tree:\n" ,
<                poisson = "\nRates regression tree:\n",
<                exp = "\nSurvival regression tree:\n")
---
>                anova = gettext("\nRegression tree:\n", domain = "R-rpart") ,
>                class = gettext("\nClassification tree:\n", domain = "R-rpart") ,
>                poisson = gettext("\nRates regression tree:\n", domain = "R-rpart"),
>                exp = gettext("\nSurvival regression tree:\n", domain = "R-rpart"))
21c21
<         cat("Variables actually used in tree construction:\n")
---
>         cat(gettext("Variables actually used in tree construction:\n", domain = "R-rpart"))
27,30c27
<     cat("Root node error: ", format(frame$dev[1L], digits = digits), "/",
<         frame$n[1L], " = ",
<         format(frame$dev[1L]/frame$n[1L], digits = digits),
<         "\n\n", sep = "")
---
>     cat(gettext("Root node error: ", domain = "R-rpart"), format(frame$dev[1L], digits = digits), "/", frame$n[1L], " = ", format(frame$dev[1L]/frame$n[1L], digits = digits), "\n\n", sep = "")
diff -rEZbwB '--exclude=*.[pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended/rpart/R/residuals.rpart.R Recommended/rpart/R/residuals.rpart.R
5c5
<         stop("Not a legitimate \"rpart\" object")
---
>         stop(gettextf("'%s' argument is not an object of class %s", "object", dQuote("rpart")))
diff -rEZbwB '--exclude=*.[pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended/rpart/R/roc.rpart.R Recommended/rpart/R/roc.rpart.R
4,6c4,5
<     if (!inherits(object, "rpart") || object$method != "class" ||
<        length(attr(object, "ylevels")) != 2L)
<         stop('Not legitimate \"rpart\" tree and endpoint not a 2 level-factor')
---
>     if (!inherits(object, "rpart") || object$method != "class" || length(attr(object, "ylevels")) != 2L)
>         stop("'object' argument is not an object of class \"rpart\" or endpoint is not a 2 level-factor")
40c39
<     for (i in 1:cutoff.n) {
---
>     for (i in seq_len(cutoff.n)) {
63c62
<                  ylim = c(0, 1), ylab = "Sensitivity", xlab = "1-Specificity")
---
>                  ylim = c(0, 1), ylab = gettext("Sensitivity", domain = "R-rpart"), xlab = gettext("1-Specificity", domain = "R-rpart"))
67c66
<                  ylim = c(0, 1), ylab = "Sensitivity", xlab = "Specificity")
---
>                  ylim = c(0, 1), ylab = gettext("Sensitivity", domain = "R-rpart"), xlab = gettext("Specificity", domain = "R-rpart"))
diff -rEZbwB '--exclude=*.[pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended/rpart/R/rpart.R Recommended/rpart/R/rpart.R
96,98c96
<             stop(gettextf("Argument %s not matched",
<                           names(extraArgs)[indx == 0L]),
<                  domain = NA)
---
>             stop(gettextf("Argument %s not matched", names(extraArgs)[indx == 0L]), domain = "R-rpart")
133c131
<             stop("Cost vector is the wrong length")
---
>             stop("Cost vector is of the wrong length")
193c191
< 	for (i in 1L:nadd) {
---
> 	for (i in seq_len(nadd)) {
diff -rEZbwB '--exclude=*.[pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended/rpart/R/rpart.branch.R Recommended/rpart/R/rpart.branch.R
10c10
<             stop("no information available on parameters from previous call to plot()")
---
>             stop("no information available on parameters from previous call to 'plot()'")
diff -rEZbwB '--exclude=*.[pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended/rpart/R/rpart.class.R Recommended/rpart/R/rpart.class.R
21c21
<                           names(parms)[temp == 0L]), domain = NA)
---
>                           names(parms)[temp == 0L]), domain = "R-rpart")
63c63
< 		 format(yval[, 1L + nclass + 1L:nclass],
---
> 		 format(yval[, 1L + nclass + seq_len(nclass)],
91,95c91,96
< 	     paste0("  predicted class=", format(group, justify = "left"),
<                     "  expected loss=", formatg(dev, digits),
<                     "  P(node) =", formatg(nodeprob, digits), "\n",
<                     "    class counts: ", temp1, "\n",
<                     "   probabilities: ", temp2)
---
> 	     #paste0("  predicted class=", format(group, justify = "left"),
>              #       "  expected loss=", formatg(dev, digits),
>              #       "  P(node) =", formatg(nodeprob, digits), "\n",
>              #       "    class counts: ", temp1, "\n",
>              #       "   probabilities: ", temp2)
> 	     gettextf("  predicted class=%s  expected loss=%s  P(node) =%s\n    class counts: %s\n   probabilities: %s", format(group, justify = "left"), formatg(dev, digits), formatg(nodeprob, digits), temp1, temp2, domain = "R-rpart")
diff -rEZbwB '--exclude=*.[pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended/rpart/R/rpart.control.R Recommended/rpart/R/rpart.control.R
8c8
<         warning("The value of 'maxcompete' supplied is < 0; the value 0 was used instead")
---
>         warning(gettextf("The value of '%s' supplied is < 0; the value 0 was used instead", "maxcomplete"))
12c12
<         warning("The value of 'xval' supplied is < 0; the value 0 was used instead")
---
>         warning(gettextf("The value of '%s' supplied is < 0; the value 0 was used instead", "xval"))
19c19
<         warning("The value of 'usesurrogate' supplied was out of range, the default value of 2 is used instead.")
---
>         warning(gettextf("The value of '%s' supplied was out of range, the default value of %d is used instead", "usesurrogate", 2))
23c23
<         warning("The value of 'surrogatestyle' supplied was out of range, the default value of 0 is used instead.")
---
>         warning(gettextf("The value of '%s' supplied was out of range, the default value of %d is used instead", "surrogatestyle", 0))
diff -rEZbwB '--exclude=*.[pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended/rpart/R/rpartcallback.R Recommended/rpart/R/rpartcallback.R
9c9
<         stop("User written method does not contain an 'init' function")
---
>         stop(gettextf("User written method does not contain an %s function", sQuote("init()")))
11c11
<         stop("User written method does not contain a 'split' function")
---
>         stop(gettextf("User written method does not contain a %s function", sQuote("split()")))
13c13
<         stop("User written method does not contain an 'eval' function")
---
>         stop(gettextf("User written method does not contain an %s function", sQuote("eval()")))
diff -rEZbwB '--exclude=*.[pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended/rpart/R/rpartco.R Recommended/rpart/R/rpartco.R
7c7
<             stop("no information available on parameters from previous call to plot()")
---
>             stop("no information available on parameters from previous call to 'plot()'")
diff -rEZbwB '--exclude=*.[pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended/rpart/R/rsq.rpart.R Recommended/rpart/R/rsq.rpart.R
7c7
<     if (!inherits(x, "rpart")) stop("Not a legitimate \"rpart\" object")
---
>     if (!inherits(x, "rpart")) stop(gettextf("'%s' argument is not an object of class %s", "x", dQuote("rpart")))
diff -rEZbwB '--exclude=*.[pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended/rpart/R/snip.rpart.R Recommended/rpart/R/snip.rpart.R
6c6
<     if (!inherits(x, "rpart")) stop("Not an \"rpart\" object")
---
>     if (!inherits(x, "rpart")) stop(gettextf("'%s' argument is not an object of class %s", "x", dQuote("rpart")))
20,21c20,21
<         warning(gettext("Nodes %s are not in this tree", toss[toss.idx == 0L]),
<                 domain = NA)
---
>         warning(gettextf("Nodes %s are not in this tree", toss[toss.idx == 0L]),
>                 domain = "R-rpart")
diff -rEZbwB '--exclude=*.[pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended/rpart/R/summary.rpart.R Recommended/rpart/R/summary.rpart.R
4c4
<     if (!inherits(object, "rpart")) stop("Not a legitimate \"rpart\" object")
---
>     if (!inherits(object, "rpart")) stop(gettextf("'%s' argument is not an object of class %s", "object", dQuote("rpart")))
28c28
<             cat("\nVariable importance\n")
---
>             cat(gettext("\nVariable importance\n", domain = "R-rpart"))
diff -rEZbwB '--exclude=*.[pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended/rpart/R/text.rpart.R Recommended/rpart/R/text.rpart.R
11c11
<     if (!inherits(x, "rpart")) stop("Not a legitimate \"rpart\" object")
---
>     if (!inherits(x, "rpart")) stop(gettextf("'%s' argument is not an object of class %s", "x", dQuote("rpart")))
diff -rEZbwB '--exclude=*.[pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended/rpart/R/zzz.R Recommended/rpart/R/zzz.R
25,26c25
<         warning(gettextf("supplied nodes %s are not in this tree",
<                          paste(bad, collapse = ",")), domain = NA)
---
>         warning(sprintf(gettext("supplied nodes %s are not in this tree", domain = "R-rpart"), paste(bad, collapse = ", ")), domain = NA)
29,30c28
<         warning(gettextf("supplied nodes %s are leaves",
<                 paste(good[leaves], collapse = ",")), domain = NA)
---
>         warning(sprintf(gettext("supplied nodes %s are leaves", domain = "R-rpart"), paste(good[leaves], collapse = ", ")), domain = NA)
diff -rEZbwB '--exclude=*.[pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended/rpart/man/meanvar.rpart.Rd Recommended/rpart/man/meanvar.rpart.Rd
15c15
< \method{meanvar}{rpart}(tree, xlab = "ave(y)", ylab = "ave(deviance)", \dots)
---
> \method{meanvar}{rpart}(tree, xlab = gettext("ave(y)"), ylab = gettext("ave(deviance)"), \dots)
Only in Recommended/rpart/src: localization.h
diff -rEZbwB '--exclude=*.[pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended/rpart/src/poisson.c Recommended/rpart/src/poisson.c
5a6
> #include "localization.h"
diff -rEZbwB '--exclude=*.[pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended/rpart/src/print_tree.c Recommended/rpart/src/print_tree.c
17a18
> #include "localization.h"
59,62c60,63
<     Rprintf("\n\nNode number %d: %d observations", id, me->num_obs);
<     Rprintf("\t   Complexity param= %f\n", me->complexity);
<     Rprintf("  response estimate=%f,  risk/n= %f\n", *(me->response_est),
< 	    me->risk / me->num_obs);
---
>     Rprintf("\n\n");
>     Rprintf(ngettext("Node number %d: %d observation", "Node number %d: %d observations", me->num_obs), id, me->num_obs);
>     Rprintf("\t   ");
>     Rprintf(_("Complexity param= %f\n  response estimate=%f,  risk/n= %f\n"), me->complexity, *(me->response_est), me->risk / me->num_obs);
65c66
< 	Rprintf("  left son=%d (%d obs)", 2 * id, (me->leftson)->num_obs);
---
> 	Rprintf(ngettext("  left son=%d (%d observation)", "  left son=%d (%d observations)", (me->leftson)->num_obs), 2 * id, (me->leftson)->num_obs);
67c68
< 	Rprintf(" right son=%d (%d obs)", 2 * id + 1, (me->rightson)->num_obs);
---
> 	Rprintf(ngettext(" right son=%d (%d observation)", " right son=%d (%d observations)", (me->rightson)->num_obs), 2 * id + 1, (me->rightson)->num_obs);
72,73c73,76
< 	else
< 	    Rprintf(", %d obs do not split\n", i);
---
> 	else {
> 	    Rprintf(", ");
> 	    Rprintf(ngettext("%d observation does not split\n", "%d observations do not split\n", i), i);
>         }
77c80
<     Rprintf("  Primary splits:\n");
---
>     Rprintf(_("  Primary splits:\n"));
80a84
> 	    Rprintf("\t");
83c87
< 		    ("\tvar%d < %5g to the left, improve=%5.3f,  (%d missing)\n",
---
> 		    (ngettext("var%d < %5g to the left, improve=%5.3f,  (%d missing)\n", "var%d < %5g to the left, improve=%5.3f,  (%d missing)\n", me->num_obs - ss->count),
87c91
< 		    ("\tvar%d > %5g to the left, improve=%5.3f, (%d missing)\n",
---
> 		    (ngettext("var%d > %5g to the left, improve=%5.3f, (%d missing)\n", "var%d > %5g to the left, improve=%5.3f, (%d missing)\n", me->num_obs - ss->count),
90c94,95
< 	    Rprintf("\tvar%d splits as ", j);
---
> 	    Rprintf("\t");
> 	    Rprintf(_("var%d splits as: "), j);
103,104c108,110
< 	    if (rp.numcat[j] < 7)
< 		Rprintf(",\timprove=%5.3f, (%d missing)\n",
---
> 	    if (rp.numcat[j] < 7) {
> 		Rprintf(",\t");
> 		Rprintf(ngettext("improve=%5.3f, (%d missing)\n", "improve=%5.3f, (%d missing)\n", (me->num_obs - ss->count)),
106,107c112,115
< 	    else
< 		Rprintf(", improve=%5.3f, (%d missing)\n",
---
> 	    }
> 	    else {
> 		Rprintf(", ");
> 		Rprintf(ngettext("improve=%5.3f, (%d missing)\n", "improve=%5.3f, (%d missing)\n", (me->num_obs - ss->count)),
110a119
>     }
116c125
< 	Rprintf("  Surrogate splits:\n");
---
> 	Rprintf(_("  Surrogate splits:\n"));
119a129
> 	    Rprintf("\t");
122c132
< 		    ("\tvar%d < %5g to the left, agree=%5.3f, (%d split)\n",
---
> 		    (ngettext("var%d < %5g to the left, agree=%5.3f, (%d split)\n", "var%d < %5g to the left, agree=%5.3f, (%d split)\n", ss->count),
126c136
< 		    ("\tvar%d > %5g to the left, agree=%5.3f, (%d split)\n",
---
> 		    (ngettext("var%d > %5g to the left, agree=%5.3f, (%d split)\n", "var%d > %5g to the left, agree=%5.3f, (%d split)\n", ss->count),
129c139,140
< 	    Rprintf("\tvar%d splits as ", j);
---
> 	    Rprintf("\t");
> 	    Rprintf(_("var%d splits as: "), j);
142,143c153,155
< 	    if (rp.numcat[j] < 7)
< 		Rprintf(",\tagree=%5.3f, (%d split)\n",
---
> 	    if (rp.numcat[j] < 7) {
> 		Rprintf(",\t");
> 		Rprintf(ngettext("agree=%5.3f, (%d split)\n", "agree=%5.3f, (%d split)\n", ss->count),
145,146c157,160
< 	    else
< 		Rprintf(", agree=%5.3f, (%d split)\n",
---
> 	    }
> 	    else {
> 		Rprintf(", ");
> 		Rprintf(ngettext("agree=%5.3f, (%d split)\n", "agree=%5.3f, (%d split)\n", ss->count),
147a162
> 	    }
diff -rEZbwB '--exclude=*.[pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended/rpart/src/rpart.c Recommended/rpart/src/rpart.c
38a39
> #include "localization.h"
diff -rEZbwB '--exclude=*.[pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended/rpart/src/rpart.h Recommended/rpart/src/rpart.h
9,15d8
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("rpart", String)
< #else
< #define _(String) (String)
< #endif
< 
diff -rEZbwB '--exclude=*.[pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended/rpart/src/rpart_callback.c Recommended/rpart/src/rpart_callback.c
7,14c7
< 
< #ifdef ENABLE_NLS
< #include <libintl.h>
< #define _(String) dgettext ("rpart", String)
< #else
< #define _(String) (String)
< #endif
< 
---
> #include "localization.h"
148c141
< 	    error("the expression expr1 returned a list of %d elements, %d required",
---
> 	    error(_("the expression expr1 returned a list of %d elements, %d required"),
diff -rEZbwB '--exclude=*.[pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended/rpart/src/rundown.c Recommended/rpart/src/rundown.c
8a9
> #include "localization.h"
48c49
<     warning("Warning message--see rundown.c");
---
>     warning(_("Warning message--see rundown.c"));
diff -rEZbwB '--exclude=*.[pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended/rpart/src/rundown2.c Recommended/rpart/src/rundown2.c
8a9
> #include "localization.h"
48c49
<     warning("Warning message--see rundown2.c");
---
>     warning(_("Warning message--see rundown2.c"));
diff -rEZbwB '--exclude=*.[pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended/rpart/src/xpred.c Recommended/rpart/src/xpred.c
31a32
> #include "localization.h"
diff -rEZbwB '--exclude=*.[pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Changes' R-recommended/rpart/src/xval.c Recommended/rpart/src/xval.c
160,161c160
< 		    Rprintf("  cp=%f, pred=%f, xtemp=%f\n",
< 			    cp[jj] / old_wt, xpred[jj], xtemp[jj]);
---
> 		    Rprintf("  cp=%f, pred=%f, xtemp=%f\n", cp[jj] / old_wt, xpred[jj], xtemp[jj]);
