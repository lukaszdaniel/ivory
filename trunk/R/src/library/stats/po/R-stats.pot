msgid ""
msgstr ""
"Project-Id-Version: stats 3.2.0\n"
"POT-Creation-Date: 2014-11-01 13:00\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"



#: R/mlm.R: 0
#. R/mlm.R: stop("\"mlm\" objects with weights are not supported")

msgid "\"mlm\" objects with weights are not supported"
msgstr ""


#: R/aov.R: 0
#. R/aov.R: gettextf("%d out of %d effects not estimable", nc - rank, nc, domain = "R-stats")

msgid "%d out of %d effects not estimable"
msgstr ""


#: R/smooth.R: 0
#. R/smooth.R: gettextf("%s Tukey smoother resulting from %s", attr(x, "kind"), sQuote(paste(deparse(attr(x,     "call")), collapse = "")), domain = "R-stats")
#. R/smooth.R: gettextf("%s Tukey smoother resulting from %s", attr(object, "kind"), sQuote(paste(deparse(attr(object,     "call")), collapse = "")), domain = "R-stats")

msgid "%s Tukey smoother resulting from %s"
msgstr ""


#: R/ansari.test.R: 0
#: R/bartlett.test.R: 0
#: R/binom.test.R: 0
#: R/chisq.test.R: 0
#: R/cor.test.R: 0
#: R/cor.test.R: 0
#: R/fisher.test.R: 0
#: R/fligner.test.R: 0
#: R/kruskal.test.R: 0
#: R/ks.test.R: 0
#: R/mcnemar.test.R: 0
#: R/mood.test.R: 0
#: R/oneway.test.R: 0
#: R/pairwise.R: 0
#: R/pairwise.R: 0
#: R/t.test.R: 0
#: R/var.test.R: 0
#: R/wilcox.test.R: 0
#. R/ansari.test.R: gettextf("%s and %s", deparse(substitute(x)), deparse(substitute(y)))
#. R/bartlett.test.R: gettextf("%s and %s", paste(deparse(substitute(x)), collapse = ""), paste(deparse(substitute(g)),     collapse = ""))
#. R/binom.test.R: gettextf("%s and %s", deparse(substitute(x)), deparse(substitute(n)), domain = "R-stats")
#. R/chisq.test.R: gettextf("%s and %s", paste(DNAME, collapse = "\n"), paste(DNAME2, collapse = "\n"))
#. R/cor.test.R: gettextf("%s and %s", paste(deparse(substitute(x)), collapse = ""), paste(deparse(substitute(y)),     collapse = ""), domain = "R-stats")
#. R/cor.test.R: gettextf("%s and %s", names(mf[1]), names(mf[2]))
#. R/fisher.test.R: gettextf("%s and %s", deparse(substitute(x)), deparse(substitute(y)), domain = "R-stats")
#. R/fligner.test.R: gettextf("%s and %s", paste(deparse(substitute(x)), collapse = ""), paste(deparse(substitute(g)),     collapse = ""))
#. R/kruskal.test.R: gettextf("%s and %s", paste(deparse(substitute(x)), collapse = ""), paste(deparse(substitute(g)),     collapse = ""))
#. R/ks.test.R: gettextf("%s and %s", paste(DNAME, collapse = ""), paste(deparse(substitute(y)),     collapse = ""))
#. R/mcnemar.test.R: gettextf("%s and %s", paste(deparse(substitute(x)), collapse = ""), paste(deparse(substitute(y)),     collapse = ""), domain = "R-stats")
#. R/mood.test.R: gettextf("%s and %s", paste(deparse(substitute(x)), collapse = ""), paste(deparse(substitute(y)),     collapse = ""), domain = "R-stats")
#. R/oneway.test.R: gettextf("%s and %s", dp[[2L]], dp[[3L]], domain = "R-stats")
#. R/pairwise.R: gettextf("%s and %s", paste(deparse(substitute(x)), collapse = ""), paste(deparse(substitute(g)),     collapse = ""))
#. R/pairwise.R: gettextf("%s and %s", deparse(substitute(x)), deparse(substitute(g)), domain = "R-stats")
#. R/t.test.R: gettextf("%s and %s", deparse(substitute(x)), deparse(substitute(y)))
#. R/var.test.R: gettextf("%s and %s", deparse(substitute(x)), deparse(substitute(y)), domain = "R-stats")
#. R/wilcox.test.R: gettextf("%s and %s", paste(deparse(substitute(x)), collapse = ""), paste(deparse(substitute(y)),     collapse = ""), domain = "R-stats")

msgid "%s and %s"
msgstr ""


#: R/friedman.test.R: 0
#: R/mantelhaen.test.R: 0
#: R/quade.test.R: 0
#: R/quade.test.R: 0
#. R/friedman.test.R: gettextf("%s and %s and %s", DNAME, deparse(substitute(groups)), deparse(substitute(blocks)))
#. R/friedman.test.R: gettextf("%s and %s and %s", names(mf[1]), names(mf[2]), names(mf[3]))
#. R/mantelhaen.test.R: gettextf("%s and %s and %s", deparse(substitute(x)), deparse(substitute(y)), deparse(substitute(z)),     domain = "R-stats")
#. R/quade.test.R: gettextf("%s and %s and %s", DNAME, deparse(substitute(groups)), deparse(substitute(blocks)))
#. R/quade.test.R: gettextf("%s and %s and %s", names(mf[1]), names(mf[2]), names(mf[3]), domain = "R-stats")

msgid "%s and %s and %s"
msgstr ""


#: R/xtabs.R: 0
#. R/xtabs.R: gettextf("%s applies only to two-way tables", "xtabs(*, sparse=TRUE)")

msgid "%s applies only to two-way tables"
msgstr ""


#: R/ansari.test.R: 0
#: R/bartlett.test.R: 0
#: R/fligner.test.R: 0
#: R/kruskal.test.R: 0
#: R/mood.test.R: 0
#: R/t.test.R: 0
#: R/var.test.R: 0
#: R/wilcox.test.R: 0
#. R/ansari.test.R: gettextf("%s by %s", names(mf[1]), names(mf[2]))
#. R/bartlett.test.R: gettextf("%s by %s", names(mf[1]), names(mf[2]))
#. R/fligner.test.R: gettextf("%s by %s", names(mf[1]), names(mf[2]))
#. R/kruskal.test.R: gettextf("%s by %s", names(mf[1]), names(mf[2]))
#. R/mood.test.R: gettextf("%s by %s", names(mf[1]), names(mf[2]))
#. R/t.test.R: gettextf("%s by %s", names(mf[1]), names(mf[2]))
#. R/var.test.R: gettextf("%s by %s", names(mf[1]), names(mf[2]), domain = "R-stats")
#. R/wilcox.test.R: gettextf("%s by %s", names(mf[1]), names(mf[2]), domain = "R-stats")

msgid "%s by %s"
msgstr ""


#: R/family.R: 0
#. R/family.R: gettextf("%s link not recognised", sQuote(link))

msgid "%s link not recognised"
msgstr ""


#: R/stl.R: 0
#. R/stl.R: gettextf("%s must be 0 or 1", degname)

msgid "%s must be 0 or 1"
msgstr ""


#: R/contrast.R: 0
#: R/xtabs.R: 0
#. R/contrast.R: gettextf("%s needs package 'Matrix' correctly installed", "contr*(.., sparse=TRUE)")
#. R/contrast.R: gettextf("%s needs package 'Matrix' correctly installed", "contr*(.., sparse=TRUE)")
#. R/xtabs.R: gettextf("%s needs package 'Matrix' correctly installed", "xtabs(*, sparse=TRUE)")

msgid "%s needs package 'Matrix' correctly installed"
msgstr ""


#: R/interaction.plot.R: 0
#. R/interaction.plot.R: gettextf("%s of %s", paste(deparse(substitute(fun)), collapse = ""), paste(deparse(substitute(response)),     collapse = ""))

msgid "%s of %s"
msgstr ""


#: R/pairwise.R: 0
#: R/prop.test.R: 0
#. R/pairwise.R: gettextf("%s out of %s", deparse(substitute(x)), deparse(substitute(n)), domain = "R-stats")
#. R/prop.test.R: gettextf("%s out of %s", DNAME, deparse(substitute(n)), domain = "R-stats")

msgid "%s out of %s"
msgstr ""


#: R/prop.trend.test.R: 0
#. R/prop.trend.test.R: gettextf("%s out of %s,\n using scores: %s", deparse(substitute(x)), deparse(substitute(n)),     paste(score, collapse = " "), domain = "R-stats")

msgid "%s out of %s,\n using scores: %s"
msgstr ""


#: R/htest.R: 0
#. R/htest.R: gettextf("%s percent confidence interval:", format(100 * attr(x$conf.int, "conf.level")),     domain = "R-stats")

msgid "%s percent confidence interval:"
msgstr ""


#: R/poisson.test.R: 0
#. R/poisson.test.R: gettextf("%s time base: %s", deparse(substitute(x)), deparse(substitute(T)), domain = "R-stats")

msgid "%s time base: %s"
msgstr ""


#: R/integrate.R: 0
#. R/integrate.R: gettextf("%s with absolute error < %s", format(x$value, digits = digits), format(x$abs.error,     digits = 2L), domain = "R-stats")

msgid "%s with absolute error < %s"
msgstr ""


#: R/TukeyHSD.R: 0
#. R/TukeyHSD.R: gettextf("%s%% family-wise confidence level", format(100 * attr(x, "conf.level"),     2), domain = "R-stats")
#. R/TukeyHSD.R: gettextf("%s%% family-wise confidence level", format(100 * attr(x, "conf.level"),     digits = 2L), domain = "R-stats")

msgid "%s%% family-wise confidence level"
msgstr ""


#: R/aov.R: 0
#: R/bartlett.test.R: 0
#: R/chisq.test.R: 0
#: R/chisq.test.R: 0
#: R/cor.test.R: 0
#: R/density.R: 0
#: R/fisher.test.R: 0
#: R/fligner.test.R: 0
#: R/kruskal.test.R: 0
#: R/loglin.R: 0
#: R/mcnemar.test.R: 0
#: R/pairwise.R: 0
#: R/prop.test.R: 0
#: R/weighted.mean.R: 0
#: R/wilcox.test.R: 0
#. R/aov.R: gettextf("'%s' and '%s' arguments must have the same length", "coef", "contrast.obj")
#. R/aov.R: gettextf("'%s' and '%s' arguments must have the same length", "coef", "contrast.obj")
#. R/bartlett.test.R: gettextf("'%s' and '%s' arguments must have the same length", "x", "g")
#. R/chisq.test.R: gettextf("'%s' and '%s' arguments must have the same length", "x", "y")
#. R/chisq.test.R: gettextf("'%s' and '%s' arguments must have the same length", "x", "p")
#. R/cor.test.R: gettextf("'%s' and '%s' arguments must have the same length", "x", "y")
#. R/density.R: gettextf("'%s' and '%s' arguments must have the same length", "x", "weights")
#. R/fisher.test.R: gettextf("'%s' and '%s' arguments must have the same length", "x", "y")
#. R/fligner.test.R: gettextf("'%s' and '%s' arguments must have the same length", "x", "g")
#. R/kruskal.test.R: gettextf("'%s' and '%s' arguments must have the same length", "x", "g")
#. R/loglin.R: gettextf("'%s' and '%s' arguments must have the same length", "start", "table")
#. R/mcnemar.test.R: gettextf("'%s' and '%s' arguments must have the same length", "x", "y")
#. R/pairwise.R: gettextf("'%s' and '%s' arguments must have the same length", "x", "n")
#. R/prop.test.R: gettextf("'%s' and '%s' arguments must have the same length", "x", "n")
#. R/weighted.mean.R: gettextf("'%s' and '%s' arguments must have the same length", "x", "w")
#. R/wilcox.test.R: gettextf("'%s' and '%s' arguments must have the same length", "x", "y")

msgid "'%s' and '%s' arguments must have the same length"
msgstr ""


#: R/hclust.R: 0
#. R/hclust.R: gettextf("'%s' argument cannot be coerced to class %s", "x", dQuote("hclust"))

msgid "'%s' argument cannot be coerced to class %s"
msgstr ""


#: R/nlsFunc.R: 0
#. R/nlsFunc.R: gettextf("'%s' argument cannot be of mode '%s'", substitute(object), mode(object))

msgid "'%s' argument cannot be of mode '%s'"
msgstr ""


#: R/cancor.R: 0
#. R/cancor.R: gettextf("'%s' argument has rank 0", "x")
#. R/cancor.R: gettextf("'%s' argument has rank 0", "y")

msgid "'%s' argument has rank 0"
msgstr ""


#: R/kernel.R: 0
#. R/kernel.R: gettextf("'%s' argument is less than %d", "r", 1)
#. R/kernel.R: gettextf("'%s' argument is less than %d", "m", 1)
#. R/kernel.R: gettextf("'%s' argument is less than %d", "r", 0)
#. R/kernel.R: gettextf("'%s' argument is less than %d", "m", 1)

msgid "'%s' argument is less than %d"
msgstr ""


#: R/aggregate.R: 0
#: R/ansari.test.R: 0
#: R/bartlett.test.R: 0
#: R/cor.test.R: 0
#: R/fligner.test.R: 0
#: R/friedman.test.R: 0
#: R/ftable.R: 0
#: R/ftable.R: 0
#: R/kruskal.test.R: 0
#: R/mood.test.R: 0
#: R/oneway.test.R: 0
#: R/quade.test.R: 0
#: R/t.test.R: 0
#: R/var.test.R: 0
#: R/wilcox.test.R: 0
#: R/xtabs.R: 0
#. R/aggregate.R: gettextf("'%s' argument is missing or incorrect", "formula")
#. R/ansari.test.R: gettextf("'%s' argument is missing or incorrect", "formula")
#. R/bartlett.test.R: gettextf("'%s' argument is missing or incorrect", "formula")
#. R/cor.test.R: gettextf("'%s' argument is missing or incorrect", "formula")
#. R/fligner.test.R: gettextf("'%s' argument is missing or incorrect", "formula")
#. R/friedman.test.R: gettextf("'%s' argument is missing or incorrect", "formula")
#. R/ftable.R: gettextf("'%s' argument is missing or incorrect", "formula")
#. R/ftable.R: gettextf("'%s' argument is missing or incorrect", "col.vars")
#. R/kruskal.test.R: gettextf("'%s' argument is missing or incorrect", "formula")
#. R/mood.test.R: gettextf("'%s' argument is missing or incorrect", "formula")
#. R/oneway.test.R: gettextf("'%s' argument is missing or incorrect", "formula")
#. R/quade.test.R: gettextf("'%s' argument is missing or incorrect", "formula")
#. R/t.test.R: gettextf("'%s' argument is missing or incorrect", "formula")
#. R/var.test.R: gettextf("'%s' argument is missing or incorrect", "formula")
#. R/wilcox.test.R: gettextf("'%s' argument is missing or incorrect", "formula")
#. R/xtabs.R: gettextf("'%s' argument is missing or incorrect", "formula")

msgid "'%s' argument is missing or incorrect"
msgstr ""


#: R/kernel.R: 0
#. R/kernel.R: gettextf("'%s' argument is not a kernel", "k")
#. R/kernel.R: gettextf("'%s' argument is not a kernel", "x")
#. R/kernel.R: gettextf("'%s' argument is not a kernel", "k")

msgid "'%s' argument is not a kernel"
msgstr ""


#: R/dist.R: 0
#. R/dist.R: gettextf("'%s' argument is not a square matrix", "m")

msgid "'%s' argument is not a square matrix"
msgstr ""


#: R/diffinv.R: 0
#: R/kernel.R: 0
#. R/diffinv.R: gettextf("'%s' argument is not a vector", "x")
#. R/diffinv.R: gettextf("'%s' argument is not a vector", "x")
#. R/kernel.R: gettextf("'%s' argument is not a vector", "x")

msgid "'%s' argument is not a vector"
msgstr ""


#: R/diffinv.R: 0
#: R/embed.R: 0
#. R/diffinv.R: gettextf("'%s' argument is not a vector or matrix", "x")
#. R/embed.R: gettextf("'%s' argument is not a vector or matrix", "x")

msgid "'%s' argument is not a vector or matrix"
msgstr ""


#: R/lag.R: 0
#. R/lag.R: gettextf("'%s' argument is not an integer", "k")

msgid "'%s' argument is not an integer"
msgstr ""


#: R/ftable.R: 0
#: R/loess.R: 0
#: R/smspline.R: 0
#. R/ftable.R: gettextf("'%s' argument is not an object of class %s", "x", dQuote("ftable"))
#. R/loess.R: gettextf("'%s' argument is not an object of class %s", "object", dQuote("loess"))
#. R/smspline.R: gettextf("'%s' argument is not an object of class %s", "object", dQuote("smooth.spline"))

msgid "'%s' argument is not an object of class %s"
msgstr ""


#: R/density.R: 0
#. R/density.R: gettextf("'%s' argument is not positive", "bw")

msgid "'%s' argument is not positive"
msgstr ""


#: R/arima.R: 0
#: R/arma0.R: 0
#: R/arma0.R: 0
#: R/arma0.R: 0
#: R/contr.poly.R: 0
#: R/hclust.R: 0
#: R/hclust.R: 0
#: R/kernel.R: 0
#: R/nls-profile.R: 0
#: R/nls-profile.R: 0
#: R/reshape.R: 0
#. R/arima.R: gettextf("'%s' argument is of the wrong length", "fixed")
#. R/arima.R: gettextf("'%s' argument is of the wrong length", "init")
#. R/arma0.R: gettextf("'%s' argument is of the wrong length", "seasonal")
#. R/arma0.R: gettextf("'%s' argument is of the wrong length", "fixed")
#. R/arma0.R: gettextf("'%s' argument is of the wrong length", "init")
#. R/contr.poly.R: gettextf("'%s' argument is of the wrong length", "scores")
#. R/hclust.R: gettextf("'%s' argument is of the wrong length", "height", domain = "R-stats")
#. R/hclust.R: gettextf("'%s' argument is of the wrong length", "order", domain = "R-stats")
#. R/kernel.R: gettextf("'%s' argument is of the wrong length", "coef")
#. R/nls-profile.R: gettextf("'%s' argument is of the wrong length", "params")
#. R/nls-profile.R: gettextf("'%s' argument is of the wrong length", "varying")
#. R/reshape.R: gettextf("'%s' argument is of the wrong length", "times")

msgid "'%s' argument is of the wrong length"
msgstr ""


#: R/biplot.R: 0
#: R/quantile.R: 0
#. R/biplot.R: gettextf("'%s' argument is outside [0,1]", "scale")
#. R/biplot.R: gettextf("'%s' argument is outside [0,1]", "scale")
#. R/quantile.R: gettextf("'%s' argument is outside [0,1]", "probs")

msgid "'%s' argument is outside [0,1]"
msgstr ""


#: R/loess.R: 0
#: R/nlm.R: 0
#. R/loess.R: gettextf("'%s' argument must be 0, 1 or 2", "degree")
#. R/nlm.R: gettextf("'%s' argument must be 0, 1 or 2", "print.level")

msgid "'%s' argument must be 0, 1 or 2"
msgstr ""


#: R/ar.R: 0
#. R/ar.R: gettextf("'%s' argument must be >= %d", "order.max", 1)
#. R/ar.R: gettextf("'%s' argument must be >= %d", "order.max", 0)
#. R/ar.R: gettextf("'%s' argument must be >= %d", "order.max", 0)
#. R/ar.R: gettextf("'%s' argument must be >= %d", "order.max", 1)
#. R/ar.R: gettextf("'%s' argument must be >= %d", "order.max", 1)

msgid "'%s' argument must be >= %d"
msgstr ""


#: R/ftable.R: 0
#. R/ftable.R: gettextf("'%s' argument must be a character string or connection", "file")

msgid "'%s' argument must be a character string or connection"
msgstr ""


#: R/dendrogram.R: 0
#. R/dendrogram.R: gettextf("'%s' argument must be a character vector of length '%s'", "ColSideColors",     "ncol(x)")
#. R/dendrogram.R: gettextf("'%s' argument must be a character vector of length '%s'", "RowSideColors",     "nrow(x)")

msgid "'%s' argument must be a character vector of length '%s'"
msgstr ""


#: R/model.tables.R: 0
#. R/model.tables.R: gettextf("'%s' argument must be a function", "na.action")

msgid "'%s' argument must be a function"
msgstr ""


#: R/aggregate.R: 0
#: R/aov.R: 0
#: R/ts.R: 0
#. R/aggregate.R: gettextf("'%s' argument must be a list", "by")
#. R/aov.R: gettextf("'%s' argument must be a list", "split")
#. R/ts.R: gettextf("'%s' argument must be a list", "model")

msgid "'%s' argument must be a list"
msgstr ""


#: R/lm.R: 0
#. R/lm.R: gettextf("'%s' argument must be a matrix", "x")
#. R/lm.R: gettextf("'%s' argument must be a matrix", "x")

msgid "'%s' argument must be a matrix"
msgstr ""


#: R/cor.test.R: 0
#: R/glm.R: 0
#: R/lm.R: 0
#: R/smspline.R: 0
#. R/cor.test.R: gettextf("'%s' argument must be a numeric vector", "x")
#. R/cor.test.R: gettextf("'%s' argument must be a numeric vector", "y")
#. R/glm.R: gettextf("'%s' argument must be a numeric vector", "weights")
#. R/lm.R: gettextf("'%s' argument must be a numeric vector", "weights")
#. R/smspline.R: gettextf("'%s' argument must be a numeric vector", "y")

msgid "'%s' argument must be a numeric vector"
msgstr ""


#: R/ansari.test.R: 0
#: R/binom.test.R: 0
#: R/binom.test.R: 0
#: R/cor.test.R: 0
#: R/fisher.test.R: 0
#: R/mantelhaen.test.R: 0
#: R/prop.test.R: 0
#: R/t.test.R: 0
#: R/var.test.R: 0
#: R/wilcox.test.R: 0
#. R/ansari.test.R: gettextf("'%s' argument must be a single number between 0 and 1", "conf.level")
#. R/binom.test.R: gettextf("'%s' argument must be a single number between 0 and 1", "p")
#. R/binom.test.R: gettextf("'%s' argument must be a single number between 0 and 1", "conf.level")
#. R/cor.test.R: gettextf("'%s' argument must be a single number between 0 and 1", "conf.level")
#. R/fisher.test.R: gettextf("'%s' argument must be a single number between 0 and 1", "conf.level")
#. R/mantelhaen.test.R: gettextf("'%s' argument must be a single number between 0 and 1", "conf.level")
#. R/prop.test.R: gettextf("'%s' argument must be a single number between 0 and 1", "conf.level")
#. R/t.test.R: gettextf("'%s' argument must be a single number between 0 and 1", "conf.level")
#. R/var.test.R: gettextf("'%s' argument must be a single number between 0 and 1", "conf.level")
#. R/wilcox.test.R: gettextf("'%s' argument must be a single number between 0 and 1", "conf.level")

msgid "'%s' argument must be a single number between 0 and 1"
msgstr ""


#: R/poisson.test.R: 0
#: R/var.test.R: 0
#. R/poisson.test.R: gettextf("'%s' argument must be a single positive number", "r")
#. R/var.test.R: gettextf("'%s' argument must be a single positive number", "ratio")

msgid "'%s' argument must be a single positive number"
msgstr ""


#: R/kernel.R: 0
#. R/kernel.R: gettextf("'%s' argument must be a vector", "coef")

msgid "'%s' argument must be a vector"
msgstr ""


#: R/addmargins.R: 0
#. R/addmargins.R: gettextf("'%s' argument must be an array or table", "A")

msgid "'%s' argument must be an array or table"
msgstr ""


#: R/ftable.R: 0
#: R/models.R: 0
#: R/plot.lm.R: 0
#. R/ftable.R: gettextf("'%s' argument must be an object of class %s", "x", dQuote("ftable"))
#. R/ftable.R: gettextf("'%s' argument must be an object of class %s", "x", dQuote("ftable"))
#. R/models.R: gettextf("'%s' argument must be an object of class %s", "termobj", dQuote("terms"))
#. R/plot.lm.R: gettextf("'%s' argument must be an object of class %s", "x", dQuote("lm"))

msgid "'%s' argument must be an object of class %s"
msgstr ""


#: R/acf.R: 0
#: R/approx.R: 0
#: R/ar.R: 0
#: R/contr.poly.R: 0
#: R/smspline.R: 0
#. R/acf.R: gettextf("'%s' argument must be at least %d", "lag.max", 0)
#. R/acf.R: gettextf("'%s' argument must be at least %d", "lag.max", 1)
#. R/approx.R: gettextf("'%s' argument must be at least %d", "n", 1)
#. R/ar.R: gettextf("'%s' argument must be at least %d", "n.ahead", 1)
#. R/contr.poly.R: gettextf("'%s' argument must be at least %d", "degree", 1)
#. R/smspline.R: gettextf("'%s' argument must be at least %d", "nknots", 1)

msgid "'%s' argument must be at least %d"
msgstr ""


#: R/identify.hclust.R: 0
#: R/smspline.R: 0
#: R/spectrum.R: 0
#: R/splinefun.R: 0
#: R/splinefun.R: 0
#: R/symnum.R: 0
#: R/symnum.R: 0
#. R/identify.hclust.R: gettextf("'%s' argument must be between %s and %s", "k", "2", length(tree$height))
#. R/smspline.R: gettextf("'%s' argument must be between %s and %s", "span", "0", "1")
#. R/spectrum.R: gettextf("'%s' argument must be between %s and %s", "p", "0", "0.5")
#. R/splinefun.R: gettextf("'%s' argument must be between %s and %s", "deriv", "0", "3")
#. R/splinefun.R: gettextf("'%s' argument must be between %s and %s", "deriv", "0", "3")
#. R/symnum.R: gettextf("'%s' argument must be between %s and %s", "x", "-1", "1")
#. R/symnum.R: gettextf("'%s' argument must be between %s and %s", "x", format(minc), format(maxc))

msgid "'%s' argument must be between %s and %s"
msgstr ""


#: R/plot.lm.R: 0
#. R/plot.lm.R: gettextf("'%s' argument must be in {1,..,%d}", "which", 6)
#. R/plot.lm.R: gettextf("'%s' argument must be in {1,..,%d}", "id.n", n, domain = "R-stats")

msgid "'%s' argument must be in {1,..,%d}"
msgstr ""


#: R/StructTS.R: 0
#: R/acf.R: 0
#: R/acf.R: 0
#: R/ar.R: 0
#: R/ar.R: 0
#: R/ar.R: 0
#: R/arima.R: 0
#: R/arma0.R: 0
#: R/cor.R: 0
#: R/cor.R: 0
#: R/density.R: 0
#: R/ks.test.R: 0
#: R/models.R: 0
#: R/wilcox.test.R: 0
#: R/wilcox.test.R: 0
#. R/StructTS.R: gettextf("'%s' argument must be numeric", "x")
#. R/acf.R: gettextf("'%s' argument must be numeric", "x")
#. R/acf.R: gettextf("'%s' argument must be numeric", "x")
#. R/ar.R: gettextf("'%s' argument must be numeric", "x")
#. R/ar.R: gettextf("'%s' argument must be numeric", "x")
#. R/ar.R: gettextf("'%s' argument must be numeric", "x")
#. R/arima.R: gettextf("'%s' argument must be numeric", "x")
#. R/arma0.R: gettextf("'%s' argument must be numeric", "x")
#. R/cor.R: gettextf("'%s' argument must be numeric", "x")
#. R/cor.R: gettextf("'%s' argument must be numeric", "y")
#. R/density.R: gettextf("'%s' argument must be numeric", "x")
#. R/ks.test.R: gettextf("'%s' argument must be numeric", "x")
#. R/models.R: gettextf("'%s' argument must be numeric", "offset")
#. R/wilcox.test.R: gettextf("'%s' argument must be numeric", "x")
#. R/wilcox.test.R: gettextf("'%s' argument must be numeric", "y")

msgid "'%s' argument must be numeric"
msgstr ""


#: R/biplot.R: 0
#: R/nlm.R: 0
#: R/relevel.R: 0
#: R/smspline.R: 0
#. R/biplot.R: gettextf("'%s' argument must be of length %d", "choices", 2)
#. R/biplot.R: gettextf("'%s' argument must be of length %d", "choices", 2)
#. R/nlm.R: gettextf("'%s' argument must be of length %d", "interval", 2)
#. R/relevel.R: gettextf("'%s' argument must be of length %d", "ref", 1)
#. R/smspline.R: gettextf("'%s' argument must be of length %d", "spar", 1)

msgid "'%s' argument must be of length %d"
msgstr ""


#: R/kmeans.R: 0
#: R/runmed.R: 0
#. R/kmeans.R: gettextf("'%s' argument must be positive", "iter.max")
#. R/runmed.R: gettextf("'%s' argument must be positive", "k")

msgid "'%s' argument must be positive"
msgstr ""


#: R/ARMAtheory.R: 0
#: R/stepfun.R: 0
#. R/ARMAtheory.R: gettextf("'%s' argument must have length >= %d", "acf", 2)
#. R/stepfun.R: gettextf("'%s' argument must have length >= %d", "x", 1)

msgid "'%s' argument must have length >= %d"
msgstr ""


#: R/nls.R: 0
#. R/nls.R: gettextf("'%s' argument will be ignored", "subset")
#. R/nls.R: gettextf("'%s' argument will be ignored", "na.action")

msgid "'%s' argument will be ignored"
msgstr ""


#: R/symnum.R: 0
#. R/symnum.R: gettextf("'%s' must be unique, but are = %s", "cutpoints", tmp_n)
#. R/symnum.R: gettextf("'%s' must be unique, but are = %s", "symbols", tmp_n)

msgid "'%s' must be unique, but are = %s"
msgstr ""


#: R/friedman.test.R: 0
#: R/mantelhaen.test.R: 0
#: R/prop.test.R: 0
#: R/quade.test.R: 0
#. R/friedman.test.R: gettextf("'%s', '%s' and '%s' arguments must have the same length", "y", "groups",     "blocks")
#. R/mantelhaen.test.R: gettextf("'%s', '%s' and '%s' arguments must have the same length", "x", "y", "z")
#. R/prop.test.R: gettextf("'%s', '%s' and '%s' arguments must have the same length", "x", "n", "p")
#. R/quade.test.R: gettextf("'%s', '%s' and '%s' arguments must have the same length", "y", "groups",     "blocks")

msgid "'%s', '%s' and '%s' arguments must have the same length"
msgstr ""


#: R/smspline.R: 0
#. R/smspline.R: message("'.nknots.smspl()' is now exported; use it instead of 'n.knots()'")

msgid "'.nknots.smspl()' is now exported; use it instead of 'n.knots()'"
msgstr ""


#: R/anova.R: 0
#. R/anova.R: stop("'P.values' argument is TRUE, but 'has.Pvalue' argument is not")

msgid "'P.values' argument is TRUE, but 'has.Pvalue' argument is not"
msgstr ""


#: R/poisson.test.R: 0
#. R/poisson.test.R: stop("'T' argument must be nonnegative")

msgid "'T' argument must be nonnegative"
msgstr ""


#: R/cor.R: 0
#. R/cor.R: stop("'V' is not a square numeric matrix")

msgid "'V' is not a square numeric matrix"
msgstr ""


#: R/mlm.R: 0
#. R/mlm.R: stop("'X' does not define a subspace of 'M'")

msgid "'X' does not define a subspace of 'M'"
msgstr ""


#: R/dendrogram.R: 0
#. R/dendrogram.R: stop("'X' is not a dendrogram")

msgid "'X' is not a dendrogram"
msgstr ""


#: R/lsfit.R: 0
#. R/lsfit.R: warning("'X' matrix was collinear")

msgid "'X' matrix was collinear"
msgstr ""


#: R/smspline.R: 0
#. R/smspline.R: warning("'all.knots' argument is TRUE; 'nknots' specification is disregarded")

msgid "'all.knots' argument is TRUE; 'nknots' specification is disregarded"
msgstr ""


#: R/HoltWinters.R: 0
#. R/HoltWinters.R: stop("'alpha', 'beta' and 'gamma' must be within the unit interval")

msgid "'alpha', 'beta' and 'gamma' must be within the unit interval"
msgstr ""


#: R/nls.R: 0
#. R/nls.R: gettextf("'anova()' function is only defined for sequences of objects of class %s",     dQuote("nls"))
#. R/nls.R: gettextf("'anova()' function is only defined for sequences of objects of class %s",     dQuote("nls"))

msgid "'anova()' function is only defined for sequences of objects of class %s"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: stop("'ar' part of model is not stationary")

msgid "'ar' part of model is not stationary"
msgstr ""


#: R/arima.R: 0
#. R/arima.R: stop("'arima()' method is implemented only for univariate time series")

msgid "'arima()' method is implemented only for univariate time series"
msgstr ""


#: R/kmeans.R: 0
#. R/kmeans.R: stop("'centers' must be a number or a matrix")

msgid "'centers' must be a number or a matrix"
msgstr ""


#: R/filter.R: 0
#. R/filter.R: stop("'circular' argument must be logical and not NA")

msgid "'circular' argument must be logical and not NA"
msgstr ""


#: R/aov.R: 0
#. R/aov.R: stop("'coef' argument must define a contrast, i.e., sum to 0")
#. R/aov.R: stop("'coef' argument must define a contrast, i.e., sum to 0")

msgid "'coef' argument must define a contrast, i.e., sum to 0"
msgstr ""


#: R/nlminb.R: 0
#: R/nls.R: 0
#. R/nlminb.R: stop("'control' argument must be a named list")
#. R/nls.R: stop("'control' argument must be a named list")

msgid "'control' argument must be a named list"
msgstr ""


#: R/nlminb.R: 0
#. R/nlminb.R: gettextf("'control' component '%s' = %g, is out of range", names(port_cpos)[B], v[iv1])

msgid "'control' component '%s' = %g, is out of range"
msgstr ""


#: R/factanal.R: 0
#: R/princomp.R: 0
#. R/factanal.R: stop("'covmat' is not a valid covariance list")
#. R/princomp.R: stop("'covmat' is not a valid covariance list")

msgid "'covmat' is not a valid covariance list"
msgstr ""


#: R/factanal.R: 0
#: R/princomp.R: 0
#. R/factanal.R: stop("'covmat' is of unknown type")
#. R/princomp.R: stop("'covmat' is of unknown type")

msgid "'covmat' is of unknown type"
msgstr ""


#: R/cpgram.R: 0
#. R/cpgram.R: stop("'cpgram()' is implemented only for univariate time series")

msgid "'cpgram()' is implemented only for univariate time series"
msgstr ""


#: R/model.tables.R: 0
#. R/model.tables.R: stop("'cterms' argument must match terms in model object")

msgid "'cterms' argument must match terms in model object"
msgstr ""


#: R/symnum.R: 0
#. R/symnum.R: gettextf("'cutpoints' must be unique in 0 < cuts < 1, but are = %s", tmp_n)

msgid "'cutpoints' must be unique in 0 < cuts < 1, but are = %s"
msgstr ""


#: R/smspline.R: 0
#. R/smspline.R: stop("'cv' argument must not be NA when 'df' argument is specified")

msgid "'cv' argument must not be NA when 'df' argument is specified"
msgstr ""


#: R/models.R: 0
#. R/models.R: stop("'data' must be a data.frame, not a matrix or an array")
#. R/models.R: stop("'data' must be a data.frame, not a matrix or an array")

msgid "'data' must be a data.frame, not a matrix or an array"
msgstr ""


#: R/nls.R: 0
#. R/nls.R: stop("'data' must be a list or an environment")

msgid "'data' must be a list or an environment"
msgstr ""


#: R/contr.poly.R: 0
#. R/contr.poly.R: stop("'degree' must be less than number of unique points")
#. R/contr.poly.R: stop("'degree' must be less than number of unique points")

msgid "'degree' must be less than number of unique points"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: warning("'end' argument was not changed")

msgid "'end' argument was not changed"
msgstr ""


#: R/nlm.R: 0
#. R/nlm.R: if (doX) "did not succeed extending the interval endpoints for f(lower) * f(upper) <= 0" else "'f()' values at end points are not of opposite sign"

msgid "'f()' values at end points are not of opposite sign"
msgstr ""


#: R/nlm.R: 0
#. R/nlm.R: stop("'f.lower = f(lower)' is NA")

msgid "'f.lower = f(lower)' is NA"
msgstr ""


#: R/nlm.R: 0
#. R/nlm.R: stop("'f.upper = f(upper)' is NA")

msgid "'f.upper = f(upper)' is NA"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: stop("'family' argument seems not to be a valid family object", call. = FALSE)

msgid "'family' argument seems not to be a valid family object"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: stop("'family' argument was not recognized")

msgid "'family' argument was not recognized"
msgstr ""


#: R/filter.R: 0
#. R/filter.R: stop("'filter' is longer than time series")

msgid "'filter' is longer than time series"
msgstr ""


#: R/bartlett.test.R: 0
#: R/fligner.test.R: 0
#: R/kruskal.test.R: 0
#. R/bartlett.test.R: stop("'formula' argument should be of the form response ~ group")
#. R/fligner.test.R: stop("'formula' argument should be of the form response ~ group")
#. R/kruskal.test.R: stop("'formula' argument should be of the form response ~ group")

msgid "'formula' argument should be of the form response ~ group"
msgstr ""


#: R/ftable.R: 0
#. R/ftable.R: stop("'formula' has '.' in both left and right hand sides")

msgid "'formula' has '.' in both left and right hand sides"
msgstr ""


#: R/aggregate.R: 0
#: R/ftable.R: 0
#. R/aggregate.R: stop("'formula' must have both left and right hand sides")
#. R/ftable.R: stop("'formula' must have both left and right hand sides")

msgid "'formula' must have both left and right hand sides"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: stop("'frequency' and 'deltat' arguments are both supplied and are inconsistent")

msgid "'frequency' and 'deltat' arguments are both supplied and are inconsistent"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: warning("'frequency' argument was not changed")

msgid "'frequency' argument was not changed"
msgstr ""


#: R/dendrogram.R: 0
#. R/dendrogram.R: gettextf("'height' must be at least %g, the maximal height of its components", h.max)

msgid "'height' must be at least %g, the maximal height of its components"
msgstr ""


#: R/fisher.test.R: 0
#. R/fisher.test.R: warning("'hybrid' argument is ignored for a 2 x 2 table")

msgid "'hybrid' argument is ignored for a 2 x 2 table"
msgstr ""


#: R/identify.hclust.R: 0
#. R/identify.hclust.R: stop("'k' and 'h' arguments must be a scalar")

msgid "'k' and 'h' arguments must be a scalar"
msgstr ""


#: R/runmed.R: 0
#. R/runmed.R: gettextf("'k' is bigger than 'n'!  Changing 'k' to %d", k <- as.integer(1 + 2 * ((n -     1)%/%2)))

msgid "'k' is bigger than 'n'!  Changing 'k' to %d"
msgstr ""


#: R/cmdscale.R: 0
#. R/cmdscale.R: stop("'k' must be in {1, 2, ..  n - 1}")

msgid "'k' must be in {1, 2, ..  n - 1}"
msgstr ""


#: R/runmed.R: 0
#. R/runmed.R: gettextf("'k' must be odd!  Changing 'k' to %d", k <- as.integer(1 + 2 * (k%/%2)))

msgid "'k' must be odd!  Changing 'k' to %d"
msgstr ""


#: R/kernel.R: 0
#. R/kernel.R: stop("'kernapply' is not available for object 'x'")

msgid "'kernapply' is not available for object 'x'"
msgstr ""


#: R/logLik.R: 0
#. R/logLik.R: gettextf("'log Lik.' %s (df=%s)", paste(format(c(x), digits = digits), collapse = ", "),     format(attr(x, "df")), domain = "R-stats")

msgid "'log Lik.' %s (df=%s)"
msgstr ""


#: R/logLik.R: 0
#. R/logLik.R: stop("'logLik.lm()' does not support multiple responses")

msgid "'logLik.lm()' does not support multiple responses"
msgstr ""


#: R/mad.R: 0
#. R/mad.R: stop("'low' and 'high' arguments cannot be both TRUE")

msgid "'low' and 'high' arguments cannot be both TRUE"
msgstr ""


#: R/optim.R: 0
#. R/optim.R: stop("'lower' and 'upper' arguments must be finite values")

msgid "'lower' and 'upper' arguments must be finite values"
msgstr ""


#: R/kernel.R: 0
#. R/kernel.R: stop("'m' argument must be numeric vector with non-negative integers")

msgid "'m' argument must be numeric vector with non-negative integers"
msgstr ""


#: R/termplot.R: 0
#. R/termplot.R: stop("'main' must be TRUE, FALSE, NULL or character (vector).")
#. R/termplot.R: stop("'main' must be TRUE, FALSE, NULL or character (vector).")

msgid "'main' must be TRUE, FALSE, NULL or character (vector)."
msgstr ""


#: R/loglin.R: 0
#. R/loglin.R: stop("'margin' argument must contain names or numbers corresponding to 'table' argument")

msgid "'margin' argument must contain names or numbers corresponding to 'table' argument"
msgstr ""


#: R/dendrogram.R: 0
#. R/dendrogram.R: stop("'margins' must be a numeric vector of length 2")

msgid "'margins' must be a numeric vector of length 2"
msgstr ""


#: R/hclust.R: 0
#. R/hclust.R: gettext("'merge' component in dendrogram must be integer", domain = "R-stats")

msgid "'merge' component in dendrogram must be integer"
msgstr ""


#: R/hclust.R: 0
#. R/hclust.R: gettext("'merge' matrix has invalid contents", domain = "R-stats")

msgid "'merge' matrix has invalid contents"
msgstr ""


#: R/dendrogram.R: 0
#. R/dendrogram.R: warning("'midcache()' of non-binary dendrograms only partly implemented")

msgid "'midcache()' of non-binary dendrograms only partly implemented"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: stop("'model$order' must be of length 3")

msgid "'model$order' must be of length 3"
msgstr ""


#: R/termplot.R: 0
#. R/termplot.R: warning("'model' appears to involve interactions: see the help page", domain = "R-stats",     immediate. = TRUE)

msgid "'model' appears to involve interactions: see the help page"
msgstr ""


#: R/model.tables.R: 0
#. R/model.tables.R: stop("'model.tables()' is not implemented for multiple responses")

msgid "'model.tables()' is not implemented for multiple responses"
msgstr ""


#: R/t.test.R: 0
#: R/wilcox.test.R: 0
#. R/t.test.R: stop("'mu' must be a single number")
#. R/wilcox.test.R: stop("'mu' must be a single number")

msgid "'mu' must be a single number"
msgstr ""


#: R/fisher.test.R: 0
#. R/fisher.test.R: stop("'mult' must be integer >= 2, typically = 30")

msgid "'mult' must be integer >= 2, typically = 30"
msgstr ""


#: R/binom.test.R: 0
#. R/binom.test.R: stop("'n' argument must be a positive integer >= 'x' argument")

msgid "'n' argument must be a positive integer >= 'x' argument"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: stop("'n' argument must be strictly positive")

msgid "'n' argument must be strictly positive"
msgstr ""


#: R/power.anova.test.R: 0
#. R/power.anova.test.R: gettext("'n' is number in each group", domain = "R-stats")

msgid "'n' is number in each group"
msgstr ""


#: R/power.R: 0
#. R/power.R: gettext("'n' is number of *pairs*, 'sd' is std.dev. of *differences* within pairs")

msgid "'n' is number of *pairs*, 'sd' is std.dev. of *differences* within pairs"
msgstr ""


#: R/prcomp.R: 0
#: R/princomp-add.R: 0
#. R/prcomp.R: stop("'newdata' does not have named columns matching one or more of the original columns")
#. R/princomp-add.R: stop("'newdata' does not have named columns matching one or more of the original columns")

msgid "'newdata' does not have named columns matching one or more of the original columns"
msgstr ""


#: R/prcomp.R: 0
#: R/princomp-add.R: 0
#. R/prcomp.R: stop("'newdata' does not have the correct number of columns")
#. R/princomp-add.R: stop("'newdata' does not have the correct number of columns")

msgid "'newdata' does not have the correct number of columns"
msgstr ""


#: R/prcomp.R: 0
#: R/princomp-add.R: 0
#. R/prcomp.R: stop("'newdata' must be a matrix or data frame")
#. R/princomp-add.R: stop("'newdata' must be a matrix or data frame")

msgid "'newdata' must be a matrix or data frame"
msgstr ""


#: R/smspline.R: 0
#. R/smspline.R: stop("'nknots' must be numeric (in {1,..,n})")

msgid "'nknots' must be numeric (in {1,..,n})"
msgstr ""


#: R/ppr.R: 0
#. R/ppr.R: stop("'nterms' is missing with no default")

msgid "'nterms' is missing with no default"
msgstr ""


#: R/aov.R: 0
#. R/aov.R: stop("'object' argument does not include an error 'qr' component")

msgid "'object' argument does not include an error 'qr' component"
msgstr ""


#: R/C.R: 0
#. R/C.R: stop("'object' argument is not interpretable as a factor")

msgid "'object' argument is not interpretable as a factor"
msgstr ""


#: R/lm.R: 0
#. R/lm.R: stop("'object' has no 'effects' component")

msgid "'object' has no 'effects' component"
msgstr ""


#: R/fisher.test.R: 0
#. R/fisher.test.R: stop("'or' argument must be a single number between 0 and Inf")

msgid "'or' argument must be a single number between 0 and Inf"
msgstr ""


#: R/arima.R: 0
#. R/arima.R: stop("'order' argument must be a non-negative numeric vector of length 3")

msgid "'order' argument must be a non-negative numeric vector of length 3"
msgstr ""


#: R/arma0.R: 0
#. R/arma0.R: stop("'order' must be a non-negative numeric vector of length 3")

msgid "'order' must be a non-negative numeric vector of length 3"
msgstr ""


#: R/dendrogram.R: 0
#. R/dendrogram.R: stop("'order.dendrogram' requires a dendrogram")

msgid "'order.dendrogram' requires a dendrogram"
msgstr ""


#: R/ar.R: 0
#. R/ar.R: stop("'order.max' argument must be < 'n.used' argument")
#. R/ar.R: stop("'order.max' argument must be < 'n.used' argument")
#. R/ar.R: stop("'order.max' argument must be < 'n.used' argument")
#. R/ar.R: stop("'order.max' argument must be < 'n.used' argument")

msgid "'order.max' argument must be < 'n.used' argument"
msgstr ""


#: R/stepfun.R: 0
#. R/stepfun.R: stop("'plot.stepfun' called with wrong type of argument 'x'")

msgid "'plot.stepfun' called with wrong type of argument 'x'"
msgstr ""


#: R/ppr.R: 0
#. R/ppr.R: stop("'ppr' applies only to numerical variables")

msgid "'ppr' applies only to numerical variables"
msgstr ""


#: R/princomp.R: 0
#. R/princomp.R: stop("'princomp' can only be used with more units than variables")

msgid "'princomp' can only be used with more units than variables"
msgstr ""


#: R/distn.R: 0
#. R/distn.R: stop("'prob' and 'mu' arguments are both specified")
#. R/distn.R: stop("'prob' and 'mu' arguments are both specified")
#. R/distn.R: stop("'prob' and 'mu' arguments are both specified")
#. R/distn.R: stop("'prob' and 'mu' arguments are both specified")

msgid "'prob' and 'mu' arguments are both specified"
msgstr ""


#: R/proj.R: 0
#. R/proj.R: stop("'proj()' is not implemented for multiple responses")
#. R/proj.R: stop("'proj()' is not implemented for multiple responses")

msgid "'proj()' is not implemented for multiple responses"
msgstr ""


#: R/relevel.R: 0
#. R/relevel.R: stop("'ref' must be an existing level")

msgid "'ref' must be an existing level"
msgstr ""


#: R/relevel.R: 0
#. R/relevel.R: stop("'relevel' only for factors")
#. R/relevel.R: stop("'relevel' only for factors")

msgid "'relevel' only for factors"
msgstr ""


#: R/dendrogram.R: 0
#. R/dendrogram.R: stop("'reorder.dendrogram' requires a dendrogram")

msgid "'reorder.dendrogram' requires a dendrogram"
msgstr ""


#: R/ftable.R: 0
#. R/ftable.R: stop("'row.var.names' missing")

msgid "'row.var.names' missing"
msgstr ""


#: R/acf.R: 0
#. R/acf.R: stop("'sampleT' and 'nser' arguments must be integer")

msgid "'sampleT' and 'nser' arguments must be integer"
msgstr ""


#: R/contr.poly.R: 0
#. R/contr.poly.R: stop("'scores' must all be different numbers")

msgid "'scores' must all be different numbers"
msgstr ""


#: R/ar.R: 0
#. R/ar.R: warning("'se.fit()' not yet implemented for multivariate models")

msgid "'se.fit()' not yet implemented for multivariate models"
msgstr ""


#: R/arima.R: 0
#. R/arima.R: stop("'seasonal$order' component must be a non-negative numeric vector of length 3")

msgid "'seasonal$order' component must be a non-negative numeric vector of length 3"
msgstr ""


#: R/arma0.R: 0
#. R/arma0.R: stop("'seasonal$order' must be a non-negative numeric vector of length 3")

msgid "'seasonal$order' must be a non-negative numeric vector of length 3"
msgstr ""


#: R/arima.R: 0
#. R/arima.R: stop("'seasonal' argument must be a list with component 'order'")
#. R/arima.R: stop("'seasonal' argument must be a list with component 'order'")

msgid "'seasonal' argument must be a list with component 'order'"
msgstr ""


#: R/arma0.R: 0
#. R/arma0.R: stop("'seasonal' must be a list with component 'order'")
#. R/arma0.R: stop("'seasonal' must be a list with component 'order'")

msgid "'seasonal' must be a list with component 'order'"
msgstr ""


#: R/reshape.R: 0
#. R/reshape.R: stop("'sep' must be a character string")

msgid "'sep' must be a character string"
msgstr ""


#: R/filter.R: 0
#. R/filter.R: stop("'sides' argument must be 1 or 2")

msgid "'sides' argument must be 1 or 2"
msgstr ""


#: R/power.R: 0
#: R/power.anova.test.R: 0
#. R/power.R: stop("'sig.level' argument must be numeric in [0, 1]")
#. R/power.R: stop("'sig.level' argument must be numeric in [0, 1]")
#. R/power.anova.test.R: stop("'sig.level' argument must be numeric in [0, 1]")

msgid "'sig.level' argument must be numeric in [0, 1]"
msgstr ""


#: R/spline.R: 0
#. R/spline.R: stop("'spline' requires n >= 1")

msgid "'spline' requires n >= 1"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: stop("'start' > 'end'")

msgid "'start' > 'end'"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: warning("'start' argument was not changed")

msgid "'start' argument was not changed"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: stop("'start' cannot be after 'end'")
#. R/ts.R: stop("'start' cannot be after 'end'")

msgid "'start' cannot be after 'end'"
msgstr ""


#: R/density.R: 0
#. R/density.R: warning("'sum(weights) != 1'  -- will not get true density")

msgid "'sum(weights) != 1'  -- will not get true density"
msgstr ""


#: R/models.R: 0
#. R/models.R: stop("'termlabels' must be a character vector of length at least one")

msgid "'termlabels' must be a character vector of length at least one"
msgstr ""


#: R/smspline.R: 0
#. R/smspline.R: stop("'tol' must be strictly positive and finite")

msgid "'tol' must be strictly positive and finite"
msgstr ""


#: R/optim.R: 0
#. R/optim.R: stop("'trace != 0' needs 'REPORT >= 1'")

msgid "'trace != 0' needs 'REPORT >= 1'"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: stop("'ts' object must have one or more observations")

msgid "'ts' object must have one or more observations"
msgstr ""


#: R/smspline.R: 0
#. R/smspline.R: stop("'type = \"partial\"' is not yet implemented")

msgid "'type = \"partial\"' is not yet implemented"
msgstr ""


#: R/family.R: 0
#. R/family.R: gettextf("'variance' \"%s\" is invalid: possible values are \"mu(1-mu)\", \"mu\", \"mu^2\", \"mu^3\" and \"constant\"",     variance_nm)

msgid "'variance' \"%s\" is invalid: possible values are \"mu(1-mu)\", \"mu\", \"mu^2\", \"mu^3\" and \"constant\""
msgstr ""


#: R/nls-profile.R: 0
#. R/nls-profile.R: stop("'varying' argument must be in 'seq_along(pars)'")

msgid "'varying' argument must be in 'seq_along(pars)'"
msgstr ""


#: R/reshape.R: 0
#. R/reshape.R: stop("'varying' arguments must be the same length")

msgid "'varying' arguments must be the same length"
msgstr ""


#: R/nls-profile.R: 0
#. R/nls-profile.R: stop("'varying' must be in seq_along(pars)")

msgid "'varying' must be in seq_along(pars)"
msgstr ""


#: R/nls-profile.R: 0
#. R/nls-profile.R: stop("'varying' must be logical, integer or character")

msgid "'varying' must be logical, integer or character"
msgstr ""


#: R/reshape.R: 0
#. R/reshape.R: stop("'varying' must be nonempty list or vector")

msgid "'varying' must be nonempty list or vector"
msgstr ""


#: R/density.R: 0
#. R/density.R: stop("'weights' argument must all be finite")

msgid "'weights' argument must all be finite"
msgstr ""


#: R/density.R: 0
#. R/density.R: stop("'weights' argument must not be negative")

msgid "'weights' argument must not be negative"
msgstr ""


#: R/lm.R: 0
#. R/lm.R: stop("'weights' as formula should be one-sided")

msgid "'weights' as formula should be one-sided"
msgstr ""


#: R/TukeyHSD.R: 0
#. R/TukeyHSD.R: stop("'which' specified no factors")

msgid "'which' specified no factors"
msgstr ""


#: R/TukeyHSD.R: 0
#. R/TukeyHSD.R: warning("'which' specified some non-factors which will be dropped")

msgid "'which' specified some non-factors which will be dropped"
msgstr ""


#: R/acf.R: 0
#. R/acf.R: stop("'x$lag' must have at least 1 column")

msgid "'x$lag' must have at least 1 column"
msgstr ""


#: R/poisson.test.R: 0
#. R/poisson.test.R: stop("'x' and 'T' arguments have incompatible length")

msgid "'x' and 'T' arguments have incompatible length"
msgstr ""


#: R/distn.R: 0
#. R/distn.R: stop("'x' and 'prob' arguments must be equal length vectors")

msgid "'x' and 'prob' arguments must be equal length vectors"
msgstr ""


#: R/chisq.test.R: 0
#: R/fisher.test.R: 0
#: R/mantelhaen.test.R: 0
#. R/chisq.test.R: stop("'x' and 'y' arguments must have at least 2 levels")
#. R/fisher.test.R: stop("'x' and 'y' arguments must have at least 2 levels")
#. R/mantelhaen.test.R: stop("'x' and 'y' arguments must have at least 2 levels")

msgid "'x' and 'y' arguments must have at least 2 levels"
msgstr ""


#: R/mcnemar.test.R: 0
#. R/mcnemar.test.R: stop("'x' and 'y' must have the same number of levels (minimum 2)")

msgid "'x' and 'y' must have the same number of levels (minimum 2)"
msgstr ""


#: R/density.R: 0
#. R/density.R: stop("'x' argument contains missing values")

msgid "'x' argument contains missing values"
msgstr ""


#: R/fisher.test.R: 0
#. R/fisher.test.R: gettextf("'x' argument has been rounded to integer: %s", ax)

msgid "'x' argument has been rounded to integer: %s"
msgstr ""


#: R/fisher.test.R: 0
#. R/fisher.test.R: stop("'x' argument has entries too large to be integer")

msgid "'x' argument has entries too large to be integer"
msgstr ""


#: R/kruskal.test.R: 0
#. R/kruskal.test.R: warning("'x' argument is a list, so ignoring argument 'g'")

msgid "'x' argument is a list, so ignoring argument 'g'"
msgstr ""


#: R/cor.R: 0
#. R/cor.R: stop("'x' argument is empty")

msgid "'x' argument is empty"
msgstr ""


#: R/kruskal.test.R: 0
#. R/kruskal.test.R: stop("'x' argument must be a list with at least 2 elements")

msgid "'x' argument must be a list with at least 2 elements"
msgstr ""


#: R/anova.R: 0
#. R/anova.R: stop("'x' argument must be coefficient matrix or data frame")

msgid "'x' argument must be coefficient matrix or data frame"
msgstr ""


#: R/poisson.test.R: 0
#. R/poisson.test.R: stop("'x' argument must be finite, nonnegative, and integer")

msgid "'x' argument must be finite, nonnegative, and integer"
msgstr ""


#: R/distn.R: 0
#. R/distn.R: stop("'x' argument must be non-negative")

msgid "'x' argument must be non-negative"
msgstr ""


#: R/binom.test.R: 0
#. R/binom.test.R: stop("'x' argument must be non-negative and integer")

msgid "'x' argument must be non-negative and integer"
msgstr ""


#: R/fisher.test.R: 0
#. R/fisher.test.R: stop("'x' argument must have at least 2 rows and 2 columns")

msgid "'x' argument must have at least 2 rows and 2 columns"
msgstr ""


#: R/kernel.R: 0
#. R/kernel.R: stop("'x' is shorter than kernel 'k'")

msgid "'x' is shorter than kernel 'k'"
msgstr ""


#: R/chisq.test.R: 0
#. R/chisq.test.R: stop("'x' must at least have 2 elements")

msgid "'x' must at least have 2 elements"
msgstr ""


#: R/splinefun.R: 0
#. R/splinefun.R: stop("'x' must be *strictly* increasing (non - NA)")

msgid "'x' must be *strictly* increasing (non - NA)"
msgstr ""


#: R/mantelhaen.test.R: 0
#. R/mantelhaen.test.R: stop("'x' must be a 3-dimensional array")

msgid "'x' must be a 3-dimensional array"
msgstr ""


#: R/bartlett.test.R: 0
#: R/fligner.test.R: 0
#. R/bartlett.test.R: stop("'x' must be a list with at least 2 elements")
#. R/fligner.test.R: stop("'x' must be a list with at least 2 elements")

msgid "'x' must be a list with at least 2 elements"
msgstr ""


#: R/cov.wt.R: 0
#. R/cov.wt.R: stop("'x' must be a matrix or a data frame")

msgid "'x' must be a matrix or a data frame"
msgstr ""


#: R/dendrogram.R: 0
#. R/dendrogram.R: stop("'x' must be a numeric matrix")

msgid "'x' must be a numeric matrix"
msgstr ""


#: R/spectrum.R: 0
#. R/spectrum.R: stop("'x' must be a time series or an ar() fit")

msgid "'x' must be a time series or an ar() fit"
msgstr ""


#: R/smspline.R: 0
#. R/smspline.R: stop("'x' must be between 0 and 1 for periodic smooth")

msgid "'x' must be between 0 and 1 for periodic smooth"
msgstr ""


#: R/mcnemar.test.R: 0
#. R/mcnemar.test.R: stop("'x' must be square with at least two rows and columns")

msgid "'x' must be square with at least two rows and columns"
msgstr ""


#: R/cov.wt.R: 0
#. R/cov.wt.R: stop("'x' must contain finite values only")

msgid "'x' must contain finite values only"
msgstr ""


#: R/ecdf.R: 0
#. R/ecdf.R: stop("'x' must have 1 or more non-missing values")

msgid "'x' must have 1 or more non-missing values"
msgstr ""


#: R/pairwise.R: 0
#: R/prop.test.R: 0
#. R/pairwise.R: stop("'x' must have 2 columns")
#. R/prop.test.R: stop("'x' must have 2 columns")

msgid "'x' must have 2 columns"
msgstr ""


#: R/dendrogram.R: 0
#. R/dendrogram.R: stop("'x' must have at least 2 rows and 2 columns")

msgid "'x' must have at least 2 rows and 2 columns"
msgstr ""


#: R/diffinv.R: 0
#. R/diffinv.R: stop("'xi' does not have the right length")

msgid "'xi' does not have the right length"
msgstr ""


#: R/arima.R: 0
#: R/arma0.R: 0
#. R/arima.R: stop("'xreg' and 'newxreg' have different numbers of columns")
#. R/arma0.R: stop("'xreg' and 'newxreg' have different numbers of columns")

msgid "'xreg' and 'newxreg' have different numbers of columns"
msgstr ""


#: R/arma0.R: 0
#. R/arma0.R: stop("'xreg' argument is collinear")

msgid "'xreg' argument is collinear"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: stop("'xy.labels' must be logical or character")

msgid "'xy.labels' must be logical or character"
msgstr ""


#: R/qqnorm.R: 0
#. R/qqnorm.R: stop("'y' argument is empty or has only NA values")

msgid "'y' argument is empty or has only NA values"
msgstr ""


#: R/t.test.R: 0
#: R/wilcox.test.R: 0
#. R/t.test.R: stop("'y' is missing for paired test")
#. R/wilcox.test.R: stop("'y' is missing for paired test")

msgid "'y' is missing for paired test"
msgstr ""


#: R/spline.R: 0
#: R/splinefun.R: 0
#. R/spline.R: stop("'y' must be increasing or decreasing")
#. R/splinefun.R: stop("'y' must be increasing or decreasing")

msgid "'y' must be increasing or decreasing"
msgstr ""


#: R/ks.test.R: 0
#. R/ks.test.R: stop("'y' must be numeric or a function or a string naming a valid function")

msgid "'y' must be numeric or a function or a string naming a valid function"
msgstr ""


#: R/stepfun.R: 0
#. R/stepfun.R: stop("'y' must be one longer than 'x'")

msgid "'y' must be one longer than 'x'"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: gettextf("(Dispersion parameter for %s family taken to be %s)", x$family$family,     format(x$dispersion), domain = "R-stats")

msgid "(Dispersion parameter for %s family taken to be %s)"
msgstr ""


#: R/dummy.coef.R: 0
#: R/lm.influence.R: 0
#: R/manova.R: 0
#: R/proj.R: 0
#: R/proj.R: 0
#: R/proj.R: 0
#: R/proj.R: 0
#: R/proj.R: 0
#: R/proj.R: 0
#: R/proj.R: 0
#. R/dummy.coef.R: gettext("(Intercept)", domain = "R-stats")
#. R/dummy.coef.R: gettext("(Intercept)", domain = "R-stats")
#. R/dummy.coef.R: gettext("(Intercept)", domain = "R-stats")
#. R/lm.influence.R: gettext("(Intercept)", domain = "R-stats")
#. R/manova.R: gettext("(Intercept)", domain = "R-stats")
#. R/proj.R: gettext("(Intercept)", domain = "R-stats")
#. R/proj.R: gettext("(Intercept)", domain = "R-stats")
#. R/proj.R: gettext("(Intercept)", domain = "R-stats")
#. R/proj.R: gettext("(Intercept)", domain = "R-stats")
#. R/proj.R: gettext("(Intercept)", domain = "R-stats")
#. R/proj.R: gettext("(Intercept)", domain = "R-stats")
#. R/proj.R: gettext("(Intercept)", domain = "R-stats")

msgid "(Intercept)"
msgstr ""


#: R/kmeans.R: 0
#. R/kmeans.R: gettextf(" (between_SS / total_SS = %5.1f %%)", 100 * x$betweenss/x$totss, domain = "R-stats")

msgid "(between_SS / total_SS = %5.1f %%)"
msgstr ""


#: R/models.R: 0
#. R/models.R: gettext("(offset)", domain = "R-stats")
#. R/models.R: gettext("(offset)", domain = "R-stats")

msgid "(offset)"
msgstr ""


#: R/wilcox.test.R: 0
#. R/wilcox.test.R: gettext("(pseudo)median", domain = "R-stats")
#. R/wilcox.test.R: gettext("(pseudo)median", domain = "R-stats")

msgid "(pseudo)median"
msgstr ""


#: R/models.R: 0
#. R/models.R: gettext("(weights)", domain = "R-stats")

msgid "(weights)"
msgstr ""


#: R/isoreg.R: 0
#. R/isoreg.R: gettextf("  (x,y) ordering: %s", str(x$ord), domain = "R-stats")

msgid "(x,y) ordering: %s"
msgstr ""


#: R/lm.R: 0
#. R/lm.R: stop("0 (non-NA) cases")
#. R/lm.R: stop("0 (non-NA) cases")

msgid "0 (non-NA) cases"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: stop("0s in V(mu)")

msgid "0s in V(mu)"
msgstr ""


#: R/fisher.test.R: 0
#. R/fisher.test.R: stop("2 or more non-zero column marginals are needed")

msgid "2 or more non-zero column marginals are needed"
msgstr ""


#: R/fisher.test.R: 0
#. R/fisher.test.R: stop("2 or more non-zero row marginals are needed")

msgid "2 or more non-zero row marginals are needed"
msgstr ""


#: R/acf.R: 0
#. R/acf.R: gettext("ACF", domain = "R-stats")

msgid "ACF"
msgstr ""


#: R/acf.R: 0
#. R/acf.R: gettext("ACF (cov)", domain = "R-stats")

msgid "ACF (cov)"
msgstr ""


#: R/StructTS.R: 0
#. R/StructTS.R: gettext("ACF of Residuals")

msgid "ACF of Residuals"
msgstr ""


#: R/add.R: 0
#. R/add.R: stop("AIC is -infinity for this model, so 'step' cannot proceed")

msgid "AIC is -infinity for this model, so 'step' cannot proceed"
msgstr ""


#: R/add.R: 0
#. R/add.R: stop("AIC is not defined for this model, so 'step' cannot proceed")

msgid "AIC is not defined for this model, so 'step' cannot proceed"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: gettext("AIC: ", domain = "R-stats")

msgid "AIC:"
msgstr ""


#: R/lm.R: 0
#. R/lm.R: warning("ANOVA F-tests on an essentially perfect fit are unreliable")

msgid "ANOVA F-tests on an essentially perfect fit are unreliable"
msgstr ""


#: R/nls.R: 0
#. R/nls.R: gettext("Achieved convergence tolerance:", domain = "R-stats")

msgid "Achieved convergence tolerance:"
msgstr ""


#: R/lm.R: 0
#. R/lm.R: gettext("Adjusted R-squared: ", domain = "R-stats")

msgid "Adjusted R-squared:"
msgstr ""


#: R/nls.R: 0
#. R/nls.R: gettext("Algorithm \"port\", convergence message: ", domain = "R-stats")

msgid "Algorithm \"port\", convergence message:"
msgstr ""


#: R/add.R: 0
#: R/glm.R: 0
#: R/glm.R: 0
#. R/add.R: gettext("Analysis of Deviance Table", domain = "R-stats")
#. R/glm.R: gettext("Analysis of Deviance Table", domain = "R-stats")
#. R/glm.R: gettext("Analysis of Deviance Table", domain = "R-stats")

msgid "Analysis of Deviance Table"
msgstr ""


#: R/lm.R: 0
#: R/mlm.R: 0
#: R/mlm.R: 0
#: R/nls.R: 0
#. R/lm.R: gettext("Analysis of Variance Table", domain = "R-stats")
#. R/lm.R: gettext("Analysis of Variance Table", domain = "R-stats")
#. R/mlm.R: gettext("Analysis of Variance Table", domain = "R-stats")
#. R/mlm.R: gettext("Analysis of Variance Table")
#. R/nls.R: gettext("Analysis of Variance Table")

msgid "Analysis of Variance Table"
msgstr ""


#: R/loess.R: 0
#. R/loess.R: gettextf("Analysis of Variance:   denominator df %s", format(round(dfden, 2L)), domain = "R-stats")

msgid "Analysis of Variance:   denominator df %s"
msgstr ""


#: R/ansari.test.R: 0
#. R/ansari.test.R: gettext("Ansari-Bradley test", domain = "R-stats")

msgid "Ansari-Bradley test"
msgstr ""


#: R/lm.R: 0
#. R/lm.R: warning("Assuming constant prediction variance even though model fit is weighted")

msgid "Assuming constant prediction variance even though model fit is weighted"
msgstr ""


#: R/acf.R: 0
#. R/acf.R: gettextf("Autocorrelations of series %s, by lag", sQuote(x$series), domain = "R-stats")

msgid "Autocorrelations of series %s, by lag"
msgstr ""


#: R/acf.R: 0
#. R/acf.R: gettextf("Autocovariances of series %s, by lag", sQuote(x$series), domain = "R-stats")

msgid "Autocovariances of series %s, by lag"
msgstr ""


#: R/kmeans.R: 0
#. R/kmeans.R: gettext("Available components:", domain = "R-stats")

msgid "Available components:"
msgstr ""


#: R/power.anova.test.R: 0
#. R/power.anova.test.R: gettext("Balanced one-way analysis of variance power calculation", domain = "R-stats")

msgid "Balanced one-way analysis of variance power calculation"
msgstr ""


#: R/density.R: 0
#. R/density.R: gettextf("Bandwidth 'bw' = %s", formatC(x$bw, digits = digits), domain = "R-stats")

msgid "Bandwidth 'bw' = %s"
msgstr ""


#: R/constrOptim.R: 0
#. R/constrOptim.R: gettext("Barrier algorithm ran out of iterations and did not converge")

msgid "Barrier algorithm ran out of iterations and did not converge"
msgstr ""


#: R/bartlett.test.R: 0
#. R/bartlett.test.R: gettext("Bartlett test of homogeneity of variances", domain = "R-stats")

msgid "Bartlett test of homogeneity of variances"
msgstr ""


#: R/bartlett.test.R: 0
#. R/bartlett.test.R: gettext("Bartlett's K-squared", domain = "R-stats")

msgid "Bartlett's K-squared"
msgstr ""


#: R/ts-tests.R: 0
#. R/ts-tests.R: gettext("Box-Ljung test")

msgid "Box-Ljung test"
msgstr ""


#: R/ts-tests.R: 0
#. R/ts-tests.R: gettext("Box-Pierce test")

msgid "Box-Pierce test"
msgstr ""


#: R/HoltWinters.R: 0
#: R/StructTS.R: 0
#: R/aov.R: 0
#: R/aov.R: 0
#: R/ar.R: 0
#: R/arima.R: 0
#: R/arma0.R: 0
#: R/density.R: 0
#: R/ecdf.R: 0
#: R/factanal.R: 0
#: R/glm.R: 0
#: R/glm.R: 0
#: R/hclust.R: 0
#: R/lm.R: 0
#: R/lm.R: 0
#: R/loess.R: 0
#: R/loess.R: 0
#: R/ppr.R: 0
#: R/princomp.R: 0
#: R/smspline.R: 0
#: R/stepfun.R: 0
#: R/stl.R: 0
#: R/stl.R: 0
#. R/HoltWinters.R: gettext("Call:", domain = "R-stats")
#. R/StructTS.R: gettext("Call:", domain = "R-stats")
#. R/aov.R: gettext("Call:", domain = "R-stats")
#. R/aov.R: gettext("Call:", domain = "R-stats")
#. R/ar.R: gettext("Call:", domain = "R-stats")
#. R/arima.R: gettext("Call:", domain = "R-stats")
#. R/arma0.R: gettext("Call:", domain = "R-stats")
#. R/density.R: gettext("Call:", domain = "R-stats")
#. R/ecdf.R: gettext("Call: ", domain = "R-stats")
#. R/factanal.R: gettext("Call:", domain = "R-stats")
#. R/glm.R: gettext("Call:  ", domain = "R-stats")
#. R/glm.R: gettext("Call:", domain = "R-stats")
#. R/hclust.R: gettext("Call:", domain = "R-stats")
#. R/lm.R: gettext("Call:", domain = "R-stats")
#. R/lm.R: gettext("Call:", domain = "R-stats")
#. R/loess.R: gettext("Call:", domain = "R-stats")
#. R/loess.R: gettext("Call:", domain = "R-stats")
#. R/ppr.R: gettext("Call:", domain = "R-stats")
#. R/princomp.R: gettext("Call:", domain = "R-stats")
#. R/smspline.R: gettext("Call:", domain = "R-stats")
#. R/stepfun.R: gettext("Call: ", domain = "R-stats")
#. R/stl.R: gettext(" Call:", domain = "R-stats")
#. R/stl.R: gettext(" Call:", domain = "R-stats")

msgid "Call:"
msgstr ""


#: R/prop.trend.test.R: 0
#. R/prop.trend.test.R: gettext("Chi-squared Test for Trend in Proportions", domain = "R-stats")

msgid "Chi-squared Test for Trend in Proportions"
msgstr ""


#: R/chisq.test.R: 0
#: R/prop.test.R: 0
#. R/chisq.test.R: warning("Chi-squared approximation may be incorrect")
#. R/prop.test.R: warning("Chi-squared approximation may be incorrect")

msgid "Chi-squared approximation may be incorrect"
msgstr ""


#: R/chisq.test.R: 0
#. R/chisq.test.R: gettext("Chi-squared test for given probabilities", domain = "R-stats")

msgid "Chi-squared test for given probabilities"
msgstr ""


#: R/chisq.test.R: 0
#. R/chisq.test.R: gettextf("Chi-squared test for given probabilities with simulated p-value\n\t (based on %d replicates)",     B, domain = "R-stats")

msgid "Chi-squared test for given probabilities with simulated p-value\n\t (based on %d replicates)"
msgstr ""


#: R/hclust.R: 0
#. R/hclust.R: gettext("Cluster Dendrogram")

msgid "Cluster Dendrogram"
msgstr ""


#: R/kmeans.R: 0
#. R/kmeans.R: gettext("Cluster means:", domain = "R-stats")

msgid "Cluster means:"
msgstr ""


#: R/hclust.R: 0
#. R/hclust.R: gettext("Cluster method: ", domain = "R-stats")

msgid "Cluster method:"
msgstr ""


#: R/kmeans.R: 0
#. R/kmeans.R: gettext("Clustering vector:", domain = "R-stats")

msgid "Clustering vector:"
msgstr ""


#: R/mantelhaen.test.R: 0
#. R/mantelhaen.test.R: gettext("Cochran-Mantel-Haenszel M^2", domain = "R-stats")

msgid "Cochran-Mantel-Haenszel M^2"
msgstr ""


#: R/mantelhaen.test.R: 0
#. R/mantelhaen.test.R: gettext("Cochran-Mantel-Haenszel test", domain = "R-stats")

msgid "Cochran-Mantel-Haenszel test"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: gettextf("Coefficients  [contrasts: %s]:", apply(cbind(names(co), co), 1L, paste,     collapse = "="), domain = "R-stats")

msgid "Coefficients  [contrasts: %s]:"
msgstr ""


#: R/ppr.R: 0
#. R/ppr.R: gettext("Coefficients of ridge terms:", domain = "R-stats")

msgid "Coefficients of ridge terms:"
msgstr ""


#: R/HoltWinters.R: 0
#: R/ar.R: 0
#: R/arima.R: 0
#: R/arma0.R: 0
#: R/glm.R: 0
#: R/glm.R: 0
#: R/lm.R: 0
#: R/lm.R: 0
#. R/HoltWinters.R: gettext("Coefficients:", domain = "R-stats")
#. R/ar.R: gettext("Coefficients:", domain = "R-stats")
#. R/arima.R: gettext("Coefficients:", domain = "R-stats")
#. R/arma0.R: gettext("Coefficients:", domain = "R-stats")
#. R/glm.R: gettext("Coefficients:", domain = "R-stats")
#. R/glm.R: gettext("Coefficients:", domain = "R-stats")
#. R/lm.R: gettext("Coefficients:", domain = "R-stats")
#. R/lm.R: gettext("Coefficients:", domain = "R-stats")

msgid "Coefficients:"
msgstr ""


#: R/medpolish.R: 0
#. R/medpolish.R: gettext("Column Effects:", domain = "R-stats")

msgid "Column Effects:"
msgstr ""


#: R/dendrogram.R: 0
#. R/dendrogram.R: stop("Colv = \"Rowv\" but nrow(x) != ncol(x)")

msgid "Colv = \"Rowv\" but nrow(x) != ncol(x)"
msgstr ""


#: R/poisson.test.R: 0
#. R/poisson.test.R: gettext("Comparison of Poisson rates", domain = "R-stats")

msgid "Comparison of Poisson rates"
msgstr ""


#: R/stl.R: 0
#. R/stl.R: gettext("Components", domain = "R-stats")

msgid "Components"
msgstr ""


#: R/hclust.R: 0
#. R/hclust.R: gettextf("\n Consider providing '%s' method", paste("as.hclust.", oldClass(x)[1L],     "()", collapse = ""))

msgid "Consider providing '%s' method"
msgstr ""


#: R/nls.R: 0
#. R/nls.R: warning("No starting values specified for some parameters.", "\n", gettextf("Initializing %s to '1.'.",     tmp_n), "\n", "Consider specifying 'start' or using a selfStart model", domain = "R-stats",     sep = "")

msgid "Consider specifying 'start' or using a selfStart model"
msgstr ""


#: R/plot.lm.R: 0
#. R/plot.lm.R: gettext("Constant Leverage:\n Residuals vs Factor Levels")

msgid "Constant Leverage:\n Residuals vs Factor Levels"
msgstr ""


#: R/aov.R: 0
#. R/aov.R: gettextf("Contrast %s", seq(ncol(contrast)), domain = "R-stats")

msgid "Contrast %s"
msgstr ""


#: R/mlm.R: 0
#. R/mlm.R: gettextf("Contrast matrix %s", apply(format(T), 1L, paste, collapse = " "), domain = "R-stats")
#. R/mlm.R: gettextf("Contrast matrix %s", apply(format(T), 1L, paste, collapse = " "), domain = "R-stats")
#. R/mlm.R: gettextf("Contrast matrix %s", apply(format(T), 1L, paste, collapse = " "), domain = "R-stats")

msgid "Contrast matrix %s"
msgstr ""


#: R/mlm.R: 0
#. R/mlm.R: gettextf("Contrasts orthogonal to %s", apply(format(X), 2L, paste, collapse = " "),     domain = "R-stats")
#. R/mlm.R: gettextf("Contrasts orthogonal to %s", paste(deparse(formula(orig.X)), collapse = ""),     domain = "R-stats")
#. R/mlm.R: gettextf("Contrasts orthogonal to %s", apply(format(X), 2L, paste, collapse = " "),     domain = "R-stats")
#. R/mlm.R: gettextf("Contrasts orthogonal to %s", paste(deparse(formula(orig.X)), collapse = ""),     domain = "R-stats")
#. R/mlm.R: gettextf("Contrasts orthogonal to %s", apply(format(X), 2L, paste, collapse = " "),     domain = "R-stats")
#. R/mlm.R: gettextf("Contrasts orthogonal to %s", paste(deparse(formula(orig.X)), collapse = ""),     domain = "R-stats")

msgid "Contrasts orthogonal to %s"
msgstr ""


#: R/mlm.R: 0
#. R/mlm.R: gettextf("Contrasts spanned by %s", apply(format(M), 2L, paste, collapse = " "),     domain = "R-stats")
#. R/mlm.R: gettextf("Contrasts spanned by %s", paste(deparse(formula(orig.M)), collapse = ""),     domain = "R-stats")
#. R/mlm.R: gettextf("Contrasts spanned by %s", apply(format(M), 2L, paste, collapse = " "),     domain = "R-stats")
#. R/mlm.R: gettextf("Contrasts spanned by %s", paste(deparse(formula(orig.M)), collapse = ""),     domain = "R-stats")
#. R/mlm.R: gettextf("Contrasts spanned by %s", apply(format(M), 2L, paste, collapse = " "),     domain = "R-stats")
#. R/mlm.R: gettextf("Contrasts spanned by %s", paste(deparse(formula(orig.M)), collapse = ""),     domain = "R-stats")

msgid "Contrasts spanned by %s"
msgstr ""


#: R/loess.R: 0
#. R/loess.R: gettext("Control settings:", domain = "R-stats")

msgid "Control settings:"
msgstr ""


#: R/nls.R: 0
#. R/nls.R: gettextf("Convergence failure: %s", msg.nls)

msgid "Convergence failure: %s"
msgstr ""


#: R/plot.lm.R: 0
#. R/plot.lm.R: gettext("Cook's dist vs Leverage  ")

msgid "Cook's dist vs Leverage"
msgstr ""


#: R/plot.lm.R: 0
#. R/plot.lm.R: gettext("Cook's distance")
#. R/plot.lm.R: gettext("Cook's distance")
#. R/plot.lm.R: gettext("Cook's distance")
#. R/plot.lm.R: gettext("Cook's distance")

msgid "Cook's distance"
msgstr ""


#: R/glm.R: 0
#: R/lm.R: 0
#. R/glm.R: gettext("Correlation of Coefficients:", domain = "R-stats")
#. R/lm.R: gettext("Correlation of Coefficients:", domain = "R-stats")

msgid "Correlation of Coefficients:"
msgstr ""


#: R/nls.R: 0
#. R/nls.R: gettext("Correlation of Parameter Estimates:", domain = "R-stats")

msgid "Correlation of Parameter Estimates:"
msgstr ""


#: R/isoreg.R: 0
#. R/isoreg.R: gettext("Cumulative Data and Convex Minorant", domain = "R-stats")

msgid "Cumulative Data and Convex Minorant"
msgstr ""


#: R/nls.R: 0
#: R/pairwise.R: 0
#. R/nls.R: gettext("Data:", domain = "R-stats")
#. R/pairwise.R: gettext("Data: ", domain = "R-stats")

msgid "Data:"
msgstr ""


#: R/HoltWinters.R: 0
#. R/HoltWinters.R: gettext("Decomposition of additive time series")

msgid "Decomposition of additive time series"
msgstr ""


#: R/HoltWinters.R: 0
#. R/HoltWinters.R: gettext("Decomposition of multiplicative time series")

msgid "Decomposition of multiplicative time series"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: gettextf("Degrees of Freedom: %d Total (i.e. Null); %d Residual", x$df.null, x$df.residual,     domain = "R-stats")

msgid "Degrees of Freedom: %d Total (i.e. Null); %d Residual"
msgstr ""


#: R/density.R: 0
#. R/density.R: gettext("Density", domain = "R-stats")

msgid "Density"
msgstr ""


#: R/model.tables.R: 0
#. R/model.tables.R: message("Design is unbalanced - use 'se.contrast()' for se's")

msgid "Design is unbalanced - use 'se.contrast()' for se's"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: gettextf("Deviance = %s Iterations - %d\n", dev, iter, domain = "R-stats")

msgid "Deviance = %s Iterations - %d"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: gettext("Deviance Residuals:", domain = "R-stats")

msgid "Deviance Residuals:"
msgstr ""


#: R/medpolish.R: 0
#. R/medpolish.R: gettext("Diagnostic Comparison Values", domain = "R-stats")

msgid "Diagnostic Comparison Values"
msgstr ""


#: R/ts-tests.R: 0
#. R/ts-tests.R: gettext("Dickey-Fuller")

msgid "Dickey-Fuller"
msgstr ""


#: R/TukeyHSD.R: 0
#. R/TukeyHSD.R: gettextf("Differences in mean levels of %s", names(x)[i], domain = "R-stats")

msgid "Differences in mean levels of %s"
msgstr ""


#: R/hclust.R: 0
#. R/hclust.R: gettext("Distance: ", domain = "R-stats")

msgid "Distance:"
msgstr ""


#: R/ecdf.R: 0
#. R/ecdf.R: gettext("Empirical CDF", domain = "R-stats")

msgid "Empirical CDF"
msgstr ""


#: R/ecdf.R: 0
#. R/ecdf.R: gettextf("Empirical CDF:\t  %d unique values with summary\n", n, domain = "R-stats")

msgid "Empirical CDF:\t  %d unique values with summary"
msgstr ""


#: R/smspline.R: 0
#. R/smspline.R: gettextf("Equivalent Degrees of Freedom (Df): %s", format(x$df, digits = digits),     domain = "R-stats")

msgid "Equivalent Degrees of Freedom (Df): %s"
msgstr ""


#: R/loess.R: 0
#. R/loess.R: gettext("Equivalent Number of Parameters:", domain = "R-stats")
#. R/loess.R: gettext("Equivalent Number of Parameters:", domain = "R-stats")

msgid "Equivalent Number of Parameters:"
msgstr ""


#: R/ppr.R: 0
#. R/ppr.R: gettext("Equivalent df for ridge terms:", domain = "R-stats")

msgid "Equivalent df for ridge terms:"
msgstr ""


#: R/aov.R: 0
#. R/aov.R: warning("Error() model is singular")

msgid "Error() model is singular"
msgstr ""


#: R/dummy.coef.R: 0
#. R/dummy.coef.R: gettext("Error:", domain = "R-stats")

msgid "Error:"
msgstr ""


#: R/aov.R: 0
#. R/aov.R: gettextf("Error: %s", strata, domain = "R-stats")

msgid "Error: %s"
msgstr ""


#: R/aov.R: 0
#. R/aov.R: gettext("Estimated effects are balanced", domain = "R-stats")

msgid "Estimated effects are balanced"
msgstr ""


#: R/aov.R: 0
#. R/aov.R: gettext("Estimated effects may be unbalanced", domain = "R-stats")

msgid "Estimated effects may be unbalanced"
msgstr ""


#: R/poisson.test.R: 0
#. R/poisson.test.R: gettext("Exact Poisson test", domain = "R-stats")

msgid "Exact Poisson test"
msgstr ""


#: R/binom.test.R: 0
#. R/binom.test.R: gettext("Exact binomial test", domain = "R-stats")

msgid "Exact binomial test"
msgstr ""


#: R/mantelhaen.test.R: 0
#. R/mantelhaen.test.R: gettext("Exact conditional test of independence in 2 x 2 x k tables", domain = "R-stats")

msgid "Exact conditional test of independence in 2 x 2 x k tables"
msgstr ""


#: R/add.R: 0
#. R/add.R: gettextf("F test assumes 'quasi%s' family", fam)
#. R/add.R: gettextf("F test assumes 'quasi%s' family", fam)

msgid "F test assumes 'quasi%s' family"
msgstr ""


#: R/var.test.R: 0
#. R/var.test.R: gettext("F test to compare two variances", domain = "R-stats")

msgid "F test to compare two variances"
msgstr ""


#: R/lsfit.R: 0
#. R/lsfit.R: gettextf("F-statistic (df=%s, %s)=%s", format(degfree), format(n[i] - p), format(round(fstat[i],     digits)), domain = "R-stats")

msgid "F-statistic (df=%s, %s)=%s"
msgstr ""


#: R/lm.R: 0
#. R/lm.R: gettextf("F-statistic: %s on %d and %d DF", formatC(x$fstatistic[1L], digits = digits),     x$fstatistic[2L], x$fstatistic[3L], domain = "R-stats")

msgid "F-statistic: %s on %d and %d DF"
msgstr ""


#: R/factanal.R: 0
#. R/factanal.R: gettext("Factor Correlations:", domain = "R-stats")

msgid "Factor Correlations:"
msgstr ""


#: R/plot.lm.R: 0
#. R/plot.lm.R: gettext("Factor Level Combinations")

msgid "Factor Level Combinations"
msgstr ""


#: R/family.R: 0
#. R/family.R: gettext("Family: ", domain = "R-stats")

msgid "Family:"
msgstr ""


#: R/add.R: 0
#. R/add.R: gettext("Final Model: ", domain = "R-stats")

msgid "Final Model:"
msgstr ""


#: R/medpolish.R: 0
#. R/medpolish.R: gettext("Final: ", domain = "R-stats")

msgid "Final:"
msgstr ""


#: R/fisher.test.R: 0
#. R/fisher.test.R: gettext("Fisher's Exact Test for Count Data", domain = "R-stats")

msgid "Fisher's Exact Test for Count Data"
msgstr ""


#: R/fisher.test.R: 0
#. R/fisher.test.R: gettextf("Fisher's Exact Test for Count Data with simulated p-value\n\t (based on %d replicates)",     B, domain = "R-stats")

msgid "Fisher's Exact Test for Count Data with simulated p-value\n\t (based on %d replicates)"
msgstr ""


#: R/TukeyHSD.R: 0
#. R/TukeyHSD.R: gettext("Fit: ", domain = "R-stats")

msgid "Fit:"
msgstr ""


#: R/nls.R: 0
#: R/plot.lm.R: 0
#. R/nls.R: gettext("Fitted values")
#. R/plot.lm.R: gettext("Fitted values")

msgid "Fitted values"
msgstr ""


#: R/fligner.test.R: 0
#. R/fligner.test.R: gettext("Fligner-Killeen test of homogeneity of variances", domain = "R-stats")

msgid "Fligner-Killeen test of homogeneity of variances"
msgstr ""


#: R/fligner.test.R: 0
#. R/fligner.test.R: gettext("Fligner-Killeen:med chi-squared", domain = "R-stats")

msgid "Fligner-Killeen:med chi-squared"
msgstr ""


#: R/nls.R: 0
#. R/nls.R: gettext("Formula:", domain = "R-stats")

msgid "Formula:"
msgstr ""


#: R/friedman.test.R: 0
#. R/friedman.test.R: gettext("Friedman chi-squared", domain = "R-stats")

msgid "Friedman chi-squared"
msgstr ""


#: R/friedman.test.R: 0
#. R/friedman.test.R: gettext("Friedman rank sum test", domain = "R-stats")

msgid "Friedman rank sum test"
msgstr ""


#: R/dummy.coef.R: 0
#. R/dummy.coef.R: gettext("Full coefficients are:", domain = "R-stats")

msgid "Full coefficients are:"
msgstr ""


#: R/ppr.R: 0
#. R/ppr.R: gettext("Goodness of fit:", domain = "R-stats")

msgid "Goodness of fit:"
msgstr ""


#: R/aov.R: 0
#. R/aov.R: gettext("Grand Mean: ", domain = "R-stats")

msgid "Grand Mean:"
msgstr ""


#: R/aov.R: 0
#. R/aov.R: gettext("Grand Means:", domain = "R-stats")

msgid "Grand Means:"
msgstr ""


#: R/model.tables.R: 0
#. R/model.tables.R: gettext("Grand mean", domain = "R-stats")

msgid "Grand mean"
msgstr ""


#: R/mlm.R: 0
#. R/mlm.R: gettext("Greenhouse-Geisser epsilon:", domain = "R-stats")
#. R/mlm.R: gettext("Greenhouse-Geisser epsilon:")

msgid "Greenhouse-Geisser epsilon:"
msgstr ""


#: R/aggregate.R: 0
#. R/aggregate.R: gettextf("Group.%d", seq_along(by))
#. R/aggregate.R: gettextf("Group.%d", ind)

msgid "Group.%d"
msgstr ""


#: R/hclust.R: 0
#. R/hclust.R: gettext("Height")

msgid "Height"
msgstr ""


#: R/HoltWinters.R: 0
#. R/HoltWinters.R: gettext("Holt-Winters exponential smoothing with trend and additive seasonal component.",     domain = "R-stats")

msgid "Holt-Winters exponential smoothing with trend and additive seasonal component."
msgstr ""


#: R/HoltWinters.R: 0
#. R/HoltWinters.R: gettext("Holt-Winters exponential smoothing with trend and multiplicative seasonal component.",     domain = "R-stats")

msgid "Holt-Winters exponential smoothing with trend and multiplicative seasonal component."
msgstr ""


#: R/HoltWinters.R: 0
#. R/HoltWinters.R: gettext("Holt-Winters exponential smoothing with trend and without seasonal component.",     domain = "R-stats")

msgid "Holt-Winters exponential smoothing with trend and without seasonal component."
msgstr ""


#: R/HoltWinters.R: 0
#. R/HoltWinters.R: gettext("Holt-Winters exponential smoothing without trend and with additive seasonal component.",     domain = "R-stats")

msgid "Holt-Winters exponential smoothing without trend and with additive seasonal component."
msgstr ""


#: R/HoltWinters.R: 0
#. R/HoltWinters.R: gettext("Holt-Winters exponential smoothing without trend and with multiplicative seasonal component.",     domain = "R-stats")

msgid "Holt-Winters exponential smoothing without trend and with multiplicative seasonal component."
msgstr ""


#: R/HoltWinters.R: 0
#. R/HoltWinters.R: gettext("Holt-Winters exponential smoothing without trend and without seasonal component.",     domain = "R-stats")

msgid "Holt-Winters exponential smoothing without trend and without seasonal component."
msgstr ""


#: R/HoltWinters.R: 0
#. R/HoltWinters.R: gettext("Holt-Winters filtering")

msgid "Holt-Winters filtering"
msgstr ""


#: R/mlm.R: 0
#. R/mlm.R: gettext("Huynh-Feldt epsilon:", domain = "R-stats")
#. R/mlm.R: gettext("Huynh-Feldt epsilon:")

msgid "Huynh-Feldt epsilon:"
msgstr ""


#: R/stl.R: 0
#. R/stl.R: gettext(" IQR:", domain = "R-stats")

msgid "IQR:"
msgstr ""


#: R/selfStart.R: 0
#. R/selfStart.R: stop("old-style self-starting model functions are no longer supported.\n", "New selfStart functions are available.\n",     "Use\n  SSfpl instead of fpl,\n  SSfol instead of first.order.log,\n  SSbiexp instead of biexp,\n  SSlogis instead of logistic.\n",     "If writing your own selfStart model, see \"help(selfStart)\" for the new form of the \"initial\" attribute.",     domain = "R-stats")

msgid "If writing your own selfStart model, see \"help(selfStart)\" for the new form of the \"initial\" attribute."
msgstr ""


#: R/prcomp.R: 0
#: R/princomp-add.R: 0
#. R/prcomp.R: gettext("Importance of components:", domain = "R-stats")
#. R/princomp-add.R: gettext("Importance of components:", domain = "R-stats")

msgid "Importance of components:"
msgstr ""


#: R/lm.influence.R: 0
#. R/lm.influence.R: gettextf("Influence measures of\n\t%s:", paste(deparse(x$call), collapse = ""), domain = "R-stats")

msgid "Influence measures of\n\t%s:"
msgstr ""


#: R/add.R: 0
#. R/add.R: gettext("Initial Model: ", domain = "R-stats")

msgid "Initial Model:"
msgstr ""


#: R/nls.R: 0
#. R/nls.R: gettextf("Initializing %s to '1.'.", tmp_n)

msgid "Initializing %s to '1.'."
msgstr ""


#: R/ar.R: 0
#. R/ar.R: gettext("Intercept: ", domain = "R-stats")

msgid "Intercept:"
msgstr ""


#: R/isoreg.R: 0
#. R/isoreg.R: gettextf("Isotonic regression %s", paste(deparse(x$call), collapse = ""), domain = "R-stats")

msgid "Isotonic regression %s"
msgstr ""


#: R/cor.test.R: 0
#. R/cor.test.R: gettext("Kendall's rank correlation tau", domain = "R-stats")

msgid "Kendall's rank correlation tau"
msgstr ""


#: R/kruskal.test.R: 0
#. R/kruskal.test.R: gettext("Kruskal-Wallis chi-squared", domain = "R-stats")

msgid "Kruskal-Wallis chi-squared"
msgstr ""


#: R/kruskal.test.R: 0
#. R/kruskal.test.R: gettext("Kruskal-Wallis rank sum test", domain = "R-stats")

msgid "Kruskal-Wallis rank sum test"
msgstr ""


#: R/nlminb.R: 0
#. R/nlminb.R: gettext("LIV too small (15)")

msgid "LIV too small (15)"
msgstr ""


#: R/nlminb.R: 0
#. R/nlminb.R: gettext("LV too small (16)")

msgid "LV too small (16)"
msgstr ""


#: R/StructTS.R: 0
#: R/acf.R: 0
#. R/StructTS.R: gettext("Lag")
#. R/acf.R: gettext("Lag", domain = "R-stats")

msgid "Lag"
msgstr ""


#: R/plot.lm.R: 0
#. R/plot.lm.R: gettext("Leverage")
#. R/plot.lm.R: gettext("Leverage  ")

msgid "Leverage"
msgstr ""


#: R/family.R: 0
#. R/family.R: gettext("Link function: ", domain = "R-stats")

msgid "Link function:"
msgstr ""


#: R/factanal.R: 0
#: R/princomp-add.R: 0
#. R/factanal.R: gettext("Loadings:", domain = "R-stats")
#. R/princomp-add.R: gettext("Loadings:", domain = "R-stats")

msgid "Loadings:"
msgstr ""


#: R/arima.R: 0
#: R/arma0.R: 0
#. R/arima.R: warning("MA part of model is not invertible")
#. R/arma0.R: warning("MA part of model is not invertible")

msgid "MA part of model is not invertible"
msgstr ""


#: R/ar.R: 0
#. R/ar.R: stop("MLE only implemented for univariate series")

msgid "MLE only implemented for univariate series"
msgstr ""


#: R/mantelhaen.test.R: 0
#. R/mantelhaen.test.R: gettext("Mantel-Haenszel X-squared", domain = "R-stats")

msgid "Mantel-Haenszel X-squared"
msgstr ""


#: R/mantelhaen.test.R: 0
#. R/mantelhaen.test.R: gettext("Mantel-Haenszel chi-squared test with continuity correction", domain = "R-stats")

msgid "Mantel-Haenszel chi-squared test with continuity correction"
msgstr ""


#: R/addmargins.R: 0
#. R/addmargins.R: gettext("Margins computed over dimensions in the following order:", domain = "R-stats")

msgid "Margins computed over dimensions in the following order:"
msgstr ""


#: R/mlm.R: 0
#. R/mlm.R: gettext("Mauchly's test of sphericity")

msgid "Mauchly's test of sphericity"
msgstr ""


#: R/mcnemar.test.R: 0
#. R/mcnemar.test.R: gettext("McNemar's Chi-squared test", domain = "R-stats")

msgid "McNemar's Chi-squared test"
msgstr ""


#: R/mcnemar.test.R: 0
#. R/mcnemar.test.R: gettext("McNemar's Chi-squared test with continuity correction", domain = "R-stats")

msgid "McNemar's Chi-squared test with continuity correction"
msgstr ""


#: R/mcnemar.test.R: 0
#. R/mcnemar.test.R: gettext("McNemar's chi-squared", domain = "R-stats")

msgid "McNemar's chi-squared"
msgstr ""


#: R/medpolish.R: 0
#. R/medpolish.R: gettextf("Median Polish Results (Dataset: %s)", sQuote(x$name), domain = "R-stats")

msgid "Median Polish Results (Dataset: %s)"
msgstr ""


#: R/nls.R: 0
#. R/nls.R: gettextf("Model %s:", format(1L:nmodels))

msgid "Model %s:"
msgstr ""


#: R/glm.R: 0
#: R/lm.R: 0
#: R/loess.R: 0
#: R/mlm.R: 0
#. R/glm.R: gettextf("Model %s: %s", format(1L:nmodels), variables, domain = "R-stats")
#. R/lm.R: gettextf("Model %s: %s", format(seq_len(nmodels)), variables, domain = "R-stats")
#. R/loess.R: gettextf("Model %s: %s", format(seq_len(nmodels)), models, domain = "R-stats")
#. R/mlm.R: gettextf("Model %s: %s", format(seq_len(nmodels)), variables, domain = "R-stats")

msgid "Model %s: %s"
msgstr ""


#: R/add.R: 0
#: R/glm.R: 0
#: R/nls.R: 0
#. R/add.R: gettext("Model:", domain = "R-stats")
#. R/add.R: gettext("Model:", domain = "R-stats")
#. R/add.R: gettext("Model:", domain = "R-stats")
#. R/add.R: gettext("Model:", domain = "R-stats")
#. R/add.R: gettext("Model:", domain = "R-stats")
#. R/add.R: gettext("Model:", domain = "R-stats")
#. R/glm.R: gettext("Model: ", domain = "R-stats")
#. R/nls.R: gettext("Model:", domain = "R-stats")

msgid "Model:"
msgstr ""


#: R/mood.test.R: 0
#. R/mood.test.R: gettext("Mood two-sample test of scale", domain = "R-stats")

msgid "Mood two-sample test of scale"
msgstr ""


#: R/lm.R: 0
#. R/lm.R: gettext("Multiple R-squared:", domain = "R-stats")

msgid "Multiple R-squared:"
msgstr ""


#: R/density.R: 0
#. R/density.R: gettextf("N = %s   Bandwidth = %s", x$n, formatC(x$bw), domain = "R-stats")

msgid "N = %s   Bandwidth = %s"
msgstr ""


#: R/smspline.R: 0
#. R/smspline.R: stop("NA lev[]; probably smoothing parameter 'spar' is way too large!")

msgid "NA lev[]; probably smoothing parameter 'spar' is way too large!"
msgstr ""


#: R/mantelhaen.test.R: 0
#. R/mantelhaen.test.R: stop("NA values are not allowed")

msgid "NA values are not allowed"
msgstr ""


#: R/cmdscale.R: 0
#. R/cmdscale.R: stop("NA values are not allowed in 'd' argument")

msgid "NA values are not allowed in 'd' argument"
msgstr ""


#: R/friedman.test.R: 0
#: R/quade.test.R: 0
#. R/friedman.test.R: stop("NA values are not allowed in 'groups' or 'blocks' arguments")
#. R/quade.test.R: stop("NA values are not allowed in 'groups' or 'blocks' arguments")

msgid "NA values are not allowed in 'groups' or 'blocks' arguments"
msgstr ""


#: R/arma0.R: 0
#. R/arma0.R: warning("NA values are present: setting 'delta' to -1")

msgid "NA values are present: setting 'delta' to -1"
msgstr ""


#: R/arima.R: 0
#. R/arima.R: gettextf("NA values in '%s'", "phi")
#. R/arima.R: gettextf("NA values in '%s'", "theta")

msgid "NA values in '%s'"
msgstr ""


#: R/acf.R: 0
#: R/ar.R: 0
#: R/ar.R: 0
#: R/ar.R: 0
#: R/ar.R: 0
#: R/ar.R: 0
#: R/ar.R: 0
#. R/acf.R: stop("NA values in 'x'")
#. R/ar.R: stop("NA values in 'x'")
#. R/ar.R: stop("NA values in 'x'")
#. R/ar.R: stop("NA values in 'x'")
#. R/ar.R: stop("NA values in 'x'")
#. R/ar.R: stop("NA values in 'x'")
#. R/ar.R: stop("NA values in 'x'")

msgid "NA values in 'x'"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: stop("NAs in V(mu)")

msgid "NAs in V(mu)"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: stop("NAs in d(mu)/d(eta)")

msgid "NAs in d(mu)/d(eta)"
msgstr ""


#: R/lm.influence.R: 0
#. R/lm.influence.R: gettext("NONE", domain = "R-stats")

msgid "NONE"
msgstr ""


#: R/smooth.R: 0
#. R/smooth.R: gettext("NOT changed:", domain = "R-stats")
#. R/smooth.R: gettext("NOT changed:", domain = "R-stats")
#. R/smooth.R: gettext("NOT changed:", domain = "R-stats")
#. R/smooth.R: gettext("NOT changed:", domain = "R-stats")

msgid "NOT changed:"
msgstr ""


#: R/power.R: 0
#. R/power.R: gettext("NOTE: ", domain = "R-stats")

msgid "NOTE:"
msgstr ""


#: R/selfStart.R: 0
#. R/selfStart.R: stop("old-style self-starting model functions are no longer supported.\n", "New selfStart functions are available.\n",     "Use\n  SSfpl instead of fpl,\n  SSfol instead of first.order.log,\n  SSbiexp instead of biexp,\n  SSlogis instead of logistic.\n",     "If writing your own selfStart model, see \"help(selfStart)\" for the new form of the \"initial\" attribute.",     domain = "R-stats")

msgid "New selfStart functions are available."
msgstr ""


#: R/glm.R: 0
#: R/lm.R: 0
#: R/lm.R: 0
#. R/glm.R: gettext("No coefficients", domain = "R-stats")
#. R/glm.R: gettext("No coefficients", domain = "R-stats")
#. R/lm.R: gettext("No coefficients", domain = "R-stats")
#. R/lm.R: gettext("No coefficients", domain = "R-stats")

msgid "No coefficients"
msgstr ""


#: R/manova.R: 0
#. R/manova.R: gettext("No error degrees of freedom", domain = "R-stats")

msgid "No error degrees of freedom"
msgstr ""


#: R/nls.R: 0
#. R/nls.R: warning("No starting values specified for some parameters.", "\n", gettextf("Initializing %s to '1.'.",     tmp_n), "\n", "Consider specifying 'start' or using a selfStart model", domain = "R-stats",     sep = "")

msgid "No starting values specified for some parameters."
msgstr ""


#: R/nls.R: 0
#. R/nls.R: gettext("Nonlinear regression model", domain = "R-stats")

msgid "Nonlinear regression model"
msgstr ""


#: R/plot.lm.R: 0
#. R/plot.lm.R: gettext("Normal Q-Q")

msgid "Normal Q-Q"
msgstr ""


#: R/qqnorm.R: 0
#. R/qqnorm.R: gettext("Normal Q-Q Plot")

msgid "Normal Q-Q Plot"
msgstr ""


#: R/aov.R: 0
#. R/aov.R: gettext("Note: The results below are on the weighted scale", domain = "R-stats")
#. R/aov.R: gettext("Note: The results below are on the weighted scale", domain = "R-stats")

msgid "Note: The results below are on the weighted scale"
msgstr ""


#: R/model.tables.R: 0
#. R/model.tables.R: gettext("Notes:", domain = "R-stats")

msgid "Notes:"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: gettextf("Null Deviance:\t   %s\nResidual Deviance: %s\tAIC: %s", format(signif(x$null.deviance,     digits)), format(signif(x$deviance, digits)), format(signif(x$aic, digits)),     domain = "R-stats")

msgid "Null Deviance:\t   %s\nResidual Deviance: %s\tAIC: %s"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: gettext("Null deviance:", domain = "R-stats")

msgid "Null deviance:"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: gettext("Number of Fisher Scoring iterations: ", domain = "R-stats")

msgid "Number of Fisher Scoring iterations:"
msgstr ""


#: R/loess.R: 0
#. R/loess.R: gettext("Number of Observations:", domain = "R-stats")
#. R/loess.R: gettext("Number of Observations:", domain = "R-stats")

msgid "Number of Observations:"
msgstr ""


#: R/nls.R: 0
#. R/nls.R: gettext("Number of iterations till stop:", domain = "R-stats")

msgid "Number of iterations till stop:"
msgstr ""


#: R/nls.R: 0
#. R/nls.R: gettext("Number of iterations to convergence:", domain = "R-stats")

msgid "Number of iterations to convergence:"
msgstr ""


#: R/hclust.R: 0
#. R/hclust.R: gettext("Number of objects: ", domain = "R-stats")

msgid "Number of objects:"
msgstr ""


#: R/constrOptim.R: 0
#. R/constrOptim.R: gettextf("Objective function decreased at outer iteration %d", i)

msgid "Objective function decreased at outer iteration %d"
msgstr ""


#: R/constrOptim.R: 0
#. R/constrOptim.R: gettextf("Objective function increased at outer iteration %d", i)

msgid "Objective function increased at outer iteration %d"
msgstr ""


#: R/plot.lm.R: 0
#. R/plot.lm.R: gettext("Obs. number")

msgid "Obs. number"
msgstr ""


#: R/HoltWinters.R: 0
#. R/HoltWinters.R: gettext("Observed / Fitted")

msgid "Observed / Fitted"
msgstr ""


#: R/t.test.R: 0
#. R/t.test.R: gettext("One Sample t-test")

msgid "One Sample t-test"
msgstr ""


#: R/ks.test.R: 0
#. R/ks.test.R: gettext("One-sample Kolmogorov-Smirnov test", domain = "R-stats")

msgid "One-sample Kolmogorov-Smirnov test"
msgstr ""


#: R/power.R: 0
#. R/power.R: gettext("One-sample t test power calculation")

msgid "One-sample t test power calculation"
msgstr ""


#: R/oneway.test.R: 0
#. R/oneway.test.R: gettext("One-way analysis of means", domain = "R-stats")

msgid "One-way analysis of means"
msgstr ""


#: R/oneway.test.R: 0
#. R/oneway.test.R: gettext("One-way analysis of means (not assuming equal variances)", domain = "R-stats")

msgid "One-way analysis of means (not assuming equal variances)"
msgstr ""


#: R/ar.R: 0
#. R/ar.R: gettextf("Order selected %s sigma^2 estimated as %s", x$order, format(x$var.pred,     digits = digits), domain = "R-stats")

msgid "Order selected %s sigma^2 estimated as %s"
msgstr ""


#: R/stl.R: 0
#. R/stl.R: gettext("Other components: ", domain = "R-stats")

msgid "Other components:"
msgstr ""


#: R/medpolish.R: 0
#. R/medpolish.R: gettext("Overall: ", domain = "R-stats")

msgid "Overall:"
msgstr ""


#: R/pairwise.R: 0
#. R/pairwise.R: gettext("P-value adjustment method: ", domain = "R-stats")

msgid "P-value adjustment method:"
msgstr ""


#: R/prcomp.R: 0
#: R/princomp.R: 0
#: R/princomp.R: 0
#. R/prcomp.R: stop("PCA applies only to numerical variables")
#. R/princomp.R: stop("PCA applies only to numerical variables")
#. R/princomp.R: stop("PCA applies only to numerical variables")

msgid "PCA applies only to numerical variables"
msgstr ""


#: R/acf.R: 0
#. R/acf.R: gettextf("Page [%d,%d]: i =%s; j =%s", I, J, paste(iind, collapse = ","), paste(jind,     collapse = ","))

msgid "Page [%d,%d]: i =%s; j =%s"
msgstr ""


#: R/power.R: 0
#. R/power.R: gettext("Paired t test power calculation")

msgid "Paired t test power calculation"
msgstr ""


#: R/t.test.R: 0
#. R/t.test.R: gettext("Paired t-test")

msgid "Paired t-test"
msgstr ""


#: R/pairwise.R: 0
#. R/pairwise.R: gettext("Paired t-tests", domain = "R-stats")

msgid "Paired t-tests"
msgstr ""


#: R/pairwise.R: 0
#. R/pairwise.R: gettext("Pairwise comparison of proportions", domain = "R-stats")

msgid "Pairwise comparison of proportions"
msgstr ""


#: R/pairwise.R: 0
#. R/pairwise.R: gettextf("Pairwise comparisons using %s", x$method, domain = "R-stats")

msgid "Pairwise comparisons using %s"
msgstr ""


#: R/nls.R: 0
#. R/nls.R: gettext("Parameters:", domain = "R-stats")

msgid "Parameters:"
msgstr ""


#: R/acf.R: 0
#. R/acf.R: gettext("Partial ACF", domain = "R-stats")

msgid "Partial ACF"
msgstr ""


#: R/acf.R: 0
#. R/acf.R: gettextf("Partial autocorrelations of series %s, by lag", sQuote(x$series), domain = "R-stats")

msgid "Partial autocorrelations of series %s, by lag"
msgstr ""


#: R/termplot.R: 0
#. R/termplot.R: gettextf("Partial for %s", nmt)
#. R/termplot.R: gettextf("Partial for %s", nmt)

msgid "Partial for %s"
msgstr ""


#: R/chisq.test.R: 0
#. R/chisq.test.R: gettext("Pearson's Chi-squared test", domain = "R-stats")

msgid "Pearson's Chi-squared test"
msgstr ""


#: R/chisq.test.R: 0
#. R/chisq.test.R: gettext("Pearson's Chi-squared test with Yates' continuity correction", domain = "R-stats")

msgid "Pearson's Chi-squared test with Yates' continuity correction"
msgstr ""


#: R/chisq.test.R: 0
#. R/chisq.test.R: gettextf("Pearson's Chi-squared test with simulated p-value\n\t (based on %d replicates)",     B, domain = "R-stats")

msgid "Pearson's Chi-squared test with simulated p-value\n\t (based on %d replicates)"
msgstr ""


#: R/cor.test.R: 0
#. R/cor.test.R: gettext("Pearson's product-moment correlation", domain = "R-stats")

msgid "Pearson's product-moment correlation"
msgstr ""


#: R/smspline.R: 0
#. R/smspline.R: gettextf("Penalized Criterion: %s", format(x$pen.crit, digits = digits), domain = "R-stats")

msgid "Penalized Criterion: %s"
msgstr ""


#: R/ts-tests.R: 0
#. R/ts-tests.R: gettext("Phillips-Perron Unit Root Test")

msgid "Phillips-Perron Unit Root Test"
msgstr ""


#: R/lm.influence.R: 0
#. R/lm.influence.R: gettextf("Potentially influential observations of\n\t%s", paste(deparse(object$call),     collapse = ""), domain = "R-stats")

msgid "Potentially influential observations of\n\t%s"
msgstr ""


#: R/plot.lm.R: 0
#. R/plot.lm.R: gettext("Predicted values")

msgid "Predicted values"
msgstr ""


#: R/ppr.R: 0
#. R/ppr.R: gettext("Projection direction vectors:", domain = "R-stats")

msgid "Projection direction vectors:"
msgstr ""


#: R/quade.test.R: 0
#. R/quade.test.R: gettext("Quade F", domain = "R-stats")

msgid "Quade F"
msgstr ""


#: R/quade.test.R: 0
#. R/quade.test.R: gettext("Quade test", domain = "R-stats")

msgid "Quade test"
msgstr ""


#: R/kmeans.R: 0
#. R/kmeans.R: gettextf("Quick-TRANSfer stage steps exceeded maximum (= %d)", isteps.Qtran)

msgid "Quick-TRANSfer stage steps exceeded maximum (= %d)"
msgstr ""


#: R/lsfit.R: 0
#. R/lsfit.R: gettextf("R-Square=%s", format(round(rsquared[i], digits)), domain = "R-stats")

msgid "R-Square=%s"
msgstr ""


#: R/nls.R: 0
#. R/nls.R: gettext("Reason stopped:", domain = "R-stats")

msgid "Reason stopped:"
msgstr ""


#: R/aov.R: 0
#. R/aov.R: message("Refitting model to allow projection")

msgid "Refitting model to allow projection"
msgstr ""


#: R/loess.R: 0
#. R/loess.R: gettext("Residual Scale Estimate:", domain = "R-stats")
#. R/loess.R: gettext("Residual Scale Estimate:", domain = "R-stats")

msgid "Residual Scale Estimate:"
msgstr ""


#: R/lsfit.R: 0
#. R/lsfit.R: gettextf("Residual Standard Error=%s", format(round(resse[i], digits)), domain = "R-stats")

msgid "Residual Standard Error=%s"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: gettext("Residual deviance:", domain = "R-stats")

msgid "Residual deviance:"
msgstr ""


#: R/lm.R: 0
#: R/nls.R: 0
#. R/lm.R: gettextf("Residual standard error: %s on %d degrees of freedom", format(signif(x$sigma,     digits)), rdf, domain = "R-stats")
#. R/nls.R: gettextf("Residual standard error: %s on %d degrees of freedom", format(signif(x$sigma,     digits)), rdf, domain = "R-stats")

msgid "Residual standard error: %s on %d degrees of freedom"
msgstr ""


#: R/nls.R: 0
#. R/nls.R: gettext("Residual sum-of-squares:", domain = "R-stats")

msgid "Residual sum-of-squares:"
msgstr ""


#: R/medpolish.R: 0
#: R/nls.R: 0
#: R/plot.lm.R: 0
#. R/medpolish.R: gettext("Residuals", domain = "R-stats")
#. R/nls.R: gettext("Residuals")
#. R/plot.lm.R: gettext("Residuals")

msgid "Residuals"
msgstr ""


#: R/plot.lm.R: 0
#. R/plot.lm.R: gettext("Residuals vs Fitted")

msgid "Residuals vs Fitted"
msgstr ""


#: R/plot.lm.R: 0
#. R/plot.lm.R: gettext("Residuals vs Leverage")

msgid "Residuals vs Leverage"
msgstr ""


#: R/lm.R: 0
#: R/medpolish.R: 0
#. R/lm.R: gettext("Residuals:", domain = "R-stats")
#. R/medpolish.R: gettext("Residuals:", domain = "R-stats")

msgid "Residuals:"
msgstr ""


#: R/aov.R: 0
#. R/aov.R: gettextf("Response %s", cn, domain = "R-stats")

msgid "Response %s"
msgstr ""


#: R/glm.R: 0
#: R/lm.R: 0
#: R/lsfit.R: 0
#. R/glm.R: gettext("Response: ", domain = "R-stats")
#. R/lm.R: gettext("Response:", domain = "R-stats")
#. R/lsfit.R: gettext("Response: ", domain = "R-stats")

msgid "Response:"
msgstr ""


#: R/prcomp.R: 0
#. R/prcomp.R: gettext("Rotated variables:", domain = "R-stats")

msgid "Rotated variables:"
msgstr ""


#: R/prcomp.R: 0
#. R/prcomp.R: gettext("Rotation:", domain = "R-stats")

msgid "Rotation:"
msgstr ""


#: R/medpolish.R: 0
#. R/medpolish.R: gettext("Row Effects:", domain = "R-stats")

msgid "Row Effects:"
msgstr ""


#: R/model.tables.R: 0
#. R/model.tables.R: gettextf("SE's for type '%s' are not yet implemented", type)
#. R/model.tables.R: gettextf("SE's for type '%s' are not yet implemented", type)

msgid "SE's for type '%s' are not yet implemented"
msgstr ""


#: R/mlm.R: 0
#. R/mlm.R: gettextf("SSD matrix from %s", paste(deparse(object$call), collapse = ""))

msgid "SSD matrix from %s"
msgstr ""


#: R/qqnorm.R: 0
#. R/qqnorm.R: gettext("Sample Quantiles")

msgid "Sample Quantiles"
msgstr ""


#: R/plot.lm.R: 0
#. R/plot.lm.R: gettext("Scale-Location")

msgid "Scale-Location"
msgstr ""


#: R/nlminb.R: 0
#. R/nlminb.R: gettextf("See PORT documentation.  Code (%d)", iv1)

msgid "See PORT documentation.  Code (%d)"
msgstr ""


#: R/acf.R: 0
#. R/acf.R: gettextf("Series %s", x$series)
#. R/acf.R: gettextf("Series %s", seq_len(nser))

msgid "Series %s"
msgstr ""


#: R/cpgram.R: 0
#. R/cpgram.R: gettext("Series: ", domain = "R-stats")

msgid "Series:"
msgstr ""


#: R/shapiro.test.R: 0
#. R/shapiro.test.R: gettext("Shapiro-Wilk normality test", domain = "R-stats")

msgid "Shapiro-Wilk normality test"
msgstr ""


#: R/anova.R: 0
#. R/anova.R: gettext("Signif. codes:  ", domain = "R-stats")

msgid "Signif. codes:"
msgstr ""


#: R/add.R: 0
#. R/add.R: gettext("Single term additions", domain = "R-stats")
#. R/add.R: gettext("Single term additions", domain = "R-stats")
#. R/add.R: gettext("Single term additions", domain = "R-stats")

msgid "Single term additions"
msgstr ""


#: R/add.R: 0
#. R/add.R: gettext("Single term deletions", domain = "R-stats")
#. R/add.R: gettext("Single term deletions", domain = "R-stats")
#. R/add.R: gettext("Single term deletions", domain = "R-stats")

msgid "Single term deletions"
msgstr ""


#: R/smspline.R: 0
#. R/smspline.R: gettextf("Smoothing Parameter  spar=%s lambda=%s", format(x$spar, digits = digits),     format(x$lambda, digits = digits), domain = "R-stats")

msgid "Smoothing Parameter  spar=%s lambda=%s"
msgstr ""


#: R/HoltWinters.R: 0
#. R/HoltWinters.R: gettext("Smoothing parameters:", domain = "R-stats")

msgid "Smoothing parameters:"
msgstr ""


#: R/cor.test.R: 0
#. R/cor.test.R: gettext("Spearman's rank correlation rho", domain = "R-stats")

msgid "Spearman's rank correlation rho"
msgstr ""


#: R/prcomp.R: 0
#: R/princomp.R: 0
#. R/prcomp.R: gettext("Standard deviations:", domain = "R-stats")
#. R/princomp.R: gettext("Standard deviations:", domain = "R-stats")

msgid "Standard deviations:"
msgstr ""


#: R/model.tables.R: 0
#. R/model.tables.R: message("Standard error information not returned as design is unbalanced. \nStandard errors can be obtained through 'se.contrast'.")

msgid "Standard error information not returned as design is unbalanced. \nStandard errors can be obtained through 'se.contrast'."
msgstr ""


#: R/model.tables.R: 0
#. R/model.tables.R: gettext("Standard errors for differences of means", domain = "R-stats")

msgid "Standard errors for differences of means"
msgstr ""


#: R/model.tables.R: 0
#. R/model.tables.R: gettext("Standard errors of effects", domain = "R-stats")

msgid "Standard errors of effects"
msgstr ""


#: R/model.tables.R: 0
#. R/model.tables.R: gettext("Standard errors of residuals", domain = "R-stats")

msgid "Standard errors of residuals"
msgstr ""


#: R/StructTS.R: 0
#. R/StructTS.R: gettext("Standardized Residuals")

msgid "Standardized Residuals"
msgstr ""


#: R/nls.R: 0
#: R/plot.lm.R: 0
#: R/plot.lm.R: 0
#. R/nls.R: gettext("Standardized residuals")
#. R/plot.lm.R: gettext("Standardized residuals")
#. R/plot.lm.R: gettext("Standardized residuals")

msgid "Standardized residuals"
msgstr ""


#: R/add.R: 0
#. R/add.R: gettextf("Start:  AIC=%s", format(round(bAIC, 2)), domain = "R-stats")

msgid "Start:  AIC=%s"
msgstr ""


#: R/plot.lm.R: 0
#. R/plot.lm.R: gettext("Std. Pearson resid.")

msgid "Std. Pearson resid."
msgstr ""


#: R/plot.lm.R: 0
#. R/plot.lm.R: gettext("Std. deviance resid.")

msgid "Std. deviance resid."
msgstr ""


#: R/stepfun.R: 0
#. R/stepfun.R: gettext("Step function", domain = "R-stats")

msgid "Step function"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: gettextf("Step halved: new deviance = %s", dev, domain = "R-stats")
#. R/glm.R: gettextf("Step halved: new deviance = %s", dev, domain = "R-stats")

msgid "Step halved: new deviance = %s"
msgstr ""


#: R/add.R: 0
#. R/add.R: gettextf("Step:  AIC=%s", format(round(bAIC, 2)), domain = "R-stats")

msgid "Step:  AIC=%s"
msgstr ""


#: R/add.R: 0
#. R/add.R: gettext("Stepwise Model Path", domain = "R-stats")

msgid "Stepwise Model Path"
msgstr ""


#: R/aov.R: 0
#. R/aov.R: gettextf("Stratum %d: %s", ii, i, domain = "R-stats")

msgid "Stratum %d: %s"
msgstr ""


#: R/aov.R: 0
#. R/aov.R: gettext("Sum of Squares", domain = "R-stats")

msgid "Sum of Squares"
msgstr ""


#: R/model.tables.R: 0
#. R/model.tables.R: gettext("Table of residuals from each stratum", domain = "R-stats")

msgid "Table of residuals from each stratum"
msgstr ""


#: R/model.tables.R: 0
#. R/model.tables.R: gettext("Tables of effects", domain = "R-stats")

msgid "Tables of effects"
msgstr ""


#: R/model.tables.R: 0
#. R/model.tables.R: gettext("Tables of means", domain = "R-stats")

msgid "Tables of means"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: gettext("Terms added sequentially (first to last)", domain = "R-stats")

msgid "Terms added sequentially (first to last)"
msgstr ""


#: R/aov.R: 0
#. R/aov.R: gettext("Terms:", domain = "R-stats")

msgid "Terms:"
msgstr ""


#: R/hclust.R: 0
#. R/hclust.R: message("The 'ward()' method has been renamed to 'ward.D()'; note new 'ward.D2()'")

msgid "The 'ward()' method has been renamed to 'ward.D()'; note new 'ward.D2()'"
msgstr ""


#: R/factanal.R: 0
#. R/factanal.R: gettextf("The degrees of freedom for the model is %d and the fit was %s", x$dof,     round(x$criteria["objective"], 4), domain = "R-stats")

msgid "The degrees of freedom for the model is %d and the fit was %s"
msgstr ""


#: R/factanal.R: 0
#. R/factanal.R: gettextf("The p-value is %s", signif(x$PVAL, 3), domain = "R-stats")

msgid "The p-value is %s"
msgstr ""


#: R/qqnorm.R: 0
#. R/qqnorm.R: gettext("Theoretical Quantiles")

msgid "Theoretical Quantiles"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: gettext("Time", domain = "R-stats")

msgid "Time"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: gettextf("Time Series:\nStart = %s\nEnd = %s\nFrequency = %s", deparse(start(x)),     deparse(end(x)), deparse(fr.x), domain = "R-stats")
#. R/ts.R: gettextf("Time Series:\nStart = %s\nEnd = %s\nFrequency = %s", format(tsp(x)[1L]),     format(tsp(x)[2L]), deparse(fr.x), domain = "R-stats")

msgid "Time Series:\nStart = %s\nEnd = %s\nFrequency = %s"
msgstr ""


#: R/stl.R: 0
#. R/stl.R: gettext("Time.series components:", domain = "R-stats")

msgid "Time.series components:"
msgstr ""


#: R/loess.R: 0
#. R/loess.R: gettext("Trace of smoother matrix:", domain = "R-stats")

msgid "Trace of smoother matrix:"
msgstr ""


#: R/ts-tests.R: 0
#. R/ts-tests.R: gettext("Truncation lag parameter")

msgid "Truncation lag parameter"
msgstr ""


#: R/medpolish.R: 0
#. R/medpolish.R: gettext("Tukey Additivity Plot", domain = "R-stats")

msgid "Tukey Additivity Plot"
msgstr ""


#: R/TukeyHSD.R: 0
#. R/TukeyHSD.R: gettext("Tukey multiple comparisons of means", domain = "R-stats")

msgid "Tukey multiple comparisons of means"
msgstr ""


#: R/t.test.R: 0
#. R/t.test.R: gettext("Two Sample t-test")

msgid "Two Sample t-test"
msgstr ""


#: R/ks.test.R: 0
#. R/ks.test.R: gettext("Two-sample Kolmogorov-Smirnov test", domain = "R-stats")

msgid "Two-sample Kolmogorov-Smirnov test"
msgstr ""


#: R/power.R: 0
#. R/power.R: gettext("Two-sample comparison of proportions power calculation")

msgid "Two-sample comparison of proportions power calculation"
msgstr ""


#: R/power.R: 0
#. R/power.R: gettext("Two-sample t test power calculation")

msgid "Two-sample t test power calculation"
msgstr ""


#: R/factanal.R: 0
#. R/factanal.R: gettext("Uniquenesses:", domain = "R-stats")

msgid "Uniquenesses:"
msgstr ""


#: R/selfStart.R: 0
#. R/selfStart.R: stop("old-style self-starting model functions are no longer supported.\n", "New selfStart functions are available.\n",     "Use\n  SSfpl instead of fpl,\n  SSfol instead of first.order.log,\n  SSbiexp instead of biexp,\n  SSlogis instead of logistic.\n",     "If writing your own selfStart model, see \"help(selfStart)\" for the new form of the \"initial\" attribute.",     domain = "R-stats")

msgid "Use\n  SSfpl instead of fpl,\n  SSfol instead of first.order.log,\n  SSbiexp instead of biexp,\n  SSlogis instead of logistic."
msgstr ""


#: R/nlminb.R: 0
#. R/nlminb.R: gettextf("V[IV[1]] = V[%d] = %g is out of range (see PORT docu.)", iv1, v[iv1])

msgid "V[IV[1]] = V[%d] = %g is out of range (see PORT docu.)"
msgstr ""


#: R/princomp-add.R: 0
#. R/princomp-add.R: gettext("Variances")
#. R/princomp-add.R: gettext("Variances")

msgid "Variances"
msgstr ""


#: R/StructTS.R: 0
#. R/StructTS.R: gettext("Variances:", domain = "R-stats")

msgid "Variances:"
msgstr ""


#: R/kmeans.R: 0
#. R/kmeans.R: gettext("Warning: did *not* converge in specified number of iterations\n", domain = "R-stats")

msgid "Warning: did *not* converge in specified number of iterations"
msgstr ""


#: R/lm.R: 0
#. R/lm.R: gettext("Weighted Residuals:", domain = "R-stats")

msgid "Weighted Residuals:"
msgstr ""


#: R/nls.R: 0
#. R/nls.R: gettext("Weighted residual sum-of-squares:", domain = "R-stats")

msgid "Weighted residual sum-of-squares:"
msgstr ""


#: R/stl.R: 0
#. R/stl.R: gettext("Weights:", domain = "R-stats")

msgid "Weights:"
msgstr ""


#: R/t.test.R: 0
#. R/t.test.R: gettext("Welch Two Sample t-test")

msgid "Welch Two Sample t-test"
msgstr ""


#: R/model.tables.R: 0
#. R/model.tables.R: gettext("When comparing means with same levels of:", domain = "R-stats")

msgid "When comparing means with same levels of:"
msgstr ""


#: R/pairwise.R: 0
#: R/wilcox.test.R: 0
#. R/pairwise.R: gettext("Wilcoxon rank sum test", domain = "R-stats")
#. R/wilcox.test.R: gettext("Wilcoxon rank sum test", domain = "R-stats")

msgid "Wilcoxon rank sum test"
msgstr ""


#: R/wilcox.test.R: 0
#. R/wilcox.test.R: gettext("Wilcoxon rank sum test with continuity correction", domain = "R-stats")

msgid "Wilcoxon rank sum test with continuity correction"
msgstr ""


#: R/pairwise.R: 0
#: R/wilcox.test.R: 0
#. R/pairwise.R: gettext("Wilcoxon signed rank test", domain = "R-stats")
#. R/wilcox.test.R: gettext("Wilcoxon signed rank test", domain = "R-stats")

msgid "Wilcoxon signed rank test"
msgstr ""


#: R/wilcox.test.R: 0
#. R/wilcox.test.R: gettext("Wilcoxon signed rank test with continuity correction", domain = "R-stats")

msgid "Wilcoxon signed rank test with continuity correction"
msgstr ""


#: R/kmeans.R: 0
#. R/kmeans.R: gettext("Within cluster sum of squares by cluster:", domain = "R-stats")

msgid "Within cluster sum of squares by cluster:"
msgstr ""


#: R/mlm.R: 0
#. R/mlm.R: stop("X does not define a subspace of M")
#. R/mlm.R: stop("X does not define a subspace of M")
#. R/mlm.R: stop("X does not define a subspace of M")

msgid "X does not define a subspace of M"
msgstr ""


#: R/nlminb.R: 0
#. R/nlminb.R: gettext("X-convergence (3)")

msgid "X-convergence (3)"
msgstr ""


#: R/chisq.test.R: 0
#: R/prop.test.R: 0
#: R/prop.trend.test.R: 0
#: R/ts-tests.R: 0
#. R/chisq.test.R: gettext("X-squared", domain = "R-stats")
#. R/prop.test.R: gettext("X-squared", domain = "R-stats")
#. R/prop.trend.test.R: gettext("X-squared", domain = "R-stats")
#. R/ts-tests.R: gettext("X-squared")

msgid "X-squared"
msgstr ""


#: R/smooth.R: 0
#. R/smooth.R: gettext("__twiced__ NOT changed:", domain = "R-stats")
#. R/smooth.R: gettext("__twiced__ NOT changed:", domain = "R-stats")

msgid "__twiced__ NOT changed:"
msgstr ""


#: R/smooth.R: 0
#. R/smooth.R: gettext("__twiced__ changed:", domain = "R-stats")
#. R/smooth.R: gettext("__twiced__ changed:", domain = "R-stats")

msgid "__twiced__ changed:"
msgstr ""


#: R/oneway.test.R: 0
#. R/oneway.test.R: stop("a two-sided formula is required")

msgid "a two-sided formula is required"
msgstr ""


#: R/nlminb.R: 0
#. R/nlminb.R: gettext("absolute function convergence (6)")

msgid "absolute function convergence (6)"
msgstr ""


#: R/shapiro.test.R: 0
#. R/shapiro.test.R: stop("all 'x' values are identical")

msgid "all 'x' values are identical"
msgstr ""


#: R/zzModels.R: 0
#. R/zzModels.R: stop("all 'x' values must be non-negative to fit the Weibull growth model")

msgid "all 'x' values must be non-negative to fit the Weibull growth model"
msgstr ""


#: R/stl.R: 0
#. R/stl.R: gettext(" all == 1", domain = "R-stats")

msgid "all == 1"
msgstr ""


#: R/identify.hclust.R: 0
#. R/identify.hclust.R: gettextf("all elements of 'which' must be between 1 and %d", k)

msgid "all elements of 'which' must be between 1 and %d"
msgstr ""


#: R/fisher.test.R: 0
#. R/fisher.test.R: stop("all entries of 'x' argument must be nonnegative and finite")

msgid "all entries of 'x' argument must be nonnegative and finite"
msgstr ""


#: R/chisq.test.R: 0
#: R/mcnemar.test.R: 0
#. R/chisq.test.R: stop("all entries of 'x' must be nonnegative and finite")
#. R/mcnemar.test.R: stop("all entries of 'x' must be nonnegative and finite")

msgid "all entries of 'x' must be nonnegative and finite"
msgstr ""


#: R/fligner.test.R: 0
#: R/kruskal.test.R: 0
#. R/fligner.test.R: stop("all group levels must be finite")
#. R/kruskal.test.R: stop("all group levels must be finite")

msgid "all group levels must be finite"
msgstr ""


#: R/fligner.test.R: 0
#: R/kruskal.test.R: 0
#. R/fligner.test.R: stop("all groups must contain data")
#. R/kruskal.test.R: stop("all groups must contain data")

msgid "all groups must contain data"
msgstr ""


#: R/bartlett.test.R: 0
#: R/fligner.test.R: 0
#: R/kruskal.test.R: 0
#. R/bartlett.test.R: stop("all observations are in the same group")
#. R/fligner.test.R: stop("all observations are in the same group")
#. R/kruskal.test.R: stop("all observations are in the same group")

msgid "all observations are in the same group"
msgstr ""


#: R/StructTS.R: 0
#: R/arma0.R: 0
#. R/StructTS.R: stop("all parameters were fixed")
#. R/arma0.R: stop("all parameters were fixed")

msgid "all parameters were fixed"
msgstr ""


#: R/prop.test.R: 0
#. R/prop.test.R: gettext("all proportions", domain = "R-stats")

msgid "all proportions"
msgstr ""


#: R/na.ts.R: 0
#: R/ts.R: 0
#. R/na.ts.R: stop("all times contain an NA")
#. R/ts.R: stop("all times contain an NA")

msgid "all times contain an NA"
msgstr ""


#: R/smspline.R: 0
#. R/smspline.R: stop("all weights should be non-negative")

msgid "all weights should be non-negative"
msgstr ""


#: R/htest.R: 0
#. R/htest.R: gettext("alternative hypothesis: ", domain = "R-stats")

msgid "alternative hypothesis:"
msgstr ""


#: R/fisher.test.R: 0
#. R/fisher.test.R: stop("alternative must be \"two.sided\", \"less\" or \"greater\"")

msgid "alternative must be \"two.sided\", \"less\" or \"greater\""
msgstr ""


#: R/hclust.R: 0
#. R/hclust.R: gettextf("ambiguous clustering method %s", method)

msgid "ambiguous clustering method %s"
msgstr ""


#: R/dist.R: 0
#. R/dist.R: stop("ambiguous distance method")

msgid "ambiguous distance method"
msgstr ""


#: R/anova.R: 0
#. R/anova.R: stop("an object of class \"anova\" must have colnames")

msgid "an object of class \"anova\" must have colnames"
msgstr ""


#: R/selfStart.R: 0
#. R/selfStart.R: stop("argument 'object' has an impossible length")

msgid "argument 'object' has an impossible length"
msgstr ""


#: R/proj.R: 0
#. R/proj.R: stop("argument does not include a 'qr' component")

msgid "argument does not include a 'qr' component"
msgstr ""


#: R/proj.R: 0
#. R/proj.R: stop("argument does not include an 'effects' component")

msgid "argument does not include an 'effects' component"
msgstr ""


#: R/r2dtable.R: 0
#. R/r2dtable.R: stop("arguments 'r' and 'c' must have the same sums")

msgid "arguments 'r' and 'c' must have the same sums"
msgstr ""


#: R/aggregate.R: 0
#: R/contr.poly.R: 0
#. R/aggregate.R: stop("arguments must have the same length")
#. R/contr.poly.R: stop("arguments must have the same length")

msgid "arguments must have the same length"
msgstr ""


#: R/lm.R: 0
#. R/lm.R: warning("assuming prediction variance inversely proportional to weights used for fitting")

msgid "assuming prediction variance inversely proportional to weights used for fitting"
msgstr ""


#: R/hclust.R: 0
#. R/hclust.R: stop("at least 2 objects are needed to cluster")

msgid "at least 2 objects are needed to cluster"
msgstr ""


#: R/density.R: 0
#. R/density.R: stop("at least 2 points are needed to select a bandwidth automatically")

msgid "at least 2 points are needed to select a bandwidth automatically"
msgstr ""


#: R/chisq.test.R: 0
#. R/chisq.test.R: stop("at least one entry of 'x' must be positive")

msgid "at least one entry of 'x' must be positive"
msgstr ""


#: R/integrate.R: 0
#. R/integrate.R: stop("at least one integration limit is missing")

msgid "at least one integration limit is missing"
msgstr ""


#: R/approx.R: 0
#. R/approx.R: stop("at least two non-NA values to interpolate are needed")
#. R/approx.R: stop("at least two non-NA values to interpolate are needed")

msgid "at least two non-NA values to interpolate are needed"
msgstr ""


#: R/smooth.R: 0
#. R/smooth.R: stop("attempt to smooth NA values")

msgid "attempt to smooth NA values"
msgstr ""


#: R/smooth.R: 0
#. R/smooth.R: stop("attempt to smooth non-numeric values")

msgid "attempt to smooth non-numeric values"
msgstr ""


#: R/add.R: 0
#. R/add.R: warning("attempting model selection on an essentially perfect fit is nonsense", call. = FALSE)

msgid "attempting model selection on an essentially perfect fit is nonsense"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: stop("bad value for 'end' argument")

msgid "bad value for 'end' argument"
msgstr ""


#: R/diffinv.R: 0
#. R/diffinv.R: stop("bad value for 'lag' or 'differences' argument")

msgid "bad value for 'lag' or 'differences' argument"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: stop("bad value for 'lag' or 'differences' arguments")

msgid "bad value for 'lag' or 'differences' arguments"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: stop("bad value for 'start'")

msgid "bad value for 'start'"
msgstr ""


#: R/runmed.R: 0
#. R/runmed.R: stop("bandwidth 'k' must be >= 1 and odd!")

msgid "bandwidth 'k' must be >= 1 and odd!"
msgstr ""


#: R/contrast.R: 0
#. R/contrast.R: stop("baseline group number out of range")

msgid "baseline group number out of range"
msgstr ""


#: R/biplot.R: 0
#. R/biplot.R: stop("biplots are not defined for complex PCA")

msgid "biplots are not defined for complex PCA"
msgstr ""


#: R/loess.R: 0
#. R/loess.R: warning("both 'span' and 'enp.target' specified: 'span' will be used")

msgid "both 'span' and 'enp.target' specified: 'span' will be used"
msgstr ""


#: R/princomp.R: 0
#. R/princomp.R: warning("both 'x' and 'covmat' were supplied: 'x' will be ignored")

msgid "both 'x' and 'covmat' were supplied: 'x' will be ignored"
msgstr ""


#: R/cor.R: 0
#. R/cor.R: stop("both 'x' and 'y' must be non-empty")

msgid "both 'x' and 'y' must be non-empty"
msgstr ""


#: R/nlminb.R: 0
#. R/nlminb.R: gettext("both X-convergence and relative convergence (5)")

msgid "both X-convergence and relative convergence (5)"
msgstr ""


#: R/optim.R: 0
#. R/optim.R: warning("bounds can only be used with method L-BFGS-B (or Brent)")

msgid "bounds can only be used with method L-BFGS-B (or Brent)"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: stop("burn-in 'n.start' must be as long as 'ar + ma'")

msgid "burn-in 'n.start' must be as long as 'ar + ma'"
msgstr ""


#: R/lm.R: 0
#. R/lm.R: warning("calling anova.lm(<fake-lm-object>) ...")

msgid "calling anova.lm(<fake-lm-object>) ..."
msgstr ""


#: R/lm.R: 0
#. R/lm.R: warning("calling predict.lm(<fake-lm-object>) ...")

msgid "calling predict.lm(<fake-lm-object>) ..."
msgstr ""


#: R/lm.R: 0
#. R/lm.R: warning("calling summary.lm(<fake-lm-object>) ...")

msgid "calling summary.lm(<fake-lm-object>) ..."
msgstr ""


#: R/acf.R: 0
#. R/acf.R: warning("can use 'ci.type=\"ma\"' only if first lag is 0")

msgid "can use 'ci.type=\"ma\"' only if first lag is 0"
msgstr ""


#: R/nls.R: 0
#. R/nls.R: stop("cannot calculate REML log-likelihood for \"nls\" objects")

msgid "cannot calculate REML log-likelihood for \"nls\" objects"
msgstr ""


#: R/aggregate.R: 0
#. R/aggregate.R: gettextf("cannot change frequency from %g to %g", ofrequency, nfrequency)

msgid "cannot change frequency from %g to %g"
msgstr ""


#: R/ansari.test.R: 0
#. R/ansari.test.R: warning("cannot compute asymptotic confidence set or estimator")

msgid "cannot compute asymptotic confidence set or estimator"
msgstr ""


#: R/wilcox.test.R: 0
#. R/wilcox.test.R: stop("cannot compute confidence interval when all observations are tied", call. = FALSE)
#. R/wilcox.test.R: stop("cannot compute confidence interval when all observations are tied", call. = FALSE)

msgid "cannot compute confidence interval when all observations are tied"
msgstr ""


#: R/ansari.test.R: 0
#. R/ansari.test.R: warning("cannot compute confidence set, returning NA")

msgid "cannot compute confidence set, returning NA"
msgstr ""


#: R/ansari.test.R: 0
#. R/ansari.test.R: warning("cannot compute estimate, returning NA")

msgid "cannot compute estimate, returning NA"
msgstr ""


#: R/wilcox.test.R: 0
#. R/wilcox.test.R: warning("cannot compute exact confidence interval with ties")

msgid "cannot compute exact confidence interval with ties"
msgstr ""


#: R/wilcox.test.R: 0
#. R/wilcox.test.R: warning("cannot compute exact confidence interval with zeroes")

msgid "cannot compute exact confidence interval with zeroes"
msgstr ""


#: R/ansari.test.R: 0
#: R/wilcox.test.R: 0
#. R/ansari.test.R: warning("cannot compute exact confidence intervals with ties")
#. R/wilcox.test.R: warning("cannot compute exact confidence intervals with ties")

msgid "cannot compute exact confidence intervals with ties"
msgstr ""


#: R/ansari.test.R: 0
#: R/cor.test.R: 0
#: R/cor.test.R: 0
#: R/ks.test.R: 0
#: R/wilcox.test.R: 0
#: R/wilcox.test.R: 0
#. R/ansari.test.R: warning("cannot compute exact p-value with ties")
#. R/cor.test.R: warning("cannot compute exact p-value with ties")
#. R/cor.test.R: warning("cannot compute exact p-value with ties")
#. R/ks.test.R: warning("cannot compute exact p-value with ties")
#. R/wilcox.test.R: warning("cannot compute exact p-value with ties")
#. R/wilcox.test.R: warning("cannot compute exact p-value with ties")

msgid "cannot compute exact p-value with ties"
msgstr ""


#: R/wilcox.test.R: 0
#. R/wilcox.test.R: warning("cannot compute exact p-value with zeroes")

msgid "cannot compute exact p-value with zeroes"
msgstr ""


#: R/chisq.test.R: 0
#. R/chisq.test.R: warning("cannot compute simulated p-value with zero marginals")

msgid "cannot compute simulated p-value with zero marginals"
msgstr ""


#: R/models.R: 0
#. R/models.R: stop("cannot create a formula from a zero-column data frame")

msgid "cannot create a formula from a zero-column data frame"
msgstr ""


#: R/family.R: 0
#: R/glm.R: 0
#. R/family.R: stop("cannot find valid starting values: please specify some")
#. R/glm.R: stop("cannot find valid starting values: please specify some", call. = FALSE)

msgid "cannot find valid starting values: please specify some"
msgstr ""


#: R/zzModels.R: 0
#. R/zzModels.R: stop("cannot fit an asymptotic regression model to these data")

msgid "cannot fit an asymptotic regression model to these data"
msgstr ""


#: R/HoltWinters.R: 0
#. R/HoltWinters.R: stop("cannot fit models without level ('alpha' must not be 0 or FALSE)")

msgid "cannot fit models without level ('alpha' must not be 0 or FALSE)"
msgstr ""


#: R/cor.R: 0
#. R/cor.R: stop("cannot handle 'pairwise.complete.obs'")

msgid "cannot handle 'pairwise.complete.obs'"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: stop("cannot plot more than 10 series as \"multiple\"")

msgid "cannot plot more than 10 series as \"multiple\""
msgstr ""


#: R/nls-profile.R: 0
#. R/nls-profile.R: stop("cannot recognize parameter name")

msgid "cannot recognize parameter name"
msgstr ""


#: R/prcomp.R: 0
#. R/prcomp.R: stop("cannot rescale a constant/zero column to unit variance")

msgid "cannot rescale a constant/zero column to unit variance"
msgstr ""


#: R/family.R: 0
#. R/family.R: stop("cannot simulate from non-integer prior.weights")

msgid "cannot simulate from non-integer prior.weights"
msgstr ""


#: R/princomp.R: 0
#. R/princomp.R: stop("cannot use 'cor = TRUE' with a constant variable")

msgid "cannot use 'cor = TRUE' with a constant variable"
msgstr ""


#: R/ftable.R: 0
#. R/ftable.R: stop("cannot use dots in formula with given data")

msgid "cannot use dots in formula with given data"
msgstr ""


#: R/smspline.R: 0
#. R/smspline.R: stop("cannot use more inner knots than unique 'x' values")

msgid "cannot use more inner knots than unique 'x' values"
msgstr ""


#: R/smooth.R: 0
#. R/smooth.R: gettext("changed:", domain = "R-stats")
#. R/smooth.R: gettext("changed:", domain = "R-stats")
#. R/smooth.R: gettext("changed:", domain = "R-stats")
#. R/smooth.R: gettext("changed:", domain = "R-stats")

msgid "changed:"
msgstr ""


#: R/kernel.R: 0
#. R/kernel.R: stop("coefficients do not add to 1")

msgid "coefficients do not add to 1"
msgstr ""


#: R/approx.R: 0
#. R/approx.R: warning("collapsing to unique 'x' values")

msgid "collapsing to unique 'x' values"
msgstr ""


#: R/dendrogram.R: 0
#. R/dendrogram.R: stop("column dendrogram ordering gave index of wrong length")

msgid "column dendrogram ordering gave index of wrong length"
msgstr ""


#: R/aov.R: 0
#. R/aov.R: stop("columns of 'contrast.obj' must define a contrast (sum to zero)")

msgid "columns of 'contrast.obj' must define a contrast (sum to zero)"
msgstr ""


#: R/aov.R: 0
#. R/aov.R: stop("columns of 'contrast.obj' must define a contrast(sum to zero)")

msgid "columns of 'contrast.obj' must define a contrast(sum to zero)"
msgstr ""


#: R/mantelhaen.test.R: 0
#. R/mantelhaen.test.R: gettext("common odds ratio", domain = "R-stats")

msgid "common odds ratio"
msgstr ""


#: R/contrast.R: 0
#. R/contrast.R: gettextf("contrast function '%s' does not support 'sparse = TRUE'", ctr)

msgid "contrast function '%s' does not support 'sparse = TRUE'"
msgstr ""


#: R/contrast.R: 0
#. R/contrast.R: stop("contrasts apply only to factors")
#. R/contrast.R: stop("contrasts apply only to factors")

msgid "contrasts apply only to factors"
msgstr ""


#: R/contrast.R: 0
#. R/contrast.R: stop("contrasts can be applied only to factors with 2 or more levels")

msgid "contrasts can be applied only to factors with 2 or more levels"
msgstr ""


#: R/contr.poly.R: 0
#: R/contrast.R: 0
#. R/contr.poly.R: gettextf("contrasts not defined for %d degrees of freedom", n - 1)
#. R/contrast.R: gettextf("contrasts not defined for %d degrees of freedom", n - 1L)

msgid "contrasts not defined for %d degrees of freedom"
msgstr ""


#: R/nlm.R: 0
#. R/nlm.R: stop("convergence problem in zero finding: ", conditionMessage(val))

msgid "convergence problem in zero finding:"
msgstr ""


#: R/arma0.R: 0
#. R/arma0.R: warning("converting non-invertible initial MA values")

msgid "converting non-invertible initial MA values"
msgstr ""


#: R/cor.test.R: 0
#. R/cor.test.R: gettext("correlation", domain = "R-stats")

msgid "correlation"
msgstr ""


#: R/princomp.R: 0
#. R/princomp.R: stop("covariance matrix is not non-negative definite")

msgid "covariance matrix is not non-negative definite"
msgstr ""


#: R/spectrum.R: 0
#. R/spectrum.R: stop("coverage probability out of range [0,1)")

msgid "coverage probability out of range [0,1)"
msgstr ""


#: R/smspline.R: 0
#. R/smspline.R: warning("cross-validation with non-unique 'x' values seems doubtful")

msgid "cross-validation with non-unique 'x' values seems doubtful"
msgstr ""


#: R/cutree.R: 0
#. R/cutree.R: message("cutree(): k(h) = ", k, domain = "R-stats")

msgid "cutree(): k(h) ="
msgstr ""


#: R/t.test.R: 0
#. R/t.test.R: stop("data are essentially constant")
#. R/t.test.R: stop("data are essentially constant")

msgid "data are essentially constant"
msgstr ""


#: R/HoltWinters.R: 0
#. R/HoltWinters.R: stop("data must be non-zero for multiplicative Holt-Winters")

msgid "data must be non-zero for multiplicative Holt-Winters"
msgstr ""


#: R/htest.R: 0
#. R/htest.R: gettextf("data: %s", x$data.name, domain = "R-stats")

msgid "data: %s"
msgstr ""


#: R/dendrogram.R: 0
#. R/dendrogram.R: gettextf("dendrogram entries must be 1,2,..,%d (in any order), to be coercible to an object of class \"hclust\"",     n)

msgid "dendrogram entries must be 1,2,..,%d (in any order), to be coercible to an object of class \"hclust\""
msgstr ""


#: R/dendrogram.R: 0
#. R/dendrogram.R: gettextf("dendrogram leaf '%s', at height %s", format(attr(x, "label"), digits = digits),     format(attr(x, "height"), digits = digits), domain = "R-stats")

msgid "dendrogram leaf '%s', at height %s"
msgstr ""


#: R/dendrogram.R: 0
#. R/dendrogram.R: stop("dendrogram node with non-positive #{branches}")

msgid "dendrogram node with non-positive #{branches}"
msgstr ""


#: R/dendrogram.R: 0
#. R/dendrogram.R: stop("dendrogram non-leaf node with non-positive #{branches}")

msgid "dendrogram non-leaf node with non-positive #{branches}"
msgstr ""


#: R/dendrogram.R: 0
#. R/dendrogram.R: gettextf("dendrogram with %d branches and %d members total, at height %s", length(x),     attr(x, "members"), format(attr(x, "height"), digits = digits), domain = "R-stats")

msgid "dendrogram with %d branches and %d members total, at height %s"
msgstr ""


#: R/dendrogram.R: 0
#. R/dendrogram.R: gettextf("dendrogram with %d branches and %d members, at height %s", le, memb, format(hgt,     digits = digits.d), domain = "R-stats")

msgid "dendrogram with %d branches and %d members, at height %s"
msgstr ""


#: R/var.test.R: 0
#. R/var.test.R: gettext("denom df", domain = "R-stats")

msgid "denom df"
msgstr ""


#: R/model.tables.R: 0
#. R/model.tables.R: stop("design is unbalanced so cannot proceed")

msgid "design is unbalanced so cannot proceed"
msgstr ""


#: R/mcnemar.test.R: 0
#. R/mcnemar.test.R: gettext("df", domain = "R-stats")

msgid "df"
msgstr ""


#: R/cor.R: 0
#. R/cor.R: warning("diag(.) had 0 or NA entries; non-finite result is doubtful")

msgid "diag(.) had 0 or NA entries; non-finite result is doubtful"
msgstr ""


#: R/nlm.R: 0
#. R/nlm.R: if (doX) "did not succeed extending the interval endpoints for f(lower) * f(upper) <= 0" else "'f()' values at end points are not of opposite sign"

msgid "did not succeed extending the interval endpoints for f(lower) * f(upper) <= 0"
msgstr ""


#: R/wilcox.test.R: 0
#. R/wilcox.test.R: gettext("difference in location", domain = "R-stats")
#. R/wilcox.test.R: gettext("difference in location", domain = "R-stats")

msgid "difference in location"
msgstr ""


#: R/t.test.R: 0
#. R/t.test.R: gettext("difference in means", domain = "R-stats")

msgid "difference in means"
msgstr ""


#: R/cancor.R: 0
#. R/cancor.R: stop("dimension 0 in 'x' or 'y' argument")

msgid "dimension 0 in 'x' or 'y' argument"
msgstr ""


#: R/hclust.R: 0
#. R/hclust.R: stop("dissimilarities are of improper length")
#. R/hclust.R: warning("dissimilarities are of improper length")

msgid "dissimilarities are of improper length"
msgstr ""


#: R/cmdscale.R: 0
#. R/cmdscale.R: stop("distances must be result of 'dist' or a square matrix")

msgid "distances must be result of 'dist' or a square matrix"
msgstr ""


#: R/mantelhaen.test.R: 0
#. R/mantelhaen.test.R: stop("each dimension in table must be >= 2")

msgid "each dimension in table must be >= 2"
msgstr ""


#: R/aov.R: 0
#. R/aov.R: gettextf("each element of '%s' must be logical", substitute(contrasts.list))
#. R/aov.R: gettextf("each element of '%s' must be logical", substitute(contrasts.obj))

msgid "each element of '%s' must be logical"
msgstr ""


#: R/model.tables.R: 0
#. R/model.tables.R: stop("eff.aovlist: non-orthogonal contrasts would give an incorrect answer")

msgid "eff.aovlist: non-orthogonal contrasts would give an incorrect answer"
msgstr ""


#: R/cutree.R: 0
#. R/cutree.R: stop("either 'k' or 'h' must be specified")

msgid "either 'k' or 'h' must be specified"
msgstr ""


#: R/cutree.R: 0
#. R/cutree.R: gettextf("elements of 'k' must be between 1 and %d", n)

msgid "elements of 'k' must be between 1 and %d"
msgstr ""


#: R/prop.test.R: 0
#. R/prop.test.R: stop("elements of 'n' must be positive")

msgid "elements of 'n' must be positive"
msgstr ""


#: R/prop.test.R: 0
#. R/prop.test.R: stop("elements of 'p' must be in (0,1)")

msgid "elements of 'p' must be in (0,1)"
msgstr ""


#: R/prop.test.R: 0
#. R/prop.test.R: stop("elements of 'x' must be nonnegative")

msgid "elements of 'x' must be nonnegative"
msgstr ""


#: R/prop.test.R: 0
#. R/prop.test.R: stop("elements of 'x' must not be greater than those of 'n'")

msgid "elements of 'x' must not be greater than those of 'n'"
msgstr ""


#: R/kmeans.R: 0
#. R/kmeans.R: stop("empty cluster: try a better set of initial centers", call. = FALSE)
#. R/kmeans.R: warning("empty cluster: try a better set of initial centers", call. = FALSE)
#. R/kmeans.R: warning("empty cluster: try a better set of initial centers", call. = FALSE)

msgid "empty cluster: try a better set of initial centers"
msgstr ""


#: R/ARMAtheory.R: 0
#. R/ARMAtheory.R: stop("empty model supplied")

msgid "empty model supplied"
msgstr ""


#: R/lm.R: 0
#. R/lm.R: warning("essentially perfect fit: summary may be unreliable")

msgid "essentially perfect fit: summary may be unreliable"
msgstr ""


#: R/poisson.test.R: 0
#. R/poisson.test.R: gettext("event rate", domain = "R-stats")

msgid "event rate"
msgstr ""


#: R/power.R: 0
#. R/power.R: gettextf("exactly one of '%s', '%s', '%s', '%s', and '%s' arguments must be NULL",     "n", "delta", "sd", "power", "sig.level")
#. R/power.R: gettextf("exactly one of '%s', '%s', '%s', '%s', and '%s' arguments must be NULL",     "n", "p1", "p2", "power", "sig.level")

msgid "exactly one of '%s', '%s', '%s', '%s', and '%s' arguments must be NULL"
msgstr ""


#: R/power.anova.test.R: 0
#. R/power.anova.test.R: stop("exactly one of 'groups', 'n', 'between.var', 'within.var', 'power', and 'sig.level' must be NULL")

msgid "exactly one of 'groups', 'n', 'between.var', 'within.var', 'power', and 'sig.level' must be NULL"
msgstr ""


#: R/poisson.test.R: 0
#. R/poisson.test.R: gettext("expected count1", domain = "R-stats")

msgid "expected count1"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: warning("extending time series when replacing values", call. = FALSE)

msgid "extending time series when replacing values"
msgstr ""


#: R/logLik.R: 0
#. R/logLik.R: warning("extra arguments were discarded")

msgid "extra arguments were discarded"
msgstr ""


#: R/integrate.R: 0
#. R/integrate.R: gettext("extremely bad integrand behaviour")

msgid "extremely bad integrand behaviour"
msgstr ""


#: R/factanal.R: 0
#. R/factanal.R: stop("factor analysis applies only to numerical variables")
#. R/factanal.R: stop("factor analysis applies only to numerical variables")

msgid "factor analysis applies only to numerical variables"
msgstr ""


#: R/factanal.R: 0
#. R/factanal.R: stop("factor analysis requires at least three variables")

msgid "factor analysis requires at least three variables"
msgstr ""


#: R/TukeyHSD.R: 0
#. R/TukeyHSD.R: gettext("factor levels have been ordered", domain = "R-stats")

msgid "factor levels have been ordered"
msgstr ""


#: R/quantile.R: 0
#. R/quantile.R: stop("factors are not allowed")

msgid "factors are not allowed"
msgstr ""


#: R/reshape.R: 0
#. R/reshape.R: stop("failed to guess time-varying variables from their names")

msgid "failed to guess time-varying variables from their names"
msgstr ""


#: R/integrate.R: 0
#. R/integrate.R: gettextf("failed with message %s", sQuote(x$message), domain = "R-stats")

msgid "failed with message %s"
msgstr ""


#: R/nlminb.R: 0
#. R/nlminb.R: gettext("false convergence (8)")

msgid "false convergence (8)"
msgstr ""


#: R/lm.R: 0
#. R/lm.R: gettextf("family '%s' not implemented", fam)

msgid "family '%s' not implemented"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: warning("fitting to calculate the null deviance did not converge -- increase 'maxit' value?")

msgid "fitting to calculate the null deviance did not converge -- increase 'maxit' value?"
msgstr ""


#: R/nlminb.R: 0
#. R/nlminb.R: gettext("fn cannot be computed at initial par (63)")

msgid "fn cannot be computed at initial par (63)"
msgstr ""


#: R/family.R: 0
#. R/family.R: gettextf("for the %s family, 'y' argument must be a vector of 0 and 1's or a 2 column matrix where first column is the number of successes and second column is the number of failures",     sQuote("binomial"))
#. R/family.R: gettextf("for the %s family, 'y' argument must be a vector of 0 and 1's or a 2 column matrix where first column is the number of successes and second column is the number of failures",     sQuote("quasibinomial"))

msgid "for the %s family, 'y' argument must be a vector of 0 and 1's or a 2 column matrix where first column is the number of successes and second column is the number of failures"
msgstr ""


#: R/nlsFunc.R: 0
#. R/nlsFunc.R: gettextf("formula '%s' must be of the form '~expr'", deparse(as.vector(object)))

msgid "formula '%s' must be of the form '~expr'"
msgstr ""


#: R/cpgram.R: 0
#. R/cpgram.R: gettext("frequency", domain = "R-stats")

msgid "frequency"
msgstr ""


#: R/StructTS.R: 0
#. R/StructTS.R: stop("frequency must be a positive integer >= 2 for BSM")

msgid "frequency must be a positive integer >= 2 for BSM"
msgstr ""


#: R/nlminb.R: 0
#. R/nlminb.R: gettext("function evaluation limit reached without convergence (9)")

msgid "function evaluation limit reached without convergence (9)"
msgstr ""


#: R/isoreg.R: 0
#. R/isoreg.R: gettext("  further components: ", domain = "R-stats")

msgid "further components:"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: warning("glm.fit: algorithm did not converge", call. = FALSE)

msgid "glm.fit: algorithm did not converge"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: warning("glm.fit: algorithm stopped at boundary value", call. = FALSE)

msgid "glm.fit: algorithm stopped at boundary value"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: warning("glm.fit: fitted probabilities numerically 0 or 1 occurred", call. = FALSE)

msgid "glm.fit: fitted probabilities numerically 0 or 1 occurred"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: warning("glm.fit: fitted rates numerically 0 occurred", call. = FALSE)

msgid "glm.fit: fitted rates numerically 0 occurred"
msgstr ""


#: R/nlminb.R: 0
#. R/nlminb.R: gettext("gr cannot be computed at initial par (65)")

msgid "gr cannot be computed at initial par (65)"
msgstr ""


#: R/ansari.test.R: 0
#: R/mood.test.R: 0
#: R/t.test.R: 0
#: R/var.test.R: 0
#: R/wilcox.test.R: 0
#. R/ansari.test.R: stop("grouping factor must have exactly 2 levels")
#. R/mood.test.R: stop("grouping factor must have exactly 2 levels")
#. R/t.test.R: stop("grouping factor must have exactly 2 levels")
#. R/var.test.R: stop("grouping factor must have exactly 2 levels")
#. R/wilcox.test.R: stop("grouping factor must have exactly 2 levels")

msgid "grouping factor must have exactly 2 levels"
msgstr ""


#: R/plot.lm.R: 0
#. R/plot.lm.R: gettextf("hat values (leverages) are all = %s\n and there are no factor predictors; no plot no. 5",     format(mean(r.hat)))

msgid "hat values (leverages) are all = %s\n and there are no factor predictors; no plot no. 5"
msgstr ""


#: R/fisher.test.R: 0
#: R/mcnemar.test.R: 0
#. R/fisher.test.R: gettextf("if '%s' argument is not a matrix, '%s' argument must be given", "x", "y")
#. R/mcnemar.test.R: gettextf("if '%s' argument is not a matrix, '%s' argument must be given", "x", "y")

msgid "if '%s' argument is not a matrix, '%s' argument must be given"
msgstr ""


#: R/mantelhaen.test.R: 0
#. R/mantelhaen.test.R: gettextf("if '%s' argument is not an array, '%s' argument must be given", "x", "y")
#. R/mantelhaen.test.R: gettextf("if '%s' argument is not an array, '%s' argument must be given", "x", "z")

msgid "if '%s' argument is not an array, '%s' argument must be given"
msgstr ""


#: R/family.R: 0
#. R/family.R: warning("ignoring prior weights")

msgid "ignoring prior weights"
msgstr ""


#: R/lm.R: 0
#. R/lm.R: stop("incompatible dimensions")
#. R/lm.R: stop("incompatible dimensions")

msgid "incompatible dimensions"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: stop("inconsistent specification of 'ar' order")

msgid "inconsistent specification of 'ar' order"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: stop("inconsistent specification of 'ma' order")

msgid "inconsistent specification of 'ma' order"
msgstr ""


#: R/diffinv.R: 0
#. R/diffinv.R: stop("incorrect dimensions for 'xi'")

msgid "incorrect dimensions for 'xi'"
msgstr ""


#: R/ftable.R: 0
#. R/ftable.R: gettextf("incorrect specification for '%s' argument", "row.vars")
#. R/ftable.R: gettextf("incorrect specification for '%s' argument", "row.vars")
#. R/ftable.R: gettextf("incorrect specification for '%s' argument", "col.vars")
#. R/ftable.R: gettextf("incorrect specification for '%s' argument", "col.vars")

msgid "incorrect specification for '%s' argument"
msgstr ""


#: R/ftable.R: 0
#. R/ftable.R: stop("incorrect variable names in lhs of formula")

msgid "incorrect variable names in lhs of formula"
msgstr ""


#: R/ftable.R: 0
#. R/ftable.R: stop("incorrect variable names in rhs of formula")

msgid "incorrect variable names in rhs of formula"
msgstr ""


#: R/bandwidths.R: 0
#. R/bandwidths.R: gettextf("increasing bw.SJ() search interval (%d) to [%.4g,%.4g]", itry, lower, upper)

msgid "increasing bw.SJ() search interval (%d) to [%.4g,%.4g]"
msgstr ""


#: R/kmeans.R: 0
#. R/kmeans.R: stop("initial centers are not distinct")

msgid "initial centers are not distinct"
msgstr ""


#: R/nlminb.R: 0
#. R/nlminb.R: gettext("initial par violates constraints")

msgid "initial par violates constraints"
msgstr ""


#: R/constrOptim.R: 0
#. R/constrOptim.R: stop("initial value is not in the interior of the feasible region")

msgid "initial value is not in the interior of the feasible region"
msgstr ""


#: R/isoreg.R: 0
#. R/isoreg.R: gettext("  initially ordered 'x'", domain = "R-stats")

msgid "initially ordered 'x'"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: stop("inner loop 1; cannot correct step size", call. = FALSE)

msgid "inner loop 1; cannot correct step size"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: stop("inner loop 2; cannot correct step size", call. = FALSE)

msgid "inner loop 2; cannot correct step size"
msgstr ""


#: R/dendrogram.R: 0
#. R/dendrogram.R: gettext("inner node:", domain = "R-stats")

msgid "inner node:"
msgstr ""


#: R/ftable.R: 0
#: R/xtabs.R: 0
#. R/ftable.R: stop("interactions are not allowed")
#. R/xtabs.R: stop("interactions are not allowed")

msgid "interactions are not allowed"
msgstr ""


#: R/power.R: 0
#: R/power.anova.test.R: 0
#. R/power.R: stop("internal error", domain = "R-stats")
#. R/power.R: stop("internal error", domain = "R-stats")
#. R/power.anova.test.R: stop("internal error", domain = "R-stats")

msgid "internal error"
msgstr ""


#: R/arima.R: 0
#: R/cor.R: 0
#: R/cor.R: 0
#: R/cor.R: 0
#: R/family.R: 0
#: R/glm.R: 0
#: R/loess.R: 0
#: R/loess.R: 0
#: R/loess.R: 0
#: R/loess.R: 0
#: R/loess.R: 0
#: R/loess.R: 0
#: R/models.R: 0
#: R/models.R: 0
#: R/nafns.R: 0
#: R/r2dtable.R: 0
#: R/r2dtable.R: 0
#: R/r2dtable.R: 0
#: R/smooth.R: 0
#. R/arima.R: gettextf("invalid '%s' argument", "SSinit")
#. R/cor.R: gettextf("invalid '%s' argument", "use")
#. R/cor.R: gettextf("invalid '%s' argument", "use")
#. R/cor.R: gettextf("invalid '%s' argument", "use")
#. R/family.R: gettextf("invalid '%s' argument", "lambda")
#. R/glm.R: gettextf("invalid '%s' argument", "method")
#. R/loess.R: gettextf("invalid '%s' argument", "control")
#. R/loess.R: gettextf("invalid '%s' argument", "x")
#. R/loess.R: gettextf("invalid '%s' argument", "y")
#. R/loess.R: gettextf("invalid '%s' argument", "span")
#. R/loess.R: gettextf("invalid '%s' argument", "cell")
#. R/loess.R: gettextf("invalid '%s' argument", "degree")
#. R/models.R: gettextf("invalid '%s' argument", "contrasts.arg")
#. R/models.R: gettextf("invalid '%s' argument", "data")
#. R/nafns.R: gettextf("invalid '%s' argument", "omit")
#. R/r2dtable.R: gettextf("invalid '%s' argument", "n")
#. R/r2dtable.R: gettextf("invalid '%s' argument", "r")
#. R/r2dtable.R: gettextf("invalid '%s' argument", "c")
#. R/smooth.R: gettextf("invalid '%s' argument", "endrule")

msgid "invalid '%s' argument"
msgstr ""


#: R/HoltWinters.R: 0
#: R/approx.R: 0
#: R/approx.R: 0
#: R/bandwidths.R: 0
#: R/bandwidths.R: 0
#: R/bandwidths.R: 0
#: R/bandwidths.R: 0
#: R/bandwidths.R: 0
#: R/bandwidths.R: 0
#: R/bandwidths.R: 0
#: R/bandwidths.R: 0
#: R/bandwidths.R: 0
#: R/cmdscale.R: 0
#: R/density.R: 0
#: R/diffinv.R: 0
#: R/filter.R: 0
#: R/filter.R: 0
#: R/kmeans.R: 0
#: R/kmeans.R: 0
#: R/kmeans.R: 0
#: R/loess.R: 0
#: R/loess.R: 0
#: R/runmed.R: 0
#: R/runmed.R: 0
#: R/smooth.R: 0
#: R/smspline.R: 0
#: R/spline.R: 0
#: R/splinefun.R: 0
#: R/stl.R: 0
#: R/symnum.R: 0
#. R/HoltWinters.R: gettextf("invalid '%s' value", "length(x)")
#. R/approx.R: gettextf("invalid '%s' value", "length(x)")
#. R/approx.R: gettextf("invalid '%s' value", "length(x)")
#. R/bandwidths.R: gettextf("invalid '%s' value", "length(x)")
#. R/bandwidths.R: gettextf("invalid '%s' value", "x")
#. R/bandwidths.R: gettextf("invalid '%s' value", "nb")
#. R/bandwidths.R: gettextf("invalid '%s' value", "length(x)")
#. R/bandwidths.R: gettextf("invalid '%s' value", "x")
#. R/bandwidths.R: gettextf("invalid '%s' value", "nb")
#. R/bandwidths.R: gettextf("invalid '%s' value", "length(x)")
#. R/bandwidths.R: gettextf("invalid '%s' value", "x")
#. R/bandwidths.R: gettextf("invalid '%s' value", "nb")
#. R/cmdscale.R: gettextf("invalid '%s' value", "n")
#. R/density.R: gettextf("invalid '%s' value", "length(x)")
#. R/diffinv.R: gettextf("invalid '%s' value", "length(x)")
#. R/filter.R: gettextf("invalid '%s' value", "nrow(x)")
#. R/filter.R: gettextf("invalid '%s' value", "length(filter)")
#. R/kmeans.R: gettextf("invalid '%s' value", "nrow(x)")
#. R/kmeans.R: gettextf("invalid '%s' value", "ncol(x)")
#. R/kmeans.R: gettextf("invalid '%s' value", "k")
#. R/loess.R: gettextf("invalid '%s' value", "NCOL(X)")
#. R/loess.R: gettextf("invalid '%s' value", "NCOL(X)")
#. R/runmed.R: gettextf("invalid '%s' value", "length(x)")
#. R/runmed.R: gettextf("invalid '%s' value", "k")
#. R/smooth.R: gettextf("invalid '%s' value", "length(x)")
#. R/smspline.R: gettextf("invalid '%s' value", "control.spar")
#. R/spline.R: gettextf("invalid '%s' value", "length(x)")
#. R/splinefun.R: gettextf("invalid '%s' value", "length(x)")
#. R/stl.R: gettextf("invalid '%s' value", "length(x)")
#. R/symnum.R: gettextf("invalid '%s' value", "abbr.colnames'")

msgid "invalid '%s' value"
msgstr ""


#: R/nlm.R: 0
#. R/nlm.R: stop("invalid 'extendInt' argument; please report")

msgid "invalid 'extendInt' argument; please report"
msgstr ""


#: R/lm.R: 0
#. R/lm.R: stop("invalid 'lm' object:  no 'terms' component")

msgid "invalid 'lm' object:  no 'terms' component"
msgstr ""


#: R/chisq.test.R: 0
#: R/fisher.test.R: 0
#. R/chisq.test.R: stop("invalid 'nrow(x)' or 'ncol(x)' value", domain = "R-stats")
#. R/fisher.test.R: stop("invalid 'nrow(x)' or 'ncol(x)' value")

msgid "invalid 'nrow(x)' or 'ncol(x)' value"
msgstr ""


#: R/cutree.R: 0
#. R/cutree.R: stop("invalid 'tree' argument ('merge' component)")

msgid "invalid 'tree' argument ('merge' component)"
msgstr ""


#: R/dendrogram.R: 0
#. R/dendrogram.R: stop("invalid (length 0) node in dendrogram")

msgid "invalid (length 0) node in dendrogram"
msgstr ""


#: R/nls-profile.R: 0
#. R/nls-profile.R: stop("invalid argument passed to 'getProfile()'")

msgid "invalid argument passed to 'getProfile()'"
msgstr ""


#: R/hclust.R: 0
#. R/hclust.R: gettextf("invalid clustering method %s", method)

msgid "invalid clustering method %s"
msgstr ""


#: R/hclust.R: 0
#. R/hclust.R: gettext("invalid dendrogram", domain = "R-stats")

msgid "invalid dendrogram"
msgstr ""


#: R/hclust.R: 0
#. R/hclust.R: stop("invalid dissimilarities")

msgid "invalid dissimilarities"
msgstr ""


#: R/dist.R: 0
#. R/dist.R: stop("invalid distance method")

msgid "invalid distance method"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: stop("invalid fitted means in empty model", call. = FALSE)

msgid "invalid fitted means in empty model"
msgstr ""


#: R/ansari.test.R: 0
#: R/cor.test.R: 0
#: R/friedman.test.R: 0
#: R/models.R: 0
#: R/mood.test.R: 0
#: R/quade.test.R: 0
#: R/t.test.R: 0
#: R/var.test.R: 0
#: R/wilcox.test.R: 0
#. R/ansari.test.R: stop("invalid formula")
#. R/cor.test.R: stop("invalid formula")
#. R/friedman.test.R: stop("invalid formula")
#. R/models.R: stop("invalid formula")
#. R/mood.test.R: stop("invalid formula")
#. R/quade.test.R: stop("invalid formula")
#. R/t.test.R: stop("invalid formula")
#. R/var.test.R: stop("invalid formula")
#. R/wilcox.test.R: stop("invalid formula")

msgid "invalid formula"
msgstr ""


#: R/deriv.R: 0
#. R/deriv.R: stop("invalid formula in 'deriv()'")
#. R/deriv.R: stop("invalid formula in 'deriv()'")

msgid "invalid formula in 'deriv()'"
msgstr ""


#: R/approx.R: 0
#: R/spline.R: 0
#. R/approx.R: stop("invalid interpolation method")
#. R/approx.R: stop("invalid interpolation method")
#. R/spline.R: stop("invalid interpolation method")

msgid "invalid interpolation method"
msgstr ""


#: R/binom.test.R: 0
#: R/hclust.R: 0
#. R/binom.test.R: gettextf("invalid length of '%s' argument", "x")
#. R/hclust.R: gettextf("invalid length of '%s' argument", "members")

msgid "invalid length of '%s' argument"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: stop("invalid linear predictor values in empty model", call. = FALSE)

msgid "invalid linear predictor values in empty model"
msgstr ""


#: R/lm.influence.R: 0
#. R/lm.influence.R: stop("invalid model QR matrix")

msgid "invalid model QR matrix"
msgstr ""


#: R/smspline.R: 0
#. R/smspline.R: stop("invalid number of points")

msgid "invalid number of points"
msgstr ""


#: R/integrate.R: 0
#. R/integrate.R: stop("invalid parameter values")

msgid "invalid parameter values"
msgstr ""


#: R/models.R: 0
#. R/models.R: stop("invalid response type")

msgid "invalid response type"
msgstr ""


#: R/nlminb.R: 0
#. R/nlminb.R: gettext("iteration limit reached without convergence (10)")

msgid "iteration limit reached without convergence (10)"
msgstr ""


#: R/dendrogram.R: 0
#. R/dendrogram.R: gettextf("layout: widths = %s, heights = %s; lmat=\n", paste(lwid, collapse = " "),     paste(lhei, collapse = " "), domain = "R-stats")

msgid "layout: widths = %s, heights = %s; lmat="
msgstr ""


#: R/dendrogram.R: 0
#. R/dendrogram.R: gettextf("leaf %s", dQuote(at$label), domain = "R-stats")
#. R/dendrogram.R: gettextf("leaf %s", format(object, digits = digits.d), domain = "R-stats")

msgid "leaf %s"
msgstr ""


#: R/dendrogram.R: 0
#. R/dendrogram.R: gettextf("leaf:", domain = "R-stats")

msgid "leaf:"
msgstr ""


#: R/fft.R: 0
#. R/fft.R: stop("length mismatch in convolution")

msgid "length mismatch in convolution"
msgstr ""


#: R/cov.wt.R: 0
#. R/cov.wt.R: stop("length of 'center' must equal the number of columns in 'x'")

msgid "length of 'center' must equal the number of columns in 'x'"
msgstr ""


#: R/filter.R: 0
#. R/filter.R: stop("length of 'init' argument must equal length of 'filter' argument")

msgid "length of 'init' argument must equal length of 'filter' argument"
msgstr ""


#: R/spectrum.R: 0
#. R/spectrum.R: stop("length of 'p' must be 1 or equal the number of columns of 'x'")

msgid "length of 'p' must be 1 or equal the number of columns of 'x'"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: gettextf("length of 'start' should equal %d and correspond to initial coefs for %s",     nvars, tmp_N)

msgid "length of 'start' should equal %d and correspond to initial coefs for %s"
msgstr ""


#: R/reshape.R: 0
#. R/reshape.R: stop("length of 'v.names' does not evenly divide length of 'varying'")

msgid "length of 'v.names' does not evenly divide length of 'varying'"
msgstr ""


#: R/reshape.R: 0
#. R/reshape.R: stop("length of 'varying' must be the product of length of 'v.names' and length of 'times'")

msgid "length of 'varying' must be the product of length of 'v.names' and length of 'times'"
msgstr ""


#: R/cov.wt.R: 0
#. R/cov.wt.R: stop("length of 'wt' must equal the number of rows in 'x'")

msgid "length of 'wt' must equal the number of rows in 'x'"
msgstr ""


#: R/shapiro.test.R: 0
#. R/shapiro.test.R: stop("length of 'x' argument must be between 3 and 5000")

msgid "length of 'x' argument must be between 3 and 5000"
msgstr ""


#: R/addmargins.R: 0
#. R/addmargins.R: gettextf("length of FUN, %d, does not match the length of the margins, %d", length(FUN),     n.sid)

msgid "length of FUN, %d, does not match the length of the margins, %d"
msgstr ""


#: R/arima.R: 0
#: R/arma0.R: 0
#: R/smspline.R: 0
#. R/arima.R: gettextf("lengths of '%s' and '%s' arguments must match", "x", "xreg")
#. R/arma0.R: gettextf("lengths of '%s' and '%s' arguments must match", "x", "xreg")
#. R/smspline.R: gettextf("lengths of '%s' and '%s' arguments must match", "x", "w")

msgid "lengths of '%s' and '%s' arguments must match"
msgstr ""


#: R/nls-profile.R: 0
#. R/nls-profile.R: warning("levels truncated to positive values only")

msgid "levels truncated to positive values only"
msgstr ""


#: R/family.R: 0
#. R/family.R: gettextf("link %s not available for binomial family; available links are %s", sQuote(linktemp),     tmp_n)

msgid "link %s not available for binomial family; available links are %s"
msgstr ""


#: R/family.R: 0
#. R/family.R: gettextf("link %s not available for gamma family; available links are %s", sQuote(linktemp),     tmp_n)

msgid "link %s not available for gamma family; available links are %s"
msgstr ""


#: R/family.R: 0
#. R/family.R: gettextf("link %s not available for gaussian family; available links are %s", sQuote(linktemp),     tmp_n)

msgid "link %s not available for gaussian family; available links are %s"
msgstr ""


#: R/family.R: 0
#. R/family.R: gettextf("link %s not available for inverse.gaussian family; available links are %s",     sQuote(linktemp), tmp_n)

msgid "link %s not available for inverse.gaussian family; available links are %s"
msgstr ""


#: R/family.R: 0
#. R/family.R: gettextf("link %s not available for poisson family; available links are %s", sQuote(linktemp),     tmp_n)

msgid "link %s not available for poisson family; available links are %s"
msgstr ""


#: R/family.R: 0
#. R/family.R: gettextf("link %s not available for quasibinomial family; available links are %s",     sQuote(linktemp), tmp_n)

msgid "link %s not available for quasibinomial family; available links are %s"
msgstr ""


#: R/family.R: 0
#. R/family.R: gettextf("link %s not available for quasipoisson family; available links are %s",     sQuote(linktemp), tmp_n)

msgid "link %s not available for quasipoisson family; available links are %s"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: gettext("link: ", domain = "R-stats")

msgid "link:"
msgstr ""


#: R/lm.R: 0
#. R/lm.R: stop("lm object does not have a proper 'qr' component. Rank zero or should not have used lm(.., qr=FALSE).")

msgid "lm object does not have a proper 'qr' component. Rank zero or should not have used lm(.., qr=FALSE)."
msgstr ""


#: R/wilcox.test.R: 0
#. R/wilcox.test.R: gettext("location", domain = "R-stats")

msgid "location"
msgstr ""


#: R/wilcox.test.R: 0
#. R/wilcox.test.R: gettext("location shift", domain = "R-stats")

msgid "location shift"
msgstr ""


#: R/nlminb.R: 0
#. R/nlminb.R: stop("logical 'hessian' argument not allowed.  See documentation.")

msgid "logical 'hessian' argument not allowed.  See documentation."
msgstr ""


#: R/nlm.R: 0
#. R/nlm.R: stop("lower < upper  is not fulfilled")

msgid "lower < upper  is not fulfilled"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: stop("maximum number of iterations must be > 0")

msgid "maximum number of iterations must be > 0"
msgstr ""


#: R/integrate.R: 0
#. R/integrate.R: gettext("maximum number of subdivisions reached")

msgid "maximum number of subdivisions reached"
msgstr ""


#: R/t.test.R: 0
#. R/t.test.R: gettext("mean", domain = "R-stats")

msgid "mean"
msgstr ""


#: R/t.test.R: 0
#. R/t.test.R: gettextf("mean in group %s", levels(g))

msgid "mean in group %s"
msgstr ""


#: R/t.test.R: 0
#. R/t.test.R: gettext("mean of the differences")

msgid "mean of the differences"
msgstr ""


#: R/t.test.R: 0
#. R/t.test.R: gettext("mean of x")
#. R/t.test.R: gettext("mean of x")

msgid "mean of x"
msgstr ""


#: R/t.test.R: 0
#. R/t.test.R: gettext("mean of y")

msgid "mean of y"
msgstr ""


#: R/optim.R: 0
#. R/optim.R: stop("method = \"Brent\" is only available for one-dimensional optimization")

msgid "method = \"Brent\" is only available for one-dimensional optimization"
msgstr ""


#: R/lm.R: 0
#. R/lm.R: gettextf("method = '%s' is not supported. Using 'qr'", method)
#. R/lm.R: gettextf("method = '%s' is not supported. Using 'qr'", method)
#. R/lm.R: gettextf("method = '%s' is not supported. Using 'qr'", method)

msgid "method = '%s' is not supported. Using 'qr'"
msgstr ""


#: R/optim.R: 0
#. R/optim.R: warning("method L-BFGS-B uses 'factr' (and 'pgtol') instead of 'reltol' and 'abstol'")

msgid "method L-BFGS-B uses 'factr' (and 'pgtol') instead of 'reltol' and 'abstol'"
msgstr ""


#: R/bandwidths.R: 0
#. R/bandwidths.R: warning("minimum occurred at one end of the range")
#. R/bandwidths.R: warning("minimum occurred at one end of the range")

msgid "minimum occurred at one end of the range"
msgstr ""


#: R/ppr.R: 0
#. R/ppr.R: stop("mismatched 'x' and 'y'")

msgid "mismatched 'x' and 'y'"
msgstr ""


#: R/lsfit.R: 0
#. R/lsfit.R: warning("missing observations were deleted")

msgid "missing observations were deleted"
msgstr ""


#: R/smspline.R: 0
#. R/smspline.R: stop("missing or infinite values in inputs are not allowed")

msgid "missing or infinite values in inputs are not allowed"
msgstr ""


#: R/lm.R: 0
#: R/nls.R: 0
#. R/lm.R: stop("missing or negative weights not allowed")
#. R/nls.R: stop("missing or negative weights not allowed")

msgid "missing or negative weights not allowed"
msgstr ""


#: R/quantile.R: 0
#. R/quantile.R: stop("missing values and NaN's not allowed if 'na.rm' is FALSE")

msgid "missing values and NaN's not allowed if 'na.rm' is FALSE"
msgstr ""


#: R/contr.poly.R: 0
#. R/contr.poly.R: stop("missing values are not allowed in 'poly()'")

msgid "missing values are not allowed in 'poly()'"
msgstr ""


#: R/filter.R: 0
#: R/nafns.R: 0
#. R/filter.R: gettextf("missing values in '%s' argument", "filter")
#. R/nafns.R: gettextf("missing values in '%s' argument", "object")

msgid "missing values in '%s' argument"
msgstr ""


#: R/isoreg.R: 0
#. R/isoreg.R: stop("missing values not allowed")

msgid "missing values not allowed"
msgstr ""


#: R/models.R: 0
#. R/models.R: stop("model frame and formula mismatch in model.matrix()")

msgid "model frame and formula mismatch in model.matrix()"
msgstr ""


#: R/ar.R: 0
#. R/ar.R: gettextf("model order: %d singularities in the computation of the projection matrix results are only valid up to model order %d",     m, m - 1L)

msgid "model order: %d singularities in the computation of the projection matrix results are only valid up to model order %d"
msgstr ""


#: R/AIC.R: 0
#. R/AIC.R: warning("models are not all fitted to the same number of observations")
#. R/AIC.R: warning("models are not all fitted to the same number of observations")

msgid "models are not all fitted to the same number of observations"
msgstr ""


#: R/glm.R: 0
#: R/lm.R: 0
#: R/mlm.R: 0
#. R/glm.R: stop("models were not all fitted to the same size of dataset")
#. R/lm.R: stop("models were not all fitted to the same size of dataset")
#. R/mlm.R: stop("models were not all fitted to the same size of dataset")

msgid "models were not all fitted to the same size of dataset"
msgstr ""


#: R/glm.R: 0
#: R/lm.R: 0
#: R/loess.R: 0
#: R/mlm.R: 0
#: R/nls.R: 0
#. R/glm.R: gettextf("models with response %s removed because response differs from model 1",     sQuote(deparse(responses[!sameresp])))
#. R/lm.R: gettextf("models with response %s removed because response differs from model 1",     sQuote(deparse(responses[!sameresp])))
#. R/loess.R: gettextf("models with response %s removed because response differs from model 1",     sQuote(deparse(responses[!sameresp])))
#. R/mlm.R: gettextf("models with response %s removed because response differs from model 1",     sQuote(deparse(responses[!sameresp])))
#. R/nls.R: gettextf("models with response %s removed because response differs from model 1",     sQuote(deparse(responses[!sameresp])))

msgid "models with response %s removed because response differs from model 1"
msgstr ""


#: R/kmeans.R: 0
#. R/kmeans.R: stop("more cluster centers than data points")

msgid "more cluster centers than data points"
msgstr ""


#: R/kmeans.R: 0
#. R/kmeans.R: stop("more cluster centers than distinct data points.")

msgid "more cluster centers than distinct data points."
msgstr ""


#: R/reshape.R: 0
#. R/reshape.R: gettextf("multiple rows match for %s=%s: first taken", timevar, times[i])

msgid "multiple rows match for %s=%s: first taken"
msgstr ""


#: R/symnum.R: 0
#. R/symnum.R: stop("must have 2 'symbols' for logical 'x' argument")

msgid "must have 2 'symbols' for logical 'x' argument"
msgstr ""


#: R/zzModels.R: 0
#. R/zzModels.R: stop("must have at least 4 observations to fit an 'SSfol' model")

msgid "must have at least 4 observations to fit an 'SSfol' model"
msgstr ""


#: R/zzModels.R: 0
#. R/zzModels.R: stop("must have length of response = length of second argument to 'SSfol'")

msgid "must have length of response = length of second argument to 'SSfol'"
msgstr ""


#: R/kmeans.R: 0
#. R/kmeans.R: stop("must have same number of columns in 'x' and 'centers'")

msgid "must have same number of columns in 'x' and 'centers'"
msgstr ""


#: R/spectrum.R: 0
#. R/spectrum.R: stop("must specify 'spans' or a valid kernel")

msgid "must specify 'spans' or a valid kernel"
msgstr ""


#: R/xtabs.R: 0
#. R/xtabs.R: stop("must supply either 'formula' or 'data'")

msgid "must supply either 'formula' or 'data'"
msgstr ""


#: R/contr.poly.R: 0
#. R/contr.poly.R: stop("must supply one or more vectors")

msgid "must supply one or more vectors"
msgstr ""


#: R/power.R: 0
#. R/power.R: gettext("n is number in *each* group")
#. R/power.R: gettext("n is number in *each* group")

msgid "n is number in *each* group"
msgstr ""


#: R/family.R: 0
#. R/family.R: stop("need CRAN package 'SuppDists' for the 'inverse.gaussian' family")

msgid "need CRAN package 'SuppDists' for the 'inverse.gaussian' family"
msgstr ""


#: R/update.R: 0
#. R/update.R: stop("need an object with call component")

msgid "need an object with call component"
msgstr ""


#: R/bandwidths.R: 0
#. R/bandwidths.R: stop("need at least 2 data points")
#. R/bandwidths.R: stop("need at least 2 data points")
#. R/bandwidths.R: stop("need at least 2 data points")
#. R/bandwidths.R: stop("need at least 2 data points")
#. R/bandwidths.R: stop("need at least 2 data points")

msgid "need at least 2 data points"
msgstr ""


#: R/HoltWinters.R: 0
#. R/HoltWinters.R: stop("need at least 2 periods to compute seasonal start values")

msgid "need at least 2 periods to compute seasonal start values"
msgstr ""


#: R/smspline.R: 0
#. R/smspline.R: stop("need at least four unique 'x' values")

msgid "need at least four unique 'x' values"
msgstr ""


#: R/hclust.R: 0
#. R/hclust.R: stop("need dendrograms where all leaves have labels")

msgid "need dendrograms where all leaves have labels"
msgstr ""


#: R/manova.R: 0
#. R/manova.R: stop("need multiple responses")
#. R/manova.R: stop("need multiple responses")
#. R/manova.R: stop("need multiple responses")

msgid "need multiple responses"
msgstr ""


#: R/median.R: 0
#. R/median.R: stop("need numeric data")

msgid "need numeric data"
msgstr ""


#: R/smspline.R: 0
#. R/smspline.R: stop("need result of 'smooth.spline(keep.data = TRUE)'")
#. R/smspline.R: stop("need result of 'smooth.spline(keep.data = TRUE)'")

msgid "need result of 'smooth.spline(keep.data = TRUE)'"
msgstr ""


#: R/family.R: 0
#. R/family.R: gettextf("negative values are not allowed for the '%s' family", "Poisson")
#. R/family.R: gettextf("negative values are not allowed for the '%s' family", "quasiPoisson")

msgid "negative values are not allowed for the '%s' family"
msgstr ""


#: R/glm.R: 0
#: R/lsfit.R: 0
#. R/glm.R: stop("negative weights are not allowed")
#. R/lsfit.R: stop("negative weights are not allowed")

msgid "negative weights are not allowed"
msgstr ""


#: R/factanal.R: 0
#. R/factanal.R: stop("neither 'x' nor 'covmat' supplied")

msgid "neither 'x' nor 'covmat' supplied"
msgstr ""


#: R/logLik.R: 0
#. R/logLik.R: stop("no \"nobs\" attribute is available")

msgid "no \"nobs\" attribute is available"
msgstr ""


#: R/add.R: 0
#. R/add.R: stop("no 'add1' method implemented for \"mlm\" models")

msgid "no 'add1' method implemented for \"mlm\" models"
msgstr ""


#: R/stepfun.R: 0
#. R/stepfun.R: stop("no 'as.stepfun' method available for 'x'")

msgid "no 'as.stepfun' method available for 'x'"
msgstr ""


#: R/add.R: 0
#. R/add.R: stop("no 'drop1' method for \"mlm\" models")

msgid "no 'drop1' method for \"mlm\" models"
msgstr ""


#: R/selfStart.R: 0
#. R/selfStart.R: gettextf("no 'getInitial' method found for %s objects", dQuote(data.class(object)))

msgid "no 'getInitial' method found for %s objects"
msgstr ""


#: R/logLik.R: 0
#. R/logLik.R: warning("no 'nobs()' method is available")
#. R/logLik.R: stop("no 'nobs()' method is available")

msgid "no 'nobs()' method is available"
msgstr ""


#: R/reshape.R: 0
#. R/reshape.R: stop("no 'reshapeWide' attribute, must specify 'varying'")

msgid "no 'reshapeWide' attribute, must specify 'varying'"
msgstr ""


#: R/aov.R: 0
#. R/aov.R: stop("no degrees of freedom for residuals")

msgid "no degrees of freedom for residuals"
msgstr ""


#: R/TukeyHSD.R: 0
#. R/TukeyHSD.R: stop("no factors in the fitted model")

msgid "no factors in the fitted model"
msgstr ""


#: R/smspline.R: 0
#. R/smspline.R: stop("no finite observations")

msgid "no finite observations"
msgstr ""


#: R/loess.R: 0
#. R/loess.R: stop("no models to compare")

msgid "no models to compare"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: gettextf("no observations informative at iteration %d", iter)

msgid "no observations informative at iteration %d"
msgstr ""


#: R/nls.R: 0
#. R/nls.R: stop("no parameters to fit")

msgid "no parameters to fit"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: stop("no replacement values supplied")

msgid "no replacement values supplied"
msgstr ""


#: R/aggregate.R: 0
#. R/aggregate.R: stop("no rows to aggregate")

msgid "no rows to aggregate"
msgstr ""


#: R/prcomp.R: 0
#. R/prcomp.R: stop("no scores are available: refit with 'retx=TRUE'")

msgid "no scores are available: refit with 'retx=TRUE'"
msgstr ""


#: R/nlm.R: 0
#. R/nlm.R: gettextf("no sign change found in %d iterations", it - 1)
#. R/nlm.R: gettextf("no sign change found in %d iterations", it - 1)
#. R/nlm.R: gettextf("no sign change found in %d iterations", it - 1)

msgid "no sign change found in %d iterations"
msgstr ""


#: R/bandwidths.R: 0
#. R/bandwidths.R: stop("no solution in the specified range of bandwidths")

msgid "no solution in the specified range of bandwidths"
msgstr ""


#: R/factanal.R: 0
#: R/nls.R: 0
#. R/factanal.R: stop("no starting values specified")
#. R/nls.R: stop("no starting values specified")

msgid "no starting values specified"
msgstr ""


#: R/models.R: 0
#. R/models.R: stop("no terms component nor attribute")

msgid "no terms component nor attribute"
msgstr ""


#: R/add.R: 0
#. R/add.R: stop("no terms in scope")
#. R/add.R: stop("no terms in scope")

msgid "no terms in scope"
msgstr ""


#: R/add.R: 0
#. R/add.R: stop("no terms in scope for adding to object")
#. R/add.R: stop("no terms in scope for adding to object")
#. R/add.R: stop("no terms in scope for adding to object")

msgid "no terms in scope for adding to object"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: stop("no time series supplied")

msgid "no time series supplied"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: stop("no valid set of coefficients has been found: please supply starting values",     call. = FALSE)
#. R/glm.R: stop("no valid set of coefficients has been found: please supply starting values",     call. = FALSE)

msgid "no valid set of coefficients has been found: please supply starting values"
msgstr ""


#: R/lm.influence.R: 0
#. R/lm.influence.R: stop("non-NA residual length does not match cases used in fitting")

msgid "non-NA residual length does not match cases used in fitting"
msgstr ""


#: R/model.tables.R: 0
#. R/model.tables.R: gettextf("non-factors ignored: %s", tmp_n)

msgid "non-factors ignored: %s"
msgstr ""


#: R/density.R: 0
#. R/density.R: gettextf("non-finite '%s' argument", "bw")
#. R/density.R: gettextf("non-finite '%s' argument", "from")
#. R/density.R: gettextf("non-finite '%s' argument", "to")

msgid "non-finite '%s' argument"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: gettextf("non-finite coefficients at iteration %d", iter)

msgid "non-finite coefficients at iteration %d"
msgstr ""


#: R/family.R: 0
#. R/family.R: warning("non-integer counts in a binomial glm!")

msgid "non-integer counts in a binomial glm!"
msgstr ""


#: R/family.R: 0
#. R/family.R: warning("non-integer number of successes in a binomial glm!")

msgid "non-integer number of successes in a binomial glm!"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: warning("non-intersecting series")

msgid "non-intersecting series"
msgstr ""


#: R/dendrogram.R: 0
#. R/dendrogram.R: stop("non-leaf subtree of length 0")

msgid "non-leaf subtree of length 0"
msgstr ""


#: R/density.R: 0
#. R/density.R: warning("non-matched further arguments are disregarded")

msgid "non-matched further arguments are disregarded"
msgstr ""


#: R/family.R: 0
#. R/family.R: stop("non-positive values not allowed for the 'gamma' family")

msgid "non-positive values not allowed for the 'gamma' family"
msgstr ""


#: R/arima.R: 0
#: R/arma0.R: 0
#. R/arima.R: stop("non-stationary AR part")
#. R/arma0.R: stop("non-stationary AR part")

msgid "non-stationary AR part"
msgstr ""


#: R/arima.R: 0
#. R/arima.R: stop("non-stationary AR part from CSS")

msgid "non-stationary AR part from CSS"
msgstr ""


#: R/arima.R: 0
#: R/arma0.R: 0
#. R/arima.R: stop("non-stationary seasonal AR part")
#. R/arma0.R: stop("non-stationary seasonal AR part")

msgid "non-stationary seasonal AR part"
msgstr ""


#: R/arima.R: 0
#. R/arima.R: stop("non-stationary seasonal AR part from CSS")

msgid "non-stationary seasonal AR part from CSS"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: stop("non-time series not of the correct length")

msgid "non-time series not of the correct length"
msgstr ""


#: R/stepfun.R: 0
#. R/stepfun.R: stop("not a valid step function")

msgid "not a valid step function"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: stop("not all series have the same frequency")

msgid "not all series have the same frequency"
msgstr ""


#: R/friedman.test.R: 0
#: R/quade.test.R: 0
#. R/friedman.test.R: stop("not an unreplicated complete block design")
#. R/quade.test.R: stop("not an unreplicated complete block design")

msgid "not an unreplicated complete block design"
msgstr ""


#: R/ansari.test.R: 0
#: R/kruskal.test.R: 0
#: R/poisson.test.R: 0
#: R/t.test.R: 0
#: R/t.test.R: 0
#: R/t.test.R: 0
#: R/var.test.R: 0
#: R/var.test.R: 0
#: R/wilcox.test.R: 0
#: R/wilcox.test.R: 0
#. R/ansari.test.R: gettextf("not enough '%s' observations", "x")
#. R/ansari.test.R: gettextf("not enough '%s' observations", "y")
#. R/kruskal.test.R: gettextf("not enough '%s' observations", "x")
#. R/poisson.test.R: gettextf("not enough '%s' observations", "x")
#. R/t.test.R: gettextf("not enough '%s' observations", "x")
#. R/t.test.R: gettextf("not enough '%s' observations", "x")
#. R/t.test.R: gettextf("not enough '%s' observations", "y")
#. R/var.test.R: gettextf("not enough '%s' observations", "x")
#. R/var.test.R: gettextf("not enough '%s' observations", "y")
#. R/wilcox.test.R: gettextf("not enough '%s' observations", "x")
#. R/wilcox.test.R: gettextf("not enough '%s' observations", "y")

msgid "not enough '%s' observations"
msgstr ""


#: R/ks.test.R: 0
#. R/ks.test.R: stop("not enough 'x' data")

msgid "not enough 'x' data"
msgstr ""


#: R/ks.test.R: 0
#. R/ks.test.R: stop("not enough 'y' data")

msgid "not enough 'y' data"
msgstr ""


#: R/prop.test.R: 0
#. R/prop.test.R: stop("not enough data")

msgid "not enough data"
msgstr ""


#: R/contrast.R: 0
#. R/contrast.R: stop("not enough degrees of freedom to define contrasts")
#. R/contrast.R: stop("not enough degrees of freedom to define contrasts")
#. R/contrast.R: stop("not enough degrees of freedom to define contrasts")

msgid "not enough degrees of freedom to define contrasts"
msgstr ""


#: R/cor.test.R: 0
#. R/cor.test.R: stop("not enough finite observations")
#. R/cor.test.R: stop("not enough finite observations")

msgid "not enough finite observations"
msgstr ""


#: R/oneway.test.R: 0
#. R/oneway.test.R: stop("not enough groups")

msgid "not enough groups"
msgstr ""


#: R/fligner.test.R: 0
#: R/mood.test.R: 0
#: R/oneway.test.R: 0
#: R/t.test.R: 0
#. R/fligner.test.R: stop("not enough observations")
#. R/mood.test.R: stop("not enough observations")
#. R/oneway.test.R: stop("not enough observations")
#. R/t.test.R: stop("not enough observations")

msgid "not enough observations"
msgstr ""


#: R/plot.lm.R: 0
#. R/plot.lm.R: gettextf("not plotting observations with leverage one:\n  %s", paste(which(isInf),     collapse = ", "), domain = "R-stats")

msgid "not plotting observations with leverage one:\n  %s"
msgstr ""


#: R/ftable.R: 0
#. R/ftable.R: stop("nothing to tabulate")

msgid "nothing to tabulate"
msgstr ""


#: R/htest.R: 0
#. R/htest.R: gettext("null values:", domain = "R-stats")

msgid "null values:"
msgstr ""


#: R/var.test.R: 0
#. R/var.test.R: gettext("num df", domain = "R-stats")

msgid "num df"
msgstr ""


#: R/symnum.R: 0
#. R/symnum.R: stop("number of 'cutpoints' must be one less than number of symbols")

msgid "number of 'cutpoints' must be one less than number of symbols"
msgstr ""


#: R/symnum.R: 0
#. R/symnum.R: stop("number of 'cutpoints' must be one more than number of symbols")

msgid "number of 'cutpoints' must be one more than number of symbols"
msgstr ""


#: R/kmeans.R: 0
#. R/kmeans.R: stop("number of cluster centres must lie between 1 and nrow(x)", call. = FALSE)

msgid "number of cluster centres must lie between 1 and nrow(x)"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: stop("number of differences must be a positive integer")

msgid "number of differences must be a positive integer"
msgstr ""


#: R/poisson.test.R: 0
#. R/poisson.test.R: gettext("number of events", domain = "R-stats")

msgid "number of events"
msgstr ""


#: R/power.anova.test.R: 0
#. R/power.anova.test.R: stop("number of groups must be at least 2")

msgid "number of groups must be at least 2"
msgstr ""


#: R/smspline.R: 0
#. R/smspline.R: stop("number of observations in 'x' and 'y' arguments must match")

msgid "number of observations in 'x' and 'y' arguments must match"
msgstr ""


#: R/power.anova.test.R: 0
#. R/power.anova.test.R: stop("number of observations in each group must be at least 2")

msgid "number of observations in each group must be at least 2"
msgstr ""


#: R/glm.R: 0
#: R/lm.R: 0
#. R/glm.R: gettextf("number of offsets (%d) should be equal to number of observations (%d)",     length(offset), NROW(Y))
#. R/lm.R: gettextf("number of offsets (%d) should be equal to number of observations (%d)",     length(offset), NROW(y))

msgid "number of offsets (%d) should be equal to number of observations (%d)"
msgstr ""


#: R/add.R: 0
#. R/add.R: stop("number of rows in use has changed: remove missing values?")
#. R/add.R: stop("number of rows in use has changed: remove missing values?")
#. R/add.R: stop("number of rows in use has changed: remove missing values?")

msgid "number of rows in use has changed: remove missing values?"
msgstr ""


#: R/ar.R: 0
#. R/ar.R: stop("number of series in 'object' and 'newdata' do not match")

msgid "number of series in 'object' and 'newdata' do not match"
msgstr ""


#: R/binom.test.R: 0
#. R/binom.test.R: gettext("number of successes", domain = "R-stats")

msgid "number of successes"
msgstr ""


#: R/binom.test.R: 0
#. R/binom.test.R: gettext("number of trials", domain = "R-stats")

msgid "number of trials"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: stop("number of values supplied is not a sub-multiple of the number of values to be replaced")

msgid "number of values supplied is not a sub-multiple of the number of values to be replaced"
msgstr ""


#: R/lsfit.R: 0
#. R/lsfit.R: gettextf("number of weights = %d should equal %d (number of responses)", nwts, nry)

msgid "number of weights = %d should equal %d (number of responses)"
msgstr ""


#: R/smspline.R: 0
#. R/smspline.R: stop("number of weights must match number of observations")

msgid "number of weights must match number of observations"
msgstr ""


#: R/ksmooth.R: 0
#. R/ksmooth.R: stop("numeric 'y' argument must be supplied.\nFor density estimation use 'density()'")

msgid "numeric 'y' argument must be supplied.\nFor density estimation use 'density()'"
msgstr ""


#: R/contrast.R: 0
#. R/contrast.R: stop("numeric contrasts or contrast name expected")

msgid "numeric contrasts or contrast name expected"
msgstr ""


#: R/biplot.R: 0
#. R/biplot.R: gettextf("object '%s' has no scores", deparse(substitute(x)))
#. R/biplot.R: gettextf("object '%s' has no scores", deparse(substitute(x)))

msgid "object '%s' has no scores"
msgstr ""


#: R/manova.R: 0
#. R/manova.R: gettextf("object must be of class %s or %s", dQuote("manova"), dQuote("maov"))

msgid "object must be of class %s or %s"
msgstr ""


#: R/lsfit.R: 0
#. R/lsfit.R: warning("observations with 0 weight were not used in calculating standard deviation")
#. R/lsfit.R: warning("observations with 0 weight were not used in calculating standard deviation")

msgid "observations with 0 weight were not used in calculating standard deviation"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: warning("observations with zero weight not used for calculating dispersion")

msgid "observations with zero weight not used for calculating dispersion"
msgstr ""


#: R/fisher.test.R: 0
#. R/fisher.test.R: gettext("odds ratio", domain = "R-stats")
#. R/fisher.test.R: gettext("odds ratio")

msgid "odds ratio"
msgstr ""


#: R/selfStart.R: 0
#. R/selfStart.R: stop("old-style self-starting model functions are no longer supported.\n", "New selfStart functions are available.\n",     "Use\n  SSfpl instead of fpl,\n  SSfol instead of first.order.log,\n  SSbiexp instead of biexp,\n  SSlogis instead of logistic.\n",     "If writing your own selfStart model, see \"help(selfStart)\" for the new form of the \"initial\" attribute.",     domain = "R-stats")

msgid "old-style self-starting model functions are no longer supported."
msgstr ""


#: R/optim.R: 0
#. R/optim.R: warning("one-dimensional optimization by Nelder-Mead is unreliable:\nuse \"Brent\" or optimize() directly")

msgid "one-dimensional optimization by Nelder-Mead is unreliable:\nuse \"Brent\" or optimize() directly"
msgstr ""


#: R/cmdscale.R: 0
#. R/cmdscale.R: gettextf("only %d of the first %d eigenvalues are > 0", k1, k)

msgid "only %d of the first %d eigenvalues are > 0"
msgstr ""


#: R/loess.R: 0
#. R/loess.R: stop("only 1-4 predictors are allowed")

msgid "only 1-4 predictors are allowed"
msgstr ""


#: R/StructTS.R: 0
#: R/arma0.R: 0
#. R/StructTS.R: stop("only implemented for univariate time series")
#. R/arma0.R: stop("only implemented for univariate time series")

msgid "only implemented for univariate time series"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: stop("only replacement of elements is allowed")

msgid "only replacement of elements is allowed"
msgstr ""


#: R/stl.R: 0
#. R/stl.R: stop("only univariate series are allowed")

msgid "only univariate series are allowed"
msgstr ""


#: R/HoltWinters.R: 0
#. R/HoltWinters.R: gettextf("optimization difficulties: %s", sol$message)
#. R/HoltWinters.R: gettextf("optimization difficulties: %s", sol$message)
#. R/HoltWinters.R: gettextf("optimization difficulties: %s", sol$message)
#. R/HoltWinters.R: gettextf("optimization difficulties: %s", sol$message)

msgid "optimization difficulties: %s"
msgstr ""


#: R/HoltWinters.R: 0
#. R/HoltWinters.R: stop("optimization failure")
#. R/HoltWinters.R: stop("optimization failure")
#. R/HoltWinters.R: stop("optimization failure")
#. R/HoltWinters.R: stop("optimization failure")

msgid "optimization failure"
msgstr ""


#: R/anova.R: 0
#. R/anova.R: gettextf("option \"%s\" is invalid: assuming TRUE", "show.coef.Pvalues")
#. R/anova.R: gettextf("option \"%s\" is invalid: assuming TRUE", "show.signif.stars")

msgid "option \"%s\" is invalid: assuming TRUE"
msgstr ""


#: R/contr.poly.R: 0
#. R/contr.poly.R: gettextf("orthogonal polynomials cannot be represented accurately enough for %d degrees of freedom",     n - 1)

msgid "orthogonal polynomials cannot be represented accurately enough for %d degrees of freedom"
msgstr ""


#: R/StructTS.R: 0
#: R/htest.R: 0
#. R/StructTS.R: gettext("p-value")
#. R/htest.R: gettext("p-value", domain = "R-stats")

msgid "p-value"
msgstr ""


#: R/ks.test.R: 0
#. R/ks.test.R: warning("p-value will be approximate in the presence of ties")

msgid "p-value will be approximate in the presence of ties"
msgstr ""


#: R/lm.R: 0
#. R/lm.R: gettext("p-value: ", domain = "R-stats")

msgid "p-value:"
msgstr ""


#: R/lsfit.R: 0
#. R/lsfit.R: gettextf("p-value=%s", format(round(pvalue[i], digits)), domain = "R-stats")

msgid "p-value=%s"
msgstr ""


#: R/StructTS.R: 0
#. R/StructTS.R: gettext("p-values for Ljung-Box statistic")

msgid "p-values for Ljung-Box statistic"
msgstr ""


#: R/nls.R: 0
#. R/nls.R: gettextf("parameters without starting value in 'data': %s", tmp_n)

msgid "parameters without starting value in 'data': %s"
msgstr ""


#: R/pairwise.R: 0
#. R/pairwise.R: stop("pooling of SD is incompatible with paired tests")

msgid "pooling of SD is incompatible with paired tests"
msgstr ""


#: R/family.R: 0
#. R/family.R: stop("positive values only are allowed for the 'inverse.gaussian' family")

msgid "positive values only are allowed for the 'inverse.gaussian' family"
msgstr ""


#: R/StructTS.R: 0
#. R/StructTS.R: gettextf("possible convergence problem: 'optim' gave code = %d and message %s", res$convergence,     sQuote(res$message))

msgid "possible convergence problem: 'optim' gave code = %d and message %s"
msgstr ""


#: R/arima.R: 0
#: R/arma0.R: 0
#. R/arima.R: gettextf("possible convergence problem: optim gave code = %d", res$convergence)
#. R/arima.R: gettextf("possible convergence problem: optim gave code = %d", res$convergence)
#. R/arma0.R: gettextf("possible convergence problem: optim gave code = %d", code)

msgid "possible convergence problem: optim gave code = %d"
msgstr ""


#: R/lm.R: 0
#. R/lm.R: warning("prediction from a rank-deficient fit may be misleading")

msgid "prediction from a rank-deficient fit may be misleading"
msgstr ""


#: R/lm.R: 0
#. R/lm.R: warning("predictions on current data refer to _future_ responses")

msgid "predictions on current data refer to _future_ responses"
msgstr ""


#: R/loess.R: 0
#. R/loess.R: stop("predictors must all be numeric")

msgid "predictors must all be numeric"
msgstr ""


#: R/distn.R: 0
#. R/distn.R: stop("probabilities must be finite, non-negative and not all 0")

msgid "probabilities must be finite, non-negative and not all 0"
msgstr ""


#: R/chisq.test.R: 0
#. R/chisq.test.R: stop("probabilities must be non-negative.")

msgid "probabilities must be non-negative."
msgstr ""


#: R/chisq.test.R: 0
#. R/chisq.test.R: stop("probabilities must sum to 1.")

msgid "probabilities must sum to 1."
msgstr ""


#: R/binom.test.R: 0
#. R/binom.test.R: gettext("probability of success", domain = "R-stats")

msgid "probability of success"
msgstr ""


#: R/prop.test.R: 0
#. R/prop.test.R: gettext("proportion", domain = "R-stats")

msgid "proportion"
msgstr ""


#: R/poisson.test.R: 0
#. R/poisson.test.R: gettext("rate ratio", domain = "R-stats")
#. R/poisson.test.R: gettext("rate ratio", domain = "R-stats")

msgid "rate ratio"
msgstr ""


#: R/ansari.test.R: 0
#. R/ansari.test.R: gettext("ratio of scales", domain = "R-stats")

msgid "ratio of scales"
msgstr ""


#: R/var.test.R: 0
#. R/var.test.R: gettext("ratio of variances", domain = "R-stats")
#. R/var.test.R: gettext("ratio of variances", domain = "R-stats")

msgid "ratio of variances"
msgstr ""


#: R/optim.R: 0
#. R/optim.R: warning("read the documentation for 'trace' more carefully")

msgid "read the documentation for 'trace' more carefully"
msgstr ""


#: R/relevel.R: 0
#. R/relevel.R: gettextf("ref = %d must be in 1L:%d", ref, nlev)

msgid "ref = %d must be in 1L:%d"
msgstr ""


#: R/nlminb.R: 0
#. R/nlminb.R: gettext("relative convergence (4)")

msgid "relative convergence (4)"
msgstr ""


#: R/wilcox.test.R: 0
#. R/wilcox.test.R: warning("requested 'conf.level' value is not achievable")
#. R/wilcox.test.R: warning("requested 'conf.level' value is not achievable")
#. R/wilcox.test.R: warning("requested 'conf.level' value is not achievable")
#. R/wilcox.test.R: warning("requested 'conf.level' value is not achievable")

msgid "requested 'conf.level' value is not achievable"
msgstr ""


#: R/wilcox.test.R: 0
#. R/wilcox.test.R: warning("requested conf.level not achievable")

msgid "requested conf.level not achievable"
msgstr ""


#: R/factanal.R: 0
#. R/factanal.R: stop("requested scores without an 'x' matrix")

msgid "requested scores without an 'x' matrix"
msgstr ""


#: R/lm.R: 0
#. R/lm.R: warning("residual degrees of freedom in object suggest this is not an \"lm\" fit")

msgid "residual degrees of freedom in object suggest this is not an \"lm\" fit"
msgstr ""


#: R/manova.R: 0
#. R/manova.R: gettextf("residuals have rank %d < %d", rss.qr$rank, ncol(resid))

msgid "residuals have rank %d < %d"
msgstr ""


#: R/mlm.R: 0
#. R/mlm.R: gettextf("residuals have rank %s < %s", rss.qr$rank, pp)
#. R/mlm.R: gettextf("residuals have rank %s < %s", rss.qr$rank, pp)

msgid "residuals have rank %s < %s"
msgstr ""


#: R/factanal.R: 0
#: R/prcomp.R: 0
#: R/princomp.R: 0
#. R/factanal.R: stop("response not allowed in formula")
#. R/prcomp.R: stop("response not allowed in formula")
#. R/princomp.R: stop("response not allowed in formula")

msgid "response not allowed in formula"
msgstr ""


#: R/integrate.R: 0
#. R/integrate.R: gettext("roundoff error is detected in the extrapolation table")

msgid "roundoff error is detected in the extrapolation table"
msgstr ""


#: R/integrate.R: 0
#. R/integrate.R: gettext("roundoff error was detected")

msgid "roundoff error was detected"
msgstr ""


#: R/dendrogram.R: 0
#. R/dendrogram.R: stop("row dendrogram ordering gave index of wrong length")

msgid "row dendrogram ordering gave index of wrong length"
msgstr ""


#: R/htest.R: 0
#. R/htest.R: gettext("sample estimates:", domain = "R-stats")

msgid "sample estimates:"
msgstr ""


#: R/bandwidths.R: 0
#. R/bandwidths.R: stop("sample is too sparse to find TD", domain = "R-stats")

msgid "sample is too sparse to find TD"
msgstr ""


#: R/mantelhaen.test.R: 0
#. R/mantelhaen.test.R: stop("sample size in each stratum must be > 1")

msgid "sample size in each stratum must be > 1"
msgstr ""


#: R/ansari.test.R: 0
#. R/ansari.test.R: warning("samples differ in location: cannot compute confidence set, returning NA")
#. R/ansari.test.R: warning("samples differ in location: cannot compute confidence set, returning NA")

msgid "samples differ in location: cannot compute confidence set, returning NA"
msgstr ""


#: R/add.R: 0
#. R/add.R: gettext("scale: ", domain = "R-stats")
#. R/add.R: gettext("scale: ", domain = "R-stats")
#. R/add.R: gettext("scale: ", domain = "R-stats")
#. R/add.R: gettext("scale: ", domain = "R-stats")
#. R/add.R: gettext("scale: ", domain = "R-stats")
#. R/add.R: gettext("scale: ", domain = "R-stats")

msgid "scale:"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: stop("scatter plots only for univariate time series")

msgid "scatter plots only for univariate time series"
msgstr ""


#: R/add.R: 0
#. R/add.R: stop("scope is not a subset of term labels")
#. R/add.R: stop("scope is not a subset of term labels")
#. R/add.R: stop("scope is not a subset of term labels")

msgid "scope is not a subset of term labels"
msgstr ""


#: R/nlm.R: 0
#. R/nlm.R: gettextf("search in [%g,%g]\n", lower, upper, domain = "R-stats")

msgid "search in [%g,%g]"
msgstr ""


#: R/nlm.R: 0
#. R/nlm.R: gettextf("search in [%g,%g] ... ", lower, upper, domain = "R-stats")

msgid "search in [%g,%g] ..."
msgstr ""


#: R/arima.R: 0
#: R/arma0.R: 0
#. R/arima.R: warning("seasonal MA part of model is not invertible")
#. R/arma0.R: warning("seasonal MA part of model is not invertible")

msgid "seasonal MA part of model is not invertible"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: warning("series is corrupt, with no 'tsp' attribute")
#. R/ts.R: stop("series is corrupt, with no 'tsp' attribute")

msgid "series is corrupt, with no 'tsp' attribute"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: gettextf("series is corrupt: length %d with 'tsp' implying %d", NROW(x), nn)
#. R/ts.R: gettextf("series is corrupt: length %d with 'tsp' implying %d", NROW(x), nn)

msgid "series is corrupt: length %d with 'tsp' implying %d"
msgstr ""


#: R/stl.R: 0
#. R/stl.R: stop("series is not periodic or has less than two periods")

msgid "series is not periodic or has less than two periods"
msgstr ""


#: R/nls.R: 0
#. R/nls.R: stop("setVarying : 'vary' length must match length of parameters")
#. R/nls.R: stop("setVarying : 'vary' length must match length of parameters")

msgid "setVarying : 'vary' length must match length of parameters"
msgstr ""


#: R/smspline.R: 0
#. R/smspline.R: warning(wtxt, "\n", "setting df = 1  __use with care!__", sep = "")

msgid "setting df = 1  __use with care!__"
msgstr ""


#: R/arima.R: 0
#: R/arma0.R: 0
#. R/arima.R: gettextf("sigma^2 estimated as %s:  log likelihood = %s,  aic = %s", format(x$sigma2,     digits = digits), format(round(x$loglik, 2L)), format(round(x$aic, 2L)), domain = "R-stats")
#. R/arma0.R: gettextf("sigma^2 estimated as %s:  log likelihood = %s,  aic = %s", format(x$sigma2,     digits = digits), format(round(x$loglik, 2)), format(round(x$aic, 2)), domain = "R-stats")

msgid "sigma^2 estimated as %s:  log likelihood = %s,  aic = %s"
msgstr ""


#: R/arima.R: 0
#: R/arma0.R: 0
#. R/arima.R: gettextf("sigma^2 estimated as %s:  part log likelihood = %s", format(x$sigma2, digits = digits),     format(round(x$loglik, 2)), domain = "R-stats")
#. R/arma0.R: gettextf("sigma^2 estimated as %s:  part log likelihood = %s", format(x$sigma2, digits = digits),     format(round(x$loglik, 2)), domain = "R-stats")

msgid "sigma^2 estimated as %s:  part log likelihood = %s"
msgstr ""


#: R/contrast.R: 0
#. R/contrast.R: stop("singular contrast matrix")

msgid "singular contrast matrix"
msgstr ""


#: R/nlminb.R: 0
#. R/nlminb.R: gettext("singular convergence (7)")

msgid "singular convergence (7)"
msgstr ""


#: R/lm.R: 0
#. R/lm.R: stop("singular fit encountered")
#. R/lm.R: stop("singular fit encountered")

msgid "singular fit encountered"
msgstr ""


#: R/nls.R: 0
#. R/nls.R: stop("singular gradient matrix at initial parameter estimates")

msgid "singular gradient matrix at initial parameter estimates"
msgstr ""


#: R/ts-tests.R: 0
#. R/ts-tests.R: stop("singularities in regression")

msgid "singularities in regression"
msgstr ""


#: R/distn.R: 0
#. R/distn.R: stop("size != sum(x), i.e. one is wrong")

msgid "size != sum(x), i.e. one is wrong"
msgstr ""


#: R/hclust.R: 0
#. R/hclust.R: stop("size cannot be NA nor exceed 65536")

msgid "size cannot be NA nor exceed 65536"
msgstr ""


#: R/smspline.R: 0
#. R/smspline.R: gettext("smoothing parameter value is too large")

msgid "smoothing parameter value is too large"
msgstr ""


#: R/smspline.R: 0
#. R/smspline.R: gettext("smoothing parameter value is too small")

msgid "smoothing parameter value is too small"
msgstr ""


#: R/arima.R: 0
#. R/arima.R: warning("some AR parameters were fixed: setting 'transform.pars = FALSE'")

msgid "some AR parameters were fixed: setting 'transform.pars = FALSE'"
msgstr ""


#: R/arma0.R: 0
#. R/arma0.R: warning("some ARMA parameters were fixed: setting transform.pars = FALSE")

msgid "some ARMA parameters were fixed: setting transform.pars = FALSE"
msgstr ""


#: R/reshape.R: 0
#. R/reshape.R: gettextf("some constant variables (%s) are really varying", tmp_N)

msgid "some constant variables (%s) are really varying"
msgstr ""


#: R/kruskal.test.R: 0
#. R/kruskal.test.R: warning("some elements of 'x' argument are not numeric and will be coerced to numeric")

msgid "some elements of 'x' argument are not numeric and will be coerced to numeric"
msgstr ""


#: R/dummy.coef.R: 0
#. R/dummy.coef.R: warning("some terms will have NAs due to the limits of the method")

msgid "some terms will have NAs due to the limits of the method"
msgstr ""


#: R/smspline.R: 0
#. R/smspline.R: stop("some weights should be positive")

msgid "some weights should be positive"
msgstr ""


#: R/smspline.R: 0
#. R/smspline.R: warning("specified both 'df' and 'cv'; will disregard the latter")

msgid "specified both 'df' and 'cv'; will disregard the latter"
msgstr ""


#: R/loess.R: 0
#. R/loess.R: stop("specified parametric for all predictors")

msgid "specified parametric for all predictors"
msgstr ""


#: R/loess.R: 0
#. R/loess.R: stop("specified the square of a factor predictor to be dropped when degree = 1")

msgid "specified the square of a factor predictor to be dropped when degree = 1"
msgstr ""


#: R/loess.R: 0
#. R/loess.R: stop("specified the square of a predictor to be dropped with only one numeric predictor")

msgid "specified the square of a predictor to be dropped with only one numeric predictor"
msgstr ""


#: R/distn.R: 0
#. R/distn.R: warning("specify 'rate' or 'scale' but not both")
#. R/distn.R: stop("specify 'rate' or 'scale' but not both")
#. R/distn.R: warning("specify 'rate' or 'scale' but not both")
#. R/distn.R: stop("specify 'rate' or 'scale' but not both")
#. R/distn.R: warning("specify 'rate' or 'scale' but not both")
#. R/distn.R: stop("specify 'rate' or 'scale' but not both")
#. R/distn.R: warning("specify 'rate' or 'scale' but not both")
#. R/distn.R: stop("specify 'rate' or 'scale' but not both")

msgid "specify 'rate' or 'scale' but not both"
msgstr ""


#: R/identify.hclust.R: 0
#. R/identify.hclust.R: stop("specify exactly one of 'k' and 'h'")
#. R/identify.hclust.R: stop("specify exactly one of 'k' and 'h'")

msgid "specify exactly one of 'k' and 'h'"
msgstr ""


#: R/identify.hclust.R: 0
#. R/identify.hclust.R: stop("specify exactly one of 'which' and 'x'")

msgid "specify exactly one of 'which' and 'x'"
msgstr ""


#: R/spectrum.R: 0
#. R/spectrum.R: gettext("spectrum")

msgid "spectrum"
msgstr ""


#: R/spectrum.R: 0
#. R/spectrum.R: gettext("spectrum (dB)")

msgid "spectrum (dB)"
msgstr ""


#: R/splinefun.R: 0
#. R/splinefun.R: warning("spline: first and last y values differ - using y[1L] for both")

msgid "spline: first and last y values differ - using y[1L] for both"
msgstr ""


#: R/spline.R: 0
#. R/spline.R: warning("spline: first and last y values differ - using y[1] for both")

msgid "spline: first and last y values differ - using y[1] for both"
msgstr ""


#: R/factanal.R: 0
#. R/factanal.R: gettextf("start %d value: %s uniqs: %s", i, format(nfit$criteria[1L]), format(as.vector(round(nfit$uniquenesses,     4))), domain = "R-stats")

msgid "start %d value: %s uniqs: %s"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: warning("step size truncated due to divergence", call. = FALSE)

msgid "step size truncated due to divergence"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: warning("step size truncated: out of bounds", call. = FALSE)

msgid "step size truncated: out of bounds"
msgstr ""


#: R/stepfun.R: 0
#. R/stepfun.R: stop("stepfun: 'x' must be ordered increasingly")

msgid "stepfun: 'x' must be ordered increasingly"
msgstr ""


#: R/nlminb.R: 0
#. R/nlminb.R: gettext("storage only has been allocated (14)")

msgid "storage only has been allocated (14)"
msgstr ""


#: R/cor.R: 0
#. R/cor.R: stop("supply both 'x' and 'y' or a matrix-like 'x'")
#. R/cor.R: stop("supply both 'x' and 'y' or a matrix-like 'x'")

msgid "supply both 'x' and 'y' or a matrix-like 'x'"
msgstr ""


#: R/pairwise.R: 0
#. R/pairwise.R: gettext("t tests with non-pooled SD", domain = "R-stats")

msgid "t tests with non-pooled SD"
msgstr ""


#: R/pairwise.R: 0
#. R/pairwise.R: gettext("t tests with pooled SD", domain = "R-stats")

msgid "t tests with pooled SD"
msgstr ""


#: R/prop.test.R: 0
#. R/prop.test.R: stop("table 'x' should have 2 entries")

msgid "table 'x' should have 2 entries"
msgstr ""


#: R/cutree.R: 0
#. R/cutree.R: stop("the 'height' component of 'tree' is not sorted (increasingly)")

msgid "the 'height' component of 'tree' is not sorted (increasingly)"
msgstr ""


#: R/lm.R: 0
#. R/lm.R: stop("the 'se.fit' argument is not yet implemented for \"mlm\" objects")

msgid "the 'se.fit' argument is not yet implemented for \"mlm\" objects"
msgstr ""


#: R/ks.test.R: 0
#. R/ks.test.R: gettext("the CDF of x lies above that of y", domain = "R-stats")

msgid "the CDF of x lies above that of y"
msgstr ""


#: R/ks.test.R: 0
#. R/ks.test.R: gettext("the CDF of x lies above the null hypothesis", domain = "R-stats")

msgid "the CDF of x lies above the null hypothesis"
msgstr ""


#: R/ks.test.R: 0
#. R/ks.test.R: gettext("the CDF of x lies below that of y", domain = "R-stats")

msgid "the CDF of x lies below that of y"
msgstr ""


#: R/ks.test.R: 0
#. R/ks.test.R: gettext("the CDF of x lies below the null hypothesis", domain = "R-stats")

msgid "the CDF of x lies below the null hypothesis"
msgstr ""


#: R/poisson.test.R: 0
#. R/poisson.test.R: stop("the case k > 2 is unimplemented")

msgid "the case k > 2 is unimplemented"
msgstr ""


#: R/aov.R: 0
#. R/aov.R: stop("the contrast defined is empty (has no TRUE elements)")
#. R/aov.R: stop("the contrast defined is empty (has no TRUE elements)")

msgid "the contrast defined is empty (has no TRUE elements)"
msgstr ""


#: R/StructTS.R: 0
#. R/StructTS.R: stop("the first value of the time series must not be missing")

msgid "the first value of the time series must not be missing"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: warning("the following arguments to 'anova.glm' are invalid and dropped: ", tmp_N)

msgid "the following arguments to 'anova.glm' are invalid and dropped:"
msgstr ""


#: R/integrate.R: 0
#. R/integrate.R: gettext("the input is invalid")

msgid "the input is invalid"
msgstr ""


#: R/integrate.R: 0
#. R/integrate.R: gettext("the integral is probably divergent")

msgid "the integral is probably divergent"
msgstr ""


#: R/StructTS.R: 0
#. R/StructTS.R: stop("the series is entirely NA")
#. R/StructTS.R: stop("the series is entirely NA")
#. R/StructTS.R: stop("the series is entirely NA")

msgid "the series is entirely NA"
msgstr ""


#: R/reshape.R: 0
#. R/reshape.R: warning("there are records with missing times, which will be dropped.")

msgid "there are records with missing times, which will be dropped."
msgstr ""


#: R/bartlett.test.R: 0
#. R/bartlett.test.R: stop("there must be at least 2 observations in each group")

msgid "there must be at least 2 observations in each group"
msgstr ""


#: R/model.tables.R: 0
#. R/model.tables.R: stop("this fit does not inherit from \"lm\"")

msgid "this fit does not inherit from \"lm\""
msgstr ""


#: R/ks.test.R: 0
#. R/ks.test.R: warning("ties should not be present for the Kolmogorov-Smirnov test")

msgid "ties should not be present for the Kolmogorov-Smirnov test"
msgstr ""


#: R/poisson.test.R: 0
#. R/poisson.test.R: gettext("time base", domain = "R-stats")

msgid "time base"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: stop("time series contains internal NA values")

msgid "time series contains internal NA values"
msgstr ""


#: R/HoltWinters.R: 0
#. R/HoltWinters.R: stop("time series has no or less than 2 periods")

msgid "time series has no or less than 2 periods"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: stop("times to be replaced do not match")

msgid "times to be replaced do not match"
msgstr ""


#: R/lm.influence.R: 0
#. R/lm.influence.R: stop("too few cases, n < k")

msgid "too few cases, n < k"
msgstr ""


#: R/zzModels.R: 0
#. R/zzModels.R: stop("too few distinct input values to fit a Michaelis-Menten model")

msgid "too few distinct input values to fit a Michaelis-Menten model"
msgstr ""


#: R/zzModels.R: 0
#. R/zzModels.R: stop("too few distinct input values to fit a biexponential")

msgid "too few distinct input values to fit a biexponential"
msgstr ""


#: R/zzModels.R: 0
#. R/zzModels.R: stop("too few distinct input values to fit a four-parameter logistic")

msgid "too few distinct input values to fit a four-parameter logistic"
msgstr ""


#: R/zzModels.R: 0
#. R/zzModels.R: stop("too few distinct input values to fit a logistic model")

msgid "too few distinct input values to fit a logistic model"
msgstr ""


#: R/zzModels.R: 0
#. R/zzModels.R: stop("too few distinct input values to fit an asymptotic regression model")

msgid "too few distinct input values to fit an asymptotic regression model"
msgstr ""


#: R/zzModels.R: 0
#. R/zzModels.R: stop("too few distinct input values to fit the 'asympOff' model")

msgid "too few distinct input values to fit the 'asympOff' model"
msgstr ""


#: R/zzModels.R: 0
#. R/zzModels.R: stop("too few distinct input values to fit the 'asympOrig' model")

msgid "too few distinct input values to fit the 'asympOrig' model"
msgstr ""


#: R/zzModels.R: 0
#. R/zzModels.R: stop("too few distinct input values to fit the Gompertz model")

msgid "too few distinct input values to fit the Gompertz model"
msgstr ""


#: R/zzModels.R: 0
#. R/zzModels.R: stop("too few distinct input values to fit the Weibull growth model")

msgid "too few distinct input values to fit the Weibull growth model"
msgstr ""


#: R/pairwise.R: 0
#. R/pairwise.R: stop("too few groups")

msgid "too few groups"
msgstr ""


#: R/arima.R: 0
#. R/arima.R: stop("too few non-missing observations")

msgid "too few non-missing observations"
msgstr ""


#: R/zzModels.R: 0
#. R/zzModels.R: stop("too few observations to fit an asymptotic regression model")

msgid "too few observations to fit an asymptotic regression model"
msgstr ""


#: R/ts.R: 0
#. R/ts.R: stop("too many replacement values supplied")

msgid "too many replacement values supplied"
msgstr ""


#: R/arma0.R: 0
#. R/arma0.R: warning("transformed ARMA parameters were fixed")

msgid "transformed ARMA parameters were fixed"
msgstr ""


#: R/mantelhaen.test.R: 0
#. R/mantelhaen.test.R: gettextf("true common odds ratio is greater than %s", NVAL, domain = "R-stats")

msgid "true common odds ratio is greater than %s"
msgstr ""


#: R/mantelhaen.test.R: 0
#. R/mantelhaen.test.R: gettextf("true common odds ratio is less than %s", NVAL, domain = "R-stats")

msgid "true common odds ratio is less than %s"
msgstr ""


#: R/mantelhaen.test.R: 0
#. R/mantelhaen.test.R: gettextf("true common odds ratio is not equal to %s", NVAL, domain = "R-stats")

msgid "true common odds ratio is not equal to %s"
msgstr ""


#: R/cor.test.R: 0
#. R/cor.test.R: gettextf("true correlation is greater than %s", NVAL, domain = "R-stats")

msgid "true correlation is greater than %s"
msgstr ""


#: R/cor.test.R: 0
#. R/cor.test.R: gettextf("true correlation is less than %s", NVAL, domain = "R-stats")

msgid "true correlation is less than %s"
msgstr ""


#: R/cor.test.R: 0
#. R/cor.test.R: gettextf("true correlation is not equal to %s", NVAL, domain = "R-stats")

msgid "true correlation is not equal to %s"
msgstr ""


#: R/t.test.R: 0
#. R/t.test.R: gettextf("true difference in means is greater than %s", mu, domain = "R-stats")

msgid "true difference in means is greater than %s"
msgstr ""


#: R/t.test.R: 0
#. R/t.test.R: gettextf("true difference in means is less than %s", mu, domain = "R-stats")

msgid "true difference in means is less than %s"
msgstr ""


#: R/t.test.R: 0
#. R/t.test.R: gettextf("true difference in means is not equal to %s", mu, domain = "R-stats")

msgid "true difference in means is not equal to %s"
msgstr ""


#: R/poisson.test.R: 0
#. R/poisson.test.R: gettextf("true event rate is greater than %s", r, domain = "R-stats")

msgid "true event rate is greater than %s"
msgstr ""


#: R/poisson.test.R: 0
#. R/poisson.test.R: gettextf("true event rate is less than %s", r, domain = "R-stats")

msgid "true event rate is less than %s"
msgstr ""


#: R/poisson.test.R: 0
#. R/poisson.test.R: gettextf("true event rate is not equal to %s", r, domain = "R-stats")

msgid "true event rate is not equal to %s"
msgstr ""


#: R/wilcox.test.R: 0
#. R/wilcox.test.R: gettextf("true location is greater than %s", mu, domain = "R-stats")

msgid "true location is greater than %s"
msgstr ""


#: R/wilcox.test.R: 0
#. R/wilcox.test.R: gettextf("true location is less than %s", mu, domain = "R-stats")

msgid "true location is less than %s"
msgstr ""


#: R/wilcox.test.R: 0
#. R/wilcox.test.R: gettextf("true location is not equal to %s", mu, domain = "R-stats")

msgid "true location is not equal to %s"
msgstr ""


#: R/wilcox.test.R: 0
#. R/wilcox.test.R: gettextf("true location shift is greater than %s", mu, domain = "R-stats")

msgid "true location shift is greater than %s"
msgstr ""


#: R/wilcox.test.R: 0
#. R/wilcox.test.R: gettextf("true location shift is less than %s", mu, domain = "R-stats")

msgid "true location shift is less than %s"
msgstr ""


#: R/wilcox.test.R: 0
#. R/wilcox.test.R: gettextf("true location shift is not equal to %s", mu, domain = "R-stats")

msgid "true location shift is not equal to %s"
msgstr ""


#: R/t.test.R: 0
#. R/t.test.R: gettextf("true mean is greater than %s", mu, domain = "R-stats")

msgid "true mean is greater than %s"
msgstr ""


#: R/t.test.R: 0
#. R/t.test.R: gettextf("true mean is less than %s", mu, domain = "R-stats")

msgid "true mean is less than %s"
msgstr ""


#: R/t.test.R: 0
#. R/t.test.R: gettextf("true mean is not equal to %s", mu, domain = "R-stats")

msgid "true mean is not equal to %s"
msgstr ""


#: R/fisher.test.R: 0
#. R/fisher.test.R: gettextf("true odds ratio is greater than %s", NVAL, domain = "R-stats")

msgid "true odds ratio is greater than %s"
msgstr ""


#: R/fisher.test.R: 0
#. R/fisher.test.R: gettextf("true odds ratio is less than %s", NVAL, domain = "R-stats")

msgid "true odds ratio is less than %s"
msgstr ""


#: R/fisher.test.R: 0
#. R/fisher.test.R: gettextf("true odds ratio is not equal to %s", NVAL, domain = "R-stats")

msgid "true odds ratio is not equal to %s"
msgstr ""


#: R/binom.test.R: 0
#. R/binom.test.R: gettextf("true probability of success is greater than %s", p, domain = "R-stats")

msgid "true probability of success is greater than %s"
msgstr ""


#: R/binom.test.R: 0
#. R/binom.test.R: gettextf("true probability of success is less than %s", p, domain = "R-stats")

msgid "true probability of success is less than %s"
msgstr ""


#: R/binom.test.R: 0
#. R/binom.test.R: gettextf("true probability of success is not equal to %s", p, domain = "R-stats")

msgid "true probability of success is not equal to %s"
msgstr ""


#: R/prop.test.R: 0
#. R/prop.test.R: gettextf("true proportion (%s) is greater than %s", paste((1:l)[OK], collapse = ", "),     NVAL, domain = "R-stats")

msgid "true proportion (%s) is greater than %s"
msgstr ""


#: R/prop.test.R: 0
#. R/prop.test.R: gettextf("true proportion (%s) is less than %s", paste((1:l)[OK], collapse = ", "),     NVAL, domain = "R-stats")

msgid "true proportion (%s) is less than %s"
msgstr ""


#: R/prop.test.R: 0
#. R/prop.test.R: gettextf("true proportion (%s) is not equal to %s", paste((1:l)[OK], collapse = ", "),     NVAL, domain = "R-stats")

msgid "true proportion (%s) is not equal to %s"
msgstr ""


#: R/prop.test.R: 0
#. R/prop.test.R: gettextf("true proportion is greater than %s", NVAL, domain = "R-stats")

msgid "true proportion is greater than %s"
msgstr ""


#: R/prop.test.R: 0
#. R/prop.test.R: gettextf("true proportion is less than %s", NVAL, domain = "R-stats")

msgid "true proportion is less than %s"
msgstr ""


#: R/prop.test.R: 0
#. R/prop.test.R: gettextf("true proportion is not equal to %s", NVAL, domain = "R-stats")

msgid "true proportion is not equal to %s"
msgstr ""


#: R/poisson.test.R: 0
#. R/poisson.test.R: gettextf("true rate ratio is greater than %s", r, domain = "R-stats")

msgid "true rate ratio is greater than %s"
msgstr ""


#: R/poisson.test.R: 0
#. R/poisson.test.R: gettextf("true rate ratio is less than %s", r, domain = "R-stats")

msgid "true rate ratio is less than %s"
msgstr ""


#: R/poisson.test.R: 0
#. R/poisson.test.R: gettextf("true rate ratio is not equal to %s", r, domain = "R-stats")

msgid "true rate ratio is not equal to %s"
msgstr ""


#: R/ansari.test.R: 0
#. R/ansari.test.R: gettextf("true ratio of scales is greater than %s", NVAL, domain = "R-stats")

msgid "true ratio of scales is greater than %s"
msgstr ""


#: R/ansari.test.R: 0
#. R/ansari.test.R: gettextf("true ratio of scales is less than %s", NVAL, domain = "R-stats")

msgid "true ratio of scales is less than %s"
msgstr ""


#: R/ansari.test.R: 0
#. R/ansari.test.R: gettextf("true ratio of scales is not equal to %s", NVAL, domain = "R-stats")

msgid "true ratio of scales is not equal to %s"
msgstr ""


#: R/var.test.R: 0
#. R/var.test.R: gettextf("true ratio of variances is greater than %s", ratio, domain = "R-stats")

msgid "true ratio of variances is greater than %s"
msgstr ""


#: R/var.test.R: 0
#. R/var.test.R: gettextf("true ratio of variances is less than %s", ratio, domain = "R-stats")

msgid "true ratio of variances is less than %s"
msgstr ""


#: R/var.test.R: 0
#. R/var.test.R: gettextf("true ratio of variances is not equal to %s", ratio, domain = "R-stats")

msgid "true ratio of variances is not equal to %s"
msgstr ""


#: R/cor.test.R: 0
#. R/cor.test.R: gettextf("true rho is greater than %s", NVAL, domain = "R-stats")

msgid "true rho is greater than %s"
msgstr ""


#: R/cor.test.R: 0
#. R/cor.test.R: gettextf("true rho is less than %s", NVAL, domain = "R-stats")

msgid "true rho is less than %s"
msgstr ""


#: R/cor.test.R: 0
#. R/cor.test.R: gettextf("true rho is not equal to %s", NVAL, domain = "R-stats")

msgid "true rho is not equal to %s"
msgstr ""


#: R/cor.test.R: 0
#. R/cor.test.R: gettextf("true tau is greater than %s", NVAL, domain = "R-stats")

msgid "true tau is greater than %s"
msgstr ""


#: R/cor.test.R: 0
#. R/cor.test.R: gettextf("true tau is less than %s", NVAL, domain = "R-stats")

msgid "true tau is less than %s"
msgstr ""


#: R/cor.test.R: 0
#. R/cor.test.R: gettextf("true tau is not equal to %s", NVAL, domain = "R-stats")

msgid "true tau is not equal to %s"
msgstr ""


#: R/add.R: 0
#. R/add.R: gettextf("trying +%s", tt, domain = "R-stats")

msgid "trying +%s"
msgstr ""


#: R/add.R: 0
#. R/add.R: gettextf("trying - %s", tt, domain = "R-stats")

msgid "trying - %s"
msgstr ""


#: R/ks.test.R: 0
#. R/ks.test.R: gettext("two-sided", domain = "R-stats")
#. R/ks.test.R: gettext("two-sided", domain = "R-stats")

msgid "two-sided"
msgstr ""


#: R/model.tables.R: 0
#. R/model.tables.R: gettextf("type '%s' is not implemented yet", type)
#. R/model.tables.R: gettextf("type '%s' is not implemented yet", type)

msgid "type '%s' is not implemented yet"
msgstr ""


#: R/cancor.R: 0
#. R/cancor.R: stop("unequal number of rows in 'cancor()'")

msgid "unequal number of rows in 'cancor()'"
msgstr ""


#: R/acf.R: 0
#. R/acf.R: stop("univariate time series only")

msgid "univariate time series only"
msgstr ""


#: R/density.R: 0
#. R/density.R: stop("unknown bandwidth rule")

msgid "unknown bandwidth rule"
msgstr ""


#: R/kernel.R: 0
#. R/kernel.R: stop("unknown named kernel")

msgid "unknown named kernel"
msgstr ""


#: R/optim.R: 0
#. R/optim.R: gettextf("unknown names in control: %s")

msgid "unknown names in control: %s"
msgstr ""


#: R/stl.R: 0
#. R/stl.R: stop("unknown string value for 's.window' argument")

msgid "unknown string value for 's.window' argument"
msgstr ""


#: R/nls.R: 0
#. R/nls.R: warning("upper and lower bounds ignored unless 'algorithm = \"port\"'")

msgid "upper and lower bounds ignored unless 'algorithm = \"port\"'"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: gettextf("using F test with a '%s' family is inappropriate", fam)
#. R/glm.R: gettextf("using F test with a '%s' family is inappropriate", fam)

msgid "using F test with a '%s' family is inappropriate"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: warning("using F test with a fixed dispersion is inappropriate")
#. R/glm.R: warning("using F test with a fixed dispersion is inappropriate")

msgid "using F test with a fixed dispersion is inappropriate"
msgstr ""


#: R/models.R: 0
#. R/models.R: warning("using type = \"numeric\" with a factor response will be ignored")

msgid "using type = \"numeric\" with a factor response will be ignored"
msgstr ""


#: R/family.R: 0
#. R/family.R: message("using weights as inverse variances")

msgid "using weights as inverse variances"
msgstr ""


#: R/family.R: 0
#. R/family.R: message("using weights as shape parameters")

msgid "using weights as shape parameters"
msgstr ""


#: R/glm.R: 0
#. R/glm.R: stop("value of 'epsilon' must be > 0")

msgid "value of 'epsilon' must be > 0"
msgstr ""


#: R/models.R: 0
#. R/models.R: gettextf("variable '%s' is absent, its contrast will be ignored", nn)

msgid "variable '%s' is absent, its contrast will be ignored"
msgstr ""


#: R/models.R: 0
#. R/models.R: gettextf("variable '%s' is not a factor", nm)

msgid "variable '%s' is not a factor"
msgstr ""


#: R/models.R: 0
#. R/models.R: gettextf("variable '%s' was fitted with type \"%s\" but type \"%s\" was supplied",     names(old)[wrong], old[wrong], new[wrong])

msgid "variable '%s' was fitted with type \"%s\" but type \"%s\" was supplied"
msgstr ""


#: R/models.R: 0
#. R/models.R: gettextf("variables %s were specified with different types from the fit", tmp_N)

msgid "variables %s were specified with different types from the fit"
msgstr ""


#: R/aov.R: 0
#. R/aov.R: stop("weights are not supported in a multistratum aov() fit")

msgid "weights are not supported in a multistratum aov() fit"
msgstr ""


#: R/cov.wt.R: 0
#. R/cov.wt.R: stop("weights must be non-negative and not all zero")

msgid "weights must be non-negative and not all zero"
msgstr ""


#: R/dendrogram.R: 0
#. R/dendrogram.R: gettext(" with node pars", domain = "R-stats")

msgid "with node pars"
msgstr ""


#: R/anova.R: 0
#. R/anova.R: stop("wrong 'cs.ind' argument")

msgid "wrong 'cs.ind' argument"
msgstr ""


#: R/embed.R: 0
#. R/embed.R: stop("wrong embedding dimension")
#. R/embed.R: stop("wrong embedding dimension")

msgid "wrong embedding dimension"
msgstr ""


#: R/ftable.R: 0
#. R/ftable.R: stop("wrong method")

msgid "wrong method"
msgstr ""


#: R/ppr.R: 0
#. R/ppr.R: stop("wrong number of columns in 'x'")

msgid "wrong number of columns in 'x'"
msgstr ""


#: R/contrast.R: 0
#. R/contrast.R: stop("wrong number of contrast matrix rows")

msgid "wrong number of contrast matrix rows"
msgstr ""


#: R/ts-tests.R: 0
#. R/ts-tests.R: stop("x is not a vector or univariate time series")
#. R/ts-tests.R: stop("x is not a vector or univariate time series")

msgid "x is not a vector or univariate time series"
msgstr ""


#: R/family.R: 0
#. R/family.R: stop("y values must be 0 <= y <= 1")
#. R/family.R: stop("y values must be 0 <= y <= 1")

msgid "y values must be 0 <= y <= 1"
msgstr ""


#: R/smspline.R: 0
#. R/smspline.R: gettextf("you must supply 1 < df <= n,  n = #{unique x} = %d", nx)

msgid "you must supply 1 < df <= n,  n = #{unique x} = %d"
msgstr ""


#: R/approx.R: 0
#: R/spline.R: 0
#: R/splinefun.R: 0
#. R/approx.R: stop("zero non-NA points")
#. R/approx.R: stop("zero non-NA points")
#. R/spline.R: stop("zero non-NA points")
#. R/splinefun.R: stop("zero non-NA points")

msgid "zero non-NA points"
msgstr ""


#: R/ar.R: 0
#. R/ar.R: stop("zero-variance series")
#. R/ar.R: stop("zero-variance series")

msgid "zero-variance series"
msgstr ""


#: R/smooth.R: 0
#. R/smooth.R: ngettext(it, " used %d iteration", " used %d iterations", domain = "R-stats")
#. R/smooth.R: ngettext(it, " used %d iteration", " used %d iterations", domain = "R-stats")

msgid        " used %d iteration"
msgid_plural " used %d iterations"
msgstr[0]    ""
msgstr[1]    ""


#: R/factanal.R: 0
#. R/factanal.R: ngettext(factors, "%d factor is too many for %d variables", "%d factors are too many for %d variables",     domain = "R-stats")

msgid        "%d factor is too many for %d variables"
msgid_plural "%d factors are too many for %d variables"
msgstr[0]    ""
msgstr[1]    ""


#: R/loglin.R: 0
#. R/loglin.R: ngettext(z$nlast, "%d iteration: deviation %s", "%d iterations: deviation %s", domain = "R-stats")

msgid        "%d iteration: deviation %s"
msgid_plural "%d iterations: deviation %s"
msgstr[0]    ""
msgstr[1]    ""


#: R/lsfit.R: 0
#. R/lsfit.R: ngettext(sum(!good), "%d missing value deleted", "%d missing values deleted", domain = "R-stats")

msgid        "%d missing value deleted"
msgid_plural "%d missing values deleted"
msgstr[0]    ""
msgstr[1]    ""


#: R/nafns.R: 0
#. R/nafns.R: ngettext(n <- length(x), "%d observation deleted due to missingness", "%d observations deleted due to missingness")

msgid        "%d observation deleted due to missingness"
msgid_plural "%d observations deleted due to missingness"
msgstr[0]    ""
msgstr[1]    ""


#: R/smspline.R: 0
#. R/smspline.R: ngettext(diff, "%d observation with NA, NaN or Inf deleted", "%d observations with NAs, NaNs and/or Infs deleted",     domain = "R-stats")

msgid        "%d observation with NA, NaN or Inf deleted"
msgid_plural "%d observations with NAs, NaNs and/or Infs deleted"
msgstr[0]    ""
msgstr[1]    ""


#: R/princomp.R: 0
#. R/princomp.R: ngettext(x$n.obs, "%d observation.", "%d observations.", domain = "R-stats")

msgid        "%d observation."
msgid_plural "%d observations."
msgstr[0]    ""
msgstr[1]    ""


#: R/lm.R: 0
#. R/lm.R: ngettext(df[1L], "%d residual is 0: no residual degrees of freedom!", "ALL %d residuals are 0: no residual degrees of freedom!",     domain = "R-stats")

msgid        "%d residual is 0: no residual degrees of freedom!"
msgid_plural "ALL %d residuals are 0: no residual degrees of freedom!"
msgstr[0]    ""
msgstr[1]    ""


#: R/princomp.R: 0
#. R/princomp.R: ngettext(length(x$scale), "%d variable and", "%d variables and", domain = "R-stats")

msgid        "%d variable and"
msgid_plural "%d variables and"
msgstr[0]    ""
msgstr[1]    ""


#: R/prop.test.R: 0
#. R/prop.test.R: ngettext(k, "%d-sample proportions test with continuity correction", "%d-sample test for equality of proportions with continuity correction",     domain = "R-stats")
#. R/prop.test.R: ngettext(k, "%d-sample proportions test with continuity correction", "%d-sample test for given proportions with continuity correction",     domain = "R-stats")

msgid        "%d-sample proportions test with continuity correction"
msgid_plural "%d-sample test for given proportions with continuity correction"
msgstr[0]    ""
msgstr[1]    ""


#: R/prop.test.R: 0
#. R/prop.test.R: ngettext(k, "%d-sample proportions test without continuity correction", "%d-sample test for equality of proportions without continuity correction",     domain = "R-stats")
#. R/prop.test.R: ngettext(k, "%d-sample proportions test without continuity correction", "%d-sample test for given proportions without continuity correction",     domain = "R-stats")

msgid        "%d-sample proportions test without continuity correction"
msgid_plural "%d-sample test for given proportions without continuity correction"
msgstr[0]    ""
msgstr[1]    ""


#: R/lsfit.R: 0
#. R/lsfit.R: ngettext(nrx, "'X' matrix has %d case (row)", "'X' matrix has %d cases (rows)", domain = "R-stats")

msgid        "'X' matrix has %d case (row)"
msgid_plural "'X' matrix has %d cases (rows)"
msgstr[0]    ""
msgstr[1]    ""


#: R/lsfit.R: 0
#. R/lsfit.R: ngettext(nry, "'Y' has %d case (row)", "'Y' has %d cases (rows)", domain = "R-stats")

msgid        "'Y' has %d case (row)"
msgid_plural "'Y' has %d cases (rows)"
msgstr[0]    ""
msgstr[1]    ""


#: R/filter.R: 0
#. R/filter.R: ngettext(nser, "'init' must have %d column", "'init' must have 1 or %d columns",     domain = "R-stats")

msgid        "'init' must have %d column"
msgid_plural "'init' must have 1 or %d columns"
msgstr[0]    ""
msgstr[1]    ""


#: R/models.R: 0
#. R/models.R: ngettext(nr, "'newdata' had %d row", "'newdata' had %d rows", domain = "R-stats")

msgid        "'newdata' had %d row"
msgid_plural "'newdata' had %d rows"
msgstr[0]    ""
msgstr[1]    ""


#: R/factanal.R: 0
#. R/factanal.R: ngettext(p, "'start' must have %d row", "'start' must have %d rows", domain = "R-stats")

msgid        "'start' must have %d row"
msgid_plural "'start' must have %d rows"
msgstr[0]    ""
msgstr[1]    ""


#: R/ts.R: 0
#. R/ts.R: ngettext(n.start, "'start.innov' argument is too short: need %d point", "'start.innov' argument is too short: need %d points",     domain = "R-stats")

msgid        "'start.innov' argument is too short: need %d point"
msgid_plural "'start.innov' argument is too short: need %d points"
msgstr[0]    ""
msgstr[1]    ""


#: R/nlm.R: 0
#. R/nlm.R: ngettext(maxiter, "'uniroot()' method did _NOT_ converge in %d iteration", "'uniroot()' method did _NOT_ converge in %d iterations",     domain = "R-stats")

msgid        "'uniroot()' method did _NOT_ converge in %d iteration"
msgid_plural "'uniroot()' method did _NOT_ converge in %d iterations"
msgstr[0]    ""
msgstr[1]    ""


#: R/logLik.R: 0
#. R/logLik.R: ngettext(length(cl), "Class %s: %s (df=%s)\n", "Classes %s: %s (df=%s)\n", domain = "R-stats")

msgid        "Class %s: %s (df=%s)\n"
msgid_plural "Classes %s: %s (df=%s)\n"
msgstr[0]    ""
msgstr[1]    ""


#: R/logLik.R: 0
#. R/logLik.R: ngettext(length(cl), "Class %s: %s, ... (df=%s)\n", "Classes %s: %s, ... (df=%s)\n",     domain = "R-stats")

msgid        "Class %s: %s, ... (df=%s)\n"
msgid_plural "Classes %s: %s, ... (df=%s)\n"
msgstr[0]    ""
msgstr[1]    ""


#: R/glm.R: 0
#: R/lm.R: 0
#. R/glm.R: ngettext(nsingular, "Coefficients: (%d not defined because of singularity)", "Coefficients: (%d not defined because of singularities)",     domain = "R-stats")
#. R/lm.R: ngettext(nsingular, "Coefficients: (%d not defined because of singularity)", "Coefficients: (%d not defined because of singularities)",     domain = "R-stats")

msgid        "Coefficients: (%d not defined because of singularity)"
msgid_plural "Coefficients: (%d not defined because of singularities)"
msgstr[0]    ""
msgstr[1]    ""


#: R/density.R: 0
#. R/density.R: ngettext(x$n, "Data: %s (%d observation);", "Data: %s (%d observations);", domain = "R-stats")

msgid        "Data: %s (%d observation);"
msgid_plural "Data: %s (%d observations);"
msgstr[0]    ""
msgstr[1]    ""


#: R/isoreg.R: 0
#. R/isoreg.R: ngettext(length(x$iKnots), "Isotonic regression from %s\n  with %d knot / break at obs.nr. %s;\n",     "Isotonic regression from %s\n  with %d knots / breaks at obs.nr. %s;\n", domain = "R-stats")

msgid        "Isotonic regression from %s\n  with %d knot / break at obs.nr. %s;\n"
msgid_plural "Isotonic regression from %s\n  with %d knots / breaks at obs.nr. %s;\n"
msgstr[0]    ""
msgstr[1]    ""


#: R/kmeans.R: 0
#. R/kmeans.R: ngettext(length(x$size), "K-means clustering with %d cluster of size %s", "K-means clustering with %d clusters of sizes %s",     domain = "R-stats")

msgid        "K-means clustering with %d cluster of size %s"
msgid_plural "K-means clustering with %d clusters of sizes %s"
msgstr[0]    ""
msgstr[1]    ""


#: R/aov.R: 0
#: R/loess.R: 0
#: R/loess.R: 0
#. R/aov.R: ngettext(length(rs), "Residual Standard Error:", "Residual Standard Errors:", domain = "R-stats")
#. R/aov.R: ngettext(length(rs), "Residual Standard Error:", "Residual Standard Errors:", domain = "R-stats")
#. R/loess.R: ngettext(1L, "Residual Standard Error:", "Residual Standard Errors:", domain = "R-stats")
#. R/loess.R: ngettext(1L, "Residual Standard Error:", "Residual Standard Errors:", domain = "R-stats")

msgid        "Residual Standard Error:"
msgid_plural "Residual Standard Errors:"
msgstr[0]    ""
msgstr[1]    ""


#: R/smspline.R: 0
#. R/smspline.R: ngettext(ip["iter"], "Smoothing Parameter  spar=%s lambda=%s (%d iteration)", "Smoothing Parameter  spar=%s lambda=%s (%d iterations)",     domain = "R-stats")

msgid        "Smoothing Parameter  spar=%s lambda=%s (%d iteration)"
msgid_plural "Smoothing Parameter  spar=%s lambda=%s (%d iterations)"
msgstr[0]    ""
msgstr[1]    ""


#: R/stepfun.R: 0
#. R/stepfun.R: ngettext(n, "Step function with continuity 'f'=%s, %d knot at:", "Step function with continuity 'f'=%s, %d knots at:",     domain = "R-stats")

msgid        "Step function with continuity 'f'=%s, %d knot at:"
msgid_plural "Step function with continuity 'f'=%s, %d knots at:"
msgstr[0]    ""
msgstr[1]    ""


#: R/stepfun.R: 0
#. R/stepfun.R: ngettext(n, "Step function with continuity 'f'=%s, %d knot with summary:", "Step function with continuity 'f'=%s, %d knots with summary:",     domain = "R-stats")

msgid        "Step function with continuity 'f'=%s, %d knot with summary:"
msgid_plural "Step function with continuity 'f'=%s, %d knots with summary:"
msgstr[0]    ""
msgstr[1]    ""


#: R/factanal.R: 0
#. R/factanal.R: ngettext(factors, "Test of the hypothesis that %d factor is sufficient.", "Test of the hypothesis that %d factors are sufficient.",     domain = "R-stats")

msgid        "Test of the hypothesis that %d factor is sufficient."
msgid_plural "Test of the hypothesis that %d factors are sufficient."
msgstr[0]    ""
msgstr[1]    ""


#: R/factanal.R: 0
#. R/factanal.R: ngettext(x$dof, "The chi square statistic is %s on %d degree of freedom.", "The chi square statistic is %s on %d degrees of freedom.",     domain = "R-stats")

msgid        "The chi square statistic is %s on %d degree of freedom."
msgid_plural "The chi square statistic is %s on %d degrees of freedom."
msgstr[0]    ""
msgstr[1]    ""


#: R/glm.R: 0
#. R/glm.R: ngettext(nobs, "X matrix has rank %d, but only %d observation", "X matrix has rank %d, but only %d observations",     domain = "R-stats")

msgid        "X matrix has rank %d, but only %d observation"
msgid_plural "X matrix has rank %d, but only %d observations"
msgstr[0]    ""
msgstr[1]    ""


#: R/smooth.R: 0
#. R/smooth.R: ngettext(it, "__twiced__ used %d iteration", "__twiced__ used %d iterations", domain = "R-stats")
#. R/smooth.R: ngettext(it, "__twiced__ used %d iteration", "__twiced__ used %d iterations", domain = "R-stats")

msgid        "__twiced__ used %d iteration"
msgid_plural "__twiced__ used %d iterations"
msgstr[0]    ""
msgstr[1]    ""


#: R/lsfit.R: 0
#. R/lsfit.R: ngettext(ncx, "but %d variable", "but %d variables", domain = "R-stats")

msgid        "but %d variable"
msgid_plural "but %d variables"
msgstr[0]    ""
msgstr[1]    ""


#: R/models.R: 0
#. R/models.R: ngettext(nr2, "but variable found had %d row", "but variables found have %d rows",     domain = "R-stats")

msgid        "but variable found had %d row"
msgid_plural "but variables found have %d rows"
msgstr[0]    ""
msgstr[1]    ""


#: R/diffinv.R: 0
#: R/lm.R: 0
#: R/lm.R: 0
#. R/diffinv.R: ngettext(na, "extra argument %s is disregarded", "extra arguments %s are be disregarded",     domain = "R-stats")
#. R/lm.R: ngettext(length(dots), "extra argument %s is disregarded", "extra arguments %s are disregarded",     domain = "R-stats")
#. R/lm.R: ngettext(as.integer(length(dots)), "extra argument %s is disregarded", "extra arguments %s are disregarded",     domain = "R-stats")

msgid        "extra argument %s is disregarded"
msgid_plural "extra arguments %s are disregarded"
msgstr[0]    ""
msgstr[1]    ""


#: R/dendrogram.R: 0
#. R/dendrogram.R: ngettext(length(nms), "extra argument %s is not of class \"dendrogram\"", "extra arguments %s are not of class \"dendrogram\"",     domain = "R-stats")

msgid        "extra argument %s is not of class \"dendrogram\""
msgid_plural "extra arguments %s are not of class \"dendrogram\""
msgstr[0]    ""
msgstr[1]    ""


#: R/models.R: 0
#. R/models.R: ngettext(length(m), "factor %s has new level %s", "factor %s has new levels %s",     domain = "R-stats")

msgid        "factor %s has new level %s"
msgid_plural "factor %s has new levels %s"
msgstr[0]    ""
msgstr[1]    ""


#: R/nls.R: 0
#. R/nls.R: ngettext(sum(np == -1), "fitting parameter %s without any variables", "fitting parameters %s without any variables",     domain = "R-stats")

msgid        "fitting parameter %s without any variables"
msgid_plural "fitting parameters %s without any variables"
msgstr[0]    ""
msgstr[1]    ""


#: R/kmeans.R: 0
#. R/kmeans.R: ngettext(iter.max, "kmeans algorithm did not converge in %d iteration", "kmeans algorithm did not converge in %d iterations",     domain = "R-stats")

msgid        "kmeans algorithm did not converge in %d iteration"
msgid_plural "kmeans algorithm did not converge in %d iterations"
msgstr[0]    ""
msgstr[1]    ""


#: R/add.R: 0
#. R/add.R: ngettext(sum(where == 0), "lower scope has term %s not included in model", "lower scope has terms %s not included in model",     domain = "R-stats")

msgid        "lower scope has term %s not included in model"
msgid_plural "lower scope has terms %s not included in model"
msgstr[0]    ""
msgstr[1]    ""


#: R/medpolish.R: 0
#. R/medpolish.R: ngettext(maxiter, "medpolish() did not converge in %d iteration", "medpolish() did not converge in %d iterations",     domain = "R-stats")

msgid        "medpolish() did not converge in %d iteration"
msgid_plural "medpolish() did not converge in %d iterations"
msgstr[0]    ""
msgstr[1]    ""


#: R/prop.test.R: 0
#. R/prop.test.R: ngettext(k, "null probability %s", "null probabilities %s", domain = "R-stats")

msgid        "null probability %s"
msgid_plural "null probabilities %s"
msgstr[0]    ""
msgstr[1]    ""


#: R/lsfit.R: 0
#. R/lsfit.R: ngettext(nry, "only %d case", "only %d cases", domain = "R-stats")

msgid        "only %d case"
msgid_plural "only %d cases"
msgstr[0]    ""
msgstr[1]    ""


#: R/selfStart.R: 0
#. R/selfStart.R: ngettext(sum(msng), "parameter %s does not occur in the model formula", "parameters %s do not occur in the model formula",     domain = "R-stats")

msgid        "parameter %s does not occur in the model formula"
msgid_plural "parameters %s do not occur in the model formula"
msgstr[0]    ""
msgstr[1]    ""


#: R/aov.R: 0
#. R/aov.R: ngettext(length(indError), "there is %d Error term: only 1 is allowed", "there are %d Error terms: only 1 is allowed",     domain = "R-stats")

msgid        "there is %d Error term: only 1 is allowed"
msgid_plural "there are %d Error terms: only 1 is allowed"
msgstr[0]    ""
msgstr[1]    ""


#: R/factanal.R: 0
#. R/factanal.R: ngettext(nc, "unable to optimize from this starting value", "unable to optimize from these starting values",     domain = "R-stats")

msgid        "unable to optimize from this starting value"
msgid_plural "unable to optimize from these starting values"
msgstr[0]    ""
msgstr[1]    ""


#: R/aov.R: 0
#. R/aov.R: ngettext(na, "unknown name %s in the 'split' list", "unknown names %s in the 'split' list",     domain = "R-stats")

msgid        "unknown name %s in the 'split' list"
msgid_plural "unknown names %s in the 'split' list"
msgstr[0]    ""
msgstr[1]    ""


#: R/nlminb.R: 0
#: R/nls.R: 0
#. R/nlminb.R: ngettext(length(nap), "unrecognized control element named %s ignored", "unrecognized control elements named %s ignored",     domain = "R-stats")
#. R/nls.R: ngettext(length(nap), "unrecognized control element named %s ignored", "unrecognized control elements named %s ignored",     domain = "R-stats")

msgid        "unrecognized control element named %s ignored"
msgid_plural "unrecognized control elements named %s ignored"
msgstr[0]    ""
msgstr[1]    ""


#: R/add.R: 0
#. R/add.R: ngettext(sum(where == 0), "upper scope has term %s not included in model", "upper scope has terms %s not included in model",     domain = "R-stats")

msgid        "upper scope has term %s not included in model"
msgid_plural "upper scope has terms %s not included in model"
msgstr[0]    ""
msgstr[1]    ""


#: R/add.R: 0
#. R/add.R: ngettext(newn, "using the %d/%d row from a combined fit", "using the %d/%d rows from a combined fit",     domain = "R-stats")
#. R/add.R: ngettext(newn, "using the %d/%d row from a combined fit", "using the %d/%d rows from a combined fit",     domain = "R-stats")

msgid        "using the %d/%d row from a combined fit"
msgid_plural "using the %d/%d rows from a combined fit"
msgstr[0]    ""
msgstr[1]    ""
