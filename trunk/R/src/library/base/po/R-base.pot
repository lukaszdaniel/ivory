msgid ""
msgstr ""
"Project-Id-Version: base 3.2.0\n"
"POT-Creation-Date: 2014-08-10 17:27\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"



#: R/New-Internal.R: 0
#. R/New-Internal.R: stop("\"hexNumeric\" and \"digits17\" are mutually exclusive")

msgid "\"hexNumeric\" and \"digits17\" are mutually exclusive"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("%s failed in %s function for namespace %s, details:\n  call: %s\n  error: %s",     sQuote(hookname), sQuote("attachNamespace()"), sQuote(nsname), deparse(conditionCall(res))[1L],     conditionMessage(res))
#. R/namespace.R: gettextf("%s failed in %s function for namespace %s, details:\n  call: %s\n  error: %s",     sQuote(hookname), sQuote("unloadNamespace()"), sQuote(nsname), deparse(conditionCall(res))[1L],     conditionMessage(res))

msgid "%s failed in %s function for namespace %s, details:\n  call: %s\n  error: %s"
msgstr ""


#: R/attach.R: 0
#: R/namespace.R: 0
#. R/attach.R: gettextf("%s failed in %s function for package %s, details:\n  call: %s\n  error: %s",     sQuote(".onDetach"), sQuote("detach()"), sQuote(pkgname), deparse(conditionCall(res))[1L],     conditionMessage(res), domain = "R-base")
#. R/attach.R: gettextf("%s failed in %s function for package %s, details:\n  call: %s\n  error: %s",     sQuote(".Last.lib"), sQuote("detach()"), sQuote(pkgname), deparse(conditionCall(res))[1L],     conditionMessage(res), domain = "R-base")
#. R/namespace.R: gettextf("%s failed in %s function for package %s, details:\n  call: %s\n  error: %s",     sQuote(hookname), sQuote("loadNamespace()"), sQuote(pkgname), deparse(conditionCall(res))[1L],     conditionMessage(res), domain = "R-base")

msgid "%s failed in %s function for package %s, details:\n  call: %s\n  error: %s"
msgstr ""


#: R/factor.R: 0
#. R/factor.R: gettextf("%s function is not meaningful for factors", sQuote(.Generic))
#. R/factor.R: gettextf("%s function is not meaningful for factors", sQuote(.Generic))
#. R/factor.R: gettextf("%s function is not meaningful for factors", sQuote(.Generic))

msgid "%s function is not meaningful for factors"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: gettextf("%s function is only defined for equally-sized data frames", sQuote(.Generic))

msgid "%s function is only defined for equally-sized data frames"
msgstr ""


#: R/conditions.R: 0
#. R/conditions.R: gettextf("%s in %s: %s", cl, deparse(call), msg, domain = "R-base")
#. R/conditions.R: gettextf("%s in %s: %s", cl, deparse(call)[1L], msg, domain = "R-base")

msgid "%s in %s: %s"
msgstr ""


#: R/source.R: 0
#. R/source.R: gettextf("%s is not an existing file", sQuote(file))

msgid "%s is not an existing file"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("%s is not an exported object from 'namespace:%s'", sQuote(name), getNamespaceName(ns))

msgid "%s is not an exported object from 'namespace:%s'"
msgstr ""


#: R/dates.R: 0
#: R/datetime.R: 0
#: R/datetime.R: 0
#. R/dates.R: gettextf("%s is not an object of class %s", sQuote(deparse(substitute(x))), dQuote("Date"))
#. R/dates.R: gettextf("%s is not an object of class %s", sQuote(deparse(substitute(x))), dQuote("Dates"))
#. R/datetime.R: gettextf("%s is not an object of class %s", sQuote(deparse(substitute(x))), dQuote("Date"))
#. R/datetime.R: gettextf("%s is not an object of class %s", sQuote(deparse(substitute(x))), dQuote("Dates"))

msgid "%s is not an object of class %s"
msgstr ""


#: R/version.R: 0
#. R/version.R: gettextf("%s is not defined for objects of class %s", .Generic, dQuote("numeric_version"),     domain = "R-base")

msgid "%s is not defined for objects of class %s"
msgstr ""


#: R/attach.R: 0
#. R/attach.R: gettextf("%s namespace cannot be unloaded:", sQuote(pkgname), domain = "R-base")

msgid "%s namespace cannot be unloaded:"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("%s package is not a valid installed package", sQuote(package), domain = "R-base")

msgid "%s package is not a valid installed package"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("%s package was not found on search path, using 'pos = 2'", sQuote(pos))

msgid "%s package was not found on search path, using 'pos = 2'"
msgstr ""


#: R/notyet.R: 0
#. R/notyet.R: gettextf("%s value is not implemented yet", sQuote(as.character(sys.call(sys.parent())[[1L]])))

msgid "%s value is not implemented yet"
msgstr ""


#: R/mean.R: 0
#. R/mean.R: gettextf("%s value is not numeric or logical: returning NA", sQuote(deparse(substitute(x))))

msgid "%s value is not numeric or logical: returning NA"
msgstr ""


#: R/notyet.R: 0
#. R/notyet.R: gettextf("%s value is not used (yet)", sQuote(arg), domain = "R-base")

msgid "%s value is not used (yet)"
msgstr ""


#: R/attach.R: 0
#. R/attach.R: gettextf("%s value was converted to character string", sQuote(name))

msgid "%s value was converted to character string"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("%s value was not found", sQuote(name))
#. R/namespace.R: gettextf("%s value was not found", sQuote(name))

msgid "%s value was not found"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("%sPackages in library %s:\n", sep, sQuote(lib))

msgid "%sPackages in library %s:"
msgstr ""


#: R/match.R: 0
#. R/match.R: gettextf("'%s' and '%s' arguments must be character vectors", "input", "target")

msgid "'%s' and '%s' arguments must be character vectors"
msgstr ""


#: R/grep.R: 0
#: R/strwrap.R: 0
#. R/grep.R: gettextf("'%s' and '%s' arguments must have the same length", "x", "m", domain = "R-base")
#. R/strwrap.R: gettextf("'%s' and '%s' arguments must have the same length", "x", "y")

msgid "'%s' and '%s' arguments must have the same length"
msgstr ""


#: R/seq.R: 0
#. R/seq.R: gettextf("'%s' argument cannot be NA, NaN or infinite", "from")
#. R/seq.R: gettextf("'%s' argument cannot be NA, NaN or infinite", "from")
#. R/seq.R: gettextf("'%s' argument cannot be NA, NaN or infinite", "to")

msgid "'%s' argument cannot be NA, NaN or infinite"
msgstr ""


#: R/octhex.R: 0
#. R/octhex.R: gettextf("'%s' argument cannot be coerced to an object of class %s", "x", dQuote("octmode"))
#. R/octhex.R: gettextf("'%s' argument cannot be coerced to an object of class %s", "x", dQuote("hexmode"))

msgid "'%s' argument cannot be coerced to an object of class %s"
msgstr ""


#: R/array.R: 0
#. R/array.R: gettextf("'%s' argument cannot be of length 0", "dims")

msgid "'%s' argument cannot be of length 0"
msgstr ""


#: R/format.R: 0
#. R/format.R: gettextf("'%s' argument has length > 1", "zero.print")

msgid "'%s' argument has length > 1"
msgstr ""


#: R/dates.R: 0
#: R/datetime.R: 0
#. R/dates.R: gettextf("'%s' argument is NA", "by")
#. R/datetime.R: gettextf("'%s' argument is NA", "by")

msgid "'%s' argument is NA"
msgstr ""


#: R/eigen.R: 0
#. R/eigen.R: gettextf("'%s' argument is a 0 x 0 matrix", "x")

msgid "'%s' argument is a 0 x 0 matrix"
msgstr ""


#: R/diag.R: 0
#. R/diag.R: gettextf("'%s' argument is an array, but not one-dimensional.", "x")

msgid "'%s' argument is an array, but not one-dimensional."
msgstr ""


#: R/seq.R: 0
#. R/seq.R: gettextf("'%s' argument is much too small", "by")

msgid "'%s' argument is much too small"
msgstr ""


#: R/qr.R: 0
#. R/qr.R: gettextf("'%s' argument is not a QR decomposition", "qr")
#. R/qr.R: gettextf("'%s' argument is not a QR decomposition", "qr")
#. R/qr.R: gettextf("'%s' argument is not a QR decomposition", "qr")
#. R/qr.R: gettextf("'%s' argument is not a QR decomposition", "qr")
#. R/qr.R: gettextf("'%s' argument is not a QR decomposition", "qr")
#. R/qr.R: gettextf("'%s' argument is not a QR decomposition", "qr")
#. R/qr.R: gettextf("'%s' argument is not a QR decomposition", "qr")
#. R/qr.R: gettextf("'%s' argument is not a QR decomposition", "qr")

msgid "'%s' argument is not a QR decomposition"
msgstr ""


#: R/all.equal.R: 0
#. R/all.equal.R: gettextf("'%s' argument is not a factor", "target")
#. R/all.equal.R: gettextf("'%s' argument is not a factor", "current")

msgid "'%s' argument is not a factor"
msgstr ""


#: R/table.R: 0
#. R/table.R: gettextf("'%s' argument is not an array", "x")

msgid "'%s' argument is not an array"
msgstr ""


#: R/datetime.R: 0
#: R/library.R: 0
#: R/version.R: 0
#. R/datetime.R: gettextf("'%s' argument is not an object of class %s", "x", dQuote("POSIXlt"))
#. R/datetime.R: gettextf("'%s' argument is not an object of class %s", "x", dQuote("POSIXct"))
#. R/library.R: gettextf("'%s' argument is not an object of class %s", "x", dQuote("packageInfo"))
#. R/version.R: gettextf("'%s' argument is not an object of class %s", "x", dQuote("numeric_version"))

msgid "'%s' argument is not an object of class %s"
msgstr ""


#: R/conflicts.R: 0
#: R/tapply.R: 0
#. R/conflicts.R: gettextf("'%s' argument is of length 0", "where")
#. R/tapply.R: gettextf("'%s' argument is of length 0", "INDEX")

msgid "'%s' argument is of length 0"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: gettextf("'%s' argument is of the wrong length", "value")

msgid "'%s' argument is of the wrong length"
msgstr ""


#: R/qr.R: 0
#. R/qr.R: gettextf("'%s' argument is too large", "k")

msgid "'%s' argument is too large"
msgstr ""


#: R/sort.R: 0
#. R/sort.R: gettextf("'%s' argument is valid only for 'na.last = NA' option", "index.return")

msgid "'%s' argument is valid only for 'na.last = NA' option"
msgstr ""


#: R/sort.R: 0
#. R/sort.R: gettextf("'%s' argument is valid only for non-factors", "index.return")

msgid "'%s' argument is valid only for non-factors"
msgstr ""


#: R/match.R: 0
#. R/match.R: gettextf("'%s' argument must be NULL or a character vector", "arg")

msgid "'%s' argument must be NULL or a character vector"
msgstr ""


#: R/unix/system.unix.R: 0
#: R/windows/system.R: 0
#: R/windows/system.R: 0
#: R/windows/system.R: 0
#: R/windows/system.R: 0
#: R/windows/system.R: 0
#: R/windows/system.R: 0
#: R/windows/system.R: 0
#: R/windows/system.R: 0
#: R/windows/system.R: 0
#: R/windows/system.R: 0
#. R/unix/system.unix.R: gettextf("'%s' argument must be TRUE or FALSE", "intern")
#. R/unix/system.unix.R: gettextf("'%s' argument must be TRUE or FALSE", "ignore.stdout")
#. R/unix/system.unix.R: gettextf("'%s' argument must be TRUE or FALSE", "ignore.stderr")
#. R/unix/system.unix.R: gettextf("'%s' argument must be TRUE or FALSE", "wait")
#. R/unix/system.unix.R: gettextf("'%s' argument must be TRUE or FALSE", "wait")
#. R/windows/system.R: gettextf("'%s' argument must be TRUE or FALSE", "intern")
#. R/windows/system.R: gettextf("'%s' argument must be TRUE or FALSE", "ignore.stdout")
#. R/windows/system.R: gettextf("'%s' argument must be TRUE or FALSE", "ignore.stderr")
#. R/windows/system.R: gettextf("'%s' argument must be TRUE or FALSE", "wait")
#. R/windows/system.R: gettextf("'%s' argument must be TRUE or FALSE", "show.output.on.console")
#. R/windows/system.R: gettextf("'%s' argument must be TRUE or FALSE", "minimized")
#. R/windows/system.R: gettextf("'%s' argument must be TRUE or FALSE", "invisible")
#. R/windows/system.R: gettextf("'%s' argument must be TRUE or FALSE", "wait")
#. R/windows/system.R: gettextf("'%s' argument must be TRUE or FALSE", "minimized")
#. R/windows/system.R: gettextf("'%s' argument must be TRUE or FALSE", "invisible")

msgid "'%s' argument must be TRUE or FALSE"
msgstr ""


#: R/RNG.R: 0
#. R/RNG.R: gettextf("'%s' argument must be a character string of length 1", "normal.kind")
#. R/RNG.R: gettextf("'%s' argument must be a character string of length 1", "normal.kind")

msgid "'%s' argument must be a character string of length 1"
msgstr ""


#: R/RNG.R: 0
#. R/RNG.R: gettextf("'%s' argument must be a character string of length 1 (RNG to be used).",     "kind")
#. R/RNG.R: gettextf("'%s' argument must be a character string of length 1 (RNG to be used).",     "kind")

msgid "'%s' argument must be a character string of length 1 (RNG to be used)."
msgstr ""


#: R/dcf.R: 0
#. R/dcf.R: gettextf("'%s' argument must be a character string or connection", "file")
#. R/dcf.R: gettextf("'%s' argument must be a character string or connection", "file")

msgid "'%s' argument must be a character string or connection"
msgstr ""


#: R/unix/system.unix.R: 0
#. R/unix/system.unix.R: gettextf("'%s' argument must be a character vector or 'NULL'", "input")
#. R/unix/system.unix.R: gettextf("'%s' argument must be a character vector or 'NULL'", "input")

msgid "'%s' argument must be a character vector or 'NULL'"
msgstr ""


#: R/New-Internal.R: 0
#: R/attr.R: 0
#: R/lapply.R: 0
#. R/New-Internal.R: gettextf("'%s' argument must be a list", "args")
#. R/attr.R: gettextf("'%s' argument must be a list", "value")
#. R/lapply.R: gettextf("'%s' argument must be a list", "object")

msgid "'%s' argument must be a list"
msgstr ""


#: R/det.R: 0
#. R/det.R: gettextf("'%s' argument must be a square matrix", "x")

msgid "'%s' argument must be a square matrix"
msgstr ""


#: R/rle.R: 0
#. R/rle.R: gettextf("'%s' argument must be a vector of an atomic type", "x")

msgid "'%s' argument must be a vector of an atomic type"
msgstr ""


#: R/dates.R: 0
#: R/datetime.R: 0
#: R/datetime.R: 0
#: R/datetime.R: 0
#. R/dates.R: gettextf("'%s' argument must be an object of class %s", "from", dQuote("Date"))
#. R/dates.R: gettextf("'%s' argument must be an object of class %s", "to", dQuote("Date"))
#. R/dates.R: gettextf("'%s' argument must be an object of class %s", "x", dQuote("Date"))
#. R/datetime.R: gettextf("'%s' argument must be an object of class %s", "from", dQuote("POSIXt"))
#. R/datetime.R: gettextf("'%s' argument must be an object of class %s", "to", dQuote("POSIXt"))
#. R/datetime.R: gettextf("'%s' argument must be an object of class %s", "x", dQuote("POSIXt"))

msgid "'%s' argument must be an object of class %s"
msgstr ""


#: R/sort.R: 0
#. R/sort.R: gettextf("'%s' argument must be atomic", "x")

msgid "'%s' argument must be atomic"
msgstr ""


#: R/format.R: 0
#. R/format.R: gettextf("'%s' argument must be character, logical or NULL", "zero.print")

msgid "'%s' argument must be character, logical or NULL"
msgstr ""


#: R/all.equal.R: 0
#: R/frametools.R: 0
#: R/frametools.R: 0
#: R/frametools.R: 0
#: R/source.R: 0
#. R/all.equal.R: gettextf("'%s' argument must be logical", "check.attributes")
#. R/all.equal.R: gettextf("'%s' argument must be logical", "check.attributes")
#. R/all.equal.R: gettextf("'%s' argument must be logical", "check.attributes")
#. R/all.equal.R: gettextf("'%s' argument must be logical", "use.names")
#. R/all.equal.R: gettextf("'%s' argument must be logical", "check.attributes")
#. R/all.equal.R: gettextf("'%s' argument must be logical", "check.attributes")
#. R/all.equal.R: gettextf("'%s' argument must be logical", "check.names")
#. R/frametools.R: gettextf("'%s' argument must be logical", "subset")
#. R/frametools.R: gettextf("'%s' argument must be logical", "subset")
#. R/frametools.R: gettextf("'%s' argument must be logical", "subset")
#. R/source.R: gettextf("'%s' argument must be logical", "echo")

msgid "'%s' argument must be logical"
msgstr ""


#: R/load.R: 0
#. R/load.R: gettextf("'%s' argument must be logical or character", "compress")

msgid "'%s' argument must be logical or character"
msgstr ""


#: R/load.R: 0
#: R/serialize.R: 0
#. R/load.R: gettextf("'%s' argument must be non-empty character string", "file")
#. R/load.R: gettextf("'%s' argument must be non-empty character string", "file")
#. R/serialize.R: gettextf("'%s' argument must be non-empty character string", "file")

msgid "'%s' argument must be non-empty character string"
msgstr ""


#: R/seq.R: 0
#. R/seq.R: gettextf("'%s' argument must be non-negative number", "length.out")

msgid "'%s' argument must be non-negative number"
msgstr ""


#: R/cut.R: 0
#: R/jitter.R: 0
#: R/rowsum.R: 0
#. R/cut.R: gettextf("'%s' argument must be numeric", "x")
#. R/jitter.R: gettextf("'%s' argument must be numeric", "x")
#. R/rowsum.R: gettextf("'%s' argument must be numeric", "x")

msgid "'%s' argument must be numeric"
msgstr ""


#: R/mean.R: 0
#. R/mean.R: gettextf("'%s' argument must be numeric of length 1", "trim")

msgid "'%s' argument must be numeric of length 1"
msgstr ""


#: R/dates.R: 0
#: R/datetime.R: 0
#: R/datetime.R: 0
#: R/datetime.R: 0
#: R/datetime.R: 0
#: R/datetime.R: 0
#: R/files.R: 0
#: R/library.R: 0
#: R/match.R: 0
#: R/match.R: 0
#: R/seq.R: 0
#: R/seq.R: 0
#: R/seq.R: 0
#: R/unix/system.unix.R: 0
#: R/unix/system.unix.R: 0
#. R/dates.R: gettextf("'%s' argument must be of length 1", "from")
#. R/dates.R: gettextf("'%s' argument must be of length 1", "to")
#. R/dates.R: gettextf("'%s' argument must be of length 1", "length.out")
#. R/dates.R: gettextf("'%s' argument must be of length 1", "by")
#. R/dates.R: gettextf("'%s' argument must be of length 1", "origin")
#. R/datetime.R: gettextf("'%s' argument must be of length 1", "from")
#. R/datetime.R: gettextf("'%s' argument must be of length 1", "to")
#. R/datetime.R: gettextf("'%s' argument must be of length 1", "length.out")
#. R/datetime.R: gettextf("'%s' argument must be of length 1", "by")
#. R/datetime.R: gettextf("'%s' argument must be of length 1", "origin")
#. R/files.R: gettextf("'%s' argument must be of length 1", "package")
#. R/library.R: gettextf("'%s' argument must be of length 1", "package")
#. R/match.R: gettextf("'%s' argument must be of length 1", "arg")
#. R/match.R: gettextf("'%s' argument must be of length 1", "input")
#. R/seq.R: gettextf("'%s' argument must be of length 1", "length.out")
#. R/seq.R: gettextf("'%s' argument must be of length 1", "from")
#. R/seq.R: gettextf("'%s' argument must be of length 1", "to")
#. R/unix/system.unix.R: gettextf("'%s' argument must be of length 1", "stdout")
#. R/unix/system.unix.R: gettextf("'%s' argument must be of length 1", "stderr")

msgid "'%s' argument must be of length 1"
msgstr ""


#: R/match.R: 0
#. R/match.R: gettextf("'%s' argument must be of length greater or equal to 1", "arg")

msgid "'%s' argument must be of length greater or equal to 1"
msgstr ""


#: R/toString.R: 0
#. R/toString.R: gettextf("'%s' argument must be positive", "width")

msgid "'%s' argument must be positive"
msgstr ""


#: R/dates.R: 0
#: R/datetime.R: 0
#: R/datetime.R: 0
#: R/datetime.R: 0
#: R/load.R: 0
#. R/dates.R: gettextf("'%s' argument must be specified", "origin")
#. R/dates.R: gettextf("'%s' argument must be specified", "from")
#. R/datetime.R: gettextf("'%s' argument must be specified", "origin")
#. R/datetime.R: gettextf("'%s' argument must be specified", "origin")
#. R/datetime.R: gettextf("'%s' argument must be specified", "from")
#. R/load.R: gettextf("'%s' argument must be specified", "file")

msgid "'%s' argument must be specified"
msgstr ""


#: R/table.R: 0
#. R/table.R: gettextf("'%s' argument must inherit from class %s", "object", dQuote("table"), domain = "R-base")
#. R/table.R: gettextf("'%s' argument must inherit from class %s", "x", dQuote("summary.table"),     domain = "R-base")

msgid "'%s' argument must inherit from class %s"
msgstr ""


#: R/all.equal.R: 0
#. R/all.equal.R: gettextf("'%s' argument should be numeric", "tolerance")

msgid "'%s' argument should be numeric"
msgstr ""


#: R/all.equal.R: 0
#. R/all.equal.R: gettextf("'%s' argument should be numeric or NULL", "scale")

msgid "'%s' argument should be numeric or NULL"
msgstr ""


#: R/match.R: 0
#. R/match.R: gettextf("'%s' argument should be one of %s", "arg", paste(dQuote(choices), collapse = ", "),     domain = "R-base")

msgid "'%s' argument should be one of %s"
msgstr ""


#: R/windows/system.R: 0
#. R/windows/system.R: gettextf("'%s' command could not be run", cmd0)
#. R/windows/system.R: gettextf("'%s' command could not be run", cmd0)

msgid "'%s' command could not be run"
msgstr ""


#: R/windows/system.R: 0
#. R/windows/system.R: gettextf("'%s' command execution failed with error code %d", cmd0, res)
#. R/windows/system.R: gettextf("'%s' command execution failed with error code %d", cmd0, res)

msgid "'%s' command execution failed with error code %d"
msgstr ""


#: R/dates.R: 0
#. R/dates.R: gettextf("'%s' function is not defined for objects of class %s", .Generic, dQuote("Date"))
#. R/dates.R: gettextf("'%s' function is not defined for objects of class %s", .Generic, dQuote("Date"))

msgid "'%s' function is not defined for objects of class %s"
msgstr ""


#: R/datetime.R: 0
#. R/datetime.R: gettextf("'%s' operator is not defined for objects of class %s", .Generic, dQuote("POSIXt"))
#. R/datetime.R: gettextf("'%s' operator is not defined for objects of class %s", .Generic, dQuote("POSIXt"))
#. R/datetime.R: gettextf("'%s' operator is not defined for objects of class %s", .Generic, dQuote("POSIXt"))
#. R/datetime.R: gettextf("'%s' operator is not defined for objects of class %s", .Generic, dQuote("difftime"))
#. R/datetime.R: gettextf("'%s' operator is not defined for objects of class %s", .Generic, dQuote("difftime"))
#. R/datetime.R: gettextf("'%s' operator is not defined for objects of class %s", .Generic, dQuote("difftime"))

msgid "'%s' operator is not defined for objects of class %s"
msgstr ""


#: R/factor.R: 0
#. R/factor.R: gettextf("'%s' operator is not defined for ordered factors", .Generic)

msgid "'%s' operator is not defined for ordered factors"
msgstr ""


#: R/factor.R: 0
#. R/factor.R: gettextf("'%s' operator is not meaningful for ordered factors", .Generic)

msgid "'%s' operator is not meaningful for ordered factors"
msgstr ""


#: R/factor.R: 0
#. R/factor.R: gettextf("'%s' operator is only meaningful for ordered factors if all arguments have the same level sets",     .Generic)

msgid "'%s' operator is only meaningful for ordered factors if all arguments have the same level sets"
msgstr ""


#: R/match.fun.R: 0
#. R/match.fun.R: gettextf("'%s' value is not a function, character or symbol", deparse(FUN))

msgid "'%s' value is not a function, character or symbol"
msgstr ""


#: R/RNG.R: 0
#. R/RNG.R: gettextf("'%s' value is not a valid abbreviation of an RNG", kind)
#. R/RNG.R: gettextf("'%s' value is not a valid abbreviation of an RNG", kind)

msgid "'%s' value is not a valid abbreviation of an RNG"
msgstr ""


#: R/RNG.R: 0
#. R/RNG.R: gettextf("'%s' value is not a valid choice", normal.kind)
#. R/RNG.R: gettextf("'%s' value is not a valid choice", normal.kind)

msgid "'%s' value is not a valid choice"
msgstr ""


#: R/rm.R: 0
#. R/rm.R: stop("'...' must contain names or character strings")

msgid "'...' must contain names or character strings"
msgstr ""


#: R/library.R: 0
#. R/library.R: warning("'DESCRIPTION' file has an 'Encoding' field and re-encoding is not possible",     call. = FALSE)
#. R/library.R: warning("'DESCRIPTION' file has an 'Encoding' field and re-encoding is not possible",     call. = FALSE)

msgid "'DESCRIPTION' file has an 'Encoding' field and re-encoding is not possible"
msgstr ""


#: R/sweep.R: 0
#. R/sweep.R: warning("'STATS' argument does not recycle exactly across 'MARGIN' argument")

msgid "'STATS' argument does not recycle exactly across 'MARGIN' argument"
msgstr ""


#: R/sweep.R: 0
#. R/sweep.R: warning("'STATS' argument is longer than the extent of 'dim(x)[MARGIN]'")

msgid "'STATS' argument is longer than the extent of 'dim(x)[MARGIN]'"
msgstr ""


#: R/apply.R: 0
#. R/apply.R: stop("'X' must have named dimnames")

msgid "'X' must have named dimnames"
msgstr ""


#: R/datetime.R: 0
#. R/datetime.R: stop("'as.difftime()' function needs explicit 'units' argument for numeric conversion")

msgid "'as.difftime()' function needs explicit 'units' argument for numeric conversion"
msgstr ""


#: R/format.R: 0
#. R/format.R: gettextf("'big.mark' and 'decimal.mark' arguments are both set to '%s', which could be confusing",     big.mark)

msgid "'big.mark' and 'decimal.mark' arguments are both set to '%s', which could be confusing"
msgstr ""


#: R/tabulate.R: 0
#. R/tabulate.R: stop("'bin' argument must be numeric or a factor")

msgid "'bin' argument must be numeric or a factor"
msgstr ""


#: R/merge.R: 0
#. R/merge.R: stop("'by' argument must match number of columns")
#. R/merge.R: stop("'by' argument must match number of columns")

msgid "'by' argument must match number of columns"
msgstr ""


#: R/merge.R: 0
#. R/merge.R: stop("'by' argument must specify one or more columns as numbers, names or logical")

msgid "'by' argument must specify one or more columns as numbers, names or logical"
msgstr ""


#: R/merge.R: 0
#. R/merge.R: stop("'by.x' and 'by.y' arguments specify different numbers of columns")

msgid "'by.x' and 'by.y' arguments specify different numbers of columns"
msgstr ""


#: R/source.R: 0
#. R/source.R: warning("'chdir = TRUE' option makes no sense for a connection")

msgid "'chdir = TRUE' option makes no sense for a connection"
msgstr ""


#: R/source.R: 0
#. R/source.R: warning("'chdir = TRUE' option makes no sense for an URL")

msgid "'chdir = TRUE' option makes no sense for an URL"
msgstr ""


#: R/load.R: 0
#. R/load.R: gettextf("'compress = \"%s\"' option is invalid", compress)

msgid "'compress = \"%s\"' option is invalid"
msgstr ""


#: R/serialize.R: 0
#. R/serialize.R: warning("'compress' argument is ignored unless 'file' argument is a file name")

msgid "'compress' argument is ignored unless 'file' argument is a file name"
msgstr ""


#: R/serialize.R: 0
#. R/serialize.R: stop("'connection' argument must be a connection")
#. R/serialize.R: stop("'connection' argument must be a connection")

msgid "'connection' argument must be a connection"
msgstr ""


#: R/all.equal.R: 0
#. R/all.equal.R: gettext("'current' argument is a subset of 'target' argument")

msgid "'current' argument is a subset of 'target' argument"
msgstr ""


#: R/all.equal.R: 0
#. R/all.equal.R: gettext("'current' argument's class is not list-like")

msgid "'current' argument's class is not list-like"
msgstr ""


#: R/sort.R: 0
#. R/sort.R: stop("'decreasing' argument must be a logical vector of length 1.\nDid you intend to set 'partial'?")

msgid "'decreasing' argument must be a logical vector of length 1.\nDid you intend to set 'partial'?"
msgstr ""


#: R/det.R: 0
#. R/det.R: stop("'determinant()' function not currently defined for complex matrices")

msgid "'determinant()' function not currently defined for complex matrices"
msgstr ""


#: R/format.R: 0
#. R/format.R: gettextf("'digits' argument reduced to %d", maxDigits)

msgid "'digits' argument reduced to %d"
msgstr ""


#: R/array.R: 0
#. R/array.R: stop("'dim' argument specifies too large array")

msgid "'dim' argument specifies too large array"
msgstr ""


#: R/apply.R: 0
#. R/apply.R: stop("'dim(X)' value must have a positive length")

msgid "'dim(X)' value must have a positive length"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: warning("'drop' argument will be ignored")

msgid "'drop' argument will be ignored"
msgstr ""


#: R/source.R: 0
#. R/source.R: gettextf("'encoding = \"%s\"' chosen", encoding, domain = "R-base")

msgid "'encoding = \"%s\"' chosen"
msgstr ""


#: R/source.R: 0
#. R/source.R: gettext("'envir' chosen:", domain = "R-base")

msgid "'envir' chosen:"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("'exportClassPattern' specified in 'NAMESPACE' file but no matching classes in package %s",     sQuote(package))

msgid "'exportClassPattern' specified in 'NAMESPACE' file but no matching classes in package %s"
msgstr ""


#: R/sink.R: 0
#. R/sink.R: stop("'file' must be NULL or an already open connection")

msgid "'file' must be NULL or an already open connection"
msgstr ""


#: R/sink.R: 0
#. R/sink.R: stop("'file' must be NULL, a connection or a character string")

msgid "'file' must be NULL, a connection or a character string"
msgstr ""


#: R/scan.R: 0
#. R/scan.R: stop("'file' must be a character string or connection")

msgid "'file' must be a character string or connection"
msgstr ""


#: R/format.R: 0
#. R/format.R: stop("'flag' argument can contain only '0+- #'")

msgid "'flag' argument can contain only '0+- #'"
msgstr ""


#: R/format.R: 0
#. R/format.R: stop("'format' argument must be one of {\"f\",\"e\",\"E\",\"g\",\"G\",\"fg\",\"s\"}")

msgid "'format' argument must be one of {\"f\",\"e\",\"E\",\"g\",\"G\",\"fg\",\"s\"}"
msgstr ""


#: R/connections.R: 0
#. R/connections.R: stop("'from' argument must be raw or character")

msgid "'from' argument must be raw or character"
msgstr ""


#: R/New-Internal.R: 0
#. R/New-Internal.R: stop("'iconvlist()' function is not available on this system")
#. R/New-Internal.R: stop("'iconvlist()' function is not available on this system")

msgid "'iconvlist()' function is not available on this system"
msgstr ""


#: R/merge.R: 0
#. R/merge.R: stop("'incomparables' argument is supported only for merging on a single column")

msgid "'incomparables' argument is supported only for merging on a single column"
msgstr ""


#: R/all.equal.R: 0
#. R/all.equal.R: gettextf("'is.NA' value mismatch: %d in 'current' argument, %d in 'target' argument",     sum(is.na(current)), sum(out))
#. R/all.equal.R: gettextf("'is.NA' value mismatch: %d in 'current' argument, %d in 'target' argument",     sum(nasc), sum(nas))
#. R/all.equal.R: gettextf("'is.NA' value mismatch: %d in 'current' argument, %d in 'target' argument",     sum(nasc), sum(nas))

msgid "'is.NA' value mismatch: %d in 'current' argument, %d in 'target' argument"
msgstr ""


#: R/dates.R: 0
#: R/datetime.R: 0
#: R/diff.R: 0
#. R/dates.R: stop("'lag' and 'differences' arguments must be integers >= 1")
#. R/datetime.R: stop("'lag' and 'differences' arguments must be integers >= 1")
#. R/diff.R: stop("'lag' and 'differences' arguments must be integers >= 1")

msgid "'lag' and 'differences' arguments must be integers >= 1"
msgstr ""


#: R/sweep.R: 0
#. R/sweep.R: warning("'length(STATS)' or 'dim(STATS)' do not match 'dim(x)[MARGIN]'")

msgid "'length(STATS)' or 'dim(STATS)' do not match 'dim(x)[MARGIN]'"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("'library()' function failed with error: %s", sQuote(msg), domain = "R-base")

msgid "'library()' function failed with error: %s"
msgstr ""


#: R/source.R: 0
#. R/source.R: stop("'local' argument must be TRUE, FALSE or an environment")

msgid "'local' argument must be TRUE, FALSE or an environment"
msgstr ""


#: R/sort.R: 0
#. R/sort.R: stop("'method = \"quick\"' option is only for numeric 'x'")

msgid "'method = \"quick\"' option is only for numeric 'x'"
msgstr ""


#: R/sort.R: 0
#. R/sort.R: stop("'method = \"radix\"' option is only for integer 'x'")

msgid "'method = \"radix\"' option is only for integer 'x'"
msgstr ""


#: R/format.R: 0
#. R/format.R: stop("'mode' argument must be \"double\" (\"real\"), \"integer\" or \"character\"")

msgid "'mode' argument must be \"double\" (\"real\"), \"integer\" or \"character\""
msgstr ""


#: R/diag.R: 0
#. R/diag.R: stop("'nrow' or 'ncol' cannot be specified when 'x' is a matrix")

msgid "'nrow' or 'ncol' cannot be specified when 'x' is a matrix"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: stop("'ns' argument is not a namespace")

msgid "'ns' argument is not a namespace"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: stop("'options(\"stringsAsFactors\")' is not set to TRUE or FALSE")

msgid "'options(\"stringsAsFactors\")' is not set to TRUE or FALSE"
msgstr ""


#: R/connections.R: 0
#. R/connections.R: stop("'origin' argument must be one of 'start', 'current' or 'end'")

msgid "'origin' argument must be one of 'start', 'current' or 'end'"
msgstr ""


#: R/qr.R: 0
#. R/qr.R: stop("'qr' and 'y' arguments must have the same number of rows")
#. R/qr.R: stop("'qr' and 'y' arguments must have the same number of rows")
#. R/qr.R: stop("'qr' and 'y' arguments must have the same number of rows")
#. R/qr.R: stop("'qr' and 'y' arguments must have the same number of rows")
#. R/qr.R: stop("'qr' and 'y' arguments must have the same number of rows")

msgid "'qr' and 'y' arguments must have the same number of rows"
msgstr ""


#: R/qr.R: 0
#. R/qr.R: stop("'qr()' function is not implemented for complex 'qr' argument")
#. R/qr.R: stop("'qr()' function is not implemented for complex 'qr' argument")

msgid "'qr()' function is not implemented for complex 'qr' argument"
msgstr ""


#: R/qr.R: 0
#. R/qr.R: stop("'qr()' function is not supported for LAPACK QR")
#. R/qr.R: stop("'qr()' function is not supported for LAPACK QR")

msgid "'qr()' function is not supported for LAPACK QR"
msgstr ""


#: R/files.R: 0
#. R/files.R: warning("'recursive' argument will be ignored as 'to' argument is not a single existing directory")

msgid "'recursive' argument will be ignored as 'to' argument is not a single existing directory"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: stop("'row.names' argument should specify one of the variables")

msgid "'row.names' argument should specify one of the variables"
msgstr ""


#: R/solve.R: 0
#. R/solve.R: warning("'solve.default()' function called with an object of class \"qr\": use 'qr.solve()' function")

msgid "'solve.default()' function called with an object of class \"qr\": use 'qr.solve()' function"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: stop("'summary()' function is only defined on a data frame with all numeric variables")

msgid "'summary()' function is only defined on a data frame with all numeric variables"
msgstr ""


#: R/all.equal.R: 0
#. R/all.equal.R: gettextf("'target' and 'current' arguments differ in having response: %s, %s", length(target) ==     3L, length(current) == 3L)

msgid "'target' and 'current' arguments differ in having response: %s, %s"
msgstr ""


#: R/all.equal.R: 0
#. R/all.equal.R: gettext("'target' and 'current' arguments do not match when deparsed")

msgid "'target' and 'current' arguments do not match when deparsed"
msgstr ""


#: R/all.equal.R: 0
#. R/all.equal.R: gettext("'target' argument is a subset of 'current' argument")

msgid "'target' argument is a subset of 'current' argument"
msgstr ""


#: R/all.equal.R: 0
#. R/all.equal.R: gettextf("'target' argument's class is %s, 'current' argument's class is %s", data.class(target),     data.class(current))
#. R/all.equal.R: gettextf("'target' argument's class is %s, 'current' argument's class is %s", data.class(target),     data.class(current))
#. R/all.equal.R: gettextf("'target' argument's class is %s, 'current' argument's class is %s", data.class(target),     data.class(current))
#. R/all.equal.R: gettextf("'target' argument's class is %s, 'current' argument's class is %s", data.class(target),     data.class(current))

msgid "'target' argument's class is %s, 'current' argument's class is %s"
msgstr ""


#: R/all.equal.R: 0
#. R/all.equal.R: gettext("'target' argument's class is not list-like")

msgid "'target' argument's class is not list-like"
msgstr ""


#: R/datetime.R: 0
#. R/datetime.R: stop("'tim' argument is not character or numeric")

msgid "'tim' argument is not character or numeric"
msgstr ""


#: R/connections.R: 0
#. R/connections.R: stop("'timeout' argument must be NULL or a non-negative number")

msgid "'timeout' argument must be NULL or a non-negative number"
msgstr ""


#: R/connections.R: 0
#. R/connections.R: stop("'truncate.connection()' function can only truncate an open connection")

msgid "'truncate.connection()' function can only truncate an open connection"
msgstr ""


#: R/datetime.R: 0
#. R/datetime.R: warning("'tzone' attributes are inconsistent")

msgid "'tzone' attributes are inconsistent"
msgstr ""


#: R/findInt.R: 0
#. R/findInt.R: stop("'vec' argument contains NA values")

msgid "'vec' argument contains NA values"
msgstr ""


#: R/findInt.R: 0
#. R/findInt.R: stop("'vec' argument must be sorted non-decreasingly")

msgid "'vec' argument must be sorted non-decreasingly"
msgstr ""


#: R/library.R: 0
#. R/library.R: message("'verbose' and 'quietly' arguments are both true; being verbose then ..")

msgid "'verbose' and 'quietly' arguments are both true; being verbose then .."
msgstr ""


#: R/source.R: 0
#. R/source.R: warning("'verbose' argument is TRUE, 'echo' argument is not; ... coercing 'echo <- TRUE'")

msgid "'verbose' argument is TRUE, 'echo' argument is not; ... coercing 'echo <- TRUE'"
msgstr ""


#: R/unix/system.unix.R: 0
#. R/unix/system.unix.R: warning("'which' command was not found on this platform")

msgid "'which' command was not found on this platform"
msgstr ""


#: R/connections.R: 0
#. R/connections.R: stop("'writeChar()' can only write character objects")

msgid "'writeChar()' can only write character objects"
msgstr ""


#: R/rowsum.R: 0
#. R/rowsum.R: stop("'x' argument is not a data frame")

msgid "'x' argument is not a data frame"
msgstr ""


#: R/colSums.R: 0
#. R/colSums.R: stop("'x' argument must be an array of at least two dimensions")
#. R/colSums.R: stop("'x' argument must be an array of at least two dimensions")
#. R/colSums.R: stop("'x' argument must be an array of at least two dimensions")
#. R/colSums.R: stop("'x' argument must be an array of at least two dimensions")

msgid "'x' argument must be an array of at least two dimensions"
msgstr ""


#: R/sort.R: 0
#. R/sort.R: stop("'x' argument must be atomic for 'sort.list()' function.\nHave you called 'sort()' function on a list?")

msgid "'x' argument must be atomic for 'sort.list()' function.\nHave you called 'sort()' function on a list?"
msgstr ""


#: R/summary.R: 0
#. R/summary.R: gettext("(Other)")

msgid "(Other)"
msgstr ""


#: R/methodsSupport.R: 0
#. R/methodsSupport.R: message("(loaded the methods namespace)", domain = "R-base")

msgid "(loaded the methods namespace)"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettext(" ** No title available ** ")

msgid "** No title available **"
msgstr ""


#: R/attach.R: 0
#. R/attach.R: warning("*** 'pos=1' is not possible; setting 'pos=2' for now.", "\n", "*** Note that 'pos=1' will give an error in the future",     sep = "")

msgid "*** 'pos=1' is not possible; setting 'pos=2' for now."
msgstr ""


#: R/attach.R: 0
#. R/attach.R: warning("*** 'pos=1' is not possible; setting 'pos=2' for now.", "\n", "*** Note that 'pos=1' will give an error in the future",     sep = "")

msgid "*** Note that 'pos=1' will give an error in the future"
msgstr ""


#: R/../../../../share/R/REMOVE.R: 0
#. R/../../../../share/R/REMOVE.R: stop("-l option without value", call. = FALSE)

msgid "-l option without value"
msgstr ""


#: R/summary.R: 0
#. R/summary.R: gettext("1st Qu.")
#. R/summary.R: gettext("1st Qu.")
#. R/summary.R: gettext("1st Qu.")
#. R/summary.R: gettext("1st Qu.")
#. R/summary.R: gettext("1st Qu.")
#. R/summary.R: gettext("1st Qu.")

msgid "1st Qu."
msgstr ""


#: R/summary.R: 0
#. R/summary.R: gettext("3rd Qu.")
#. R/summary.R: gettext("3rd Qu.")
#. R/summary.R: gettext("3rd Qu.")
#. R/summary.R: gettext("3rd Qu.")
#. R/summary.R: gettext("3rd Qu.")
#. R/summary.R: gettext("3rd Qu.")

msgid "3rd Qu."
msgstr ""


#: R/table.R: 0
#. R/table.R: gettextf("< table of extent %s>", paste(d, collapse = " x "), domain = "R-base")

msgid "< table of extent %s>"
msgstr ""


#: R/version.R: 0
#. R/version.R: gettext("<0 elements>")

msgid "<0 elements>"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: gettext("<0 rows> (or 0-length row.names)", domain = "R-base")

msgid "<0 rows> (or 0-length row.names)"
msgstr ""


#: R/conditions.R: 0
#. R/conditions.R: gettextf("<restart: %s>", x[[1L]], domain = "R-base")

msgid "<restart: %s>"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("\nAttaching package: %s\n", sQuote(package))

msgid "Attaching package: %s"
msgstr ""


#: R/load.R: 0
#. R/load.R: gettextf("Attempting to load the environment %s", sQuote(info))

msgid "Attempting to load the environment %s"
msgstr ""


#: R/all.equal.R: 0
#. R/all.equal.R: gettext("Attributes:", domain = "R-base")

msgid "Attributes:"
msgstr ""


#: R/table.R: 0
#. R/table.R: gettext("Call: ", domain = "R-base")

msgid "Call:"
msgstr ""


#: R/table.R: 0
#. R/table.R: gettext("Chi-squared approximation may be incorrect", domain = "R-base")

msgid "Chi-squared approximation may be incorrect"
msgstr ""


#: R/table.R: 0
#. R/table.R: gettextf("Chisq = %s, df = %s, p-value = %s", format(round(ch, max(0, digits - log10(ch)))),     x$parameter, format.pval(x$p.value, digits, eps = 0), domain = "R-base")

msgid "Chisq = %s, df = %s, p-value = %s"
msgstr ""


#: R/summary.R: 0
#. R/summary.R: gettext("Class", domain = "R-base")
#. R/summary.R: gettext("Class")

msgid "Class"
msgstr ""


#: R/all.equal.R: 0
#. R/all.equal.R: gettextf("Complex: lengths (%d, %d) differ", lt, lc)

msgid "Complex: lengths (%d, %d) differ"
msgstr ""


#: R/print.R: 0
#. R/print.R: gettextf("Component %d", seq.int(ll), domain = "R-base")

msgid "Component %d"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("DLL %s is already loaded", sQuote(chname1))

msgid "DLL %s is already loaded"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("DLL %s was not found", sQuote(chname1))

msgid "DLL %s was not found"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("DLL %s was not found: maybe not installed for this architecture?", sQuote(chname))

msgid "DLL %s was not found: maybe not installed for this architecture?"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("DLL %s was not loaded", sQuote(chname1))

msgid "DLL %s was not loaded"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettext("Description:")

msgid "Description:"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("Documentation for package %s", sQuote(x$name), domain = "R-base")

msgid "Documentation for package %s"
msgstr ""


#: R/../../../../share/R/REMOVE.R: 0
#. R/../../../../share/R/REMOVE.R: gettextf("ERROR: cannot cd to directory %s", sQuote(lib))

msgid "ERROR: cannot cd to directory %s"
msgstr ""


#: R/../../../../share/R/REMOVE.R: 0
#. R/../../../../share/R/REMOVE.R: stop("ERROR: no packages specified", domain = "R-base", call. = FALSE)

msgid "ERROR: no packages specified"
msgstr ""


#: R/../../../../share/R/REMOVE.R: 0
#. R/../../../../share/R/REMOVE.R: gettextf("ERROR: no permission to remove from directory %s", sQuote(lib))

msgid "ERROR: no permission to remove from directory %s"
msgstr ""


#: R/srcfile.R: 0
#. R/srcfile.R: gettextf("Encoding: %s", dQuote(object$encoding), domain = "R-base")

msgid "Encoding: %s"
msgstr ""


#: R/srcfile.R: 0
#. R/srcfile.R: gettextf("Encoding: %s, re-encoded to %s", dQuote(object$encoding), dQuote(object$Enc),     domain = "R-base")

msgid "Encoding: %s, re-encoded to %s"
msgstr ""


#: R/conditions.R: 0
#. R/conditions.R: gettext("Enter values for restart arguments:", domain = "R-base")

msgid "Enter values for restart arguments:"
msgstr ""


#: R/New-Internal.R: 0
#: R/conditions.R: 0
#. R/New-Internal.R: gettextf("Error in command '%s': ", paste(dcall, collapse = ""), domain = "R-base")
#. R/conditions.R: gettextf("Error in command '%s':", deparse(call)[1L], domain = "R-base")

msgid "Error in command '%s':"
msgstr ""


#: R/New-Internal.R: 0
#: R/conditions.R: 0
#. R/New-Internal.R: gettext("Error: ")
#. R/conditions.R: gettext("Error:", domain = "R-base")

msgid "Error:"
msgstr ""


#: R/../../../../share/R/examples-header.R: 0
#. R/../../../../share/R/examples-header.R: stop("F used instead of FALSE", domain = "R-base")

msgid "F used instead of FALSE"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("Failed with error:  %s", sQuote(conditionMessage(value)), domain = "R-base")

msgid "Failed with error:  %s"
msgstr ""


#: R/Defunct.R: 0
#. R/Defunct.R: gettextf("Function %s is defunct.\n", sQuote(as.character(sys.call(sys.parent())[[1L]])))

msgid "Function %s is defunct."
msgstr ""


#: R/Defunct.R: 0
#. R/Defunct.R: gettextf("Function %s is defunct.\nUse function %s instead.\n", sQuote(as.character(sys.call(sys.parent())[[1L]])),     sQuote(new))

msgid "Function %s is defunct.\nUse function %s instead."
msgstr ""


#: R/Deprecated.R: 0
#. R/Deprecated.R: gettextf("Function %s is deprecated.\n", sQuote(old))

msgid "Function %s is deprecated."
msgstr ""


#: R/Deprecated.R: 0
#. R/Deprecated.R: gettextf("Function %s is deprecated.\nUse function %s instead.\n", sQuote(old), sQuote(new))

msgid "Function %s is deprecated.\nUse function %s instead."
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("Further information is available in the following vignettes in directory %s:",     sQuote(file.path(x$path, "doc")))

msgid "Further information is available in the following vignettes in directory %s:"
msgstr ""


#: R/warnings.R: 0
#. R/warnings.R: gettextf("In command %s", sQuote(temp[1L]), domain = "R-base")

msgid "In command %s"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettext("Index:")

msgid "Index:"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("Information on package %s", sQuote(x$name), domain = "R-base")

msgid "Information on package %s"
msgstr ""


#: R/dcf.R: 0
#. R/dcf.R: gettextf("Invalid DCF format.\nContinuation lines must not start a record.\nOffending lines start with:\n%s",     paste0("  ", lines, collapse = "\n"))

msgid "Invalid DCF format.\nContinuation lines must not start a record.\nOffending lines start with:\n%s"
msgstr ""


#: R/dcf.R: 0
#. R/dcf.R: gettextf("Invalid DCF format.\nRegular lines must have a tag.\nOffending lines start with:\n%s",     paste0("  ", lines, collapse = "\n"))

msgid "Invalid DCF format.\nRegular lines must have a tag.\nOffending lines start with:\n%s"
msgstr ""


#: R/summary.R: 0
#. R/summary.R: gettext("Length", domain = "R-base")
#. R/summary.R: gettext("Length")

msgid "Length"
msgstr ""


#: R/all.equal.R: 0
#. R/all.equal.R: gettextf("Length mismatch: comparison on first %d components", n)

msgid "Length mismatch: comparison on first %d components"
msgstr ""


#: R/all.equal.R: 0
#. R/all.equal.R: gettextf("Lengths (%d, %d) differ (comparison on first %d components)", lt, lc, ll <- min(lt,     lc))

msgid "Lengths (%d, %d) differ (comparison on first %d components)"
msgstr ""


#: R/all.equal.R: 0
#. R/all.equal.R: gettextf("Lengths (%d, %d) differ (string compare on first %d)", lt, lc, ll <- min(lt,     lc))

msgid "Lengths (%d, %d) differ (string compare on first %d)"
msgstr ""


#: R/all.equal.R: 0
#. R/all.equal.R: gettext("Lengths: ", domain = "R-base")

msgid "Lengths:"
msgstr ""


#: R/factor.R: 0
#. R/factor.R: gettext("Levels: ", domain = "R-base")

msgid "Levels:"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("License for %s", sQuote(pkg))

msgid "License for %s"
msgstr ""


#: R/load.R: 0
#. R/load.R: gettext("Loading objects:", domain = "R-base")

msgid "Loading objects:"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("Loading required namespace: %s", sQuote(package), domain = "R-base")

msgid "Loading required namespace: %s"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("Loading required package: %s", sQuote(package), domain = "R-base")
#. R/library.R: gettextf("Loading required package: %s", sQuote(pkg), domain = "R-base")

msgid "Loading required package: %s"
msgstr ""


#: R/duplicated.R: 0
#. R/duplicated.R: gettextf("MARGIN = %d is invalid for dim = %d", MARGIN, dx)
#. R/duplicated.R: gettextf("MARGIN = %d is invalid for dim = %d", MARGIN, dx)
#. R/duplicated.R: gettextf("MARGIN = %d is invalid for dim = %d", MARGIN, dx)

msgid "MARGIN = %d is invalid for dim = %d"
msgstr ""


#: R/summary.R: 0
#. R/summary.R: gettext("Max.")
#. R/summary.R: gettext("Max.")
#. R/summary.R: gettext("Max.")
#. R/summary.R: gettext("Max.")
#. R/summary.R: gettext("Max.")
#. R/summary.R: gettext("Max.")

msgid "Max."
msgstr ""


#: R/summary.R: 0
#. R/summary.R: gettext("Mean")
#. R/summary.R: gettext("Mean")
#. R/summary.R: gettext("Mean")
#. R/summary.R: gettext("Mean")
#. R/summary.R: gettext("Mean")
#. R/summary.R: gettext("Mean")

msgid "Mean"
msgstr ""


#: R/all.equal.R: 0
#. R/all.equal.R: gettext("Mean absolute Mod difference:", domain = "R-base")
#. R/all.equal.R: gettext("Mean absolute Mod difference:", domain = "R-base")

msgid "Mean absolute Mod difference:"
msgstr ""


#: R/all.equal.R: 0
#. R/all.equal.R: gettext("Mean absolute difference:", domain = "R-base")
#. R/all.equal.R: gettext("Mean absolute difference:", domain = "R-base")

msgid "Mean absolute difference:"
msgstr ""


#: R/all.equal.R: 0
#. R/all.equal.R: gettext("Mean relative Mod difference:", domain = "R-base")

msgid "Mean relative Mod difference:"
msgstr ""


#: R/all.equal.R: 0
#. R/all.equal.R: gettext("Mean relative difference:", domain = "R-base")

msgid "Mean relative difference:"
msgstr ""


#: R/all.equal.R: 0
#. R/all.equal.R: gettext("Mean scaled Mod difference:", domain = "R-base")

msgid "Mean scaled Mod difference:"
msgstr ""


#: R/all.equal.R: 0
#. R/all.equal.R: gettext("Mean scaled difference:", domain = "R-base")

msgid "Mean scaled difference:"
msgstr ""


#: R/summary.R: 0
#. R/summary.R: gettext("Median")
#. R/summary.R: gettext("Median")
#. R/summary.R: gettext("Median")
#. R/summary.R: gettext("Median")
#. R/summary.R: gettext("Median")
#. R/summary.R: gettext("Median")

msgid "Median"
msgstr ""


#: R/summary.R: 0
#. R/summary.R: gettext("Min.")
#. R/summary.R: gettext("Min.")
#. R/summary.R: gettext("Min.")
#. R/summary.R: gettext("Min.")
#. R/summary.R: gettext("Min.")
#. R/summary.R: gettext("Min.")

msgid "Min."
msgstr ""


#: R/summary.R: 0
#. R/summary.R: gettext("Mode", domain = "R-base")
#. R/summary.R: gettext("Mode")

msgid "Mode"
msgstr ""


#: R/all.equal.R: 0
#. R/all.equal.R: gettext("Modes of 'target' and 'current' arguments: ", domain = "R-base")

msgid "Modes of 'target' and 'current' arguments:"
msgstr ""


#: R/all.equal.R: 0
#. R/all.equal.R: gettext("Modes: ", domain = "R-base")

msgid "Modes:"
msgstr ""


#: R/summary.R: 0
#. R/summary.R: gettext("NA's")
#. R/summary.R: gettext("NA's")
#. R/summary.R: gettext("NA's")
#. R/summary.R: gettext("NA's")
#. R/summary.R: gettext("NA's")
#. R/summary.R: gettext("NA's")
#. R/summary.R: gettext("NA's")
#. R/summary.R: gettext("NA's")
#. R/summary.R: gettext("NA's")

msgid "NA's"
msgstr ""


#: R/all.equal.R: 0
#. R/all.equal.R: gettext("Names:", domain = "R-base")

msgid "Names:"
msgstr ""


#: R/dynload.R: 0
#. R/dynload.R: gettextf("No DLL currently loaded with name or path %s", sQuote(dll))

msgid "No DLL currently loaded with name or path %s"
msgstr ""


#: R/interaction.R: 0
#. R/interaction.R: stop("No factors specified")

msgid "No factors specified"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("No generic function was found corresponding to requested imported methods for function %s from package %s (malformed exports?)",     sQuote(g), sQuote(pkg))

msgid "No generic function was found corresponding to requested imported methods for function %s from package %s (malformed exports?)"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("No methods were found in package %s for requests: %s", sQuote(pkg), paste(vars[is.na(match(vars,     allFuns))], collapse = ", "))

msgid "No methods were found in package %s for requests: %s"
msgstr ""


#: R/traceback.R: 0
#. R/traceback.R: gettext("No traceback available", domain = "R-base")

msgid "No traceback available"
msgstr ""


#: R/table.R: 0
#. R/table.R: gettext("Number of cases in table: ", domain = "R-base")

msgid "Number of cases in table:"
msgstr ""


#: R/table.R: 0
#. R/table.R: gettext("Number of factors: ", domain = "R-base")

msgid "Number of factors:"
msgstr ""


#: R/all.equal.R: 0
#. R/all.equal.R: gettextf("Numeric: lengths (%d, %d) differ", lt, lc)

msgid "Numeric: lengths (%d, %d) differ"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: gettextf("Partial match of '%s' to '%s' in data frame", name, names[pmatch(name,     names)])

msgid "Partial match of '%s' to '%s' in data frame"
msgstr ""


#: R/files.R: 0
#. R/files.R: gettext("R Information", domain = "R-base")

msgid "R Information"
msgstr ""


#: R/contributors.R: 0
#. R/contributors.R: gettext("R is a project which is attempting to provide a modern piece of\nstatistical software for the GNU suite of software.\n\nThe current R is the result of a collaborative effort with\ncontributions from all over the world.",     domain = "R-base")

msgid "R is a project which is attempting to provide a modern piece of\nstatistical software for the GNU suite of software.\n\nThe current R is the result of a collaborative effort with\ncontributions from all over the world."
msgstr ""


#: R/library.R: 0
#. R/library.R: gettext("R packages available")

msgid "R packages available"
msgstr ""


#: R/taskCallback.R: 0
#. R/taskCallback.R: gettext("Registering 'evaluate' as low-level callback", domain = "R-base")

msgid "Registering 'evaluate' as low-level callback"
msgstr ""


#: R/taskCallback.R: 0
#. R/taskCallback.R: gettextf("Removing %s", paste(discard, collapse = ", "), domain = "R-base")

msgid "Removing %s"
msgstr ""


#: R/../../../../share/R/REMOVE.R: 0
#. R/../../../../share/R/REMOVE.R: gettextf("Removing from library %s", sQuote(lib))

msgid "Removing from library %s"
msgstr ""


#: R/rle.R: 0
#. R/rle.R: gettext("Run Length Encoding", domain = "R-base")

msgid "Run Length Encoding"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("S3 method %s was declared but was not found", sQuote(method))

msgid "S3 method %s was declared but was not found"
msgstr ""


#: R/Defunct.R: 0
#. R/Defunct.R: gettext("See help(\"Defunct\")")

msgid "See help(\"Defunct\")"
msgstr ""


#: R/Defunct.R: 0
#. R/Defunct.R: gettextf("See help(\"Defunct\") and help(\"%s-defunct\").", package)

msgid "See help(\"Defunct\") and help(\"%s-defunct\")."
msgstr ""


#: R/Deprecated.R: 0
#. R/Deprecated.R: gettext("See help(\"Deprecated\")")

msgid "See help(\"Deprecated\")"
msgstr ""


#: R/Deprecated.R: 0
#. R/Deprecated.R: gettextf("See help(\"Deprecated\") and help(\"%s-deprecated\").", package)

msgid "See help(\"Deprecated\") and help(\"%s-deprecated\")."
msgstr ""


#: R/load.R: 0
#. R/load.R: message("Specified environment not found: using '.GlobalEnv' instead")

msgid "Specified environment not found: using '.GlobalEnv' instead"
msgstr ""


#: R/../../../../share/R/examples-header.R: 0
#. R/../../../../share/R/examples-header.R: stop("T used instead of TRUE", domain = "R-base")

msgid "T used instead of TRUE"
msgstr ""


#: R/table.R: 0
#. R/table.R: gettext("Test for independence of all factors:", domain = "R-base")

msgid "Test for independence of all factors:"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("This is R %s, package %s needs %s %s", current, sQuote(pkgname), dep$op,     target)

msgid "This is R %s, package %s needs %s %s"
msgstr ""


#: R/datetime.R: 0
#. R/datetime.R: gettextf("Time difference of %s days", format(unclass(x), digits = digits), domain = "R-base")

msgid "Time difference of %s days"
msgstr ""


#: R/datetime.R: 0
#. R/datetime.R: gettextf("Time difference of %s hours", format(unclass(x), digits = digits), domain = "R-base")

msgid "Time difference of %s hours"
msgstr ""


#: R/datetime.R: 0
#. R/datetime.R: gettextf("Time difference of %s minutes", format(unclass(x), digits = digits), domain = "R-base")

msgid "Time difference of %s minutes"
msgstr ""


#: R/datetime.R: 0
#. R/datetime.R: gettextf("Time difference of %s seconds", format(unclass(x), digits = digits), domain = "R-base")

msgid "Time difference of %s seconds"
msgstr ""


#: R/datetime.R: 0
#. R/datetime.R: gettextf("Time difference of %s weeks", format(unclass(x), digits = digits), domain = "R-base")

msgid "Time difference of %s weeks"
msgstr ""


#: R/datetime.R: 0
#. R/datetime.R: gettext("Time differences in days", domain = "R-base")

msgid "Time differences in days"
msgstr ""


#: R/datetime.R: 0
#. R/datetime.R: gettext("Time differences in hours", domain = "R-base")

msgid "Time differences in hours"
msgstr ""


#: R/datetime.R: 0
#. R/datetime.R: gettext("Time differences in minutes", domain = "R-base")

msgid "Time differences in minutes"
msgstr ""


#: R/datetime.R: 0
#. R/datetime.R: gettext("Time differences in seconds", domain = "R-base")

msgid "Time differences in seconds"
msgstr ""


#: R/datetime.R: 0
#. R/datetime.R: gettext("Time differences in weeks", domain = "R-base")

msgid "Time differences in weeks"
msgstr ""


#: R/../../../../share/R/examples-footer.R: 0
#. R/../../../../share/R/examples-footer.R: gettext("Time elapsed: ", domain = "R-base")

msgid "Time elapsed:"
msgstr ""


#: R/srcfile.R: 0
#. R/srcfile.R: gettextf("Timestamp of %s has changed", sQuote(srcfile$filename))

msgid "Timestamp of %s has changed"
msgstr ""


#: R/srcfile.R: 0
#. R/srcfile.R: gettextf("Timestamp: %s", format(object$timestamp, usetz = TRUE), domain = "R-base")

msgid "Timestamp: %s"
msgstr ""


#: R/time.R: 0
#. R/time.R: gettextf("Timing stopped at: %s", ppt(proc.time() - time), domain = "R-base")

msgid "Timing stopped at: %s"
msgstr ""


#: R/methodsSupport.R: 0
#. R/methodsSupport.R: gettextf("Tracing %s %s", call, msg, domain = "R-base")

msgid "Tracing %s %s"
msgstr ""


#: R/load.R: 0
#. R/load.R: warning(gettextf("file %s has magic number '%s'", sQuote(basename(file)), mn), "\n  ",     "Use of save versions prior to 2 is deprecated", sep = "", domain = "R-base",     call. = FALSE)
#. R/load.R: warning("Use of save versions prior to 2 is deprecated", domain = "R-base")

msgid "Use of save versions prior to 2 is deprecated"
msgstr ""


#: R/load.R: 0
#. R/load.R: message("[Previously saved workspace restored]", "\n", sep = "")

msgid "[Previously saved workspace restored]"
msgstr ""


#: R/source.R: 0
#. R/source.R: gettext("[TRUNCATED] ", domain = "R-base")

msgid "[TRUNCATED]"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettext("accept")

msgid "accept"
msgstr ""


#: R/message.R: 0
#: R/stop.R: 0
#: R/stop.R: 0
#. R/message.R: gettextf("additional arguments ignored in '%s' function", "message()")
#. R/stop.R: gettextf("additional arguments ignored in '%s' function", "stop()")
#. R/stop.R: gettextf("additional arguments ignored in '%s' function", "warning()", domain = "R-base")

msgid "additional arguments ignored in '%s' function"
msgstr ""


#: R/getenv.R: 0
#. R/getenv.R: stop("all arguments must be named")

msgid "all arguments must be named"
msgstr ""


#: R/table.R: 0
#. R/table.R: stop("all arguments must have the same length")

msgid "all arguments must have the same length"
msgstr ""


#: R/pmax.R: 0
#. R/pmax.R: warning("an argument will be fractionally recycled")
#. R/pmax.R: warning("an argument will be fractionally recycled")
#. R/pmax.R: warning("an argument will be fractionally recycled")
#. R/pmax.R: warning("an argument will be fractionally recycled")

msgid "an argument will be fractionally recycled"
msgstr ""


#: R/autoload.R: 0
#. R/autoload.R: stop("an object with that name already exists")

msgid "an object with that name already exists"
msgstr ""


#: R/connections.R: 0
#. R/connections.R: stop("argument 'object' must deparse to a single character string")

msgid "argument 'object' must deparse to a single character string"
msgstr ""


#: R/sort.R: 0
#. R/sort.R: stop("argument lengths differ")

msgid "argument lengths differ"
msgstr ""


#: R/LAPACK.R: 0
#. R/LAPACK.R: stop("argument passed to 'La.svd()' function must be logical, numeric or complex")

msgid "argument passed to 'La.svd()' function must be logical, numeric or complex"
msgstr ""


#: R/unix/system.unix.R: 0
#. R/unix/system.unix.R: message("arguments 'minimized' and 'invisible' are for Windows only")

msgid "arguments 'minimized' and 'invisible' are for Windows only"
msgstr ""


#: R/unix/system.unix.R: 0
#. R/unix/system.unix.R: message("arguments 'show.output.on.console', 'minimized' and 'invisible' are for Windows only")

msgid "arguments 'show.output.on.console', 'minimized' and 'invisible' are for Windows only"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: gettextf("arguments imply differing number of rows: %s", paste(unique(nrows), collapse = ", "))

msgid "arguments imply differing number of rows: %s"
msgstr ""


#: R/tapply.R: 0
#. R/tapply.R: stop("arguments must have same length")

msgid "arguments must have same length"
msgstr ""


#: R/LAPACK.R: 0
#: R/svd.R: 0
#. R/LAPACK.R: gettextf("at least one dimension of '%s' argument is 0", "x")
#. R/svd.R: gettextf("at least one dimension of '%s' argument is 0", "x")

msgid "at least one dimension of '%s' argument is 0"
msgstr ""


#: R/files.R: 0
#. R/files.R: stop("attempt to copy a directory to itself")

msgid "attempt to copy a directory to itself"
msgstr ""


#: R/table.R: 0
#: R/tabulate.R: 0
#. R/table.R: stop("attempt to make a table with >= 2^31 elements")
#. R/tabulate.R: stop("attempt to make a table with >= 2^31 elements")

msgid "attempt to make a table with >= 2^31 elements"
msgstr ""


#: R/matrix.R: 0
#. R/matrix.R: stop("attempt to set 'colnames' on an object with less than two dimensions")
#. R/matrix.R: stop("attempt to set 'colnames' on an object with less than two dimensions")

msgid "attempt to set 'colnames' on an object with less than two dimensions"
msgstr ""


#: R/matrix.R: 0
#. R/matrix.R: stop("attempt to set 'rownames' on an object with no dimensions")
#. R/matrix.R: stop("attempt to set 'rownames' on an object with no dimensions")

msgid "attempt to set 'rownames' on an object with no dimensions"
msgstr ""


#: R/autoload.R: 0
#. R/autoload.R: gettextf("autoloader did not find '%s' in package %s", name, sQuote(package), domain = "R-base")

msgid "autoloader did not find '%s' in package %s"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("bad 'S3method' directive: %s", deparse(e))

msgid "bad 'S3method' directive: %s"
msgstr ""


#: R/conditions.R: 0
#. R/conditions.R: stop("bad handler specification")
#. R/conditions.R: stop("bad handler specification")

msgid "bad handler specification"
msgstr ""


#: R/dates.R: 0
#: R/datetime.R: 0
#: R/datetime.R: 0
#: R/version.R: 0
#. R/dates.R: gettextf("binary '%s' operator is not defined for objects of class %s", "+", dQuote("Date"))
#. R/dates.R: gettextf("binary '%s' operator is not defined for objects of class %s", .Generic,     dQuote("Date"))
#. R/datetime.R: gettextf("binary '%s' operator is not defined for objects of class %s", "+", dQuote("POSIXt"))
#. R/datetime.R: gettextf("binary '%s' operator is not defined for objects of class %s", .Generic,     dQuote("POSIXt"))
#. R/version.R: gettextf("binary '%s' operator is not defined for objects of class %s", .Generic,     dQuote("numeric_version"))

msgid "binary '%s' operator is not defined for objects of class %s"
msgstr ""


#: R/datetime.R: 0
#. R/datetime.R: gettextf("both arguments of '%s' operator cannot be objects of class %s", "*", dQuote("difftime"))

msgid "both arguments of '%s' operator cannot be objects of class %s"
msgstr ""


#: R/RNG.R: 0
#. R/RNG.R: stop("buggy version of Kinderman-Ramage generator is not allowed", domain = "R-base")

msgid "buggy version of Kinderman-Ramage generator is not allowed"
msgstr ""


#: R/RNG.R: 0
#. R/RNG.R: warning("buggy version of Kinderman-Ramage generator used", domain = "R-base")

msgid "buggy version of Kinderman-Ramage generator used"
msgstr ""


#: R/load.R: 0
#. R/load.R: stop("can only save to a binary connection")

msgid "can only save to a binary connection"
msgstr ""


#: R/dates.R: 0
#: R/datetime.R: 0
#. R/dates.R: gettextf("can only subtract from objects of class %s", dQuote("date"))
#. R/datetime.R: gettextf("can only subtract from objects of class %s", dQuote("POSIXt"))

msgid "can only subtract from objects of class %s"
msgstr ""


#: R/dates.R: 0
#: R/datetime.R: 0
#. R/dates.R: gettextf("can only subtract numbers from objects of class %s", dQuote("Date"))
#. R/datetime.R: gettextf("can only subtract numbers from objects of class %s", dQuote("POSIXt"))

msgid "can only subtract numbers from objects of class %s"
msgstr ""


#: R/connections.R: 0
#. R/connections.R: stop("can only write vector objects")

msgid "can only write vector objects"
msgstr ""


#: R/source.R: 0
#. R/source.R: stop("cannot 'chdir' as current directory is unknown")
#. R/source.R: stop("cannot 'chdir' as current directory is unknown")

msgid "cannot 'chdir' as current directory is unknown"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: stop("cannot add to exports of a sealed namespace")

msgid "cannot add to exports of a sealed namespace"
msgstr ""


#: R/mode.R: 0
#. R/mode.R: stop("cannot change the storage mode of a factor")

msgid "cannot change the storage mode of a factor"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: gettextf("cannot coerce class %s to a \"data.frame\" class", dQuote(class(x)))

msgid "cannot coerce class %s to a \"data.frame\" class"
msgstr ""


#: R/table.R: 0
#. R/table.R: stop("cannot coerce to a table")
#. R/table.R: stop("cannot coerce to a table")

msgid "cannot coerce to a table"
msgstr ""


#: R/../../../../share/R/nspackloader.R: 0
#. R/../../../../share/R/nspackloader.R: gettextf("cannot find namespace environment for package %s", sQuote(pkg))

msgid "cannot find namespace environment for package %s"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: stop("cannot import into a sealed namespace")

msgid "cannot import into a sealed namespace"
msgstr ""


#: R/sink.R: 0
#. R/sink.R: stop("cannot split the message connection")

msgid "cannot split the message connection"
msgstr ""


#: R/dates.R: 0
#: R/datetime.R: 0
#. R/dates.R: stop("character string is not in a standard unambiguous format")
#. R/datetime.R: stop("character string is not in a standard unambiguous format")

msgid "character string is not in a standard unambiguous format"
msgstr ""


#: R/format.R: 0
#. R/format.R: warning("class of 'x' argument was discarded")

msgid "class of 'x' argument was discarded"
msgstr ""


#: R/format.R: 0
#. R/format.R: warning("coercing argument to an object of class \"character\" for 'format=\"s\"' option")

msgid "coercing argument to an object of class \"character\" for 'format=\"s\"' option"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: stop("column name \"\" cannot match any column")
#. R/dataframe.R: stop("column name \"\" cannot match any column")

msgid "column name \"\" cannot match any column"
msgstr ""


#: R/chol.R: 0
#. R/chol.R: stop("complex matrices not permitted at present")

msgid "complex matrices not permitted at present"
msgstr ""


#: R/format.R: 0
#. R/format.R: warning("corrupt data frame: columns will be truncated or padded with NA values")

msgid "corrupt data frame: columns will be truncated or padded with NA values"
msgstr ""


#: R/grep.R: 0
#. R/grep.R: stop("cost components must be non-negative")

msgid "cost components must be non-negative"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("cyclic namespace dependency detected when loading package %s, already loading %s",     sQuote(package), paste(sQuote(loading), collapse = ", "))

msgid "cyclic namespace dependency detected when loading package %s, already loading %s"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettext("decline")

msgid "decline"
msgstr ""


#: R/dates.R: 0
#: R/datetime.R: 0
#: R/datetime.R: 0
#. R/dates.R: gettextf("do not know how to convert %s to class %s", sQuote(deparse(substitute(x))),     dQuote("Date"))
#. R/datetime.R: gettextf("do not know how to convert %s to class %s", sQuote(deparse(substitute(x))),     dQuote("POSIXlt"))
#. R/datetime.R: gettextf("do not know how to convert %s to class %s", sQuote(deparse(substitute(x))),     dQuote("POSIXct"))

msgid "do not know how to convert %s to class %s"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("duplicate import names %s", paste(sQuote(impnames[duplicated(impnames)]),     collapse = ", "))

msgid "duplicate import names %s"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: gettextf("duplicate row.names: %s", paste(unique(row.names[duplicated(row.names)]),     collapse = ", "))
#. R/dataframe.R: gettextf("duplicate row.names: %s", paste(unique(row.names[duplicated(row.names)]),     collapse = ", "))

msgid "duplicate row.names: %s"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: stop("duplicate subscripts for columns")

msgid "duplicate subscripts for columns"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("duplicate symbol names %s in useDynLib(\"%s\")", paste(sQuote(names(symNames)[dup]),     collapse = ", "), dyl)

msgid "duplicate symbol names %s in useDynLib(\"%s\")"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: stop("duplicate values in 'row.names' are not allowed")

msgid "duplicate values in 'row.names' are not allowed"
msgstr ""


#: R/scan.R: 0
#. R/scan.R: stop("either specify 'nmax' or 'n', but not both.")

msgid "either specify 'nmax' or 'n', but not both."
msgstr ""


#: R/time.R: 0
#. R/time.R: gettext("elapsed")

msgid "elapsed"
msgstr ""


#: R/load.R: 0
#. R/load.R: stop("empty (zero-byte) input file")

msgid "empty (zero-byte) input file"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("empty name in directive %s in 'NAMESPACE' file", sQuote(as.character(e[[1L]])))

msgid "empty name in directive %s in 'NAMESPACE' file"
msgstr ""


#: R/qr.R: 0
#. R/qr.R: stop("exact singularity in 'qr.coef()' function")

msgid "exact singularity in 'qr.coef()' function"
msgstr ""


#: R/dates.R: 0
#. R/dates.R: stop("exactly two of 'to', 'by' and 'length.out' / 'along.with' arguments must be specified")

msgid "exactly two of 'to', 'by' and 'length.out' / 'along.with' arguments must be specified"
msgstr ""


#: R/datetime.R: 0
#. R/datetime.R: stop("exactly two of 'to', 'by' and 'length.out' / 'along.with' must be specified")

msgid "exactly two of 'to', 'by' and 'length.out' / 'along.with' must be specified"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("failed to assign NativeSymbolInfo for %s since %s is already defined in the %s namespace",     sQuote(origVarName), sQuote(varName), sQuote(package))

msgid "failed to assign NativeSymbolInfo for %s since %s is already defined in the %s namespace"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("failed to assign NativeSymbolInfo for %s to %s since %s is already defined in the %s namespace",     sQuote(origVarName), sQuote(varName), sQuote(varName), sQuote(package))

msgid "failed to assign NativeSymbolInfo for %s to %s since %s is already defined in the %s namespace"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("failed to assign RegisteredNativeSymbol for %s to %s since %s is already defined in the %s namespace",     sQuote(sym$name), sQuote(varName), sQuote(varName), sQuote(package))

msgid "failed to assign RegisteredNativeSymbol for %s to %s since %s is already defined in the %s namespace"
msgstr ""


#: R/windows/junctions.R: 0
#. R/windows/junctions.R: gettextf("failed to create directory for link '%s", link)

msgid "failed to create directory for link '%s"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("failed to find metadata object for %s", sQuote(mi))

msgid "failed to find metadata object for %s"
msgstr ""


#: R/windows/junctions.R: 0
#. R/windows/junctions.R: stop("fewer 'from' files than 'to' files")

msgid "fewer 'from' files than 'to' files"
msgstr ""


#: R/load.R: 0
#. R/load.R: gettextf("file %s has magic number '%s'", sQuote(basename(file)), mn)

msgid "file %s has magic number '%s'"
msgstr ""


#: R/attach.R: 0
#. R/attach.R: gettextf("file '%s' was not found", what)

msgid "file '%s' was not found"
msgstr ""


#: R/files.R: 0
#. R/files.R: stop("file can not be copied both 'from' and 'to'")

msgid "file can not be copied both 'from' and 'to'"
msgstr ""


#: R/seq.R: 0
#. R/seq.R: warning("first element used of 'length.out' argument")

msgid "first element used of 'length.out' argument"
msgstr ""


#: R/srcfile.R: 0
#. R/srcfile.R: gettext("forcing class on", domain = "R-base")

msgid "forcing class on"
msgstr ""


#: R/all.equal.R: 0
#. R/all.equal.R: gettext("formulas differ in contents")

msgid "formulas differ in contents"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("found methods to import for function %s but not the generic itself", sQuote(genName))

msgid "found methods to import for function %s but not the generic itself"
msgstr ""


#: R/match.fun.R: 0
#. R/match.fun.R: gettextf("found non-function '%s'", FUN)

msgid "found non-function '%s'"
msgstr ""


#: R/dynload.R: 0
#. R/dynload.R: stop("function is not in a namespace, so cannot locate associated DLL")

msgid "function is not in a namespace, so cannot locate associated DLL"
msgstr ""


#: R/taskCallback.R: 0
#. R/taskCallback.R: stop("handler must be a function")

msgid "handler must be a function"
msgstr ""


#: R/load.R: 0
#. R/load.R: gettextf("image could not be renamed and is left in %s", outfile)

msgid "image could not be renamed and is left in %s"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("in %s methods for export were not found: %s", sQuote(package), paste(expMethods[missingMethods],     collapse = ", "))

msgid "in %s methods for export were not found: %s"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("in package %s classes %s were specified for export but were not defined",     sQuote(package), paste(dQuote(expClasses[missingClasses]), collapse = ", "))

msgid "in package %s classes %s were specified for export but were not defined"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("in package %s methods %s were specified for export but were not defined",     sQuote(package), paste(sQuote(expMethods), collapse = ", "))

msgid "in package %s methods %s were specified for export but were not defined"
msgstr ""


#: R/rowsum.R: 0
#. R/rowsum.R: stop("incorrect length for 'group' argument")
#. R/rowsum.R: stop("incorrect length for 'group' argument")

msgid "incorrect length for 'group' argument"
msgstr ""


#: R/array.R: 0
#: R/strwrap.R: 0
#: R/strwrap.R: 0
#. R/array.R: gettextf("incorrect value for '%s' argument", "MARGIN")
#. R/strwrap.R: gettextf("incorrect value for '%s' argument", "x")
#. R/strwrap.R: gettextf("incorrect value for '%s' argument", "x")

msgid "incorrect value for '%s' argument"
msgstr ""


#: R/strwrap.R: 0
#. R/strwrap.R: stop("incorrect values of 'indent' and 'width' arguments")

msgid "incorrect values of 'indent' and 'width' arguments"
msgstr ""


#: R/LAPACK.R: 0
#: R/eigen.R: 0
#: R/svd.R: 0
#. R/LAPACK.R: gettextf("infinite or missing values in '%s' argument", "x")
#. R/eigen.R: gettextf("infinite or missing values in '%s' argument", "x")
#. R/svd.R: gettextf("infinite or missing values in '%s' argument", "x")

msgid "infinite or missing values in '%s' argument"
msgstr ""


#: R/load.R: 0
#. R/load.R: stop("input has been corrupted, with LF replaced by CR")

msgid "input has been corrupted, with LF replaced by CR"
msgstr ""


#: R/attach.R: 0
#: R/colSums.R: 0
#: R/colSums.R: 0
#: R/colSums.R: 0
#: R/colSums.R: 0
#: R/files.R: 0
#: R/files.R: 0
#: R/load.R: 0
#: R/load.R: 0
#: R/locales.R: 0
#: R/locales.R: 0
#: R/serialize.R: 0
#: R/serialize.R: 0
#: R/zapsmall.R: 0
#. R/attach.R: gettextf("invalid '%s' argument", "name")
#. R/colSums.R: gettextf("invalid '%s' argument", "dims")
#. R/colSums.R: gettextf("invalid '%s' argument", "dims")
#. R/colSums.R: gettextf("invalid '%s' argument", "dims")
#. R/colSums.R: gettextf("invalid '%s' argument", "dims")
#. R/files.R: gettextf("invalid '%s' argument", "path")
#. R/files.R: gettextf("invalid '%s' argument", "time")
#. R/load.R: gettextf("invalid '%s' argument", "file")
#. R/load.R: gettextf("invalid '%s' argument", "file")
#. R/locales.R: gettextf("invalid '%s' argument", "category")
#. R/locales.R: gettextf("invalid '%s' argument", "category")
#. R/serialize.R: gettextf("invalid '%s' argument", "file")
#. R/serialize.R: gettextf("invalid '%s' argument", "file")
#. R/zapsmall.R: gettextf("invalid '%s' argument", "digits")

msgid "invalid '%s' argument"
msgstr ""


#: R/eigen.R: 0
#: R/kappa.R: 0
#: R/qr.R: 0
#: R/qr.R: 0
#: R/qr.R: 0
#: R/qr.R: 0
#: R/qr.R: 0
#: R/qr.R: 0
#: R/qr.R: 0
#: R/qr.R: 0
#: R/qr.R: 0
#: R/qr.R: 0
#: R/qr.R: 0
#: R/qr.R: 0
#: R/qr.R: 0
#: R/qr.R: 0
#: R/qr.R: 0
#: R/tabulate.R: 0
#: R/version.R: 0
#: R/version.R: 0
#: R/version.R: 0
#. R/eigen.R: gettextf("invalid '%s' value", "nrow(x)")
#. R/kappa.R: gettextf("invalid '%s' value", "nrow(x)")
#. R/qr.R: gettextf("invalid '%s' value", "ncol(x)")
#. R/qr.R: gettextf("invalid '%s' value", "nrow(x)")
#. R/qr.R: gettextf("invalid '%s' value", "nrow(qr$qr)")
#. R/qr.R: gettextf("invalid '%s' value", "ncol(qr$qr)")
#. R/qr.R: gettextf("invalid '%s' value", "ncol(qr$rank)")
#. R/qr.R: gettextf("invalid '%s' value", "ncol(y)")
#. R/qr.R: gettextf("invalid '%s' value", "nrow(qr$qr)")
#. R/qr.R: gettextf("invalid '%s' value", "NCOL(y)")
#. R/qr.R: gettextf("invalid '%s' value", "nrow(qr$qr)")
#. R/qr.R: gettextf("invalid '%s' value", "NCOL(y)")
#. R/qr.R: gettextf("invalid '%s' value", "nrow(qr$qr)")
#. R/qr.R: gettextf("invalid '%s' value", "NCOL(y)")
#. R/qr.R: gettextf("invalid '%s' value", "nrow(qr$qr)")
#. R/qr.R: gettextf("invalid '%s' value", "NCOL(y)")
#. R/qr.R: gettextf("invalid '%s' value", "NCOL(R)")
#. R/tabulate.R: gettextf("invalid '%s' value", "nbins")
#. R/version.R: gettextf("invalid '%s' value", "value")
#. R/version.R: gettextf("invalid '%s' value", "value")
#. R/version.R: gettextf("invalid '%s' value", "value")

msgid "invalid '%s' value"
msgstr ""


#: R/seq.R: 0
#. R/seq.R: stop("invalid '(to - from)/by' in 'seq(.)' function")

msgid "invalid '(to - from)/by' in 'seq(.)' function"
msgstr ""


#: R/dates.R: 0
#. R/dates.R: stop("invalid 'by' string")

msgid "invalid 'by' string"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: stop("invalid 'dimnames' given for data frame")
#. R/dataframe.R: stop("invalid 'dimnames' given for data frame")

msgid "invalid 'dimnames' given for data frame"
msgstr ""


#: R/factor.R: 0
#. R/factor.R: gettextf("invalid 'labels'; length %d should be 1 or %d", nl, nL)

msgid "invalid 'labels'; length %d should be 1 or %d"
msgstr ""


#: R/rle.R: 0
#. R/rle.R: stop("invalid 'rle' structure")

msgid "invalid 'rle' structure"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: stop("invalid 'row.names' length")
#. R/dataframe.R: stop("invalid 'row.names' length")

msgid "invalid 'row.names' length"
msgstr ""


#: R/datetime.R: 0
#. R/datetime.R: stop("invalid 'units' specified")
#. R/datetime.R: stop("invalid 'units' specified")

msgid "invalid 'units' specified"
msgstr ""


#: R/version.R: 0
#. R/version.R: stop("invalid 'value'")

msgid "invalid 'value'"
msgstr ""


#: R/factor.R: 0
#. R/factor.R: warning("invalid factor level, NA value generated")
#. R/factor.R: warning("invalid factor level, NA value generated")

msgid "invalid factor level, NA value generated"
msgstr ""


#: R/lazyload.R: 0
#. R/lazyload.R: gettext("invalid file name")

msgid "invalid file name"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: stop("invalid import target")

msgid "invalid import target"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: stop("invalid list argument: all variables should have the same length")

msgid "invalid list argument: all variables should have the same length"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: stop("invalid method")

msgid "invalid method"
msgstr ""


#: R/dates.R: 0
#: R/datetime.R: 0
#. R/dates.R: stop("invalid mode for 'by' argument")
#. R/datetime.R: stop("invalid mode for 'by' argument")

msgid "invalid mode for 'by' argument"
msgstr ""


#: R/cut.R: 0
#. R/cut.R: stop("invalid number of intervals")

msgid "invalid number of intervals"
msgstr ""


#: R/library.R: 0
#. R/library.R: stop("invalid package name")

msgid "invalid package name"
msgstr ""


#: R/dates.R: 0
#: R/datetime.R: 0
#: R/datetime.R: 0
#: R/datetime.R: 0
#. R/dates.R: stop("invalid specification of 'breaks'")
#. R/dates.R: stop("invalid specification of 'breaks'")
#. R/dates.R: stop("invalid specification of 'breaks'")
#. R/datetime.R: stop("invalid specification of 'breaks'")
#. R/datetime.R: stop("invalid specification of 'breaks'")
#. R/datetime.R: stop("invalid specification of 'breaks'")

msgid "invalid specification of 'breaks'"
msgstr ""


#: R/dates.R: 0
#: R/datetime.R: 0
#: R/datetime.R: 0
#. R/dates.R: stop("invalid string for 'by' argument")
#. R/datetime.R: stop("invalid string for 'by' argument")
#. R/datetime.R: stop("invalid string for 'by' argument")

msgid "invalid string for 'by' argument"
msgstr ""


#: R/version.R: 0
#. R/version.R: gettextf("invalid version specification %s", paste(sQuote(unique(x[!ok])), collapse = ", "),     domain = "R-base")

msgid "invalid version specification %s"
msgstr ""


#: R/../../../../share/R/examples-header.R: 0
#. R/../../../../share/R/examples-header.R: gettextf("items %s have been removed from the search path", paste(missitems, collapse = ", "))

msgid "items %s have been removed from the search path"
msgstr ""


#: R/scale.R: 0
#. R/scale.R: gettextf("length of '%s' argument must equal the number of columns of '%s' argument",     "center", "x")
#. R/scale.R: gettextf("length of '%s' argument must equal the number of columns of '%s' argument",     "scale", "x")

msgid "length of '%s' argument must equal the number of columns of '%s' argument"
msgstr ""


#: R/cut.R: 0
#. R/cut.R: stop("lengths of 'breaks' and 'labels' arguments differ")

msgid "lengths of 'breaks' and 'labels' arguments differ"
msgstr ""


#: R/rle.R: 0
#. R/rle.R: gettext("  lengths:", domain = "R-base")

msgid "lengths:"
msgstr ""


#: R/factor.R: 0
#. R/factor.R: stop("level sets of factors are different")
#. R/factor.R: stop("level sets of factors are different")

msgid "level sets of factors are different"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("license for package %s was not accepted", sQuote(package))

msgid "license for package %s was not accepted"
msgstr ""


#: R/windows/junctions.R: 0
#. R/windows/junctions.R: gettextf("link '%s' already exists", link)

msgid "link '%s' already exists"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: gettextf("list of length %d is not meaningful", length(e2))
#. R/dataframe.R: gettextf("list of length %d is not meaningful", length(e1))

msgid "list of length %d is not meaningful"
msgstr ""


#: R/merge.R: 0
#. R/merge.R: stop("long vectors are not supported")

msgid "long vectors are not supported"
msgstr ""


#: R/dynload.R: 0
#. R/dynload.R: stop("looking for DLL for native routine call, but no DLLs in namespace of call")

msgid "looking for DLL for native routine call, but no DLLs in namespace of call"
msgstr ""


#: R/RNG.R: 0
#. R/RNG.R: stop("malformed version string")

msgid "malformed version string"
msgstr ""


#: R/grep.R: 0
#. R/grep.R: stop("match distance components must be non-negative")
#. R/grep.R: stop("match distance components must be non-negative")

msgid "match distance components must be non-negative"
msgstr ""


#: R/qr.R: 0
#. R/qr.R: gettextf("matrix %s is too large for LINPACK", dataname <- sQuote(deparse(substitute(x))))

msgid "matrix %s is too large for LINPACK"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: gettextf("mismatch of row names in arguments of 'data.frame()' function, item %d",     i)

msgid "mismatch of row names in arguments of 'data.frame()' function, item %d"
msgstr ""


#: R/grep.R: 0
#. R/grep.R: stop("missing replacement values are not allowed")
#. R/grep.R: stop("missing replacement values are not allowed")

msgid "missing replacement values are not allowed"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: stop("missing values are not allowed in subscripted assignments of data frames")
#. R/dataframe.R: stop("missing values are not allowed in subscripted assignments of data frames")

msgid "missing values are not allowed in subscripted assignments of data frames"
msgstr ""


#: R/rowsum.R: 0
#. R/rowsum.R: warning("missing values for 'group' argument")
#. R/rowsum.R: warning("missing values for 'group' argument")

msgid "missing values for 'group' argument"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: stop("missing values in 'row.names' are not allowed")

msgid "missing values in 'row.names' are not allowed"
msgstr ""


#: R/files.R: 0
#: R/windows/junctions.R: 0
#. R/files.R: stop("more 'from' files than 'to' files")
#. R/windows/junctions.R: stop("more 'from' files than 'to' files")

msgid "more 'from' files than 'to' files"
msgstr ""


#: R/dynload.R: 0
#. R/dynload.R: gettextf("multiple DLL files match %s. Using file %s", sQuote(dll), sQuote(dll[["path"]]))

msgid "multiple DLL files match %s. Using file %s"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("multiple methods tables found for %s", sQuote(mi))

msgid "multiple methods tables found for %s"
msgstr ""


#: R/grep.R: 0
#. R/grep.R: stop("must have replacement values for matches")

msgid "must have replacement values for matches"
msgstr ""


#: R/grep.R: 0
#. R/grep.R: stop("must have replacements for matches")

msgid "must have replacements for matches"
msgstr ""


#: R/grep.R: 0
#. R/grep.R: stop("must have replacements for non-matches")

msgid "must have replacements for non-matches"
msgstr ""


#: R/dynload.R: 0
#. R/dynload.R: gettextf("must pass a package name, %s or %s object", dQuote("DLLInfo"), dQuote("DllInfoReference"),     domain = "R-base")

msgid "must pass a package name, %s or %s object"
msgstr ""


#: R/dynload.R: 0
#. R/dynload.R: gettextf("must specify DLL file via an object of class %s. See 'getLoadedDLLs()' function",     dQuote("DLLInfo"))

msgid "must specify DLL file via an object of class %s. See 'getLoadedDLLs()' function"
msgstr ""


#: R/mapply.R: 0
#. R/mapply.R: stop("must specify names of formal arguments for 'vectorize'")

msgid "must specify names of formal arguments for 'vectorize'"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: warning("named arguments are discouraged")
#. R/dataframe.R: warning("named arguments are discouraged")

msgid "named arguments are discouraged"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: gettextf("named arguments other than '%s' are discouraged", "drop")
#. R/dataframe.R: gettextf("named arguments other than '%s' are discouraged", "exact")

msgid "named arguments other than '%s' are discouraged"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: stop("names do not match previous names")
#. R/dataframe.R: stop("names do not match previous names")

msgid "names do not match previous names"
msgstr ""


#: R/all.equal.R: 0
#. R/all.equal.R: gettextf("names for '%s' argument but not for '%s' argument", "target", "current",     domain = "R-base")
#. R/all.equal.R: gettextf("names for '%s' argument but not for '%s' argument", "current", "target",     domain = "R-base")

msgid "names for '%s' argument but not for '%s' argument"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("namespace %s %s is already loaded, but %s %s is required", sQuote(package),     current, z$op, z$version)

msgid "namespace %s %s is already loaded, but %s %s is required"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("namespace %s %s is being loaded, but %s %s is required", sQuote(package),     version, z$op, z$version)

msgid "namespace %s %s is being loaded, but %s %s is required"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("namespace %s is already sealed in 'loadNamespace()' function", sQuote(getNamespaceName(ns)))

msgid "namespace %s is already sealed in 'loadNamespace()' function"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("namespace %s is imported by %s so cannot be unloaded", sQuote(getNamespaceName(ns)),     paste(sQuote(users), collapse = ", "))

msgid "namespace %s is imported by %s so cannot be unloaded"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("namespace %s is not available and has been replaced by '.GlobalEnv' when processing object %s",     sQuote(name)[1L], sQuote(where))

msgid "namespace %s is not available and has been replaced by '.GlobalEnv' when processing object %s"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: stop("namespace is already attached")

msgid "namespace is already attached"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: stop("need 0, 1, or 2 subscripts")

msgid "need 0, 1, or 2 subscripts"
msgstr ""


#: R/qr.R: 0
#. R/qr.R: stop("need larger value of 'ncol' as pivoting occurred")

msgid "need larger value of 'ncol' as pivoting occurred"
msgstr ""


#: R/grep.R: 0
#. R/grep.R: gettextf("need non-overlapping matches for %s", sQuote("invert = TRUE"), domain = "R-base")

msgid "need non-overlapping matches for %s"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: stop("new columns would leave holes after existing columns")

msgid "new columns would leave holes after existing columns"
msgstr ""


#: R/conditions.R: 0
#. R/conditions.R: gettextf("no 'restart' '%s' found", as.character(r))
#. R/conditions.R: gettextf("no 'restart' '%s' found", as.character(r))

msgid "no 'restart' '%s' found"
msgstr ""


#: R/library.R: 0
#. R/library.R: stop("no DLL was specified")

msgid "no DLL was specified"
msgstr ""


#: R/datetime.R: 0
#. R/datetime.R: warning("no Olson database found")

msgid "no Olson database found"
msgstr ""


#: R/pmax.R: 0
#. R/pmax.R: gettextf("no arguments passed to '%s' function", "pmax()")
#. R/pmax.R: gettextf("no arguments passed to '%s' function", "pmin()")

msgid "no arguments passed to '%s' function"
msgstr ""


#: R/files.R: 0
#. R/files.R: stop("no file found")

msgid "no file found"
msgstr ""


#: R/files.R: 0
#. R/files.R: stop("no files to copy to")

msgid "no files to copy to"
msgstr ""


#: R/files.R: 0
#. R/files.R: stop("no files to link from")
#. R/files.R: stop("no files to link from")

msgid "no files to link from"
msgstr ""


#: R/files.R: 0
#: R/windows/junctions.R: 0
#. R/files.R: stop("no files to link to")
#. R/windows/junctions.R: stop("no files to link to")

msgid "no files to link to"
msgstr ""


#: R/files.R: 0
#. R/files.R: stop("no files/directory to link to")

msgid "no files/directory to link to"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("no function found corresponding to methods exports from namespace %s for: %s",     sQuote(package), paste(sQuote(sort(unique(addGenerics[nowhere]))), collapse = ", "))

msgid "no function found corresponding to methods exports from namespace %s for: %s"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettext("no library trees found in 'lib.loc'", domain = "R-base")

msgid "no library trees found in 'lib.loc'"
msgstr ""


#: R/match.R: 0
#. R/match.R: stop("no match in 'char.expand()' function")

msgid "no match in 'char.expand()' function"
msgstr ""


#: R/library.R: 0
#. R/library.R: message("no packages were found")

msgid "no packages were found"
msgstr ""


#: R/library.R: 0
#. R/library.R: stop("no shared object was specified")

msgid "no shared object was specified"
msgstr ""


#: R/taskCallback.R: 0
#. R/taskCallback.R: gettextf("no such element '%s'", which)

msgid "no such element '%s'"
msgstr ""


#: R/dynload.R: 0
#. R/dynload.R: gettextf("no such symbol %s", id)

msgid "no such symbol %s"
msgstr ""


#: R/dynload.R: 0
#. R/dynload.R: gettextf("no such symbol %s in package %s", id, pkgName)

msgid "no such symbol %s in package %s"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: stop("non-existent rows not allowed")
#. R/dataframe.R: stop("non-existent rows not allowed")

msgid "non-existent rows not allowed"
msgstr ""


#: R/sort.R: 0
#. R/sort.R: stop("non-finite 'partial'")

msgid "non-finite 'partial'"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: stop("non-numeric variable in data frame: ", vnames[!mode.ok])

msgid "non-numeric variable in data frame:"
msgstr ""


#: R/eigen.R: 0
#. R/eigen.R: stop("non-square matrix in 'eigen()' function")

msgid "non-square matrix in 'eigen()' function"
msgstr ""


#: R/library.R: 0
#. R/library.R: stop("none of the packages are loaded")

msgid "none of the packages are loaded"
msgstr ""


#: R/kappa.R: 0
#. R/kappa.R: gettextf("norm '%s' currently always uses 'exact = FALSE' option", norm)

msgid "norm '%s' currently always uses 'exact = FALSE' option"
msgstr ""


#: R/apply.R: 0
#. R/apply.R: stop("not all elements of 'MARGIN' are names of dimensions")

msgid "not all elements of 'MARGIN' are names of dimensions"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: stop("not loading a namespace", domain = "R-base")

msgid "not loading a namespace"
msgstr ""


#: R/load.R: 0
#. R/load.R: warning("nothing specified to be saved")

msgid "nothing specified to be saved"
msgstr ""


#: R/table.R: 0
#. R/table.R: stop("nothing to tabulate")

msgid "nothing to tabulate"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("now dyn.load(\"%s\") ...", file)

msgid "now dyn.load(\"%s\") ..."
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("now running dyn.unload(\"%s\") ...", file)

msgid "now running dyn.unload(\"%s\") ..."
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: warning("number of items to replace is not a multiple of replacement length")

msgid "number of items to replace is not a multiple of replacement length"
msgstr ""


#: R/factor.R: 0
#. R/factor.R: stop("number of levels differs")

msgid "number of levels differs"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: stop("numbers of columns of arguments do not match")
#. R/dataframe.R: stop("numbers of columns of arguments do not match")

msgid "numbers of columns of arguments do not match"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("object %s was not found whilst loading namespace %s", sQuote(genname),     sQuote(package))

msgid "object %s was not found whilst loading namespace %s"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: stop("only a single element should be replaced")

msgid "only a single element should be replaced"
msgstr ""


#: R/diag.R: 0
#. R/diag.R: stop("only matrix diagonals can be replaced")

msgid "only matrix diagonals can be replaced"
msgstr ""


#: R/solve.R: 0
#. R/solve.R: stop("only square matrices can be inverted")
#. R/solve.R: stop("only square matrices can be inverted")

msgid "only square matrices can be inverted"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: stop("only valid calls are x[[j]] <- value or x[[i,j]] <- value")

msgid "only valid calls are x[[j]] <- value or x[[i,j]] <- value"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: stop("operation is not allowed on base namespace")

msgid "operation is not allowed on base namespace"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("package %s %s is loaded, but %s %s is required by package %s", sQuote(pkg),     current, z$op, target, sQuote(pkgname))

msgid "package %s %s is loaded, but %s %s is required by package %s"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("package %s %s was found, but %s %s is required by package %s", sQuote(pkg),     current, z$op, target, sQuote(pkgname))

msgid "package %s %s was found, but %s %s is required by package %s"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("package %s already present in 'search()'", sQuote(package))

msgid "package %s already present in 'search()'"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("package %s could not be loaded", sQuote(pkg))

msgid "package %s could not be loaded"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("package %s does not have a namespace", sQuote(package), domain = "R-base")

msgid "package %s does not have a namespace"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("package %s does not have a namespace and should be re-installed", sQuote(package))

msgid "package %s does not have a namespace and should be re-installed"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("package %s has a license that you need to accept after viewing", sQuote(pkg))

msgid "package %s has a license that you need to accept after viewing"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("package %s has a license that you need to accept in an interactive session",     sQuote(pkg))

msgid "package %s has a license that you need to accept in an interactive session"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("package %s has a license that you need to accept:\naccording to the DESCRIPTION file it is %s",     sQuote(pkg), pkgInfo$DESCRIPTION["License"], domain = "R-base")

msgid "package %s has a license that you need to accept:\naccording to the DESCRIPTION file it is %s"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("package %s has no 'NAMESPACE' file", sQuote(package))

msgid "package %s has no 'NAMESPACE' file"
msgstr ""


#: R/library.R: 0
#: R/namespace.R: 0
#. R/library.R: gettextf("package %s has not been installed properly", sQuote(pkgname))
#. R/namespace.R: gettextf("package %s has not been installed properly\n", sQuote(basename(pkgpath)))

msgid "package %s has not been installed properly"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("package %s is not installed for 'arch = %s'", sQuote(pkgname), r_arch)

msgid "package %s is not installed for 'arch = %s'"
msgstr ""


#: R/attach.R: 0
#. R/attach.R: gettextf("package %s is required by %s so will not be detached", sQuote(pkgname),     sQuote(sub("^package:", "", pkg)), domain = "R-base")

msgid "package %s is required by %s so will not be detached"
msgstr ""


#: R/attach.R: 0
#. R/attach.R: gettextf("package %s is required by %s, which may no longer work correctly", sQuote(pkgname),     sQuote(sub("^package:", "", pkg)), domain = "R-base")

msgid "package %s is required by %s, which may no longer work correctly"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("package %s required by package %s could not be found", sQuote(pkg), sQuote(pkgname))

msgid "package %s required by package %s could not be found"
msgstr ""


#: R/library.R: 0
#: R/namespace.R: 0
#. R/library.R: gettextf("package %s was built before R 3.0.0: please re-install it", sQuote(pkgname))
#. R/namespace.R: gettextf("package %s was built before R 3.0.0: please re-install it", sQuote(basename(pkgpath)))

msgid "package %s was built before R 3.0.0: please re-install it"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("package %s was built for platform %s", sQuote(pkgname), platform)
#. R/library.R: gettextf("package %s was built for platform %s", sQuote(pkgname), platform)

msgid "package %s was built for platform %s"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("package %s was built under R version %s", sQuote(pkgname), as.character(built$R))

msgid "package %s was built under R version %s"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("package %s was found more than once. Using the one found in %s", sQuote(pkg),     sQuote(paths))

msgid "package %s was found more than once. Using the one found in %s"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("package or namespace load failed for package %s", sQuote(package))

msgid "package or namespace load failed for package %s"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettext("press RETURN to view license")

msgid "press RETURN to view license"
msgstr ""


#: R/summary.R: 0
#. R/summary.R: gettextf("probably wrong encoding in 'names(.)' of column %s", paste(which(is.na(lw)),     collapse = ", "))

msgid "probably wrong encoding in 'names(.)' of column %s"
msgstr ""


#: R/attach.R: 0
#. R/attach.R: warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")

msgid "replaced '[<-' by '\\\\[<-' in regular expression pattern"
msgstr ""


#: R/attach.R: 0
#. R/attach.R: warning("replaced regular expression pattern '[' by  '\\\\['")

msgid "replaced regular expression pattern '[' by  '\\\\['"
msgstr ""


#: R/diag.R: 0
#. R/diag.R: stop("replacement diagonal has wrong length")

msgid "replacement diagonal has wrong length"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: gettextf("replacing element in non-existent column: %s", j[is.na(jseq)])
#. R/dataframe.R: gettextf("replacing element in non-existent column: %s", jseq[jseq > nvars])

msgid "replacing element in non-existent column: %s"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettext("replacing local value with import %s when loading namespace %s")
#. R/namespace.R: gettext("replacing local value with import %s when loading namespace %s")

msgid "replacing local value with import %s when loading namespace %s"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettext("replacing previous import by %s when loading namespace %s")

msgid "replacing previous import by %s when loading namespace %s"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("requested methods were not found in environment/package %s: %s", sQuote(pkg),     paste(vars[is.na(match(vars, allFuns))], collapse = ", "))

msgid "requested methods were not found in environment/package %s: %s"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: stop("row names contain missing values")
#. R/dataframe.R: stop("row names contain missing values")

msgid "row names contain missing values"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: stop("row names supplied are of the wrong length")

msgid "row names supplied are of the wrong length"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: warning("row names were found from a short variable and have been discarded")

msgid "row names were found from a short variable and have been discarded"
msgstr ""


#: R/datetime.R: 0
#. R/datetime.R: gettextf("second argument of '/' operator cannot be an object of class %s", dQuote("difftime"))

msgid "second argument of '/' operator cannot be an object of class %s"
msgstr ""


#: R/unix/system.unix.R: 0
#. R/unix/system.unix.R: warning("setting 'stdout = TRUE'")

msgid "setting 'stdout = TRUE'"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("shared object %s is already loaded", sQuote(chname1))

msgid "shared object %s is already loaded"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("shared object %s was not found", sQuote(chname1))
#. R/library.R: gettextf("shared object %s was not found", sQuote(chname1))

msgid "shared object %s was not found"
msgstr ""


#: R/library.R: 0
#. R/library.R: gettextf("shared object %s was not loaded", sQuote(chname1))

msgid "shared object %s was not loaded"
msgstr ""


#: R/solve.R: 0
#. R/solve.R: stop("singular matrix 'a' in 'solve()' function")
#. R/solve.R: stop("singular matrix 'a' in 'solve()' function")

msgid "singular matrix 'a' in 'solve()' function"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: gettextf("some row.names duplicated: %s --> row.names NOT used", paste(which(duplicated(new)),     collapse = ", "))

msgid "some row.names duplicated: %s --> row.names NOT used"
msgstr ""


#: R/time.R: 0
#. R/time.R: gettext("system")

msgid "system"
msgstr ""


#: R/match.R: 0
#. R/match.R: stop("there is more than one match in 'match.arg()' function")

msgid "there is more than one match in 'match.arg()' function"
msgstr ""


#: R/conditions.R: 0
#. R/conditions.R: stop("this is not a valid restart specification")

msgid "this is not a valid restart specification"
msgstr ""


#: R/solve.R: 0
#. R/solve.R: stop("this is the 'qr' method for the generic function 'solve()'")

msgid "this is the 'qr' method for the generic function 'solve()'"
msgstr ""


#: R/conditions.R: 0
#. R/conditions.R: stop("this session is not interactive")

msgid "this session is not interactive"
msgstr ""


#: R/seq.R: 0
#. R/seq.R: stop("too many arguments")

msgid "too many arguments"
msgstr ""


#: R/methodsSupport.R: 0
#. R/methodsSupport.R: stop("tracing functions requires the 'methods' package, but unable to load the 'methods' namespace")

msgid "tracing functions requires the 'methods' package, but unable to load the 'methods' namespace"
msgstr ""


#: R/kappa.R: 0
#. R/kappa.R: stop("triangular matrix should be square")

msgid "triangular matrix should be square"
msgstr ""


#: R/mean.R: 0
#. R/mean.R: stop("trimmed means are not defined for complex data")

msgid "trimmed means are not defined for complex data"
msgstr ""


#: R/source.R: 0
#. R/source.R: stop("unable to find a plausible encoding")

msgid "unable to find a plausible encoding"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("unable to load R code in package %s", sQuote(package))

msgid "unable to load R code in package %s"
msgstr ""


#: R/dates.R: 0
#: R/datetime.R: 0
#: R/datetime.R: 0
#: R/datetime.R: 0
#: R/version.R: 0
#. R/dates.R: gettextf("unary '%s' operator is not defined for objects of class %s", "-", dQuote("Date"))
#. R/dates.R: gettextf("unary '%s' operator is not defined for objects of class %s", .Generic,     dQuote("Date"))
#. R/datetime.R: gettextf("unary '%s' operator is not defined for objects of class %s", "-", dQuote("POSIXt"))
#. R/datetime.R: gettextf("unary '%s' operator is not defined for objects of class %s", .Generic,     dQuote("POSIXt"))
#. R/datetime.R: gettextf("unary '%s' operator is not defined for objects of class %s", .Generic,     dQuote("difftime"))
#. R/version.R: gettextf("unary '%s' operator is not defined for objects of class %s", .Generic,     dQuote("numeric_version"))

msgid "unary '%s' operator is not defined for objects of class %s"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: stop("undefined columns selected")
#. R/dataframe.R: stop("undefined columns selected")
#. R/dataframe.R: stop("undefined columns selected")
#. R/dataframe.R: stop("undefined columns selected")
#. R/dataframe.R: stop("undefined columns selected")

msgid "undefined columns selected"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("undefined exports: %s", undef)

msgid "undefined exports: %s"
msgstr ""


#: R/grep.R: 0
#. R/grep.R: warning("unknown cost components ignored")

msgid "unknown cost components ignored"
msgstr ""


#: R/grep.R: 0
#. R/grep.R: warning("unknown match distance components ignored")

msgid "unknown match distance components ignored"
msgstr ""


#: R/namespace.R: 0
#. R/namespace.R: gettextf("unknown namespace directive: %s", deparse(e, nlines = 1L))

msgid "unknown namespace directive: %s"
msgstr ""


#: R/dataframe.R: 0
#. R/dataframe.R: stop("unsupported matrix index in replacement")

msgid "unsupported matrix index in replacement"
msgstr ""


#: R/sort.R: 0
#. R/sort.R: stop("unsupported options for partial sorting")

msgid "unsupported options for partial sorting"
msgstr ""


#: R/time.R: 0
#. R/time.R: gettext("user")

msgid "user"
msgstr ""


#: R/outer.R: 0
#. R/outer.R: stop("using '...' with 'FUN = \"*\"' option is an error")

msgid "using '...' with 'FUN = \"*\"' option is an error"
msgstr ""


#: R/formals.R: 0
#. R/formals.R: warning("using the first element of 'value' of type \"expression\"")

msgid "using the first element of 'value' of type \"expression\""
msgstr ""


#: R/grep.R: 0
#. R/grep.R: stop("value does not provide any replacement values")

msgid "value does not provide any replacement values"
msgstr ""


#: R/get.R: 0
#. R/get.R: gettextf("value for %s not found", sQuote(x))

msgid "value for %s not found"
msgstr ""


#: R/rle.R: 0
#. R/rle.R: gettext("  values :", domain = "R-base")

msgid "values :"
msgstr ""


#: R/cut.R: 0
#. R/cut.R: stop("values in 'breaks' argument are not unique")

msgid "values in 'breaks' argument are not unique"
msgstr ""


#: R/seq.R: 0
#. R/seq.R: stop("wrong sign in 'by' argument")

msgid "wrong sign in 'by' argument"
msgstr ""


#: R/as.R: 0
#. R/as.R: stop("you cannot be serious", domain = "R-base")

msgid "you cannot be serious"
msgstr ""


#: R/dates.R: 0
#: R/datetime.R: 0
#: R/datetime.R: 0
#. R/dates.R: ngettext(as.integer(length(x) - max), " [ reached 'getOption(\"max.print\")' -- omitted %d entry ]",     " [ reached 'getOption(\"max.print\")' -- omitted %d entries ]", domain = "R-base")
#. R/datetime.R: ngettext(as.integer(length(x) - max), " [ reached 'getOption(\"max.print\")' -- omitted %d entry ]",     " [ reached 'getOption(\"max.print\")' -- omitted %d entries ]", domain = "R-base")
#. R/datetime.R: ngettext(as.integer(length(x) - max.print), " [ reached 'getOption(\"max.print\")' -- omitted %d entry ]",     " [ reached 'getOption(\"max.print\")' -- omitted %d entries ]", domain = "R-base")

msgid        " [ reached 'getOption(\"max.print\")' -- omitted %d entry ]"
msgid_plural " [ reached 'getOption(\"max.print\")' -- omitted %d entries ]"
msgstr[0]    ""
msgstr[1]    ""


#: R/all.equal.R: 0
#. R/all.equal.R: ngettext(sum(ne), "%d element mismatch", "%d element mismatches")

msgid        "%d element mismatch"
msgid_plural "%d element mismatches"
msgstr[0]    ""
msgstr[1]    ""


#: R/dataframe.R: 0
#. R/dataframe.R: ngettext(nrowv, "%d row in value to replace %d rows", "%d rows in value to replace %d rows",     domain = "R-base")

msgid        "%d row in value to replace %d rows"
msgid_plural "%d rows in value to replace %d rows"
msgstr[0]    ""
msgstr[1]    ""


#: R/all.equal.R: 0
#. R/all.equal.R: ngettext(sum(ne), "%d string mismatch", "%d string mismatches")

msgid        "%d string mismatch"
msgid_plural "%d string mismatches"
msgstr[0]    ""
msgstr[1]    ""


#: R/merge.R: 0
#. R/merge.R: ngettext(sum(bad), "'by' argument must specify a uniquely valid column", "'by' argument must specify uniquely valid columns",     domain = "R-base")
#. R/merge.R: ngettext(sum(bad), "'by' argument must specify a uniquely valid column", "'by' argument must specify uniquely valid columns",     domain = "R-base")

msgid        "'by' argument must specify a uniquely valid column"
msgid_plural "'by' argument must specify uniquely valid columns"
msgstr[0]    ""
msgstr[1]    ""


#: R/source.R: 0
#. R/source.R: ngettext(Ne, "--> parsed %d expression; now evaluating them:", "--> parsed %d expressions; now evaluating them:",     domain = "R-base")

msgid        "--> parsed %d expression; now evaluating them:"
msgid_plural "--> parsed %d expressions; now evaluating them:"
msgstr[0]    ""
msgstr[1]    ""


#: R/namespace.R: 0
#. R/namespace.R: ngettext(length(bad), "Function found when exporting methods from the namespace %s which is not S4 generic: %s",     "Functions found when exporting methods from the namespace %s which are not S4 generic: %s",     domain = "R-base")

msgid        "Function found when exporting methods from the namespace %s which is not S4 generic: %s"
msgid_plural "Functions found when exporting methods from the namespace %s which are not S4 generic: %s"
msgstr[0]    ""
msgstr[1]    ""


#: R/namespace.R: 0
#. R/namespace.R: ngettext(sum(notex), "S3 method %s was declared in 'NAMESPACE' file but was not found",     "S3 methods %s were declared in 'NAMESPACE' file but was not found", domain = "R-base")

msgid        "S3 method %s was declared in 'NAMESPACE' file but was not found"
msgid_plural "S3 methods %s were declared in 'NAMESPACE' file but was not found"
msgstr[0]    ""
msgstr[1]    ""


#: R/attach.R: 0
#. R/attach.R: ngettext(length(same), "The following object is masked _by_ %s:\n\n%s\n", "The following objects are masked _by_ %s:\n\n%s\n",     domain = "R-base")

msgid        "The following object is masked _by_ %s:\n\n%s\n"
msgid_plural "The following objects are masked _by_ %s:\n\n%s\n"
msgstr[0]    ""
msgstr[1]    ""


#: R/attach.R: 0
#. R/attach.R: ngettext(length(same), "The following object is masked from %s:\n\n%s\n", "The following objects are masked from %s:\n\n%s\n",     domain = "R-base")

msgid        "The following object is masked from %s:\n\n%s\n"
msgid_plural "The following objects are masked from %s:\n\n%s\n"
msgstr[0]    ""
msgstr[1]    ""


#: R/warnings.R: 0
#. R/warnings.R: ngettext(n, "Warning message:", "Warning messages:", domain = "R-base")

msgid        "Warning message:"
msgid_plural "Warning messages:"
msgstr[0]    ""
msgstr[1]    ""


#: R/namespace.R: 0
#. R/namespace.R: ngettext(length(miss), "class %s is not exported by 'namespace:%s'", "classes %s are not exported by 'namespace:%s'",     domain = "R-base")

msgid        "class %s is not exported by 'namespace:%s'"
msgid_plural "classes %s are not exported by 'namespace:%s'"
msgstr[0]    ""
msgstr[1]    ""


#: R/merge.R: 0
#. R/merge.R: ngettext(sum(d), "column name %s is duplicated in the result", "column names %s are duplicated in the result",     domain = "R-base")

msgid        "column name %s is duplicated in the result"
msgid_plural "column names %s are duplicated in the result"
msgstr[0]    ""
msgstr[1]    ""


#: R/dataframe.R: 0
#. R/dataframe.R: ngettext(n, "data frame with 0 columns and %d row", "data frame with 0 columns and %d rows",     domain = "R-base")

msgid        "data frame with 0 columns and %d row"
msgid_plural "data frame with 0 columns and %d rows"
msgstr[0]    ""
msgstr[1]    ""


#: R/New-Internal.R: 0
#. R/New-Internal.R: ngettext(as.integer(sum(is.na(opts))), "deparse option %s is not recognized", "deparse options %s are not recognized",     domain = "R-base")

msgid        "deparse option %s is not recognized"
msgid_plural "deparse options %s are not recognized"
msgstr[0]    ""
msgstr[1]    ""


#: R/qr.R: 0
#: R/seq.R: 0
#. R/qr.R: ngettext(length(list(...)), "extra argument %s will be disregarded", "extra arguments %s will be disregarded",     domain = "R-base")
#. R/seq.R: ngettext(length(list(...)), "extra argument %s will be disregarded", "extra arguments %s will be disregarded",     domain = "R-base")

msgid        "extra argument %s will be disregarded"
msgid_plural "extra arguments %s will be disregarded"
msgstr[0]    ""
msgstr[1]    ""


#: R/dataframe.R: 0
#. R/dataframe.R: ngettext(nr, "invalid 'row.names', length %d for a data frame with %d row", "invalid 'row.names', length %d for a data frame with %d rows",     domain = "R-base")

msgid        "invalid 'row.names', length %d for a data frame with %d row"
msgid_plural "invalid 'row.names', length %d for a data frame with %d rows"
msgstr[0]    ""
msgstr[1]    ""


#: R/library.R: 0
#. R/library.R: ngettext(length(nopkgs), "library %s contains no packages", "libraries %s contain no packages",     domain = "R-base")

msgid        "library %s contains no packages"
msgid_plural "libraries %s contain no packages"
msgstr[0]    ""
msgstr[1]    ""


#: R/dataframe.R: 0
#. R/dataframe.R: ngettext(length(nonuniq), "non-unique value when setting 'row.names': %s", "non-unique values when setting 'row.names': %s",     domain = "R-base")

msgid        "non-unique value when setting 'row.names': %s"
msgid_plural "non-unique values when setting 'row.names': %s"
msgstr[0]    ""
msgstr[1]    ""


#: R/namespace.R: 0
#. R/namespace.R: ngettext(length(miss), "object %s is not exported by 'namespace:%s'", "objects %s are not exported by 'namespace:%s'",     domain = "R-base")

msgid        "object %s is not exported by 'namespace:%s'"
msgid_plural "objects %s are not exported by 'namespace:%s'"
msgstr[0]    ""
msgstr[1]    ""


#: R/load.R: 0
#. R/load.R: ngettext(n, "object %s was not found", "objects %s were not found", domain = "R-base")

msgid        "object %s was not found"
msgid_plural "objects %s were not found"
msgstr[0]    ""
msgstr[1]    ""


#: R/library.R: 0
#. R/library.R: ngettext(as.integer(sum(m)), "package %s is not loaded", "packages %s are not loaded",     domain = "R-base")

msgid        "package %s is not loaded"
msgid_plural "packages %s are not loaded"
msgstr[0]    ""
msgstr[1]    ""


#: R/namespace.R: 0
#. R/namespace.R: ngettext(sum(ex), "previous export %s is being replaced", "previous exports %s are being replaced",     domain = "R-base")

msgid        "previous export %s is being replaced"
msgid_plural "previous exports %s are being replaced"
msgstr[0]    ""
msgstr[1]    ""


#: R/dataframe.R: 0
#. R/dataframe.R: ngettext(ncolv, "provided %d variable to replace %d variables", "provided %d variables to replace %d variables",     domain = "R-base")

msgid        "provided %d variable to replace %d variables"
msgid_plural "provided %d variables to replace %d variables"
msgstr[0]    ""
msgstr[1]    ""


#: R/dataframe.R: 0
#. R/dataframe.R: ngettext(nrowv, "replacement data has %d row to replace %d rows", "replacement data has %d rows to replace %d rows",     domain = "R-base")

msgid        "replacement data has %d row to replace %d rows"
msgid_plural "replacement data has %d rows to replace %d rows"
msgstr[0]    ""
msgstr[1]    ""


#: R/dataframe.R: 0
#. R/dataframe.R: ngettext(N, "replacement element %d has %d row to replace %d rows", "replacement element %d has %d rows to replace %d rows",     domain = "R-base")

msgid        "replacement element %d has %d row to replace %d rows"
msgid_plural "replacement element %d has %d rows to replace %d rows"
msgstr[0]    ""
msgstr[1]    ""


#: R/dataframe.R: 0
#. R/dataframe.R: ngettext(N, "replacement element %d has %d row, need %d", "replacement element %d has %d rows, need %d",     domain = "R-base")

msgid        "replacement element %d has %d row, need %d"
msgid_plural "replacement element %d has %d rows, need %d"
msgstr[0]    ""
msgstr[1]    ""


#: R/dataframe.R: 0
#. R/dataframe.R: ngettext(N, "replacement element %d is a matrix/data frame of %d row, need %d", "replacement element %d is a matrix/data frame of %d rows, need %d",     domain = "R-base")

msgid        "replacement element %d is a matrix/data frame of %d row, need %d"
msgid_plural "replacement element %d is a matrix/data frame of %d rows, need %d"
msgstr[0]    ""
msgstr[1]    ""


#: R/dataframe.R: 0
#. R/dataframe.R: ngettext(m, "replacement has %d item, need %d", "replacement has %d items, need %d",     domain = "R-base")

msgid        "replacement has %d item, need %d"
msgid_plural "replacement has %d items, need %d"
msgstr[0]    ""
msgstr[1]    ""


#: R/dataframe.R: 0
#. R/dataframe.R: ngettext(N, "replacement has %d row, data has %d", "replacement has %d rows, data has %d",     domain = "R-base")
#. R/dataframe.R: ngettext(N, "replacement has %d row, data has %d", "replacement has %d rows, data has %d",     domain = "R-base")
#. R/dataframe.R: ngettext(N, "replacement has %d row, data has %d", "replacement has %d rows, data has %d",     domain = "R-base")
#. R/dataframe.R: ngettext(N, "replacement has %d row, data has %d", "replacement has %d rows, data has %d",     domain = "R-base")
#. R/dataframe.R: ngettext(N, "replacement has %d row, data has %d", "replacement has %d rows, data has %d",     domain = "R-base")
#. R/dataframe.R: ngettext(N, "replacement has %d row, data has %d", "replacement has %d rows, data has %d",     domain = "R-base")

msgid        "replacement has %d row, data has %d"
msgid_plural "replacement has %d rows, data has %d"
msgstr[0]    ""
msgstr[1]    ""


#: R/dataframe.R: 0
#. R/dataframe.R: ngettext(length(row.names), "supplied %d row name for %d rows", "supplied %d row names for %d rows",     domain = "R-base")
#. R/dataframe.R: ngettext(length(row.names), "supplied %d row name for %d rows", "supplied %d row names for %d rows",     domain = "R-base")

msgid        "supplied %d row name for %d rows"
msgid_plural "supplied %d row names for %d rows"
msgstr[0]    ""
msgstr[1]    ""


#: R/library.R: 0
#: R/namespace.R: 0
#. R/library.R: ngettext(1L, "there is no package called %s", "there are no packages called %s",     domain = "R-base")
#. R/library.R: ngettext(length(bad), "there is no package called %s", "there are no packages called %s",     domain = "R-base")
#. R/library.R: ngettext(1L, "there is no package called %s", "there are no packages called %s",     domain = "R-base")
#. R/namespace.R: ngettext(1L, "there is no package called %s", "there are no packages called %s",     domain = "R-base")

msgid        "there is no package called %s"
msgid_plural "there are no packages called %s"
msgstr[0]    ""
msgstr[1]    ""


#: R/stop.R: 0
#. R/stop.R: ngettext(length(r), "variable %s is not TRUE", "variables %s are not all TRUE", domain = "R-base")

msgid        "variable %s is not TRUE"
msgid_plural "variables %s are not all TRUE"
msgstr[0]    ""
msgstr[1]    ""
