diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/Surv.R Recommended/survival/R/Surv.R
9c9
<     if (missing(time)) stop ("Must have a time argument")
---
>     if (missing(time)) stop(gettextf("'%s' argument is required", "time"))
12c12
<     if (!is.numeric(time)) stop ("Time variable is not numeric")
---
>     if (!is.numeric(time)) stop(gettextf("'%s' argument must be numeric", "time"))
28c28
<         else stop ("No time variable!") # no time variable at all!
---
>         else stop("no time variable!") # no time variable at all!
33c33
< 		stop("Wrong number of args for this type of survival data")
---
> 		stop("wrong number of arguments for this type of survival data")
35c35
< 		stop("Wrong number of args for this type of survival data")
---
> 		stop("wrong number of arguments for this type of survival data")
39c39
<         if (!is.numeric(time)) stop("Time variable is not numeric")
---
>         if (!is.numeric(time)) stop(gettextf("'%s' argument must be numeric", "time"))
44c44
<         if (!is.numeric(time)) stop("Time variable is not numeric")
---
>         if (!is.numeric(time)) stop(gettextf("'%s' argument must be numeric", "time"))
49c49
<         if (length(event) != nn) stop ("Time and status are different lengths")
---
>         if (length(event) != nn) stop(gettextf("'%s' and '%s' arguments are of different lengths", "time", "event"))
64c64
< 		    warning("Invalid status value, converted to NA")
---
> 		    warning("invalid status value, converted to NA")
66c66
<             else stop("Invalid status value, must be logical or numeric")
---
>             else stop("invalid status value, must be logical or numeric")
71,74c71,74
< 	if (length(time2) !=nn) stop ("Start and stop are different lengths")
< 	if (length(event)!=nn) stop ("Start and event are different lengths")
<         if (!is.numeric(time))  stop("Start time is not numeric")
< 	if (!is.numeric(time2)) stop("Stop time is not numeric")
---
> 	if (length(time2) !=nn) stop("'time' and 'time2' arguments (start and stop time) are of different lengths")
> 	if (length(event)!=nn) stop("'time' (start time) and 'event' arguments are of different lengths")
>         if (!is.numeric(time))  stop(gettextf("'time' argument (start time) must be numeric", "time"))
> 	if (!is.numeric(time2)) stop(gettextf("'time2' argument (stop time) must be numeric", "time2"))
78c78
< 	    warning("Stop time must be > start time, NA created")
---
> 	    warning("stop time must be > start time, NA created")
94c94
< 		    warning("Invalid status value, converted to NA")
---
> 		    warning("invalid status value, converted to NA")
96c96
< 	    else stop("Invalid status value")
---
> 	    else stop("invalid status value")
104c104
< 	    if (!is.numeric(time2)) stop("Time2 must be numeric")
---
> 	    if (!is.numeric(time2)) stop(gettextf("'%s' argument must be numeric", "time2"))
106c106
< 		    stop ("time and time2 are different lengths")
---
> 		    stop(gettextf("'%s' and '%s' arguments are of different lengths", "time", "time2"))
119c119
<                 warning("Invalid interval: start > stop, NA created")
---
>                 warning("invalid interval: start > stop, NA created")
127c127
< 		    stop("Time and status are different lengths")
---
> 		    stop(gettextf("'%s' and '%s' arguments are of different lengths", "time", "event"))
129c129
< 		   stop("Invalid status value, must be logical or numeric")
---
> 		   stop("invalid status value, must be logical or numeric")
133c133
<                 warning("Status must be 0, 1, 2 or 3; converted to NA")
---
>                 warning("status must be 0, 1, 2 or 3; converted to NA")
136c136
< 		if (!is.numeric(time2)) stop("Time2 must be numeric")
---
> 		if (!is.numeric(time2)) stop(gettextf("'%s' argument must be numeric", "time2"))
138c138
< 		    stop ("time and time2 are different lengths")
---
> 		    stop(gettextf("'%s' and '%s' arguments are of different lengths", "time", "time2"))
142c142
<                     warning("Invalid interval: start > stop, NA created")
---
>                     warning("invalid interval: start > stop, NA created")
267,269c267,269
< Math.Surv <- function(...)  stop("Invalid operation on a survival time")
< Ops.Surv  <- function(...)  stop("Invalid operation on a survival time")
< Summary.Surv<-function(...) stop("Invalid operation on a survival time")
---
> Math.Surv <- function(...)  stop("invalid operation on a survival time")
> Ops.Surv  <- function(...)  stop("invalid operation on a survival time")
> Summary.Surv<-function(...) stop("invalid operation on a survival time")
318c318
<     x[tail(1:nrow(x), ...)]     
---
>     x[tail(seq_len(nrow(x)), ...)]     
321c321
<     x[head(1:nrow(x), ...)]
---
>     x[head(seq_len(nrow(x)), ...)]
328c328
<     stop("not defined for a Surv object")
---
>     stop(gettextf("method not defined for an object of class %s", dQuote("Surv")))
330c330
<     stop("method not defined for a Surv object")
---
>     stop(gettextf("method not defined for an object of class %s", dQuote("Surv")))
332c332
<     stop("method not defined for a Surv object")
---
>     stop(gettextf("method not defined for an object of class %s", dQuote("Surv")))
334c334
<     stop("method not defined for a Surv object")
---
>     stop(gettextf("method not defined for an object of class %s", dQuote("Surv")))
336c336
<     stop("method not defined for a Surv object")
---
>     stop(gettextf("method not defined for an object of class %s", dQuote("Surv")))
338c338
<     stop("method not defined for a Surv object")
---
>     stop(gettextf("method not defined for an object of class %s", dQuote("Surv")))
340c340
<     stop("method not defined for a Surv object")
---
>     stop(gettextf("method not defined for an object of class %s", dQuote("Surv")))
342c342
<     stop("method not defined for a Surv object")
---
>     stop(gettextf("method not defined for an object of class %s", dQuote("Surv")))
344c344
<     stop("method not defined for a Surv object")
---
>     stop(gettextf("method not defined for an object of class %s", dQuote("Surv")))
349c349
< rev.Surv <- function(x) x[rev(1:nrow(x))]
---
> rev.Surv <- function(x) x[rev(seq_len(nrow(x)))]
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/aareg.S Recommended/survival/R/aareg.S
29c29
<     if (!inherits(Y, "Surv")) stop("Response must be a survival object")
---
>     if (!inherits(Y, "Surv")) stop(gettextf("response is not an object of class %s", dQuote("Surv")))
52c52
< 	if (any(ord>1)) stop ("Cluster can not be used in an interaction")
---
> 	if (any(ord>1)) stop("cluster cannot be used in an interaction")
58c58
<     else cluster <- 1:nrow(m)
---
>     else cluster <- seq_len(nrow(m))
70c70
<        stop("Strata terms not allowed")
---
>        stop("strata terms not allowed")
82,83c82
< 	stop(paste("Aalen model doesn't support \"", type,
< 			  "\" survival data", sep=''))
---
> 	stop(gettextf("Aalen model doesn't support \"%s\" survival data", type))
127,128c126,127
<                                      ff$event2[1:ndeath]),
< 	       time = times[ff$index[1:ndeath]],
---
>                                      ff$event2[seq_len(ndeath)]),
> 	       time = times[ff$index[seq_len(ndeath)]],
130c129
< 	       nevent=ff$event2[1:ndeath])  #weighted number of events
---
> 	       nevent=ff$event2[seq_len(ndeath)])  #weighted number of events
154c153
<     index <- match(times, dt$time[1:ndeath], nomatch=0) * status
---
>     index <- match(times, dt$time[seq_len(ndeath)], nomatch=0) * status
168c167
<         resid[nevent*((1:nused)[deaths]-1) + 1:nevent] <- 1.0 
---
>         resid[nevent*((seq_len(nused))[deaths]-1) + seq_len(nevent)] <- 1.0 
253c252
<         dindex2 <- (1:nused)[deaths]  # row number of each death
---
>         dindex2 <- (seq_len(nused))[deaths]  # row number of each death
258c257
< 	for (i in 1:nevent) {	    
---
> 	for (i in seq_len(nevent)) {	    
367c366
<     if (!inherits(x, 'aareg')) stop ("Must be an aareg object")
---
>     if (!inherits(x, 'aareg')) stop(gettextf("'%s' argument is not an object of class %s", "x", dQuote("aareg")))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/aeqSurv.R Recommended/survival/R/aeqSurv.R
13c13
<     if (!is.Surv(x)) stop("argument is not a Surv object")
---
>     if (!is.Surv(x)) stop(gettextf("'%s' argument is not an object of class %s", "x", dQuote("Surv")))
31c31
<             stop("aeqSurv exception, an interval has effective length 0")
---
>             stop("'aeqSurv()' exception; an interval has effective length 0")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/agsurv.R Recommended/survival/R/agsurv.R
22c22
<         indx  <- approx(etime, 1:length(etime), time, method='constant',
---
>         indx  <- approx(etime, seq_along(etime), time, method='constant',
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/anova.coxph.R Recommended/survival/R/anova.coxph.R
4c4
<         stop ("argument must be a cox model")
---
>         stop(gettextf("'%s' argument is not an object of class %s", "object", dQuote("coxph")))
15,17c15,18
<         warning(paste("The following arguments to anova.coxph(..)", 
<             "are invalid and dropped:", paste(deparse(dotargs[named]), 
<                 collapse = ", ")))
---
> 	{
> 	tmp_n <- paste(deparse(dotargs[named]), collapse = ", ") 
>         warning(gettextf("the following arguments passed to 'anova.coxph()' are invalid and dropped: %s", tmp_n))
> 	}
25c26
<             stop("All arguments must be Cox models")
---
>             stop(gettextf("all arguments must be an objects of class %s or %s", dQuote("coxph"), dQuote("coxme")))
32c33
<                 stop("a coxme model was found and library coxme is not loaded")
---
>                 stop("a 'coxme' model was found and library 'coxme' is not loaded")
46c47
<         stop("Can't do anova tables with robust variances")
---
>         stop("cannot do anova tables with robust variances")
111,114c112,113
<     title <- paste("Analysis of Deviance Table\n Cox model: response is ",
< 		   deparse(object$terms[[2]]),
< 		   "\nTerms added sequentially (first to last)\n", 
< 		   sep = "")
---
>     title <- paste(gettext("Analysis of Deviance Table"), "\n ", gettextf("Cox model: response is %s", deparse(object$terms[[2]]), domain = "R-survival"), "\n", 
> 		   gettext("Terms added sequentially (first to last)"), "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/anova.coxphlist.S Recommended/survival/R/anova.coxphlist.S
4c4
<     if (!is.list(object)) stop("First argument must be a list")
---
>     if (!is.list(object)) stop(gettextf("'%s' argument must be a list", "object"))
6c6
< 	     stop("Argument must be a list of coxph models")
---
> 	     stop("'object' argument must be a list of objects of class \"coxph\"")
8c8
<         stop("Can't do anova tables with robust variances")
---
>         stop("cannot do anova tables with robust variances")
15,16c15
<         warning(paste("Models with response", deparse(responses[!sameresp]), 
<             "removed because response differs from", "model 1"))
---
> 	warning(gettextf("models with response %s removed because response differs from model 1", deparse(responses[!sameresp])))
37c36
<     dimnames(table) <- list(1:nmodels, 
---
>     dimnames(table) <- list(seq_len(nmodels), 
39,42c38,39
<     title <- paste("Analysis of Deviance Table\n Cox model: response is ",
< 		   responses[1]) 
<     topnote <- paste(" Model ", format(1:nmodels), ": ", variables, 
< 		     sep = "", collapse = "\n")
---
>     title <- paste(gettext("Analysis of Deviance Table"), "\n ", gettextf("Cox model: response is %s", responses[1]), sep = "")
>     topnote <- paste(gettextf(" Model %s:", format(seq_len(nmodels))), variables, collapse = "\n")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/attrassign.R Recommended/survival/R/attrassign.R
27c27
<                 stop("need terms object")
---
>                 stop(gettextf("'%s' argument is not an object of class %s", "tt", dQuote("terms")))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/basehaz.R Recommended/survival/R/basehaz.R
8c8
<         stop("must be a coxph object")
---
>         stop(gettextf("'%s' argument is not an object of class %s", "fit", dQuote("coxph")))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/cch.R Recommended/survival/R/cch.R
20c20
<         stop("Multiple records per id not allowed")
---
>         stop("multiple records per id not allowed")
25c25
<         stop("Permissible values for subcohort indicator are 0/1 or TRUE/FALSE")
---
>         stop("permissible values for subcohort indicator are 0/1 or TRUE/FALSE")
27c27
<         stop("Number of records greater than cohort size")
---
>         stop("number of records greater than cohort size")
35c35
<             warning("`robust' not implemented for stratified analysis.")
---
>             warning("'robust' argument is not implemented for stratified analysis")
37c37
<             stop("method (",method,") requires 'stratum'")
---
>             stop(gettextf("method (%s) requires 'stratum'", method))
39c39
<             stop("cohort.size and stratum do not match")
---
>             stop("'cohort.size' and 'stratum' levels lengths do not match")
45c45
<             warning("`robust' ignored for  method (",method,")")
---
>             warning(gettextf("'%s' argument ignored for method (%s)", "robust", method))
47c47
<             warning("'stratum' ignored for method (",method,")")
---
>             warning(gettextf("'%s' argument ignored for method (%s)", "stratum", method))
53c53
<         stop("Population smaller than sample in some strata")
---
>         stop("population smaller than sample in some strata")
62c62
<         stop("Response must be a survival object")
---
>         stop(gettextf("response is not an object of class %s", dQuote("Surv")))
66c66
<                  stop(paste("Cox model doesn't support \"", type, "\" survival data", sep = "")),
---
>                  stop(gettextf("cox model doesn't support \"%s\" survival data", type)),
70c70,73
<         stop(sum(!subcoh & !cens),"censored observations not in subcohort")
---
>         stop(sprintf(ngettext(sum(!subcoh & !cens),
> 				"%d censored observation not in subcohort",
> 				"%d censored observations not in subcohort", domain = "R-survival"),
> 			 sum(!subcoh & !cens)), domain = NA)
204c207
<   idx <- 1:length(nobs)
---
>   idx <- seq_along(nobs)
246c249
<   for (j in 1:jj) {
---
>   for (j in seq_len(jj)) {
297c300
<   for (j in 1:jj) {
---
>   for (j in seq_len(jj)) {
331,332c334
<     dimnames(coefficients) <- list(names(coef), c("Value", 
<                                                   "SE", "Z", "p"))
---
>     dimnames(coefficients) <- list(names(coef), c("Value", "SE", "Z", "p"))
340c342
<         cat("Exposure-stratified case-cohort analysis,", x$method, "method.\n")
---
>         cat(gettextf("Exposure-stratified case-cohort analysis, %s method.", x$method, domain = "R-survival"), "\n", sep = "")
344,346c346
<         cat("Case-cohort analysis,")
<         cat("x$method,", x$method,"\n with subcohort of",
<             x$subcohort.size,"from cohort of", x$cohort.size,"\n\n")
---
>         cat(gettextf("Case-cohort analysis, x$method, %s with subcohort of %s from cohort of %s", x$method, x$subcohort.size, x$cohort.size, domain = "R-survival"), "\n\n", sep = "")
348,349c348,349
<     cat("Call: "); print(x$call)
<     cat("\nCoefficients:\n")
---
>     cat(gettext("Call: ", domain = "R-survival")); print(x$call)
>     cat("\n", gettext("Coefficients:", domain = "R-survival"), "\n", sep = "")
367,368c367
<     dimnames(coefficients) <- list(names(coef), c("Value", 
<                                                   "SE", "Z", "p"))
---
>     dimnames(coefficients) <- list(names(coef), c("Value", "SE", "Z", "p"))
382c381
<         cat("Exposure-stratified case-cohort analysis,", x$method, "method.\n")
---
>         cat(gettextf("Exposure-stratified case-cohort analysis, %s method.", x$method, domain = "R-survival"), "\n", sep = "")
386,388c385
<         cat("Case-cohort analysis,")
<         cat("x$method,", x$method,"\n with subcohort of",
<             x$subcohort.size,"from cohort of", x$cohort.size,"\n\n")
---
>         cat(gettextf("Case-cohort analysis, x$method, %s with subcohort of %s from cohort of %s", x$method, x$subcohort.size, x$cohort.size, domain = "R-survival"), "\n\n", sep = "")
390,391c387,388
<     cat("Call: "); print(x$call)
<     cat("\nCoefficients:\n")
---
>     cat(gettext("Call: ", domain = "R-survival")); print(x$call)
>     cat("\n", gettext("Coefficients:", domain = "R-survival"), "\n", sep = "")
393,394c390,391
<                   "(95%"=exp(x$coefficients[,1]-1.96*x$coefficients[,2]),
<                   "CI)"=exp(x$coefficients[,1]+1.96*x$coefficients[,2]),
---
>                   "(95%"=exp(x$coefficients[,1] - qnorm(0.975)*x$coefficients[,2]),
>                   "CI)"=exp(x$coefficients[,1] + qnorm(0.975)*x$coefficients[,2]),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/clogit.R Recommended/survival/R/clogit.R
16c16
<     if (indx[1]==0) stop("A formula argument is required")
---
>     if (indx[1]==0) stop(gettextf("'%s' argument is required", "formula"))
66c66
<     stop("predicted survival curves are not defined for a clogit model")
---
>     stop("predicted survival curves are not defined for a 'clogit' model")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/coxph.R Recommended/survival/R/coxph.R
19c19
<                           names(extraArgs)[indx==0L]), domain = NA)
---
>                           names(extraArgs)[indx==0L]), domain = "R-survival")
42c42
<     if (nrow(mf) ==0) stop("No (non-missing) observations")
---
>     if (nrow(mf) ==0) stop("no (non-missing) observations")
50,51c50
<         stop(paste("Cox model doesn't support \"", type,
<                           "\" survival data", sep=''))
---
>         stop(gettextf("Cox model doesn't support \"%s\" survival data", type))
92c91
<                  stop("The tt argument must contain function or list of functions")
---
>                  stop(gettextf("'%s' argument must contain a function or list of functions", "tt"))
96c95
<                      for (i in 1:ntrans) temp[[i]] <- tt[[1]]
---
>                      for (i in seq_len(ntrans)) temp[[i]] <- tt[[1]]
99c98
<                  else stop("Wrong length for tt argument")
---
>                  else stop(gettextf("wrong length for '%s' argument", "tt"))
102c101
<          else stop("The tt argument must contain a function or list of functions")
---
>          else stop(gettextf("'%s' argument must contain a function or list of functions", "tt"))
150c149
<          for (i in 1:ntrans) {
---
>          for (i in seq_len(ntrans)) {
238c237
<         if (length(init) != ncol(X)) stop("wrong length for init argument")
---
>         if (length(init) != ncol(X)) stop(gettextf("wrong length for '%s' argument", "init"))
288c287
<         else stop(paste ("Unknown method", method))
---
>         else stop(gettextf("unknown '%s' method", method))
299,301c298,299
<            vars <- (1:length(fit$coefficients))[is.na(fit$coefficients)]
<            msg <-paste("X matrix deemed to be singular; variable",
<                            paste(vars, collapse=" "))
---
>            vars <- seq_along(fit$coefficients)[is.na(fit$coefficients)]
>            msg <- gettextf("X matrix deemed to be singular; variable %s", paste(vars, collapse=" "))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/coxph.control.S Recommended/survival/R/coxph.control.S
9,10c9,10
<     if (iter.max <0) stop("Invalid value for iterations")
<     if (eps <=0) stop ("Invalid convergence criteria")
---
>     if (iter.max <0) stop("invalid value for iterations")
>     if (eps <=0) stop("invalid convergence criteria")
12,14c12,14
< 	    warning("For numerical accuracy, tolerance should be < eps")
<     if (toler.inf <=0) stop ("The inf.warn setting must be >0")
<     if (!is.logical(timefix)) stop("timefix must be TRUE or FALSE")
---
> 	    warning("for numerical accuracy, tolerance should be < eps")
>     if (toler.inf <=0) stop("'toler.inf' argument must be >0")
>     if (!is.logical(timefix)) stop(gettextf("'%s' argument must be TRUE or FALSE", "timefix"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/coxph.rvar.S Recommended/survival/R/coxph.rvar.S
5c5
< 	stop ("First argument must be a fitted Cox model")
---
> 	stop(gettextf("'%s' argument is not an object of class %s", "fit", dQuote("coxph")))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/coxph.wtest.S Recommended/survival/R/coxph.wtest.S
18c18
< 	else stop("Argument lengths do not match")
---
> 	else stop(gettextf("'%s' and '%s' arguments are of different lengths", "var", "b"))
23c23
<         else stop("Argument lengths do not match")
---
>         else stop(gettextf("'%s' and '%s' arguments are of different lengths", "var", "b"))
27,28c27,28
<             stop("First argument must be a square matrix")
<     if (nrow(var) != nvar) stop("Argument lengths do not match")
---
>             stop("'var' argument is not a square matrix")
>     if (nrow(var) != nvar) stop(gettextf("'%s' and '%s' arguments are of different lengths", "var", "b"))
37c37
<     else          list(test=temp$tests[1:ntest], df=temp$df, 
---
>     else          list(test=temp$tests[seq_len(ntest)], df=temp$df, 
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/dsurvreg.S Recommended/survival/R/dsurvreg.S
6c6
<     if (is.null(dist)) stop("Distribution not found")
---
>     if (is.null(dist)) stop(gettextf("%s distribution was not found", sQuote(distribution)))
25c25
<     if (is.null(dist)) stop("Distribution not found")
---
>     if (is.null(dist)) stop(gettextf("%s distribution was not found", sQuote(distribution)))
41c41
<     if (is.null(dist)) stop("Distribution not found")
---
>     if (is.null(dist)) stop(gettextf("%s distribution was not found", sQuote(distribution)))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/finegray.R Recommended/survival/R/finegray.R
7c7
<     if (indx[1] ==0) stop("A formula argument is required")
---
>     if (indx[1] ==0) stop(gettextf("'%s' argument is required", "formula"))
17c17
<     if (nrow(mf) ==0) stop("No (non-missing) observations")
---
>     if (nrow(mf) ==0) stop("no (non-missing) observations")
21c21
<     if (!inherits(Y, "Surv")) stop("Response must be a survival object")
---
>     if (!inherits(Y, "Surv")) stop(gettextf("'%s' argument is not an object of class %s", "formula", dQuote("Surv")))
44c44
<         if (!is.null(id)) stop("an id argument and a cluster() term are redundant")
---
>         if (!is.null(id)) stop("'id' argument and a 'cluster()' term are redundant")
81c81
<             stop ("etype argument has a state that is not in the data")
---
>             stop("'etype' argument has a state that is not in the data")
189c189
<         tlist <- lapply(1:max(istrat), stratfun)
---
>         tlist <- lapply(seq_len(max(istrat)), stratfun)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/frailty.S Recommended/survival/R/frailty.S
12c12
< 	    stop(paste("Function '", temp, "' not found", sep=""))
---
> 	    stop(gettextf("function %s was not found", sQuote(temp)))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/frailty.brent.S Recommended/survival/R/frailty.brent.S
9c9
<     if (length(y) != n) stop ("Length mismatch for x and y")
---
>     if (length(y) != n) stop(gettextf("'%s' and '%s' arguments are of different lengths", "x", "y"))
18,19c18,19
<     best <- (1:n)[yy==max(y)]
<     if (length(best) >1) stop("Ties for max(y), I surrender") #fix this later
---
>     best <- seq_len(n)[yy == max(y)]
>     if (length(best) >1) stop("Ties for 'max(y)', I surrender") #fix this later
43,44c43
<     if (new < xx[1] || new > xx[3] ||
< 	      ( (n>4) && (new-x[n]) > .5*abs(x[n-1]-x[n-2]))) {
---
>     if (new < xx[1] || new > xx[3] || ( (n>4) && (new-x[n]) > .5*abs(x[n-1]-x[n-2]))) {
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/frailty.controlaic.S Recommended/survival/R/frailty.controlaic.S
21,22c21
< 	history <- c(theta=old$theta, loglik=loglik,
< 		     df=df, aic=loglik-df, aicc=loglik - dfc)
---
> 	history <- c(theta = old$theta, loglik = loglik, df = df, aic = loglik - df, aicc = loglik - dfc)
29,30c28
<     history <- rbind(old$history,c(old$theta, loglik, df, loglik-df, 
< 				   loglik -dfc))
---
>     history <- rbind(old$history,c(old$theta, loglik, df, loglik - df, loglik - dfc))
48,49c46
<     else  newtheta <- frailty.brent(x, aic, lower=parms$lower, 
< 				    upper=parms$upper)
---
>     else  newtheta <- frailty.brent(x, aic, lower = parms$lower, upper = parms$upper)
53c50
< 	cat("    new theta=", format(newtheta), "\n\n")
---
> 	cat("    ", gettextf("new theta= %s", format(newtheta), domain = "R-survival"), "\n\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/frailty.controldf.S Recommended/survival/R/frailty.controldf.S
17,18c17
< 	return(list(theta=theta, done=FALSE, 
< 		    history=cbind(thetas=parms$thetas, dfs=parms$dfs)))
---
> 	return(list(theta = theta, done = FALSE, history = cbind(thetas = parms$thetas, dfs = parms$dfs)))
33,34c32
< 	return(list(theta=theta, done=FALSE,
< 		    history=cbind(thetas=thetas, dfs=dfs), half=0))
---
> 	return(list(theta = theta, done = FALSE, history = cbind(thetas = thetas, dfs = dfs), half = 0))
39,40c37
< 	done <- (iter>1 &&
< 		 (abs(dfs[nx]-parms$df) < eps))
---
> 	done <- (iter>1 && (abs(dfs[nx]-parms$df) < eps))
67,68c64
< 		    cat("  bisect:new theta=" , format( mean(x[b1+0:1])), 
< 			"\n\n")
---
> 		    cat("  ", gettextf("bisect:new theta= %s" , format( mean(x[b1+0:1])), domain = "R-survival"), "\n\n", sep = "")
70,72c66
< 		return(list(theta= mean(x[b1+0:1]),done=done, 
< 			      history=cbind(thetas=thetas, dfs=dfs), 
< 				            half=max(old$half, 0) +1))
---
> 		return(list(theta = mean(x[b1+0:1]),done = done, history = cbind(thetas = thetas, dfs = dfs), half = max(old$half, 0) +1))
77,78c71
< 	    if ((b1+1)==nx ||
< 		(b1>1 &&  ((target -y[b1]) < (y[b1+1] -target))))
---
> 	    if ((b1+1)==nx || (b1>1 &&  ((target -y[b1]) < (y[b1+1] -target))))
92c85
< 	    cat("  new theta=" , format(x[b1] + exp(newx)), "\n\n")
---
> 	    cat("  ", gettextf("new theta= %s" , format(x[b1] + exp(newx)), domain = "R-survival"), "\n\n", sep = "")
94,95c87
< 	list(theta=x[b1] + exp(newx), done=done, 
< 	     history=cbind(thetas=thetas, dfs=dfs), half=0)
---
> 	list(theta = x[b1] + exp(newx), done = done, history = cbind(thetas = thetas, dfs = dfs), half = 0)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/frailty.controlgam.S Recommended/survival/R/frailty.controlgam.S
26c26
< 	    if (is.matrix(group)) group <- c(group %*% 1:ncol(group))
---
> 	    if (is.matrix(group)) group <- c(group %*% seq_len(ncol(group)))
54c54
< 		    cat("    new theta=", theta, "\n\n")
---
> 		    cat("    ", gettextf("new theta= %s", theta, domain = "R-survival"), "\n\n", sep = "")
56,57c56
< 		list(theta=theta, done=FALSE, history=history,
< 		     c.loglik= loglik+correct)
---
> 		list(theta = theta, done = FALSE, history = history, c.loglik = loglik + correct)
70c69
< 		    cat("    new theta=", format(newtheta), "\n\n")
---
> 		    cat("    ", gettextf("new theta= %s", format(newtheta), domain = "R-survival"), "\n\n", sep = "")
72,73c71
< 		list(theta=newtheta, done=done, history=history, 
< 		     c.loglik = loglik + correct)
---
> 		list(theta = newtheta, done = done, history = history, c.loglik = loglik + correct)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/frailty.controlgauss.S Recommended/survival/R/frailty.controlgauss.S
44c44
< 		    cat("    new theta=", theta, "\n\n")
---
> 		    cat("    ", gettextf("new theta= %s", theta, domain = "R-survival"), "\n\n", sep = "")
59c59
< 		    b1 <- (1:iter)[ord==iter]
---
> 		    b1 <- seq_len(iter)[ord==iter]
82c82
< 		    cat("    new theta=", format(newtheta), "\n\n")
---
> 		    cat("    ", gettextf("new theta= %s", format(newtheta), domain = "R-survival"), "\n\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/is.ratetable.R Recommended/survival/R/is.ratetable.R
21,22c21
< 	if (length(att$dimnames)!=nd ||
< 			 length(att$cutpoints)!=nd) return(FALSE)
---
> 	if (length(att$dimnames) != nd || length(att$cutpoints) != nd) return(FALSE)
42c41
< 	for (i in 1:nd) {
---
> 	for (i in seq_len(nd)) {
46c45
< 	    if (fac[i]!=1 && any(order(att$cutpoints[[i]])!= 1:n)) return(FALSE)
---
> 	    if (fac[i]!=1 && any(order(att$cutpoints[[i]])!= seq_len(n))) return(FALSE)
55c54
<     if (!inherits(x, 'ratetable')) msg <- c(msg, "wrong class")
---
>     if (!inherits(x, 'ratetable')) msg <- c(msg, stop(gettextf("'%s' argument is not an object of class %s", "x", dQuote("ratetable"))))
59c58
<         msg <- c(msg, paste("missing attribute:", dlist[temp]))
---
>         msg <- c(msg, paste(gettext("missing attribute:"), dlist[temp]))
66c65
<         msg <- c(msg, 'length of the data does not match prod(dim)')
---
>         msg <- c(msg, gettext("length of the data does not match 'prod(dim)'"))
69c68
< 	     msg <- c(msg, 'dimnames is not a list')
---
> 	     msg <- c(msg, gettextf("'%s' component is not a list", "dimnames"))
71c70
< 	     msg <- c(msg, 'cutpoints is not a list')
---
> 	     msg <- c(msg, gettextf("'%s' component is not a list", "cutpoints"))
74c73
<         msg <- c(msg, 'wrong length for dimnames')
---
>         msg <- c(msg, gettextf("wrong length for '%s' component", "dimnames"))
76c75
<         msg <- c(msg, "wrong length for dimid, or dimnames do not have names")
---
>         msg <- c(msg, gettextf("wrong length for '%s' component, or dimnames do not have names", "dimid"))
78c77
<         msg <- c(msg, "one of the dimnames identifiers is blank")
---
>         msg <- c(msg, gettext("one of the dimnames identifiers is blank"))
81c80
<         msg <- c(msg, 'wrong length for cutpoints')
---
>         msg <- c(msg, gettextf("wrong length for '%s' component", "cutpoints"))
85c84
<             msg <- c(msg, 'type attribute must be 1, 2, 3, or 4')
---
>             msg <- c(msg, gettext("'type' attribute must be 1, 2, 3, or 4"))
88c87
<             msg <- c(msg, 'wrong length for type attribute')
---
>             msg <- c(msg, gettext("wrong length for 'type' attribute"))
92,93c91
<                 msg <- c(msg, paste0("type[", indx, 
<                    "] is 3 or 4 but the cutpoint is not one of the date types"))
---
>                 msg <- c(msg, gettextf("type[%d] is 3 or 4 but the cutpoint is not one of the date types", indx))
95,96c93
<             if (length(indx)>0) msg <- c(msg, paste0("type[", indx, 
<                             "] is numeric or factor but the cutpoint is a date"))
---
>             if (length(indx)>0) msg <- c(msg, gettextf("type[%d] is numeric or factor but the cutpoint is a date", indx))
99c96
<             msg <- c(msg, "two dimenesions idenitied as US ratetable years") 
---
>             msg <- c(msg, gettext("two dimenesions idenitied as US ratetable years")) 
103,104c100,101
<         if (any(is.na(fac))) msg <- c(msg, "illegal 'factor' attribute of NA")
<         if (any(fac <0)) msg <- c(msg, "illegal 'factor' attribute of <0")
---
>         if (any(is.na(fac))) msg <- c(msg, gettext("illegal 'factor' attribute of NA"))
>         if (any(fac <0)) msg <- c(msg, gettext("illegal 'factor' attribute of <0"))
106c103
<             msg <- c(msg, 'wrong length for factor')
---
>             msg <- c(msg, gettext('wrong length for factor'))
109c106
<             msg <- c(msg, "two dimenesions idenitied as US ratetable years") 
---
>             msg <- c(msg, gettext("two dimenesions idenitied as US ratetable years")) 
111c108
<    else msg <- c(msg, "missing the 'type' attribute")
---
>    else msg <- c(msg, gettext("missing the 'type' attribute"))
113c110
<     for (i in 1:nd) {
---
>     for (i in seq_len(nd)) {
116c113
< 		msg <- c(msg, paste('dimname', i, 'is the wrong length'))
---
> 		msg <- c(msg, gettextf("dimname %d is the wrong length", i))
120,122c117,119
<                 msg <- c(msg, paste('wrong length for cutpoints', i))
<             else if (any(order(att$cutpoints[[i]])!= 1:n)) 
< 		msg <- c(msg, paste('unsorted cutpoints for dimension',i))
---
>                 msg <- c(msg, gettextf("wrong length for cutpoints %d", i))
>             else if (any(order(att$cutpoints[[i]])!= seq_len(n))) 
> 		msg <- c(msg, gettextf("unsorted cutpoints for dimension %d", i))
126,127c123
< 		msg <- c(msg, paste0('attribute type[', i, 
<                                     '] is continuous; cutpoint should be null'))
---
> 		msg <- c(msg, gettextf("attribute type[ %d ] is continuous; cutpoint should be null", i))
130c126
< 		msg <- c(msg, 'only the last dimension can be interpolated')
---
> 		msg <- c(msg, gettext("only the last dimension can be interpolated"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/match.ratetable.R Recommended/survival/R/match.ratetable.R
13c13
<     if (!is.ratetable(ratetable)) stop("Invalid rate table")
---
>     if (!is.ratetable(ratetable)) stop("invalid rate table")
42,43c42
<        stop(paste("Argument '", dimid[is.na(ord)],
< 	    "' needed by the ratetable was not found in the data", sep=''))
---
>        stop(gettextf("'%s' argument needed by the ratetable was not found in the data", dimid[is.na(ord)]))
59,61c58
<         stop(paste("Data has a date type variable, but the reference",
<                    "ratetable is not a date variable:", 
<                    paste(dimid[indx], collapse=" ")))
---
>         stop(gettextf("data has a date type variable, but the reference ratetable is not a date variable %s", paste(dimid[indx], collapse=" ")))
69c66
<     for (i in (1:ncol(R))) {
---
>     for (i in seq_len(ncol(R))) {
73,74c70
< 	    if (rtype[i]!=1) stop(paste("for this ratetable,", dimid[i],
< 				     "must be a continuous variable"))
---
> 	    if (rtype[i]!=1) stop(gettextf("for this ratetable, %s must be a continuous variable", dimid[i]))
77,78c73
< 		stop(paste("Levels do not match for ratetable() variable",
< 			    dimid[i]))
---
> 		stop(gettextf("levels do not match for 'ratetable()' variable %s", dimid[i]))
80,81c75
<                 stop(paste("Non-unique ratetable match for variable",
<                                dimid[i]))
---
>                 stop(gettextf("non-unique ratetable match for variable %s", dimid[i]))
89,91c83,84
< 		if (any(floor(temp)!=temp) || any(temp<=0) ||
< 			    max(temp) > length(dtemp[[i]]))
< 		stop(paste("The variable", dimid[i], "is out of range"))
---
> 		if (any(floor(temp)!=temp) || any(temp<=0) || max(temp) > length(dtemp[[i]]))
> 		stop(gettextf("the variable %s is out of range", dimid[i]))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/neardate.R Recommended/survival/R/neardate.R
13,16c13,16
<     if (missing(id1)) stop("id1 argument is required")
<     if (missing(id2)) stop("id2 argument is required")
<     if (missing(y1))  stop("y1 argument is required")
<     if (missing(y2))  stop("y2 argument is required")
---
>     if (missing(id1)) stop(gettextf("'%s' argument is required", "id1"))
>     if (missing(id2)) stop(gettextf("'%s' argument is required", "id2"))
>     if (missing(y1))  stop(gettextf("'%s' argument is required","y1"))
>     if (missing(y2))  stop(gettextf("'%s' argument is required", "y2"))
18c18
<             stop("id1 and y1 have different lengths")
---
>             stop(gettextf("'%s' and '%s' arguments are of different lengths", "id1", "y1"))
20c20
<             stop("id2 and y2 have different lengths")
---
>             stop(gettextf("'%s' and '%s' arguments are of different lengths", "id2", "y2"))
28c28
<         stop("y1 and y2 must be sortable")
---
>         stop("'y1' and 'y2' arguments must be sortable")
38c38
<     rowid <- 1:length(y2)
---
>     rowid <- seq_len(length(y2))
69c69
<         indx2 <- approx(hash2, 1:n2, hash1, method="constant", yleft=NA,
---
>         indx2 <- approx(hash2, seq_len(n2), hash1, method="constant", yleft=NA,
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/predict.coxph.R Recommended/survival/R/predict.coxph.R
8c8
<         stop("Primary argument much be a coxph object")
---
>         stop(gettextf("'%s' argument is not an object of class %s", "object", dQuote("coxph")))
25c25
<                     terms <1)) stop("Invalid terms argument")
---
>                     terms <1)) stop(gettextf("invalid '%s' argument", "terms"))
28c28
<            stop("a name given in the terms argument not found in the model")
---
>            stop("a name given in the 'terms' argument not found in the model")
177c177
<                     j1 <- approx(afit$time, 1:afit.n, y[indx,1], method='constant',
---
>                     j1 <- approx(afit$time, seq_len(afit.n), y[indx,1], method='constant',
188c188
<                         j2 <- approx(afit$time, 1:afit.n, y[indx,2], method='constant',
---
>                         j2 <- approx(afit$time, seq_len(afit.n), y[indx,2], method='constant',
205c205
<                     j1 <- approx(afit$time, 1:afit.n, newy[indx2,1], 
---
>                     j1 <- approx(afit$time, seq_len(afit.n), newy[indx2,1], 
221c221
<                         j2 <- approx(afit$time, 1:afit.n, newy[indx2,2], 
---
>                         j2 <- approx(afit$time, seq_len(afit.n), newy[indx2,2], 
292c292
<             for (i in 1:nterms) {
---
>             for (i in seq_len(nterms)) {
319c319
<         if (length(collapse) != n2) stop("Collapse vector is the wrong length")
---
>         if (length(collapse) != n2) stop("Collapse vector is of the wrong length")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/print.coxph.S Recommended/survival/R/print.coxph.S
5c5
< 	cat("Call:\n")
---
> 	cat(gettext("Call:", domain = "R-survival"), "\n", sep = "")
10c10
< 	cat(" Coxph failed.", x$fail, "\n")
---
> 	cat(gettext(" Coxph failed. ", domain = "R-survival"), x$fail, "\n", sep = "")
19c19
<         stop("Input is not valid")
---
>         stop("input is not valid")
42,45c42,43
<     cat("Likelihood ratio test=", format(round(logtest, 2)), "  on ",
< 	df, " df,", " p=", 
<         format.pval(pchisq(logtest, df, lower.tail=FALSE), digits=digits), 
<         "\n",  sep="")
---
>     cat(gettextf("Likelihood ratio test = %s on %s df, p=%s", format(round(logtest, 2)), df, format.pval(pchisq(logtest, df, lower.tail=FALSE), digits=digits), domain = "R-survival"))
>     cat("\n")
48c46
<     if (!is.null(x$nevent)) cat(", number of events=", x$nevent, "\n")
---
>     if (!is.null(x$nevent)) cat(", ", gettextf("number of events= %d", x$nevent, domain = "R-survival"), "\n", sep = "")
51c49
< 	cat("\   (", naprint(omit), ")\n", sep="")
---
> 	cat("   (", naprint(omit), ")\n", sep="")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/print.coxph.null.S Recommended/survival/R/print.coxph.null.S
6c6
< 	cat("Call:  ")
---
> 	cat(gettext("Call: ", domain = "R-survival"))
11c11
<     cat("Null model\n  log likelihood=", format(x$loglik), "\n")
---
>     cat(gettext("Null model", domain = "R-survival"), "\n  ", gettextf("log likelihood=%s", format(x$loglik), domain = "R-survival"), "\n", sep = "")
14,16c14,15
< 	cat("  n=", x$n, " (", naprint(omit), ")\n",
< 				sep="")
<     else cat("  n=", x$n, "\n")
---
> 	cat("  n=", x$n, " (", naprint(omit), ")\n", sep = "")
>     else cat("  n=", x$n, "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/print.ratetable.R Recommended/survival/R/print.ratetable.R
4,5c4,5
<         cat ("Rate table with dimension(s):", names(dimnames(x)), "\n")
<     else  cat ("Rate table with dimension(s):", attr(x, 'dimid'), "\n")
---
>         cat(sprintf(ngettext(length(x), "Rate table with %d dimension:", "Rate table with %d dimesions:", domain = "R-survival"), length(x)), names(dimnames(x)), "\n")
>     else  cat(sprintf(ngettext(length(attr(x, 'dimid')), "Rate table with %d dimension:", "Rate table with %d dimensions:", domain = "R-survival"), length(attr(x, 'dimid'))), " ", paste(attr(x, 'dimid'), collapse = ", "), "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/pspline.R Recommended/survival/R/pspline.R
9c9
< 	if (theta <=0 || theta >=1) stop("Invalid value for theta")
---
> 	if (theta <=0 || theta >=1) stop(gettextf("invalid '%s' argument", "theta"))
18c18
< 	if (df <=1) stop ('Too few degrees of freedom')
---
> 	if (df <=1) stop("too few degrees of freedom")
21c21
<         if (df > nterm) stop("`nterm' too small for df=",df)
---
>         if (df > nterm) stop(gettextf("'nterm' argument is too small for df=%s", df))
29c29
<     if (nterm < 3) stop("Too few basis functions")
---
>     if (nterm < 3) stop("too few basis functions")
34c34
<             stop("Invalid values for Boundary.knots")
---
>             stop(gettextf("invalid '%s' argument", "Boundary.knots"))
76c76
<             stop("combine must be an increasing vector of positive integers")
---
>             stop("'combine' argument must be an increasing vector of positive integers")
79c79
<             stop("wrong length for combine")
---
>             stop(gettextf("wrong length for '%s' argument", "combine"))
82c82
<         for (i in 1:length(uc)) tmat[combine==uc[i], i] <- 1
---
>         for (i in seq_along(uc)) tmat[combine==uc[i], i] <- 1
91c91
<     if (intercept) xnames <-paste('ps(', xname, ')', 1:nvar, sep='')
---
>     if (intercept) xnames <-paste('ps(', xname, ')', seq_len(nvar), sep='')
213c213
<         stop("Argment must be the result of a call to pspline")
---
>         stop(gettextf("'%s' argument is not an object of class %s", "x", dQuote("pspline")))
218c218
<         indx <- 1:(ncol(x)+1) + (nknot- (ncol(x) +1))/2
---
>         indx <- seq_len(ncol(x)+1) + (nknot- (ncol(x) +1))/2
222c222
<         indx <- 1:ncol(x) + (nknot - ncol(x))/2
---
>         indx <- seq_len(ncol(x)) + (nknot - ncol(x))/2
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/pyears.R Recommended/survival/R/pyears.R
15c15
<     if (indx[1] ==0) stop("A formula argument is required")
---
>     if (indx[1] ==0) stop(gettextf("'%s' argument is required", "formula"))
28c28
<             stop("Can have only 1 ratetable() call in a formula")
---
>             stop("Can have only 1 'ratetable()' call in a formula")
33c33
<                 stop("The ratetable() call in a formula is depreciated")
---
>                 stop("The 'ratetable()' call in a formula is depreciated")
43c43
<                 stop ("Invalid rcall argument")
---
>                 stop(gettextf("invalid '%s' argument", "rcall"))
58c58
<         else stop("Invalid rate table")
---
>         else stop("invalid rate table")
62c62
<             stop("Variable not found in the ratetable:", (names(rcall))[is.na(temp)])
---
>             stop(gettextf("Variable not found in the ratetable: %s", (names(rcall))[is.na(temp)]))
98,100c98
<                 warning(paste(nzero, 
<                          "observations with an event and 0 follow-up time,",
<                        "any rate calculations are statistically questionable"))
---
>                 warning(sprintf(ngettext(nzero, "%d observation with an event and 0 follow-up time, any rate calculations are statistically questionable","%d observations with an event and 0 follow-up time, any rate calculations are statistically questionable", domain = "R-survival"), nzero), domain = NA)
107c105
<     if (is.null(n) || n==0) stop("Data set has 0 observations")
---
>     if (is.null(n) || n==0) stop("data set has 0 observations")
132c130
<         else stop("Invalid ratetable")
---
>         else stop("invalid rate table")
147c145
<         for (i in 1:odim) {
---
>         for (i in seq_len(odim)) {
214c212
<                 cuts[[temp]] <- round(approx(nint*(1:nyear), cuts[[temp]],
---
>                 cuts[[temp]] <- round(approx(nint*(seq_len(nyear)), cuts[[temp]],
287c285
<         row.names(df) <- 1:nrow(df)
---
>         row.names(df) <- seq_len(nrow(df))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/ratetable.R Recommended/survival/R/ratetable.R
19c19
< 	for (i in (1:length(change))[change])
---
> 	for (i in seq_along(change)[change])
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/ratetableold.R Recommended/survival/R/ratetableold.R
19,20c19
<             stop(paste("Aguments do not all have the same length (arg ",
< 			i, ")", sep=''))
---
>             stop(gettextf("Aguments do not all have the same length (arg %d)", i))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/residuals.coxph.S Recommended/survival/R/residuals.coxph.S
27c27
< 	stop(paste(otype, 'residuals are not available for the exact method'))
---
> 	stop(gettextf("'%s' residuals are not available for the exact method", otype))
170c170
< 	if (length(collapse) !=n) stop("Wrong length for 'collapse'")
---
> 	if (length(collapse) !=n) stop(gettextf("wrong length for '%s' argument", "collapse"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/residuals.coxph.null.S Recommended/survival/R/residuals.coxph.null.S
8,9c8
<     else stop(paste("\'", type, "\' residuals are not defined for a null model",
< 			sep=""))
---
>     else stop(gettextf("'%s' residuals are not defined for a null model", type))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/ridge.S Recommended/survival/R/ridge.S
10c10
< 	    stop("Only one of df or theta can be specified")
---
> 	    stop("only one of 'df' or 'theta' arguments can be specified")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/statefig.R Recommended/survival/R/statefig.R
43c43
<         space <- function(n) (1:n -.5)/n   # centers of the boxes
---
>         space <- function(n) (seq_len(n) -.5)/n   # centers of the boxes
51c51
<             for (i in 1:n) cbox[ix==i,2] <- 1 -space(layout[i])
---
>             for (i in seq_len(n)) cbox[ix==i,2] <- 1 -space(layout[i])
54c54
<             for (i in 1:n) cbox[ix==i,1] <- space(layout[i])
---
>             for (i in seq_len(n)) cbox[ix==i,1] <- space(layout[i])
69c69
<         for (i in 1:nstate) 
---
>         for (i in seq_len(nstate)) 
114,115c114,115
<     for (j in 1:nstate) {
<         for (i in 1:nstate) {
---
>     for (j in seq_len(nstate)) {
>         for (i in seq_len(nstate)) {
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/strata.S Recommended/survival/R/strata.S
16c16
<         argname <- words[1:nterms]
---
>         argname <- words[seq_len(nterms)]
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/summary.coxph.R Recommended/survival/R/summary.coxph.R
10c10
<          stop("Input is not valid")
---
>          stop("input is not valid")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/summary.ratetable.R Recommended/survival/R/summary.ratetable.R
6c6
<     if (!inherits(rtable, 'ratetable')) stop("Argument is not a rate table")
---
>     if (!inherits(rtable, 'ratetable')) stop(gettextf("'%s' argument is not an object of class %s", "object", dQuote("ratetable")))
10c10
<     cat (" Rate table with", ncat, "dimensions:\n")
---
>     cat(sprintf(ngettext(ncat, "Rate table with %d dimension:", "Rate table with %d dimensions:", domain = "R-survival"), ncat), "\n", sep = "")
13c13
<     for (i in 1:ncat) {
---
>     for (i in seq_len(ncat)) {
17,20c17
<                 cat("\t", dimid[i], " ranges from ", 
<                     format(min(att$cutpoints[[i]])), " to ", 
<                     format(max(att$cutpoints[[i]])), "; with ", att$dim[i],
<                     " categories\n", sep='')
---
>                 cat("\t", gettextf("%s ranges from %s to %s; with %d categories\n", dimid[i], format(min(att$cutpoints[[i]])), format(max(att$cutpoints[[i]])), att$dim[i], domain = "R-survival"), sep = "")
23,24c20
<                 cat("\t", dimid[i], " has levels of: ",
<                     paste(att$dimnames[[i]], collapse=' '), "\n", sep='')
---
>                 cat("\t", gettextf("%s has levels of: %s", dimid[i], paste(att$dimnames[[i]], collapse = ' '), domain = "R-survival"), "\n", sep = '')
27,31c23
<                 cat("\t", dimid[i], " ranges from " , 
<                     format(min(att$cutpoints[[i]])), " to ", 
<                     format(max(att$cutpoints[[i]])), "; with ", att$dim[i],
<                     " categories,\n\t\tlinearly interpolated in ",
<                     att$factor[i], " steps per division\n", sep='')
---
>                 cat("\t", gettextf("%s ranges from %s to %s; with %d categories linearly interpolated in %d steps per division\n", dimid[i], format(min(att$cutpoints[[i]])), format(max(att$cutpoints[[i]])), att$dim[i], att$factor[i], domain = "R-survival"), sep = "")
36,37c28
<                 cat("\t", dimid[i], " has levels of: ",
<                     paste(att$dimnames[[i]], collapse=' '), "\n", sep='')
---
>                 cat("\t", gettextf("%s has levels of: %s", dimid[i], paste(att$dimnames[[i]], collapse = ' '), domain = "R-survival"), "\n", sep = '')
41,47c32
<                     cat("\t", dimid[i], " ranges from " , 
<                         format(as.Date(min(att$cutpoints[[i]]),
<                                        origin='1960/01/01')), " to ", 
<                         format(as.Date(max(att$cutpoints[[i]]),
<                                        origin='1960/01/01')),
<                         "; with ", att$dim[i],
<                         " categories\n", sep='')
---
>                     cat("\t", gettextf("%s ranges from %s to %s; with %d categories", dimid[i], format(as.Date(min(att$cutpoints[[i]]), origin='1960/01/01')), format(as.Date(max(att$cutpoints[[i]]), origin='1960/01/01')), att$dim[i], domain = "R-survival"), "\n", sep='')
56,59c41,42
<                 cat("\t", dimid[i], " ranges from ", 
<                     format(min(att$cutpoints[[i]])), " to ", 
<                     format(max(att$cutpoints[[i]])), "; with ", att$dim[i],
<                     " categories\n", sep='')
---
>                 cat("\t", gettextf("%s ranges from %s to %s; with %d categories\n", dimid[i], format(min(att$cutpoints[[i]])),
> 		format(max(att$cutpoints[[i]])), att$dim[i], domain = "R-survival"), sep = '')
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/survConcordance.R Recommended/survival/R/survConcordance.R
57c57
<         cat("Call:\n")
---
>         cat(gettext("Call:", domain = "R-survival"), "\n", sep = "")
65c65
<     cat("Concordance= ", format(x$concordance), " se= ", format(x$std.err),
---
>     cat(gettextf("Concordance = %s (se = %s)", format(x$concordance), format(x$std.err), domain = "R-survival"),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/survSplit.R Recommended/survival/R/survSplit.R
14c14
<             else  stop("a data frame is required")
---
>             else  stop(gettextf("'%s' argument is required", "data"))
17c17
<             stop("either a formula or the end and event arguments are required")
---
>             stop(gettextf("'%s' or '%s' and '%s arguments are required", "formula", "end", "event"))
21c21
<             stop("'event' must be a variable name in the data set")
---
>             stop(gettextf("'%s' argument must be a variable name in the data set", "event"))
25c25
<             stop("'end' must be a variable name in the data set")
---
>             stop(gettextf("'%s' argument must be a variable name in the data set", "end"))
28c28
<             stop("'start' must be a variable name")
---
>             stop(gettextf("'%s' argument must be a variable name", "start"))
35c35
<         stop("either a formula or the end and event arguments are required")
---
>         stop(gettextf("'%s' or '%s' and '%s arguments are required", "formula", "end", "event"))
50c50
<     if (!is.Surv(Y)) stop ("the model must have a Surv object as the response")
---
>     if (!is.Surv(Y)) stop ("the model must have an object of class \"Surv\" as the response")
52c52
<         stop(paste("not valid for", attr(Y, "type"), "censored survival data"))
---
>         stop(gettextf("not valid for %s censored survival data", attr(Y, "type")))
63c63
<         stop("cut must be a vector of finite numbers")
---
>         stop("'cut' argument must be a vector of finite numbers")
69c69
<         if (!is.character(id)) stop("id must be a variable name")
---
>         if (!is.character(id)) stop(gettextf("'%s' argument must be a variable name", "id"))
123c123
<             stop("left hand side not recognized")
---
>             stop("left hand side was not recognized")
129c129
<         if (!is.character(episode)) stop("episode must be a character string")
---
>         if (!is.character(episode)) stop(gettextf("'%s' argument must be a character string", "episode"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/survcallback.S Recommended/survival/R/survcallback.S
13c13
< 	    stop("Invalid pcols or pattr arg")
---
> 	    stop(gettextf("invalid '%s' or '%s' argument", "pcols", "pattr"))
15c15
<     if (sum(sparse) >1) stop("Only one sparse penalty term allowed")
---
>     if (sum(sparse) >1) stop("only one sparse penalty term allowed")
39c39
< 	    stop("pcols and assign arguments disagree")
---
> 	    stop("'pcols' and 'assign' arguments disagree")
53c53
< 	if (length(fcol) > 1) stop("Sparse term must be single column")
---
> 	if (length(fcol) > 1) stop("sparse term must be single column")
111c111
< 		    stop("Invalid coxlist1")
---
> 		    stop("invalid 'coxlist1' object")
113c113
< 		    stop("Incorrect length in coxlist1")
---
> 		    stop("incorrect length in 'coxlist1' object")
129c129
<         stop("Cannot fit a model with no coefficients other than sparse ones")
---
>         stop("cannot fit a model with no coefficients other than sparse ones")
184c184
< 		    stop("Length error in coxlist2")
---
> 		    stop("length error in 'coxlist2' object")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/survdiff.S Recommended/survival/R/survdiff.S
7c7
<         stop("The 'formula' argument is not a formula")
---
>         stop("'formula' argument is not a formula")
16,17c16,17
<     if (!inherits(y, "Surv")) stop("Response must be a survival object")
<     if (attr(y, 'type') != 'right') stop("Right censored data only")
---
>     if (!inherits(y, "Surv")) stop(gettextf("response is not an object of class %s", dQuote("Surv")))
>     if (attr(y, 'type') != 'right') stop("right censored data only")
31c31
< 		stop("Cannot have both an offset and groups")
---
> 		stop("cannot have both an offset and groups")
33c33
< 	    stop("The offset must be a survival probability")
---
> 	    stop("the offset must be a survival probability")
63c63
< 	if (length(ll) == 0) stop("No groups to test")
---
> 	if (length(ll) == 0) stop("no groups to test")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/survexp.R Recommended/survival/R/survexp.R
21c21
<             stop("Can have only 1 ratetable() call in a formula")
---
>             stop("Can have only 1 'ratetable()' call in a formula")
24c24
<             stop("The ratetable() call in a formula is depreciated")
---
>             stop("The 'ratetable()' call in a formula is depreciated")
34c34
<             stop ("Invalid rcall argument")
---
>             stop(gettextf("invalid '%s' argument", "rcall"))
49c49
<     else stop("Invalid rate table")
---
>     else stop("invalid rate table")
53c53
<         stop("Variable not found in the ratetable:", (names(rcall))[is.na(temp)])
---
>         stop(gettextf("Variable not found in the ratetable: %s", (names(rcall))[is.na(temp)]))
74c74
<     if (n==0) stop("Data set has 0 rows")
---
>     if (n==0) stop("data set has 0 rows")
76c76
<         warning("se.fit value ignored")
---
>         warning("'se.fit' value ignored")
95c95
<                 stop("either a times argument or a response is needed")
---
>                 stop("either a 'times' argument or a 'response' is needed")
147c147
<     else stop("Invalid ratetable")
---
>     else stop("invalid rate table")
151c151
<              temp <- survexp.fit (1:n, R, Y, max(Y), TRUE, ratetable)
---
>              temp <- survexp.fit (seq_len(n), R, Y, max(Y), TRUE, ratetable)
155c155
<             temp <- survexp.cfit(1:n, rdata, Y, 'individual', ratetable)
---
>             temp <- survexp.cfit(seq_len(n), rdata, Y, 'individual', ratetable)
167c167
<         for (i in 1:odim) {
---
>         for (i in seq_len(odim)) {
197c197
<             keep <- approx(temp$time, 1:n, xout=times, yleft=0,
---
>             keep <- approx(temp$time, seq_len(n), xout=times, yleft=0,
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/survexp.cfit.R Recommended/survival/R/survexp.cfit.R
44c44
<     for (i in 1:ncurve) {
---
>     for (i in seq_len(ncurve)) {
58,59c58,59
<         indx <- rep(1:length(sfit$strata), sfit$strata)
<         for (i in 1:n) {
---
>         indx <- rep(seq_len(length(sfit$strata)), sfit$strata)
>         for (i in seq_len(n)) {
84c84
<             for (i in 1:ntime) {
---
>             for (i in seq_len(ntime)) {
92c92
<             for (i in 1:ntime) {
---
>             for (i in seq_len(ntime)) {
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/survfit.R Recommended/survival/R/survfit.R
22c22
<         temp <- 1:length(target)
---
>         temp <- seq_along(target)
42c42
<         else if (j>1) stop("subscript out of bounds") # x[1] is always legal
---
>         else if (j>1) stop("subscript is out of bounds") # x[1] is always legal
49,51c49
<                 stop(paste("strata", 
<                                paste(i[is.na(indx)], collapse=' '),
<                                'not matched'))
---
>                 stop(gettextf("strata %s not matched", paste(i[is.na(indx)], collapse=' ')))
55c53
<             temp <- rep(1:length(x$strata), x$strata)
---
>             temp <- rep(seq_along(x$strata), x$strata)
111c109
<     if (indx[1]==0) stop("a formula argument is required")
---
>     if (indx[1]==0) stop(gettextf("'%s' argument is required", "formula"))
123c121
<     if (!is.Surv(Y)) stop("Response must be a survival object")
---
>     if (!is.Surv(Y)) stop(gettextf("'%s' argument is not an object of class %s", "formula", dQuote("Surv")))
144c142
<     if (!is.Surv(Y)) stop("y must be a Surv object")
---
>     if (!is.Surv(Y)) stop(gettextf("'%s' argument is not an object of class %s", "y", dQuote("Surv")))
151c149
<             stop("cannot use both the etype argument and mstate survival type")
---
>             stop("cannot use both the 'etype' argument and 'mstate' survival type")
153c151
<             stop("cannot use both the etype and istate arguments")
---
>             stop("cannot use both the 'etype' and 'istate' arguments")
170c168
<         else stop("etype argument incompatable with survival type")
---
>         else stop("'etype' argument incompatable with survival type")
175c173
<         stop("invalid value for timefix option")
---
>         stop(gettextf("invalid value for '%s' option", "timefix"))
241c239
<     else stop("invalid conf.int type")
---
>     else stop(gettextf("invalid '%s' type", "conf.int"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/survfit.coxph.R Recommended/survival/R/survfit.coxph.R
119c119
<         stop("Cannot handle \"", type, "\" type survival data")
---
>         stop(gettextf("Cannot handle \"%s\" type survival data", type))
205c205
<             if (individual) stop("newdata must be a data frame")
---
>             if (individual) stop(gettextf("'%s' argument must be a data frame", "newdata"))
207c207
<                 stop("Newdata argument must be a data frame")
---
>                 stop(gettextf("'%s' argument must be a data frame", "newdata"))
271c271
<             stop("The newdata argument must be present when individual=TRUE")
---
>             stop("The newdata argument must be present when 'individual=TRUE'")
274c274
<             if (is.null(id)) stop("id=NULL is an invalid argument")
---
>             if (is.null(id)) stop("'id=NULL' is an invalid argument")
290c290
<             stop("Individual=TRUE is only valid for counting process data")
---
>             stop("'individual=TRUE' is only valid for counting process data")
319c319
<                 indx1 <- split(1:nr, rep(1:length(result$strata), result$strata))
---
>                 indx1 <- split(seq_len(nr), rep(seq_along(result$strata), result$strata))
366c366
<     result <- c(result[1:indx], type=attr(y, 'type'), result[-(1:indx)])
---
>     result <- c(result[seq_len(indx)], type=attr(y, 'type'), result[-seq_len(indx)])
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/survfitCI.R Recommended/survival/R/survfitCI.R
34c34
<         for (j in 1:nstate) 
---
>         for (j in seq_len(nstate)) 
99,100c99
<          stop(paste("multi-state computation doesn't support \"", type,
<                           "\" survival data", sep=''))
---
>          stop(gettextf("multi-state computation doesn't support \"%s\" survival data", type))
110c109
<             if (length(toss)==n) stop("start.time has removed all observations")
---
>             if (length(toss)==n) stop("'start.time' has removed all observations")
140c139
<                 stop("istate should be a vector of positive integers or a factor")
---
>                 stop("'istate' argument should be a vector of positive integers or a factor")
145c144
<     if (length(id) ==0) id <- 1:n
---
>     if (length(id) ==0) id <- seq_len(n)
149c148
<     if (length(istate) !=n) stop ("wrong length for istate")
---
>     if (length(istate) !=n) stop(gettextf("'%s' argument is of the wrong length", "istate"))
176,177c175,176
<         transitions <- table(factor(istate, 1:nst), factor(Y[,2], 1:nstate))
<         dimnames(transitions) <-list(from=state.names, to=state.names[1:nstate])
---
>         transitions <- table(factor(istate, seq_len(nst)), factor(Y[,2], seq_len(nstate)))
>         dimnames(transitions) <-list(from=state.names, to=state.names[seq_len(nstate)])
200c199
<             stop("subject is in two different groups, id ", id[indx1[who]])
---
>             stop(gettextf("subject is in two different groups, id %s", id[indx1[who]]))
204c203
<             stop("gap in follow-up, id ", id[indx1[who]])
---
>             stop(gettextf("gap in follow-up, id %s", id[indx1[who]]))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/survfitKM.S Recommended/survival/R/survfitKM.S
24,25c24,25
<     if (!is.Surv(y)) stop("y must be a Surv object")
<     if (!is.factor(x)) stop("x must be a factor")
---
>     if (!is.Surv(y)) stop(gettextf("'%s' argument is not an object of class %s", "y", dQuote("Surv")))
>     if (!is.factor(x)) stop(gettextf("'%s' argument must be a factor", "x"))
27c27
< 	    stop("Can only handle right censored or counting data")
---
> 	    stop("can only handle right censored or counting data")
39,40c39
< 		stop(paste("start.time =", start.time,
< 			   "is greater than all time points."))
---
> 		stop(gettextf("start.time = %s is greater than all time points.", start.time))
74c73
<     for (i in 1:nstrat) {
---
>     for (i in seq_len(nstrat)) {
187c186
< 	zz <- 1:length(events)
---
> 	zz <- seq_len(length(events))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/survfitTurnbull.S Recommended/survival/R/survfitTurnbull.S
24,25c24,25
<     if (!is.Surv(y)) stop("y must be a Surv object")
<     if (!is.factor(x)) stop("x must be a factor")
---
>     if (!is.Surv(y)) stop(gettextf("'%s' argument is not an object of class %s", "y", dQuote("Surv")))
>     if (!is.factor(x)) stop(gettextf("'%s' argument must be a factor", "x"))
41,42c41
< 		stop(paste("start.time =", start.time,
< 			   "is greater than all time points."))
---
> 		stop(gettextf("start.time = %s is greater than all time points.", start.time))
54c53
< 	    stop("survfitTurnbull not appropriate for counting process data")
---
> 	    stop("'survfitTurnbull()' is not appropriate for counting process data")
195,197c194,195
<                 cat("\n Iteration = ", iter, "\n")
< 		cat("survival=",
< 		    format(round(tfit$surv[tfit$n.event>0],3)),  "\n")
---
>                 cat("\n ", gettextf("Iteration = %d", iter, domain = "R-survival"), "\n", sep = "")
> 		cat("survival=", format(round(tfit$surv[tfit$n.event>0],3)),  "\n")
232c230
<     for (i in 1:nstrat) {
---
>     for (i in seq_len(nstrat)) {
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/survfitms.R Recommended/survival/R/survfitms.R
20c20
<             stop("summary.survfit can only be used for survfit objects")
---
>             stop("'summary.survfit()' function can only be used for objects of class \"survfit\"")
35c35
<         if (length(rmean)==0) stop("Invalid value for rmean option")
---
>         if (length(rmean)==0) stop(gettextf("invalid value for '%s' option", "rmean"))
81c81
<                 sindx <- rep(1:nstrat, fit$strata)
---
>                 sindx <- rep(seq_len(nstrat), fit$strata)
84c84
<                         fit[[i]] <- unlist(sapply(1:nstrat, function(j) 
---
>                         fit[[i]] <- unlist(sapply(seq_len(nstrat), function(j) 
89c89
<                 fit$strata[] <- as.vector(table(factor(sindx[index], 1:nstrat))) 
---
>                 fit$strata[] <- as.vector(table(factor(sindx[index], seq_len(nstrat)))) 
177c177
<             for (i in 1:nstrat) 
---
>             for (i in seq_len(nstrat)) 
193c193
<         fit$strata <- factor(rep(1:nstrat, fit$strata), 1:nstrat,
---
>         fit$strata <- factor(rep(seq_len(nstrat), fit$strata), seq_len(nstrat),
204c204
<             stop("summary.survfitms can only be used for survfitms objects")
---
>             stop("'summary.survfitms()' can only be used for objects of class \"survfitms\"")
219c219
<         if (length(rmean)==0) stop("Invalid value for rmean option")
---
>         if (length(rmean)==0) stop(gettextf("invalid value for '%s' option", "rmean"))
227c227
<         if (!is.numeric(times)) stop ("times must be numeric")
---
>         if (!is.numeric(times)) stop(gettextf("'%s' argument must be numeric", "times"))
233c233
<         sindx <- rep(1:nstrat, fit$strata)
---
>         sindx <- rep(seq_len(nstrat), fit$strata)
269c269
<                 sindx <- rep(1:nstrat, fit$strata)
---
>                 sindx <- rep(seq_len(nstrat), fit$strata)
272c272
<                         fit[[i]] <- unlist(sapply(1:nstrat, function(j) 
---
>                         fit[[i]] <- unlist(sapply(seq_len(nstrat), function(j) 
277c277
<                 fit$strata[] <- as.vector(table(factor(sindx[index], 1:nstrat))) 
---
>                 fit$strata[] <- as.vector(table(factor(sindx[index], seq_len(nstrat)))) 
365c365
<             for (i in 1:nstrat) 
---
>             for (i in seq_len(nstrat)) 
385c385
<         cat("Call: ")
---
>         cat(gettext("Call:", domain = "R-survival"))
403c403
<         if (length(rmean)==0) stop("Invalid value for rmean option")
---
>         if (length(rmean)==0) stop(gettextf("invalid value for '%s' option", "rmean"))
417,419c417,418
<              cat("   *mean time in state, restricted (max time =", 
<                  format(etime, ...), ")\n")
<         else cat("   *mean time in state, restricted (per curve cutoff)\n")
---
>              cat(gettextf("   *mean time in state, restricted (max time = %s)\n", format(etime, ...), domain = "R-survival"))
>         else cat(gettextf("   *mean time in state, restricted (per curve cutoff)\n", domain = "R-survival"))
427c426
<         igrp <- rep(1:ngrp, x$strata)
---
>         igrp <- rep(seq_len(ngrp), x$strata)
440c439
<         dimnames(nevent) <- list(rname, x$states[1:nc])
---
>         dimnames(nevent) <- list(rname, x$states[seq_len(nc)])
449c448
<     outmat[1:length(nevent), 2] <- c(nevent)
---
>     outmat[seq_along(nevent), 2] <- c(nevent)
464c463
<         for (i in 1:ngrp) {
---
>         for (i in seq_len(ngrp)) {
474c473
<             if (length(delta) > nrow(temp)) delta <- delta[1:nrow(temp)]
---
>             if (length(delta) > nrow(temp)) delta <- delta[seq_len(nrow(temp))]
508c507
<         temp <- 1:length(target)
---
>         temp <- seq_along(target)
529c528
<         i2 <- 1:n
---
>         i2 <- seq_len(n)
535c534
<             stop("subscript out of bounds")
---
>             stop("subscript is out of bounds")
538,540c537
<             stop(paste("strata", 
<                        paste(i[is.na(indx)], collapse=' '),
<                        'not matched'))
---
>             stop(gettextf("strata %s not matched", paste(i[is.na(indx)], collapse=' ')))
544c541
<         temp <- rep(1:length(x$strata), x$strata)
---
>         temp <- rep(seq_along(x$strata), x$strata)
554c551
<             stop("subscript out of bounds", j[is.na(indx)])
---
>             stop("subscript is out of bounds")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/survobrien.S Recommended/survival/R/survobrien.S
16c16
<         stop("Transform function must be 1 to 1")
---
>         stop("'transform' function must be 1 to 1")
23c23
<     if (indx[1] ==0) stop("A formula argument is required")
---
>     if (indx[1] ==0) stop(gettextf("'%s' argument is required", "formula"))
32c32
<     if (nrow(m) ==0) stop("No (non-missing) observations")
---
>     if (nrow(m) ==0) stop("no (non-missing) observations")
37c37
<     if (!inherits(y, "Surv")) stop ("Response must be a survival object")
---
>     if (!inherits(y, "Surv")) stop(gettextf("response is not an object of class %s", dQuote("Surv")))
39c39
<         stop("Response must be right censored or (start, stop] data")
---
>         stop("response must be right censored or (start, stop] data")
43c43
<         if (length(cluster$terms) >1) stop ("Can have only 1 cluster term")
---
>         if (length(cluster$terms) >1) stop("can have only 1 cluster term")
62c62
<         stop("This function cannot deal with iteraction terms")
---
>         stop("this function cannot deal with iteraction terms")
70c70
<     if (all(keepers)) stop ("No continuous variables to modify")
---
>     if (all(keepers)) stop("no continuous variables to modify")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/survreg.S Recommended/survival/R/survreg.S
8c8
<     if (indx[1] ==0) stop("A formula argument is required")
---
>     if (indx[1] ==0) stop(gettextf("'%s' argument is required", "formula"))
20c20
<     if (!inherits(Y, "Surv")) stop("Response must be a survival object")
---
>     if (!inherits(Y, "Surv")) stop(gettextf("response is not an object of class %s", dQuote("Surv")))
35c35
<         if (any(ord>1)) stop ("Cluster can not be used in an interaction")
---
>         if (any(ord>1)) stop("cluster cannot be used in an interaction")
80c80
< 	if (is.null(dlist)) stop(paste(dist, ": distribution not found"))
---
> 	if (is.null(dlist)) stop(gettextf("%s distribution was not found", sQuote(dist)))
83c83
<     else stop("Invalid distribution object")
---
>     else stop("invalid distribution object")
88c88
<     if (!survregDtest(dlist)) stop("Invalid distribution object")
---
>     if (!survregDtest(dlist)) stop("invalid distribution object")
112c112
< 	    stop("Invalid survival times for this distribution")
---
> 	    stop("invalid survival times for this distribution")
120,121c120
<         if (!missing(scale)) warning(paste(dlist$name, 
<                            "has a fixed scale, user specified value ignored"))
---
>         if (!missing(scale)) warning(gettextf("%s distribution has a fixed scale, user specified value ignored", sQuote(dlist$name)))
132,133c131
<         if (!is.null(parms)) stop(paste(dlist$name, 
<                               "distribution has no optional parameters"))
---
>         if (!is.null(parms)) stop(gettextf("%s distribution has no optional parameters", sQuote(dlist$name)))
137c135
<             stop("Default parameters must be a numeric vector")
---
>             stop("default parameters must be a numeric vector")
141c139
<             if (any(is.na(indx))) stop("Invalid parameter names")
---
>             if (any(is.na(indx))) stop("invalid parameter names")
158c156
<     if (any(scale < 0)) stop("Invalid scale value")
---
>     if (any(scale < 0)) stop("invalid scale value")
160c158
< 	    stop("The scale argument is not valid with multiple strata")
---
> 	    stop("the scale argument is not valid with multiple strata")
175c173
< 	if (any(ord>1)) stop ('Penalty terms cannot be in an interaction')
---
> 	if (any(ord>1)) stop("penalty terms cannot be in an interaction")
196c194
< 	    fit$scale <- exp(fit$coefficients[-(1:nvar)])
---
> 	    fit$scale <- exp(fit$coefficients[-seq_len(nvar)])
199c197
< 	    fit$coefficients  <- fit$coefficients[1:nvar]
---
> 	    fit$coefficients  <- fit$coefficients[seq_len(nvar)]
240c238
<     singular <- (diag(fit$var)==0)[1:length(fit$coef)]
---
>     singular <- (diag(fit$var)==0)[seq_along(fit$coef)]
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/survregDtest.S Recommended/survival/R/survregDtest.S
13c13
<     if (is.null(dlist$name)) errlist <- c(errlist, "Missing a name")
---
>     if (is.null(dlist$name)) errlist <- c(errlist, gettext("missing a distribution name"))
15c15
<         errlist <- c(errlist, "Invalid name")
---
>         errlist <- c(errlist, gettext("invalid distribution name"))
23c23
<             errlist <- c(errlist, "Reference distribution not found")
---
>             errlist <- c(errlist, gettext("reference distribution was not found"))
27c27
<                 errlist <- c(errlist, "Missing or invalid trans component")
---
>                 errlist <- c(errlist, gettextf("missing or invalid '%s' component", "trans"))
29c29
<                 errlist <- c(errlist, "Missing or invalid itrans component")
---
>                 errlist <- c(errlist, gettextf("missing or invalid '%s' component", "itrans"))
31c31
<                 errlist <- c(errlist, "Missing or invalid dtrans component")
---
>                 errlist <- c(errlist, gettextf("missing or invalid '%s' component", "dtrans"))
37c37
<                              "trans and itrans must be inverses of each other")
---
>                              gettext("'trans' and 'itrans' components must be inverses of each other"))
39c39
<                 errlist <- c(errlist, "dtrans must be a 1-1 function")
---
>                 errlist <- c(errlist, gettext("'dtrans()' component must be a 1-1 function"))
49c49
< 	    errlist <- c(errlist, "Missing or invalid init function")
---
> 	    errlist <- c(errlist, gettextf("missing or invalid '%s' function", "init"))
51c51
< 	    errlist <- c(errlist, "Missing or invalid deviance function")
---
> 	    errlist <- c(errlist, gettextf("missing or invalid '%s' function", "deviance"))
53c53
< 	    errlist <- c(errlist, "Missing or invalid density function")
---
> 	    errlist <- c(errlist, gettextf("missing or invalid '%s' function", "density"))
61c61
< 			     "Density function must return a 5 column matrix")
---
> 			     gettext("density function must return a 5 column matrix"))
65c65
< 	    errlist <- c(errlist, "Missing or invalid quantile function")
---
> 	    errlist <- c(errlist, gettextf("missing or invalid '%s' function", "quantile"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/tcut.S Recommended/survival/R/tcut.S
8c8
< 		stop("Must specify at least one interval")
---
> 		stop("'breaks' argument must specify at least one interval")
12c12
< 		stop("Number of labels must equal number of intervals")
---
> 		stop("number of labels must equal number of intervals")
20,21c20
< 	}
<     else {
---
> 	} else {
25,26c24
< 	    labels <- paste(format(breaks[ - length(breaks)]),
< 			"+ thru ", format(breaks[-1]), sep = "")
---
> 	    labels <- gettextf("%s+ thru %s", format(breaks[ - length(breaks)]), format(breaks[-1]))
28c26
< 	   stop("Number of labels must be 1 less than number of break points")
---
> 	   stop("number of labels must be 1 less than number of break points")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/tmerge.R Recommended/survival/R/tmerge.R
26,27c26,27
<         stop("the data1, data2, and id arguments are required")
<     if (!inherits(data1, "data.frame")) stop("data1 must be a data frame")
---
>         stop("'data1', 'data2', and 'id' arguments are required")
>     if (!inherits(data1, "data.frame")) stop(gettextf("'%s' argument must be a data frame", "data1"))
33c33
<             stop("unrecognized option(s):", paste(names(extras), collapse=', '))
---
>             stop(sprintf(ngettext(length(extras), "unrecognized option: %s", "unrecognized options: %s", domain = "R-survival"), paste(names(extras), collapse = ", ")), domain = NA)
35c35
<             stop("idname option must be a valid variable name")
---
>             stop(gettextf("'%s' argument must be a variable name", "idname"))
38c38
<             stop("tstart option must be NULL or a valid variable name")
---
>             stop(gettextf("'%s' argument must be NULL or a variable name", "tstartname"))
40c40
<             stop("tstop option must be a valid variable name") 
---
>             stop(gettextf("'%s' argument must be a variable name", "tstopname"))
42c42
<             stop("delay option must be a number >= 0")
---
>             stop(gettextf("'%s' argument must be a number >= 0", "delay"))
44c44
<             stop("na.rm option must be TRUE or FALSE")
---
>             stop(gettextf("'%s' argument must be TRUE or FALSE", "na.rm"))
53c53
<         stop("data1 does not match its own tname attribute")
---
>         stop("'data1' does not match its own 'tname' attribute")
76c76
<     if (missing(id)) stop("the id argument is required")
---
>     if (missing(id)) stop(gettextf("'%s' argument is required", "id"))
87c87
<                  stop("tstop and id must be the same length")
---
>                  stop(gettextf("'%s' and '%s' arguments must be the same length", "tstop", "id"))
94c94
<                 stop("tstart and id must be the same length")
---
>                  stop(gettextf("'%s' and '%s' arguments must be the same length", "tstart", "id"))
96c96
<                 stop("tstart must be < tstop")
---
>                 stop("'tstart' must be < 'tstop'")
101c101
<             stop("tstart and tstop arguments only apply to the first call")
---
>             stop("'tstart' and 'tstop' arguments only apply to the first call")
112c112
<     if (any(argname== "")) stop("all additional argments must have a name")
---
>     if (any(argname== "")) stop("all additional arguments must have a name")
116,117c116
<         stop(paste("argument(s)", argname[is.na(check)], 
<                        "not a recognized type"))
---
>         stop(gettextf("argument(s) %s not a recognized type", argname[is.na(check)]))
140c139
<             warning("overwriting data1 variables", paste(overwrite, collapse=' '))
---
>             warning(gettextf("overwriting data1 variables %s", paste(overwrite, collapse = " ")))
171,172c170
<             if (length(indx) >0) stop("found an ending time of ", tstop[indx[1]],
<                                       ", the default starting time of 0 is invalid")
---
>             if (length(indx) >0) stop(gettextf("found an ending time of %s, the default starting time of 0 is invalid", tstop[indx[1]]))
176c174
<             stop("tstart must be < tstop")
---
>             stop("'tstart' must be < 'tstop'")
186c184
<         if (any(tstart >= tstop)) stop("tstart must be < tstop")
---
>         if (any(tstart >= tstop)) stop("'tstart' must be < 'tstop'")
206c204
<             stop("argument ", argname[ii], " is not the same length as id")
---
>             stop(gettextf("'%s' argument is not the same length as '%s' argument", argname[ii], "id"))
209c207
<                 stop("argument", argname[ii], "is not the same length as id")
---
>                 stop(gettextf("'%s' argument is not the same length as '%s' argument", argname[ii], "id"))
284c282
<             jrep <- rep(1:nrow(newdata), irep)  #stutter the duplicated rows
---
>             jrep <- rep(seq_len(nrow(newdata)), irep)  #stutter the duplicated rows
293c291
<             for (j in 1:nfix) temp[[j]] <-  -(seq(n.add[j] -1, 0)) + iend[j]
---
>             for (j in seq_len(nfix)) temp[[j]] <-  -(seq(n.add[j] -1, 0)) + iend[j]
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/yates.R Recommended/survival/R/yates.R
6c6
<     if (missing(fit)) stop("a fit argument is required")
---
>     if (missing(fit)) stop(gettextf("'%s' argument is required", "fit"))
17c17
<     if (missing(term)) stop("a term argument is required")
---
>     if (missing(term)) stop(gettextf("'%s' argument is required", "term"))
38c38
<         for (i in 1:length(temp)) {
---
>         for (i in seq_along(temp)) {
43c43
<             else stop("term '", temp[i], "' not found in the fit")
---
>             else stop(gettextf("term '%s' not found in the fit", temp[i]))
55c55
<         assign <- rep(1:length(assign), sapply(assign, length))
---
>         assign <- rep(seq_along(assign), sapply(assign, length))
91c91
<                 stop("levels list should have", length(parts), "components")
---
>                 stop(sprintf(ngettext(length(parts), "levels list should have %d component", "levels list should have %d components", domain = "R-survival"), length(parts)), domain = NA)
124c124
<             stop("xlevels attribute not found for", parts[i])
---
>             stop(gettextf("xlevels attribute not found for %s", parts[i]))
155c155
<             for (i in 1:(nlev-1)) {
---
>             for (i in seq_len(nlev-1)) {
175c175
<         cmat[[1]] <- matrix(1:ntest, 1, ntest)
---
>         cmat[[1]] <- matrix(seq_len(ntest), 1, ntest)
255c255
<     if (missing(fit)) stop("a fit argument is required")
---
>     if (missing(fit)) stop(gettextf("'%s' argument is required", "fit"))
350c350
<             stop("term '", contr$termname, "' not found in the model")
---
>             stop(gettextf("term '%s' not found in the model", contr$termname))
383c383
<                 for (i in 1:length(fit$xlevels)) {
---
>                 for (i in seq_along(fit$xlevels)) {
418c418
<                 dimnames(B)[[2]] <- paste0("L", 1:ncol(B))  # for the user
---
>                 dimnames(B)[[2]] <- paste0("L", seq_len(ncol(B)))  # for the user
476c476
<         index <- rep(1:length(xmatlist), each = n1)
---
>         index <- rep(seq_along(xmatlist), each = n1)
513c513
<         for (i in 1:nsim)
---
>         for (i in seq_len(nsim))
570,571c570,571
<             pdata <- pdata[rep(1:nrow(pdata), each=nrow(mframe)), ]
<             row.names(pdata) <- 1:nrow(pdata)
---
>             pdata <- pdata[rep(seq_len(nrow(pdata)), each=nrow(mframe)), ]
>             row.names(pdata) <- seq_len(nrow(pdata))
573c573
<             k <- rep(1:nrow(mframe), n2)
---
>             k <- rep(seq_len(nrow(mframe)), n2)
589c589
<     for (i in 1:ncol(x1data)) {
---
>     for (i in seq_len(ncol(x1data))) {
602c602
<         for (i in 1:nrow(x1data)) {
---
>         for (i in seq_len(nrow(x1data))) {
617c617
<             for (i in 1:nrow(x1data)) {
---
>             for (i in seq_len(nrow(x1data))) {
633c633
<             for (i in 1:nrow(x1data)) {
---
>             for (i in seq_len(nrow(x1data))) {
657,658c657,658
<     for (i in 1:nvar) {
<         j <- rep(rep(1:n2[i], each=n1), length=n)
---
>     for (i in seq_len(nvar)) {
>         j <- rep(rep(seq_len(n2[i]), each=n1), length=n)
661c661
<             pdata[[x2name[i]]] <- factor(j, 1:n2[i], labels= xx)
---
>             pdata[[x2name[i]]] <- factor(j, seq_len(n2[i]), labels= xx)
708,710c708
<         warning("no yates_setup method exists for a model of class ",
<                 class(fit)[1], " and estimate type ", type,
<                 ", linear predictor estimate used by default")
---
>         warning(gettextf("no yates_setup method exists for a model of class %s and estimate type %s, linear predictor estimate used by default", dQuote(class(fit)[1]), type))
Only in Recommended/survival/inst: po
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/noweb/agreg.Rnw Recommended/survival/noweb/agreg.Rnw
74c74
< 	x <- matrix(as.double(1:n), ncol=1)  #keep the .C call happy
---
> 	x <- matrix(as.double(seq_len(n)), ncol=1)  #keep the .C call happy
135,136c135
<         stop("routine failed due to numeric overflow.",
<              "This should never happen.  Please contact the author.")   
---
>         stop("routine failed due to numeric overflow. This should never happen. Please contact the author.")
143,145c142,143
<             warning(paste("Loglik converged before variable ",
<                           paste((1:nvar)[infs],collapse=","),
< 				      "; beta may be infinite. "))
---
>             warning(gettextf("Loglik converged before variable %s; beta may be infinite.",
>                           paste(seq_len(nvar)[infs], collapse = ", ")))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/noweb/coxph.Rnw Recommended/survival/noweb/coxph.Rnw
33c33
<                           names(extraArgs)[indx==0L]), domain = NA)
---
>                           names(extraArgs)[indx==0L]), domain = "R-survival")
42,43c42
< 	stop(paste("Cox model doesn't support \"", type,
< 			  "\" survival data", sep=''))
---
> 	stop(gettextf("Cox model doesn't support \"%s\" survival data", type))
115c114
< if (nrow(mf) ==0) stop("No (non-missing) observations")
---
> if (nrow(mf) ==0) stop("no (non-missing) observations")
167c166
<         stop("The tt argument must contain function or list of functions")
---
>         stop(gettextf("'%s' argument must contain a function or list of functions", "tt"))
171c170
<             for (i in 1:ntrans) temp[[i]] <- tt[[1]]
---
>             for (i in seq_len(ntrans)) temp[[i]] <- tt[[1]]
174c173
<         else stop("Wrong length for tt argument")
---
>         else stop(gettextf("wrong length for '%s' argument", "tt"))
177c176
< else stop("The tt argument must contain a function or list of functions")
---
> else stop(gettextf("'%s' argument must contain a function or list of functions", "tt"))
247c246
< strats <- rep(1:length(counts$nrisk), counts$nrisk)
---
> strats <- rep(seq_along(counts$nrisk), counts$nrisk)
255c254
< for (i in 1:ntrans) {
---
> for (i in seq_len(ntrans)) {
578c577
<     if (length(init) != ncol(X)) stop("wrong length for init argument")
---
>     if (length(init) != ncol(X)) stop(gettextf("wrong length for '%s' argument", "init"))
649c648
<     else stop(paste ("Unknown method", method))
---
>     else stop(gettextf("unknown '%s' method", method))
663,665c662,663
<        vars <- (1:length(fit$coefficients))[is.na(fit$coefficients)]
<        msg <-paste("X matrix deemed to be singular; variable",
<     		   paste(vars, collapse=" "))
---
>        vars <- seq_along(fit$coefficients)[is.na(fit$coefficients)]
>        msg <- gettextf("X matrix deemed to be singular; variable %s", paste(vars, collapse=" "))
711c709
<     		  init[1:length(fit$coefficients)])[nabeta]
---
>     		  init[seq_along(fit$coefficients)])[nabeta]
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/noweb/coxsurv.Rnw Recommended/survival/noweb/coxsurv.Rnw
217c217
<     stop("Cannot handle \"", type, "\" type survival data")
---
>     stop(gettextf("Cannot handle \"%s\" type survival data", type))
401c401
<     if (individual) stop("newdata must be a data frame")
---
>     if (individual) stop(gettextf("'%s' argument must be a data frame", "newdata"))
403c403
<         stop("Newdata argument must be a data frame")
---
>         stop(gettextf("'%s' argument must be a data frame", "newdata"))
514c514
<         stop("The newdata argument must be present when individual=TRUE")
---
>         stop("The newdata argument must be present when 'individual=TRUE'")
517c517
<         if (is.null(id)) stop("id=NULL is an invalid argument")
---
>         if (is.null(id)) stop("'id=NULL' is an invalid argument")
533c533
<         stop("Individual=TRUE is only valid for counting process data")
---
>         stop("'individual=TRUE' is only valid for counting process data")
583c583
< indx1 <- split(1:nr, rep(1:length(result$strata), result$strata))
---
> indx1 <- split(seq_len(nr), rep(seq_along(result$strata), result$strata))
639c639
< result <- c(result[1:indx], type=attr(y, 'type'), result[-(1:indx)])
---
> result <- c(result[seq_len(indx)], type=attr(y, 'type'), result[-seq_len(indx)])
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/noweb/coxsurv2.Rnw Recommended/survival/noweb/coxsurv2.Rnw
51c51
<     for (i in 1:nstrata) {
---
>     for (i in seq_len(nstrata)) {
164c164
<             for (i in 1:nrow(x2)) {
---
>             for (i in seq_len(nrow(x2))) {
235c235
<         for (i in 1:ntarget) {
---
>         for (i in seq_len(ntarget)) {
288c288
<         for (i in 1:length(uid)) {
---
>         for (i in seq_along(uid)) {
385c385
<         indx  <- approx(etime, 1:length(etime), time, method='constant',
---
>         indx  <- approx(etime, seq_along(etime), time, method='constant',
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/noweb/finegray.Rnw Recommended/survival/noweb/finegray.Rnw
33c33
<     if (indx[1] ==0) stop("A formula argument is required")
---
>     if (indx[1] ==0) stop(gettextf("'%s' argument is required", "formula"))
43c43
<     if (nrow(mf) ==0) stop("No (non-missing) observations")
---
>     if (nrow(mf) ==0) stop("no (non-missing) observations")
47c47
<     if (!inherits(Y, "Surv")) stop("Response must be a survival object")
---
>     if (!inherits(Y, "Surv")) stop(gettextf("'%s' argument is not an object of class %s", "formula", dQuote("Surv")))
70c70
<         if (!is.null(id)) stop("an id argument and a cluster() term are redundant")
---
>         if (!is.null(id)) stop("'id' argument and a 'cluster()' term are redundant")
107c107
<             stop ("etype argument has a state that is not in the data")
---
>             stop("'etype' argument has a state that is not in the data")
298c298
<     tlist <- lapply(1:max(istrat), stratfun)
---
>     tlist <- lapply(seq_len(max(istrat)), stratfun)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/noweb/plot.Rnw Recommended/survival/noweb/plot.Rnw
79c79
<         for (j in 1:ncol(ssurv)) {
---
>         for (j in seq_len(ncol(ssurv))) {
136c136
<     stemp <- rep(1:nstrat, x$strata) # same length as stime
---
>     stemp <- rep(seq_len(nstrat), x$strata) # same length as stime
158c158
<     for (i in 1:nstrat) {
---
>     for (i in seq_len(nstrat)) {
161,162c161,162
<             keepx <- c(keepx, 1:tempn[i] + offset[i])
<             keepy <- c(keepy, 1:tempn[i] + offset[i])
---
>             keepx <- c(keepx, seq_len(tempn[i]) + offset[i])
>             keepy <- c(keepy, seq_len(tempn[i]) + offset[i])
165c165
<             bad <- min((1:tempn[i])[ttime>xmax])
---
>             bad <- min(seq_len(tempn[i])[ttime>xmax])
172,173c172,173
<             else  keepy<- c(keepy, c(1:(bad-1), bad-1) + offset[i])
<             keepx <- c(keepx, (1:bad)+offset[i])
---
>             else  keepy<- c(keepy, c(seq_len(bad-1), bad-1) + offset[i])
>             keepx <- c(keepx, seq_len(bad)+offset[i])
209c209
<     else stop("Invalid 'fun' argument")
---
>     else stop(gettextf("invalid '%s' argument", "fun"))
259c259
<     if (!is.numeric(conf.times)) stop('conf.times must be numeric')
---
>     if (!is.numeric(conf.times)) stop(gettextf("'%s' argument must be numeric", "conf.times"))
266c266
<     if (is.na(temp)) stop("invalid value for conf.int")
---
>     if (is.na(temp)) stop(gettextf("invalid '%s' argument", "conf.int"))
463c463
<     temp.offset <- (1:ncurve - (ncurve+1)/2)* conf.offset* diff(par("usr")[1:2])
---
>     temp.offset <- (seq_len(ncurve) - (ncurve+1)/2)* conf.offset* diff(par("usr")[1:2])
467c467
< for (j in 1:ncol(ssurv)) {
---
> for (j in seq_len(ncol(ssurv))) {
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/noweb/pyears.Rnw Recommended/survival/noweb/pyears.Rnw
52c52
< if (indx[1] ==0) stop("A formula argument is required")
---
> if (indx[1] ==0) stop(gettextf("'%s' argument is required", "formula"))
65c65
<         stop("Can have only 1 ratetable() call in a formula")
---
>         stop("Can have only 1 'ratetable()' call in a formula")
87,89c87
<             warning(paste(nzero, 
<                      "observations with an event and 0 follow-up time,",
<                    "any rate calculations are statistically questionable"))
---
>             warning(sprintf(ngettext(nzero, "%d observation with an event and 0 follow-up time, any rate calculations are statistically questionable","%d observations with an event and 0 follow-up time, any rate calculations are statistically questionable", domain = "R-survival"), nzero), domain = NA)
96c94
< if (is.null(n) || n==0) stop("Data set has 0 observations")
---
> if (is.null(n) || n==0) stop("data set has 0 observations")
156c154
<     for (i in 1:odim) {
---
>     for (i in seq_len(odim)) {
258c256
<             cuts[[temp]] <- round(approx(nint*(1:nyear), cuts[[temp]],
---
>             cuts[[temp]] <- round(approx(nint*(seq_len(nyear)), cuts[[temp]],
335c333
<     row.names(df) <- 1:nrow(df)
---
>     row.names(df) <- seq_len(nrow(df))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/noweb/statefig.Rnw Recommended/survival/noweb/statefig.Rnw
71c71
<     space <- function(n) (1:n -.5)/n   # centers of the boxes
---
>     space <- function(n) (seq_len(n) -.5)/n   # centers of the boxes
79c79
<         for (i in 1:n) cbox[ix==i,2] <- 1 -space(layout[i])
---
>         for (i in seq_len(n)) cbox[ix==i,2] <- 1 -space(layout[i])
82c82
<         for (i in 1:n) cbox[ix==i,1] <- space(layout[i])
---
>         for (i in seq_len(n)) cbox[ix==i,1] <- space(layout[i])
105c105
<     for (i in 1:nstate) 
---
>     for (i in seq_len(nstate)) 
274,275c274,275
< for (j in 1:nstate) {
<     for (i in 1:nstate) {
---
> for (j in seq_len(nstate)) {
>     for (i in seq_len(nstate)) {
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/noweb/survexp.Rnw Recommended/survival/noweb/survexp.Rnw
132c132
<         stop("Can have only 1 ratetable() call in a formula")
---
>         stop("Can have only 1 'ratetable()' call in a formula")
140c140
<         stop("The ratetable() call in a formula is depreciated")
---
>         stop("The 'ratetable()' call in a formula is depreciated")
150c150
<         stop ("Invalid rcall argument")
---
>         stop(gettextf("invalid '%s' argument", "rcall"))
169c169
<     stop("Variable not found in the ratetable:", (names(rcall))[is.na(temp)])
---
>     stop(gettextf("Variable not found in the ratetable: %s", (names(rcall))[is.na(temp)]))
207c207
< if (n==0) stop("Data set has 0 rows")
---
> if (n==0) stop("data set has 0 rows")
209c209
<     warning("se.fit value ignored")
---
>     warning("'se.fit' value ignored")
239c239
<             stop("either a times argument or a response is needed")
---
>             stop("either a 'times' argument or a 'response' is needed")
321c321
< 	 temp <- survexp.fit (1:n, R, Y, max(Y), TRUE, ratetable)
---
> 	 temp <- survexp.fit (seq_len(n), R, Y, max(Y), TRUE, ratetable)
325c325
<         temp <- survexp.cfit(1:n, rdata, Y, 'individual', ratetable)
---
>         temp <- survexp.cfit(seq_len(n), rdata, Y, 'individual', ratetable)
348c348
<     for (i in 1:odim) {
---
>     for (i in seq_len(odim)) {
386c386
<         keep <- approx(temp$time, 1:n, xout=times, yleft=0,
---
>         keep <- approx(temp$time, seq_len(n), xout=times, yleft=0,
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/noweb/survfit.Rnw Recommended/survival/noweb/survfit.Rnw
78c78
<         temp <- 1:length(target)
---
>         temp <- seq_along(target)
105,107c105
<                 stop(paste("strata", 
<                                paste(i[is.na(indx)], collapse=' '),
<                                'not matched'))
---
>                 stop(gettextf("strata %s not matched", paste(i[is.na(indx)], collapse=' ')))
111c109
<             temp <- rep(1:length(x$strata), x$strata)
---
>             temp <- rep(seq_along(x$strata), x$strata)
180c178
<     if (indx[1]==0) stop("a formula argument is required")
---
>     if (indx[1]==0) stop(gettextf("'%s' argument is required", "formula"))
192c190
<     if (!is.Surv(Y)) stop("Response must be a survival object")
---
>     if (!is.Surv(Y)) stop(gettextf("'%s' argument is not an object of class %s", "formula", dQuote("Surv")))
213c211
<     if (!is.Surv(Y)) stop("y must be a Surv object")
---
>     if (!is.Surv(Y)) stop(gettextf("'%s' argument is not an object of class %s", "y", dQuote("Surv")))
220c218
<             stop("cannot use both the etype argument and mstate survival type")
---
>             stop("cannot use both the 'etype' argument and 'mstate' survival type")
222c220
<             stop("cannot use both the etype and istate arguments")
---
>             stop("cannot use both the 'etype' and 'istate' arguments")
239c237
<         else stop("etype argument incompatable with survival type")
---
>         else stop("'etype' argument incompatable with survival type")
358c356
<     else stop("invalid conf.int type")
---
>     else stop(gettextf("invalid '%s' type", "conf.int"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/noweb/survfitCI.Rnw Recommended/survival/noweb/survfitCI.Rnw
74,75c74
<          stop(paste("multi-state computation doesn't support \"", type,
<                           "\" survival data", sep=''))
---
>          stop(gettextf("multi-state computation doesn't support \"%s\" survival data", type))
81c80
<             stop("start.time must be a single numeric value")
---
>             stop("'start.time' srgument must be a single numeric value")
85c84
<             if (length(toss)==n) stop("start.time has removed all observations")
---
>             if (length(toss)==n) stop("'start.time' has removed all observations")
115c114
<                 stop("istate should be a vector of positive integers or a factor")
---
>                 stop("'istate' argument should be a vector of positive integers or a factor")
120c119
<     if (length(id) ==0) id <- 1:n
---
>     if (length(id) ==0) id <- seq_len(n)
124c123
<     if (length(istate) !=n) stop ("wrong length for istate")
---
>     if (length(istate) !=n) stop(gettextf("'%s' argument is of the wrong length", "istate"))
155,156c154,155
<         transitions <- table(factor(istate, 1:nst), factor(Y[,2], 1:nstate))
<         dimnames(transitions) <-list(from=state.names, to=state.names[1:nstate])
---
>         transitions <- table(factor(istate, seq_len(nst)), factor(Y[,2], seq_len(nstate)))
>         dimnames(transitions) <-list(from=state.names, to=state.names[seq_len(nstate)])
282c281
<     stop("subject is in two different groups, id ", id[indx1[who]])
---
>     stop(gettextf("subject is in two different groups, id %s", id[indx1[who]]))
286c285
<     stop("gap in follow-up, id ", id[indx1[who]])
---
>     stop(gettextf("gap in follow-up, id %s", id[indx1[who]]))
331,332c330,331
< transitions <- table(factor(istate[indx[first]], 1:nst), 
<                      factor(status[indx[first]], 1:nstate))
---
> transitions <- table(factor(istate[indx[first]], seq_len(nst)), 
>                      factor(status[indx[first]], seq_len(nstate)))
475c474
<         for (j in 1:nstate) 
---
>         for (j in seq_len(nstate)) 
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/noweb/survfitKM.Rnw Recommended/survival/noweb/survfitKM.Rnw
39,40c39,40
<     if (!is.Surv(y)) stop("y must be a Surv object")
<     if (!is.factor(x)) stop("x must be a factor")
---
>     if (!is.Surv(y)) stop(gettextf("'%s' argument is not an object of class %s", "y", dQuote("Surv")))
>     if (!is.factor(x)) stop(gettextf("'%s' argument must be a factor", "x"))
54,55c54
< 		stop(paste("start.time =", start.time,
< 			   "is greater than all time points."))
---
> 		stop(gettextf("start.time = %s is greater than all time points.", start.time))
80c79
< for (i in 1:nstrat) {
---
> for (i in seq_len(nstrat)) {
119c118
<     stop("subject is in two different groups, id ", (id[indx1])[who])
---
>     stop(gettextf("subject is in two different groups, id %s", (id[indx1])[who]))
123c122
<     stop("gap in follow-up, id ", (id[indx1])[who])
---
>     stop(gettextf("gap in follow-up, id %s", (id[indx1])[who]))
130c129
<     stop("subject changes to the same state, id ", (id[indx1])[who])
---
>     stop(gettextf("subject changes to the same state, id %s", (id[indx1])[who]))
134c133
<     stop("subject changes case weights, id ", (id[indx1])[who])
---
>     stop(gettextf("subject changes case weights, id %s", (id[indx1])[who]))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/noweb/survfitms.Rnw Recommended/survival/noweb/survfitms.Rnw
40c40
<         temp <- 1:length(target)
---
>         temp <- seq_along(target)
61c61
<         i2 <- 1:n
---
>         i2 <- seq_len(n)
67c67
<             stop("subscript out of bounds")
---
>             stop("subscript is out of bounds")
70,72c70
<             stop(paste("strata", 
<                        paste(i[is.na(indx)], collapse=' '),
<                        'not matched'))
---
>             stop(gettextf("strata %s not matched", paste(i[is.na(indx)], collapse=' ')))
76c74
<         temp <- rep(1:length(x$strata), x$strata)
---
>         temp <- rep(seq_along(x$strata), x$strata)
86c84
<             stop("subscript out of bounds", j[is.na(indx)])
---
>             stop("subscript is out of bounds")
164c162
< 	    stop("summary.survfit can only be used for survfit objects")
---
> 	    stop("'summary.survfit()' function can only be used for objects of class \"survfit\"")
179c177
<         if (length(rmean)==0) stop("Invalid value for rmean option")
---
>         if (length(rmean)==0) stop("Invalid value for 'rmean' option")
213c211
<             for (i in 1:nstrat) 
---
>             for (i in seq_len(nstrat)) 
229c227
<         fit$strata <- factor(rep(1:nstrat, fit$strata), 1:nstrat,
---
>         fit$strata <- factor(rep(seq_len(nstrat), fit$strata), seq_len(nstrat),
258c256
<         sindx <- rep(1:nstrat, fit$strata)
---
>         sindx <- rep(seq_len(nstrat), fit$strata)
261c259
<                 fit[[i]] <- unlist(sapply(1:nstrat, function(j) 
---
>                 fit[[i]] <- unlist(sapply(seq_len(nstrat), function(j) 
266c264
<         fit$strata[] <- as.vector(table(factor(sindx[index], 1:nstrat))) 
---
>         fit$strata[] <- as.vector(table(factor(sindx[index], seq_len(nstrat)))) 
392c390
< 	    stop("summary.survfitms can only be used for survfitms objects")
---
> 	    stop("'summary.survfitms()' can only be used for objects of class \"survfitms\"")
407c405
<         if (length(rmean)==0) stop("Invalid value for rmean option")
---
>         if (length(rmean)==0) stop("Invalid value for 'rmean' option")
415c413
<         if (!is.numeric(times)) stop ("times must be numeric")
---
>         if (!is.numeric(times)) stop(gettextf("'%s' argument must be numeric", "times"))
421c419
<         sindx <- rep(1:nstrat, fit$strata)
---
>         sindx <- rep(seq_len(nstrat), fit$strata)
445c443
<             for (i in 1:nstrat) 
---
>             for (i in seq_len(nstrat)) 
480c478
< 	cat("Call: ")
---
> 	cat(gettext("Call:", domain = "R-survival"))
498c496
<         if (length(rmean)==0) stop("Invalid value for rmean option")
---
>         if (length(rmean)==0) stop("Invalid value for 'rmean' option")
512,514c510,511
<              cat("   *mean time in state, restricted (max time =", 
<                  format(etime, ...), ")\n")
<         else cat("   *mean time in state, restricted (per curve cutoff)\n")
---
>              cat(gettextf("   *mean time in state, restricted (max time = %s)\n", format(etime, ...), domain = "R-survival"))
>         else cat(gettextf("   *mean time in state, restricted (per curve cutoff)\n", domain = "R-survival"))
527c524
<         igrp <- rep(1:ngrp, x$strata)
---
>         igrp <- rep(seq_len(ngrp), x$strata)
540c537
<         dimnames(nevent) <- list(rname, x$states[1:nc])
---
>         dimnames(nevent) <- list(rname, x$states[seq_len(nc)])
549c546
<     outmat[1:length(nevent), 2] <- c(nevent)
---
>     outmat[seq_along(nevent), 2] <- c(nevent)
564c561
<         for (i in 1:ngrp) {
---
>         for (i in seq_len(ngrp)) {
574c571
<             if (length(delta) > nrow(temp)) delta <- delta[1:nrow(temp)]
---
>             if (length(delta) > nrow(temp)) delta <- delta[seq_len(nrow(temp))]
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/noweb/tmerge.Rnw Recommended/survival/noweb/tmerge.Rnw
62,63c62,63
<         stop("the data1, data2, and id arguments are required")
<     if (!inherits(data1, "data.frame")) stop("data1 must be a data frame")
---
>         stop("'data1', 'data2', and 'id' arguments are required")
>     if (!inherits(data1, "data.frame")) stop(gettextf("'%s' argument must be a data frame", "data1"))
82c82
<         stop("unrecognized option(s):", paste(names(extras), collapse=', '))
---
>         stop(sprintf(ngettext(length(extras), "unrecognized option: %s", "unrecognized options: %s", domain = "R-survival"), paste(names(extras), collapse = ", ")), domain = NA)
84c84
<         stop("idname option must be a valid variable name")
---
>         stop(gettextf("'%s' argument must be a variable name", "idname"))
87c87
<         stop("tstart option must be NULL or a valid variable name")
---
>         stop(gettextf("'%s' argument must be NULL or a variable name", "tstartname"))
89c89
<         stop("tstop option must be a valid variable name") 
---
>         stop(gettextf("'%s' argument must be a variable name", "tstopname"))
91c91
<         stop("delay option must be a number >= 0")
---
>         stop(gettextf("'%s' argument must be a number >= 0", "delay"))
93c93
<         stop("na.rm option must be TRUE or FALSE")
---
>         stop(gettextf("'%s' argument must be TRUE or FALSE", "na.rm"))
102c102
<     stop("data1 does not match its own tname attribute")
---
>     stop("'data1' does not match its own 'tname' attribute")
125c125
< if (missing(id)) stop("the id argument is required")
---
> if (missing(id)) stop(gettextf("'%s' argument is required", "id"))
136c136
<              stop("tstop and id must be the same length")
---
>              stop(gettextf("'%s' and '%s' arguments must be the same length", "tstop", "id"))
143c143
<             stop("tstart and id must be the same length")
---
>              stop(gettextf("'%s' and '%s' arguments must be the same length", "tstart", "id"))
145c145
<             stop("tstart must be < tstop")
---
>             stop("'tstart' must be < 'tstop'")
150c150
<         stop("tstart and tstop arguments only apply to the first call")
---
>         stop("'tstart' and 'tstop' arguments only apply to the first call")
169c169
< if (any(argname== "")) stop("all additional argments must have a name")
---
> if (any(argname== "")) stop("all additional arguments must have a name")
173,174c173
<     stop(paste("argument(s)", argname[is.na(check)], 
<                    "not a recognized type"))
---
>     stop(gettextf("argument(s) %s not a recognized type", argname[is.na(check)]))
222c221
<         warning("overwriting data1 variables", paste(overwrite, collapse=' '))
---
>         warning(gettextf("overwriting data1 variables %s", paste(overwrite, collapse = " ")))
253,254c252
<         if (length(indx) >0) stop("found an ending time of ", tstop[indx[1]],
<                                   ", the default starting time of 0 is invalid")
---
>         if (length(indx) >0) stop(gettextf("found an ending time of %s, the default starting time of 0 is invalid", tstop[indx[1]]))
258c256
<         stop("tstart must be < tstop")
---
>         stop("'tstart' must be < 'tstop'")
268c266
<     if (any(tstart >= tstop)) stop("tstart must be < tstop")
---
>     if (any(tstart >= tstop)) stop("'tstart' must be < 'tstop'")
298c296
<         stop("argument ", argname[ii], " is not the same length as id")
---
>         stop(gettextf("'%s' argument is not the same length as '%s' argument", argname[ii], "id"))
301c299
<             stop("argument", argname[ii], "is not the same length as id")
---
>             stop(gettextf("'%s' argument is not the same length as '%s' argument", argname[ii], "id"))
440c438
<     jrep <- rep(1:nrow(newdata), irep)  #stutter the duplicated rows
---
>     jrep <- rep(seq_len(nrow(newdata)), irep)  #stutter the duplicated rows
449c447
<     for (j in 1:nfix) temp[[j]] <-  -(seq(n.add[j] -1, 0)) + iend[j]
---
>     for (j in seq_len(nfix)) temp[[j]] <-  -(seq(n.add[j] -1, 0)) + iend[j]
Only in Recommended/survival: po
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/agmart.c Recommended/survival/src/agmart.c
28,32c28,30
< void agmart(Sint   *n,     Sint   *method,  double *start,   double *stop, 
< 	    Sint   *event, double *score,   double *wt,      Sint   *strata, 
< 	    double *resid)
<     {
<     int i,k;
---
> void agmart(Sint *n, Sint *method, double *start, double *stop, Sint *event,
> 		double *score, double *wt, Sint *strata, double *resid) {
> 
38c36
<     int person;
---
> 
43,45c41,45
<     for (i=0; i<nused; i++)  resid[i]=event[i];
<     for (person=0; person<nused;) {
< 	if (event[person]==0) person++;
---
> 	for (int i = 0; i < nused; i++)
> 		resid[i] = event[i];
> 	for (int person = 0; person < nused;) {
> 		if (event[person] == 0)
> 			person++;
52c52
< 	    for (k=person; k<nused; k++) {
---
> 			for (int k = person; k < nused; k++) {
61c61,62
< 		if (strata[k]==1) break;
---
> 				if (strata[k] == 1)
> 					break;
70c71
< 	    for (k=0; k<deaths; k++) {
---
> 			for (int k = 0; k < deaths; k++) {
75c76
< 	    for (k=person; k<nused; k++) {
---
> 			for (int k = person; k < nused; k++) {
79c80,81
< 		    else    resid[k] -= score[k]*hazard;
---
> 					else
> 						resid[k] -= score[k] * hazard;
81,82c83,86
< 		if (stop[k]==time) person++;
< 		if (strata[k]==1) break;
---
> 				if (stop[k] == time)
> 					person++;
> 				if (strata[k] == 1)
> 					break;
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/agmart2.c Recommended/survival/src/agmart2.c
28,32c28,30
< void agmart2(Sint   *n,     Sint   *method,  double *start,   double *stop, 
< 	    Sint   *event,  Sint   *nstrat,  Sint *strata,    Sint *sort1,
< 	    Sint   *sort2,  double *score,   double *wt,      
< 	    double *resid,  double *haz)
<     {
---
> void agmart2(Sint *n, Sint *method, double *start, double *stop, Sint *event,
> 		Sint *nstrat, Sint *strata, Sint *sort1, Sint *sort2, double *score,
> 		double *wt, double *resid, double *haz) {
40d37
<     int person;
55c52
<     for (person=0; person<nused;) {
---
> 	for (int person = 0; person < nused;) {
60,61c57
< 	    }
< 	else {
---
> 		} else {
68c64,65
< 		if (stop[p] < time) break;
---
> 				if (stop[p] < time)
> 					break;
83c80,81
< 		if (start[p] < time) break;
---
> 				if (start[p] < time)
> 					break;
109c107,108
< 		if (stop[p] > time) break;
---
> 				if (stop[p] > time)
> 					break;
125c124
< 	    for (i=strata_start; i<person; i++) {
---
> 			for (int i = strata_start; i < person; i++) {
127,129c126,130
< 		for (; k< ndeath && dtimes[k] >= stop[p]; k++);  
< 		for (j=k; j<ndeath; j++)
< 		    if (start[p] < dtimes[j]) resid[p] -= score[p]*haz[j];
---
> 				for (; k < ndeath && dtimes[k] >= stop[p]; k++)
> 					;
> 				for (int j = k; j < ndeath; j++)
> 					if (start[p] < dtimes[j])
> 						resid[p] -= score[p] * haz[j];
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/agmart3.c Recommended/survival/src/agmart3.c
21,22c21,22
< SEXP agmart3(SEXP surv2, SEXP score2, SEXP weight2, SEXP strata2,
< 	     SEXP sortx, SEXP method2) {
---
> SEXP agmart3(SEXP surv2, SEXP score2, SEXP weight2, SEXP strata2, SEXP sortx,
> 		SEXP method2) {
30c30
<     int n, person;
---
> 	int n;
80c80
<     for (person=0; person <n; ) {
---
> 	for (int person = 0; person < n;) {
94c94,95
< 		if (start[p] < time) break;
---
> 				if (start[p] < time)
> 					break;
107c108,109
< 		if (stop[p]  < time) break;  /* only tied times */ 
---
> 				if (stop[p] < time)
> 					break; /* only tied times */
124,125c126
< 	    }
< 	    else { /* Efron */
---
> 			} else { /* Efron */
129c130
< 		for (k=0; k <deaths; k++) {
---
> 				for (int k = 0; k < deaths; k++) {
144,145c145,148
< 		if (event[p] ==1) resid[p] = 1 + temp*score[p];
< 		else resid[p] = cumhaz * score[p];
---
> 				if (event[p] == 1)
> 					resid[p] = 1 + temp * score[p];
> 				else
> 					resid[p] = cumhaz * score[p];
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/agsurv3.c Recommended/survival/src/agsurv3.c
49,56c49
< static double   *y,
< 		*nscore,
< 		**newx,
< 		**surv,
< 		**vsurv,
< 		*isurv,
< 		**used,
< 		**tvar;
---
> static double *y, *nscore, **newx, **surv, **vsurv, *isurv, **used, **tvar;
59,65c52,53
< 		**imat,
< 		*mean;
< static int      death,
< 		ncurve,
< 		se,
< 		nvar,
< 		n;
---
> **imat, *mean;
> static int death, ncurve, se, nvar, n;
68,74c56,60
< void agsurv3(Sint   *sn,    Sint   *snvar,    Sint   *sncurve, 
< 	     Sint   *snpt,  Sint   *sse,      double *score, 
< 	     double *sy,    Sint   *grpx,     double *r,        double *coef, 
< 	     double *var,   double *xmean,    Sint   *scn, 
< 	     double *cy,    double *cx,       double *ssurv,
< 	     double *varh,  double *sused,    Sint   *smethod)
< {
---
> void agsurv3(Sint *sn, Sint *snvar, Sint *sncurve, Sint *snpt, Sint *sse,
> 		double *score, double *sy, Sint *grpx, double *r, double *coef,
> 		double *var, double *xmean, Sint *scn, double *cy, double *cx,
> 		double *ssurv, double *varh, double *sused, Sint *smethod) {
> 
76d61
<     int i,j,k,l;
79,81c64
<     int npt,
< 	nvar2,
< 	method;
---
> 	int npt, nvar2, method;
84c67
<     int person;
---
> 
88,98c71,74
<     double weight=0,
< 	   e_denom,
< 	   denom;
<     double inc,
< 	   sumt,
< 	   km =0;
<     double temp,
< 	   downwt,
< 	   d2;
<     double haz,
< 	   varhaz;
---
> 	double weight = 0, e_denom, denom;
> 	double inc, sumt, km = 0;
> 	double temp, downwt, d2;
> 	double haz, varhaz;
101,103c77,80
< 
<     n = *sn;  nvar = *snvar;
<     cn = *scn; npt = *snpt;
---
> 	n = *sn;
> 	nvar = *snvar;
> 	cn = *scn;
> 	npt = *snpt;
120c97,98
<     for (i=0; i<need; i++) nscore[i] =0.0;  /* R doesn't zero the memory */
---
> 	for (int i = 0; i < need; i++)
> 		nscore[i] = 0.0; /* R doesn't zero the memory */
123c101,102
<     for (i=0; i<n; i++) isurv[i]=1;
---
> 	for (int i = 0; i < n; i++)
> 		isurv[i] = 1;
130c109
< 	for (i=1; i<n; i++)
---
> 		for (int i = 1; i < n; i++)
137c116,117
<     if (se==1) oldx = dmatrix(cx, cn, nvar);
---
> 	if (se == 1)
> 		oldx = dmatrix(cx, cn, nvar);
144,145c124,126
<     for (i=0; i<ncurve; i++)
< 	for (j=0; j<npt; j++)  surv[i][j] =1;
---
> 	for (int i = 0; i < ncurve; i++)
> 		for (int j = 0; j < npt; j++)
> 			surv[i][j] = 1;
150c131
<     for (i=0; i<n; i++) {
---
> 	for (int i = 0; i < n; i++) {
152c133
< 	for (j=0; j<nvar; j++) {
---
> 		for (int j = 0; j < nvar; j++) {
164,165c145,147
<     for (person=0; person<cn;) {
< 	if (event[person]==0) person++;
---
> 	for (int person = 0; person < cn;) {
> 		if (event[person] == 0)
> 			person++;
172c154
< 	    for(i=0; i<nvar2; i++){
---
> 			for (int i = 0; i < nvar2; i++) {
179c161
< 	    for (k=person; k<cn; k++) {
---
> 			for (int k = person; k < cn; k++) {
184c166
< 		    for (i=0; i<nvar2; i++) {
---
> 					for (int i = 0; i < nvar2; i++) {
192c174
< 		    for (i=0; i<nvar2; i++) {
---
> 					for (int i = 0; i < nvar2; i++) {
201c183,185
< 	    if (method <3) for (i=0; i<nvar2; i++) mean[i] = a[i]/denom;
---
> 			if (method < 3)
> 				for (int i = 0; i < nvar2; i++)
> 					mean[i] = a[i] / denom;
203c187
< 		for (psave=person; psave<cn && stop[psave]==ttime; psave++) 
---
> 				for (psave = person; psave < cn && stop[psave] == ttime; psave++) {
207c191,192
< 		if (deaths == nrisk) km=0;
---
> 					if (deaths == nrisk)
> 						km = 0;
210,211c195
< 		    }
< 		else {           /*find the zero of an equation */
---
> 					} else { /*find the zero of an equation */
214c198
< 		    for (l=0; l<35; l++) { /* bisect it to death */
---
> 						for (int l = 0; l < 35; l++) { /* bisect it to death */
216c200
< 			for (k=person; k<psave; k++) {
---
> 							for (int k = person; k < psave; k++) {
220,221c204,207
< 			if (sumt < denom)  km += inc;
< 			     else          km -= inc;
---
> 							if (sumt < denom)
> 								km += inc;
> 							else
> 								km -= inc;
224a211
> 				}
237,241c224,230
< 		for (; person<cn && stop[person]==ttime; person++);
< 		}
< 	    else {
< 		temp =0;  haz=0; varhaz=0;
< 		for (k=person; k<cn && stop[k]==ttime; k++) {
---
> 				for (; person < cn && stop[person] == ttime; person++)
> 					;
> 			} else {
> 				temp = 0;
> 				haz = 0;
> 				varhaz = 0;
> 				for (int k = person; k < cn && stop[k] == ttime; k++) {
247c236
< 			for (i=0; i<nvar2; i++)
---
> 						for (int i = 0; i < nvar2; i++)
261,271c249,252
< int itime;
< double haz, var;
<     {
<     int i, j, k, l;
<     int     pstart,
< 	    ic;
<     double  temp,
< 	    totsurv,
< 	    totvar,
< 	    wt,
< 	    nn;
---
> 	int itime;double haz, var; {
> 	int i;
> 	int pstart, ic;
> 	double temp, totsurv, totvar, wt, nn;
277c258
< 	for (i=0; i<ncurve; i++) {
---
> 		for (int i = 0; i < ncurve; i++) {
279c260,261
< 	    if (nvar>0) vsurv[i][itime]=0;
---
> 			if (nvar > 0)
> 				vsurv[i][itime] = 0;
300,301c282
< 		    }
< 		else {
---
> 				} else {
311c292
< 		for (j=pstart; j<=i; j++) {
---
> 				for (int j = pstart; j <= i; j++) {
313,319c294,302
< 		    for (k=0; k<nvar; k++) {
< 			temp += (newx[k][i]-mean[k])*(newx[k][j]-mean[k])*
< 					  imat[k][k];
< 			for (l=0; l<k; l++)
< 			    temp += ((newx[k][i]-mean[k])*(newx[l][j]-mean[l]) +
< 				     (newx[k][j]-mean[k])*(newx[l][i]-mean[l]))*
< 				     imat[k][l];
---
> 					for (int k = 0; k < nvar; k++) {
> 						temp += (newx[k][i] - mean[k]) * (newx[k][j] - mean[k])
> 								* imat[k][k];
> 						for (int l = 0; l < k; l++)
> 							temp += ((newx[k][i] - mean[k])
> 									* (newx[l][j] - mean[l])
> 									+ (newx[k][j] - mean[k])
> 											* (newx[l][i] - mean[l]))
> 									* imat[k][l];
322,325c305,310
< 		    temp = nscore[i]*nscore[j]* tvar[i][j] *
< 				 isurv[i] * isurv[j];
< 		    if (i==j) totvar += temp;
< 		    else      totvar += temp + temp;
---
> 					temp = nscore[i] * nscore[j] * tvar[i][j] * isurv[i]
> 							* isurv[j];
> 					if (i == j)
> 						totvar += temp;
> 					else
> 						totvar += temp + temp;
335,337c320,325
< 	if (death==0) surv[ic][itime] *= totsurv/wt;
< 	else          surv[ic][itime] *= exp(totsurv/wt);
< 	if (se==1) vsurv[ic][itime] = totvar/(nn*nn);
---
> 		if (death == 0)
> 			surv[ic][itime] *= totsurv / wt;
> 		else
> 			surv[ic][itime] *= exp(totsurv / wt);
> 		if (se == 1)
> 			vsurv[ic][itime] = totvar / (nn * nn);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/cox_Rcallback.c Recommended/survival/src/cox_Rcallback.c
7c7
< 
---
> #include "localization.h"
52c52
<                 error("coef:invalid type\n");
---
>                 error(_("coef: invalid type\n"));
61c61
<                 error("first: invalid type\n");
---
>                 error(_("first: invalid type\n"));
71c71
<                 error("second: invalid type\n");
---
>                 error(_("second: invalid type\n"));
80c80
<                 error("flag:invalid type\n");
---
>                 error(_("flag: invalid type\n"));
89c89
<                 error("penalty: invalid type\n");
---
>                 error(_("penalty: invalid type\n"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/coxmart2.c Recommended/survival/src/coxmart2.c
20,24c20,22
< void coxmart2(Sint   *sn,     double *time, 
< 	     Sint   *status, Sint   * strata,   double *score, 
< 	     double *wt,     double *resid)
<     {
<     int i,j;
---
> void coxmart2(Sint *sn, double *time, Sint *status, Sint * strata,
> 		double *score, double *wt, double *resid) {
> 	int j;
36c34
<     for (i=0; i<n; ) {
---
> 	for (int i = 0; i < n;) {
64c62
<     for (i= n-1; i>=0; i--) {
---
> 	for (int i = n - 1; i >= 0; i--) {
67c65,66
< 	if (strata[i] ==1) expected=0;  /* last obs of a strata */
---
> 		if (strata[i] == 1)
> 			expected = 0; /* last obs of a strata */
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/coxsafe.c Recommended/survival/src/coxsafe.c
30a31
> #include <R_ext/Minmax.h>
35,37c36
<     if (x< SMALL) return(SMALL);
<     if (x> LARGE) return(LARGE);
<     return (x);
---
> 	return min(max(SMALL, x), LARGE);
Only in Recommended/survival/src: localization.h
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/pyears1.c Recommended/survival/src/pyears1.c
49,80c49,60
< void pyears1(Sint   *sn,      Sint   *sny,      Sint   *sdoevent, 
< 	     double *sy,      double *weight,       
<              Sint   *sedim,   Sint   *efac, 
< 	     Sint   *edims,   double *secut,    double *expect, 
< 	     double *sedata,  Sint   *sodim,    Sint   *ofac, 
< 	     Sint   *odims,   double *socut,    Sint   *smethod, 
< 	     double *sodata,  double *pyears,   double *pn, 
< 	     double *pcount,  double *pexpect,  double *offtable)
<     {
< 
<     int i,j;
<     int     n,
< 	    ny,
< 	    doevent,
<             method,
< 	    edim,
< 	    odim;
<     double  *start,
< 	    *stop,
< 	    *event,
< 	    **ecut,
< 	    **ocut,
< 	    **edata,
< 	    **odata;
<     double  *data,
< 	    *data2;
<     double  timeleft,
< 	    thiscell,
< 	    etime,
< 	    et2;
<     int     index,
< 	    indx, indx2;
---
> void pyears1(Sint *sn, Sint *sny, Sint *sdoevent, double *sy, double *weight,
> 		Sint *sedim, Sint *efac, Sint *edims, double *secut, double *expect,
> 		double *sedata, Sint *sodim, Sint *ofac, Sint *odims, double *socut,
> 		Sint *smethod, double *sodata, double *pyears, double *pn,
> 		double *pcount, double *pexpect, double *offtable) {
> 
> 	int i;
> 	int n, ny, doevent, method, edim, odim;
> 	double *start, *stop, *event, **ecut, **ocut, **edata, **odata;
> 	double *data, *data2;
> 	double timeleft, thiscell, etime, et2;
> 	int index, indx, indx2;
99,100c79
< 	}
<     else   {
---
> 	} else {
114c93
<     for (i=0; i<edim; i++) {
---
> 	for (int i = 0; i < edim; i++) {
116,117c95,98
< 	if (efac[i]==0)     secut += edims[i];
< 	else if(efac[i] >1) secut += 1 + (efac[i]-1)*edims[i];
---
> 		if (efac[i] == 0)
> 			secut += edims[i];
> 		else if (efac[i] > 1)
> 			secut += 1 + (efac[i] - 1) * edims[i];
121c102
<     for (i=0; i<odim; i++) {
---
> 	for (int i = 0; i < odim; i++) {
123c104,105
< 	if (ofac[i]==0) socut += odims[i] +1;
---
> 		if (ofac[i] == 0)
> 			socut += odims[i] + 1;
135,136c117,120
< 	if (dostart==1) timeleft = stop[i] - start[i];
< 	else timeleft= stop[i];
---
> 		if (dostart == 1)
> 			timeleft = stop[i] - start[i];
> 		else
> 			timeleft = stop[i];
143,145c127,132
< 	if (dostart==1) timeleft = stop[i] - start[i];
< 	else timeleft= stop[i];
< 	if (timeleft >0 && timeleft < eps) eps = timeleft;
---
> 		if (dostart == 1)
> 			timeleft = stop[i] - start[i];
> 		else
> 			timeleft = stop[i];
> 		if (timeleft > 0 && timeleft < eps)
> 			eps = timeleft;
150c137
<     for (i=0; i<n; i++) {
---
> 	for (int i = 0; i < n; i++) {
154,163c141,156
< 	for (j=0; j<odim; j++) {
< 	    if (ofac[j] ==1 || dostart==0) data[j] = odata[j][i];
< 	    else                           data[j] = odata[j][i] + start[i];
< 	    }
< 	for (j=0; j<edim; j++) {
< 	    if (efac[j] ==1 || dostart==0) data2[j] = edata[j][i];
< 	    else                           data2[j] = edata[j][i] + start[i];
< 	    }
< 	if (dostart==1) timeleft = stop[i] - start[i];
< 	else timeleft= stop[i];
---
> 		for (int j = 0; j < odim; j++) {
> 			if (ofac[j] == 1 || dostart == 0)
> 				data[j] = odata[j][i];
> 			else
> 				data[j] = odata[j][i] + start[i];
> 		}
> 		for (int j = 0; j < edim; j++) {
> 			if (efac[j] == 1 || dostart == 0)
> 				data2[j] = edata[j][i];
> 			else
> 				data2[j] = edata[j][i] + start[i];
> 		}
> 		if (dostart == 1)
> 			timeleft = stop[i] - start[i];
> 		else
> 			timeleft = stop[i];
194,198c187,193
< 		    et2 = pystep(edim, &indx, &indx2, &lwt, data2, efac,
< 				 edims, ecut, etime, 1);
< 		    if (lwt <1) lambda = (lwt*expect[indx] +
< 						     (1-lwt)*expect[indx2]);
< 		    else       lambda =  expect[indx];
---
> 					et2 = pystep(edim, &indx, &indx2, &lwt, data2, efac, edims,
> 							ecut, etime, 1);
> 					if (lwt < 1)
> 						lambda =
> 								(lwt * expect[indx] + (1 - lwt) * expect[indx2]);
> 					else
> 						lambda = expect[indx];
200c195,196
< 			temp += exp(-hazard)*(1-exp(-lambda*et2))/ lambda;
---
> 						temp += exp(-hazard) * (1 - exp(-lambda * et2))
> 								/ lambda;
203,204c199,201
< 		    for (j=0; j<edim; j++)
< 			if (efac[j] !=1) data2[j] += et2;
---
> 					for (int j = 0; j < edim; j++)
> 						if (efac[j] != 1)
> 							data2[j] += et2;
207,208c204,207
< 		if (method==1) pexpect[index] += hazard * weight[i];
< 		else           pexpect[index] += exp(-cumhaz)*temp * weight[i];
---
> 				if (method == 1)
> 					pexpect[index] += hazard * weight[i];
> 				else
> 					pexpect[index] += exp(-cumhaz) * temp * weight[i];
210,211c209
< 		}
< 	    else  {
---
> 			} else {
213,214c211,213
< 		for (j=0; j<edim; j++)
< 		    if (efac[j] !=1) data2[j] += thiscell;
---
> 				for (int j = 0; j < edim; j++)
> 					if (efac[j] != 1)
> 						data2[j] += thiscell;
217,218c216,218
< 	    for (j=0; j<odim; j++)
< 		if (ofac[j] ==0) data[j] += thiscell;
---
> 			for (int j = 0; j < odim; j++)
> 				if (ofac[j] == 0)
> 					data[j] += thiscell;
221c221,222
< 	if (index >=0 && doevent) pcount[index] += event[i] * weight[i];
---
> 		if (index >= 0 && doevent)
> 			pcount[index] += event[i] * weight[i];
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/pyears2.c Recommended/survival/src/pyears2.c
35,51c35,41
< void pyears2(Sint   *sn,      Sint   *sny,   Sint   *sdoevent, 
< 	     double *sy,      double *wt,    Sint   *sodim,    Sint   *ofac, 
< 	     Sint   *odims,   double *socut, double *sodata,
< 	     double *pyears,  double *pn,    double *pcount, 
< 	     double *offtable)
<     {
< 
<     int i,j;
<     int     n,
< 	    ny,
< 	    doevent,
< 	    odim;
<     double  *start,
< 	    *stop,
< 	    *event,
< 	    **ocut,
< 	    **odata;
---
> void pyears2(Sint *sn, Sint *sny, Sint *sdoevent, double *sy, double *wt,
> 		Sint *sodim, Sint *ofac, Sint *odims, double *socut, double *sodata,
> 		double *pyears, double *pn, double *pcount, double *offtable) {
> 
> 	int i;
> 	int n, ny, doevent, odim;
> 	double *start, *stop, *event, **ocut, **odata;
53,54c43
<     double  timeleft,
< 	    thiscell;
---
> 	double timeleft, thiscell;
71,72c60
< 	}
<     else   {
---
> 	} else {
84c72
<     for (i=0; i<odim; i++) {
---
> 	for (int i = 0; i < odim; i++) {
86c74,75
< 	if (ofac[i]==0) socut += odims[i] +1;
---
> 		if (ofac[i] == 0)
> 			socut += odims[i] + 1;
98,99c87,90
< 	if (dostart==1) timeleft = stop[i] - start[i];
< 	else timeleft= stop[i];
---
> 		if (dostart == 1)
> 			timeleft = stop[i] - start[i];
> 		else
> 			timeleft = stop[i];
106,108c97,102
< 	if (dostart==1) timeleft = stop[i] - start[i];
< 	else timeleft= stop[i];
< 	if ((timeleft >0) && (timeleft < eps)) eps = timeleft;
---
> 		if (dostart == 1)
> 			timeleft = stop[i] - start[i];
> 		else
> 			timeleft = stop[i];
> 		if ((timeleft > 0) && (timeleft < eps))
> 			eps = timeleft;
113c107
<     for (i=0; i<n; i++) {
---
> 	for (int i = 0; i < n; i++) {
122,127c116,125
< 	for (j=0; j<odim; j++) {
< 	    if (ofac[j] ==1 || dostart==0) data[j] = odata[j][i];
< 	    else                           data[j] = odata[j][i] + start[i];
< 	    }
< 	if (dostart==1) timeleft = stop[i] - start[i];
< 	else            timeleft = stop[i];
---
> 		for (int j = 0; j < odim; j++) {
> 			if (ofac[j] == 1 || dostart == 0)
> 				data[j] = odata[j][i];
> 			else
> 				data[j] = odata[j][i] + start[i];
> 		}
> 		if (dostart == 1)
> 			timeleft = stop[i] - start[i];
> 		else
> 			timeleft = stop[i];
147,148c145,146
< 		}
< 	    else *offtable += thiscell * wt[i];
---
> 			} else
> 				*offtable += thiscell * wt[i];
150,151c148,150
< 	    for (j=0; j<odim; j++)
< 		if (ofac[j] ==0) data[j] += thiscell;
---
> 			for (int j = 0; j < odim; j++)
> 				if (ofac[j] == 0)
> 					data[j] += thiscell;
154c153,154
< 	if (index >=0 && doevent) pcount[index] += event[i] * wt[i];
---
> 		if (index >= 0 && doevent)
> 			pcount[index] += event[i] * wt[i];
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/pyears3b.c Recommended/survival/src/pyears3b.c
38,47c38,40
< SEXP pyears3b(SEXP   death2,    SEXP   efac2,   SEXP edims2,
< 	      SEXP   ecut2,     SEXP   expect2, SEXP grpx2,
< 	      SEXP   x2, 	SEXP   y2,      SEXP times2,
< 	      SEXP   ngrp2) {
<     int i,j,k;
<     int     n,
< 	    death,
< 	    edim,
< 	    ngrp,
< 	    ntime;
---
> SEXP pyears3b(SEXP death2, SEXP efac2, SEXP edims2, SEXP ecut2, SEXP expect2,
> 		SEXP grpx2, SEXP x2, SEXP y2, SEXP times2, SEXP ngrp2) {
> 	int n, death, edim, ngrp, ntime;
53,60c46,47
<     double  timeleft,
< 	    thiscell,
< 	    etime,
< 	    time,
< 	    et2;
<     int     index,
< 	    indx,
< 	    indx2;
---
> 	double timeleft, thiscell, etime, time, et2;
> 	int index, indx, indx2;
92c78,79
<     for (j=0; j<ntime*ngrp; j++) wvec[j] =0;
---
> 	for (int j = 0; j < ntime * ngrp; j++)
> 		wvec[j] = 0;
99c86
<     for (i=0; i<edim; i++) {
---
> 	for (int i = 0; i < edim; i++) {
101,102c88,91
< 	if (efac[i]==0)     etemp += edims[i];
< 	else if(efac[i] >1) etemp += 1 + (efac[i]-1)*edims[i];
---
> 		if (efac[i] == 0)
> 			etemp += edims[i];
> 		else if (efac[i] > 1)
> 			etemp += 1 + (efac[i] - 1) * edims[i];
112c101
<     for (i=0; i<(ntime*ngrp); i++) {
---
> 	for (int i = 0; i < (ntime * ngrp); i++) {
118c107
<     for (i=0; i<n; i++) {
---
> 	for (int i = 0; i < n; i++) {
124c113,114
< 	for (j=0; j<edim; j++) data2[j] = x[j][i];
---
> 		for (int j = 0; j < edim; j++)
> 			data2[j] = x[j][i];
132c122
< 	for (j=0; j<ntime && timeleft >0; j++) {
---
> 		for (int j = 0; j < ntime && timeleft > 0; j++) {
134c124,125
< 	    if (thiscell > timeleft) thiscell = timeleft;
---
> 			if (thiscell > timeleft)
> 				thiscell = timeleft;
146,151c137,146
< 		et2 = pystep(edim, &indx, &indx2, &wt, data2, efac,
< 			     edims, ecut, etime, 1);
< 		if (wt <1) hazard+= et2*(wt*expect[indx] +(1-wt)*expect[indx2]);
< 		else       hazard+= et2* expect[indx];
< 		for (k=0; k<edim; k++)
< 		    if (efac[k] !=1) data2[k] += et2;
---
> 				et2 = pystep(edim, &indx, &indx2, &wt, data2, efac, edims, ecut,
> 						etime, 1);
> 				if (wt < 1)
> 					hazard += et2
> 							* (wt * expect[indx] + (1 - wt) * expect[indx2]);
> 				else
> 					hazard += et2 * expect[indx];
> 				for (int k = 0; k < edim; k++)
> 					if (efac[k] != 1)
> 						data2[k] += et2;
161,164c156,160
< 		if (death==0) esurv[index]=1;
< 		else          esurv[index]=0;
< 		}
< 	    else if (death==0) {
---
> 				if (death == 0)
> 					esurv[index] = 1;
> 				else
> 					esurv[index] = 0;
> 			} else if (death == 0) {
167,168c163
< 		}
< 	    else {
---
> 			} else {
180c175
<     for (i=0; i<ntime*ngrp; i++) {
---
> 	for (int i = 0; i < ntime * ngrp; i++) {
185,188c180,185
< 	    if (death==0) esurv[i] /= wvec[i];
< 	    else          esurv[i] = exp(-esurv[i]/wvec[i]);
< 	    }
< 	else if (death!=0) esurv[i] = exp(-esurv[i]);
---
> 			if (death == 0)
> 				esurv[i] /= wvec[i];
> 			else
> 				esurv[i] = exp(-esurv[i] / wvec[i]);
> 		} else if (death != 0)
> 			esurv[i] = exp(-esurv[i]);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/pystep.c Recommended/survival/src/pystep.c
32,36c32,34
< double pystep(int nc,        int  *index,  int  *index2,   double *wt, 
< 	      double *data,  Sint *fac,    Sint *dims,     double **cuts, 
< 	      double step,   int  edge)
<     {
<     int i,j;
---
> double pystep(int nc, int *index, int *index2, double *wt, double *data,
> 		Sint *fac, Sint *dims, double **cuts, double step, int edge) {
> 	int j;
44c41,42
<     *index =0;  *index2=0;
---
> 	*index = 0;
> 	*index2 = 0;
48,49c46,48
<     for (i=0; i<nc; i++) {
< 	if (fac[i]==1) *index += (data[i]-1) * kk;
---
> 	for (int i = 0; i < nc; i++) {
> 		if (fac[i] == 1)
> 			*index += (data[i] - 1) * kk;
51,53c50,56
< 	    if (fac[i]>1) dtemp = 1 + (fac[i]-1)*dims[i];
< 	    else          dtemp = dims[i];
< 	    for (j=0; j<dtemp; j++) if (data[i] < cuts[i][j]) break;
---
> 			if (fac[i] > 1)
> 				dtemp = 1 + (fac[i] - 1) * dims[i];
> 			else
> 				dtemp = dims[i];
> 			for (j = 0; j < dtemp; j++)
> 				if (data[i] < cuts[i][j])
> 					break;
58,63c61,68
< 		    if (temp > step) shortfall = step;
< 		    else             shortfall = temp;
< 		    }
< 		if (temp < maxtime)  maxtime = temp;
< 		}
< 	    else if (j==dtemp){  /*bigger than last cutpoint */
---
> 					if (temp > step)
> 						shortfall = step;
> 					else
> 						shortfall = temp;
> 				}
> 				if (temp < maxtime)
> 					maxtime = temp;
> 			} else if (j == dtemp) { /*bigger than last cutpoint */
66,72c71,80
< 		    if (temp <=0) shortfall = step;
< 		    else if (temp < maxtime) maxtime = temp;
< 		    }
< 		if (fac[i] >1) j = dims[i] -1;   /*back to normal indices */
< 		else  j--;
< 		}
< 	    else {
---
> 					if (temp <= 0)
> 						shortfall = step;
> 					else if (temp < maxtime)
> 						maxtime = temp;
> 				}
> 				if (fac[i] > 1)
> 					j = dims[i] - 1; /*back to normal indices */
> 				else
> 					j--;
> 			} else {
74c82,83
< 		if (temp < maxtime)  maxtime = temp;
---
> 				if (temp < maxtime)
> 					maxtime = temp;
88c97,98
<     if (shortfall ==0) return(maxtime);
---
> 	if (shortfall == 0)
> 		return (maxtime);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/survpenal.c Recommended/survival/src/survpenal.c
15,19c15,18
< void survpenal(int whichcase, int nfrail,    int  nvar,    double **hmat, 
< 	       double **JJ,   double *hdiag, double *jdiag,
< 	       double *u,     double *beta,  double *penalty,
< 	       int ptype,     int pdiag,     SEXP pexpr1,   double *cptr1, 
< 	       SEXP pexpr2,   double *cptr2, SEXP rho) {
---
> void survpenal(int whichcase, int nfrail, int nvar, double **hmat, double **JJ,
> 		double *hdiag, double *jdiag, double *u, double *beta, double *penalty,
> 		int ptype, int pdiag, SEXP pexpr1, double *cptr1, SEXP pexpr2,
> 		double *cptr2, SEXP rho) {
21c20
<     int i,j, k;
---
> 	int k;
31c30,31
< 	for (i=0; i<nfrail; i++) cptr1[i] = beta[i];  /* set "coef1" in rho */
---
> 		for (int i = 0; i < nfrail; i++)
> 			cptr1[i] = beta[i]; /* set "coef1" in rho */
42c42,43
< 	    for (i=0; i<nfrail; i++) beta[i] = dptr[i];
---
> 			for (int i = 0; i < nfrail; i++)
> 				beta[i] = dptr[i];
60c61
< 		for (i=0; i<nfrail; i++) {
---
> 				for (int i = 0; i < nfrail; i++) {
64c65,66
< 		    for (j=0; j<nvar; j++) hmat[j][i] =0; 
---
> 					for (int j = 0; j < nvar; j++)
> 						hmat[j][i] = 0;
66,67c68
< 	        }
< 	    else {
---
> 			} else {
69c70,71
< 		for (i=0; i<nfrail; i++) u[i] += dptr[i];
---
> 				for (int i = 0; i < nfrail; i++)
> 					u[i] += dptr[i];
72c74
< 		for (i=0; i<nfrail; i++) {
---
> 				for (int i = 0; i < nfrail; i++) {
87c89,90
< 	for (i=0; i<nvar; i++) cptr2[i] = beta[i+nfrail]; /* set fcn var */
---
> 		for (int i = 0; i < nvar; i++)
> 			cptr2[i] = beta[i + nfrail]; /* set fcn var */
93c96,97
< 	    for (i=0; i<nvar; i++) beta[i+nfrail] = dptr[i];
---
> 			for (int i = 0; i < nvar; i++)
> 				beta[i + nfrail] = dptr[i];
96c100,101
< 	    for (i=0; i<nvar; i++) u[i+nfrail] += dptr[i];
---
> 			for (int i = 0; i < nvar; i++)
> 				u[i + nfrail] += dptr[i];
101c106
< 		for (i=0; i<nvar; i++) {
---
> 				for (int i = 0; i < nvar; i++) {
105,106c110
< 	        }
< 	    else {
---
> 			} else {
109,110c113,114
< 		for (i=0; i<nvar; i++) {
< 		    for (j=nfrail; j<nvar+nfrail; j++) {
---
> 				for (int i = 0; i < nvar; i++) {
> 					for (int j = nfrail; j < nvar + nfrail; j++) {
119c123
< 	    for (i=0; i<nvar; i++) {
---
> 			for (int i = 0; i < nvar; i++) {
123c127,128
< 		    for (j=0; j<i; j++) hmat[i][j+nfrail] =0;
---
> 					for (int j = 0; j < i; j++)
> 						hmat[i][j + nfrail] = 0;
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/survreg7.c Recommended/survival/src/survreg7.c
64,70c64,67
< SEXP survreg7(SEXP maxiter2,   SEXP nvarx,  SEXP y,
< 	      SEXP ny2,        SEXP covar2, SEXP wtx,
< 	      SEXP offset2,    SEXP beta2,  SEXP nstratx,
< 	      SEXP stratax,    SEXP epsx,   SEXP tolx,
< 	      SEXP dist,       SEXP dexpr,  SEXP rho,
< 	      SEXP ptype2,     SEXP pdiag2, SEXP nfrail2,
< 	      SEXP fgrp2,      SEXP pexpr1, SEXP pexpr2) {
---
> SEXP survreg7(SEXP maxiter2, SEXP nvarx, SEXP y, SEXP ny2, SEXP covar2,
> 		SEXP wtx, SEXP offset2, SEXP beta2, SEXP nstratx, SEXP stratax,
> 		SEXP epsx, SEXP tolx, SEXP dist, SEXP dexpr, SEXP rho, SEXP ptype2,
> 		SEXP pdiag2, SEXP nfrail2, SEXP fgrp2, SEXP pexpr1, SEXP pexpr2) {
72c69
<     int i,j;	
---
> 
79c76
<     int golden, goright;
---
> 	int goright;
96,98c93
<     double *jdiag, 
< 	   *newbeta,
< 	   *u;
---
> 	double *jdiag, *newbeta, *u;
108,109c103
<     SEXP  out_iter, out_loglik, out_hmat, 
< 	  out_hinv, out_flag,   out_beta;
---
> 	SEXP out_iter, out_loglik, out_hmat, out_hinv, out_flag, out_beta;
186c180,181
<     for (i=nvar; i<LENGTH(beta2); i++) newbeta[i] = beta[i];
---
> 	for (int i = nvar; i < LENGTH(beta2); i++)
> 		newbeta[i] = beta[i];
192,193c187
< 	}
<     else {
---
> 	} else {
202,203c196
< 	}
<     else {
---
> 	} else {
244,248c237,238
<     *loglik = (*dolik)(n,      nvar,             nstrat,  0,
< 		       beta,   asInteger(dist),  strat,   offset,
< 		       time1,  time2,            status,  wt,
< 		       covar,  hmat,             JJ,      u,
< 		       dexpr,  rho,              zptr,
---
> 	*loglik = (*dolik)(n, nvar, nstrat, 0, beta, asInteger(dist), strat, offset,
> 			time1, time2, status, wt, covar, hmat, JJ, u, dexpr, rho, zptr,
250,251c240,241
<     survpenal(0, nfrail, nvar,  hmat,  JJ,     hdiag, jdiag,  u,     beta,  
< 	         penalty, ptype, pdiag, pexpr1, cptr1, pexpr2, cptr2, rho);
---
> 	survpenal(0, nfrail, nvar, hmat, JJ, hdiag, jdiag, u, beta, penalty, ptype,
> 			pdiag, pexpr1, cptr1, pexpr2, cptr2, rho);
253c243,244
<     for (i=0; i<nvar3; i++) usave[i] = u[i];
---
> 	for (int i = 0; i < nvar3; i++)
> 		usave[i] = u[i];
271,272c262
< 	    }
< 	else {  /* Newton-Raphson step */
---
> 		} else { /* Newton-Raphson step */
276c266
< 	for (i=0; i<nvar3; i++) {
---
> 		for (int i = 0; i < nvar3; i++) {
280,287c270,274
< 	newlk = (*dolik)(n,       nvar,             nstrat,  0,
< 			  newbeta, asInteger(dist),  strat,   offset,
< 			  time1,   time2,            status,  wt,
< 			  covar,   hmat,             JJ,      u,
< 			  dexpr,   rho,              zptr,
< 			  nfrail,  fgrp,             hdiag,   jdiag);
< 	survpenal(0, nfrail, nvar,  hmat,  JJ,     hdiag, jdiag,  u, newbeta,  
< 		  &newpen, ptype, pdiag, pexpr1, cptr1, pexpr2, cptr2, rho);
---
> 		newlk = (*dolik)(n, nvar, nstrat, 0, newbeta, asInteger(dist), strat,
> 				offset, time1, time2, status, wt, covar, hmat, JJ, u, dexpr,
> 				rho, zptr, nfrail, fgrp, hdiag, jdiag);
> 		survpenal(0, nfrail, nvar, hmat, JJ, hdiag, jdiag, u, newbeta, &newpen,
> 				ptype, pdiag, pexpr1, cptr1, pexpr2, cptr2, rho);
296c283
< 	    for (i=0; i<nvar3; i++) {
---
> 			for (int i = 0; i < nvar3; i++) {
324,326c311,315
< 	    for (i=0; i<nvar3; i++) u[i] = newbeta[i] - beta[i];
< 	    for (i=0; i<nstrat; i++) 
< 		if (u[i+nvar+nfrail] < -0.7) u[i+nvar+nfrail] = -1.1;
---
> 			for (int i = 0; i < nvar3; i++)
> 				u[i] = newbeta[i] - beta[i];
> 			for (int i = 0; i < nstrat; i++)
> 				if (u[i + nvar + nfrail] < -0.7)
> 					u[i + nvar + nfrail] = -1.1;
342c331
< 		for (i=0; i<nvar3; i++)
---
> 				for (int i = 0; i < nvar3; i++)
345,353c334,339
< 		y1 = (*dolik)(n,      nvar,             nstrat,  1,
< 			      newbeta,asInteger(dist),  strat,   offset,
< 			      time1,  time2,            status,  wt,
< 			      covar,  hmat,             JJ,      u,
< 			      dexpr,  rho,              zptr,
< 			      nfrail, fgrp,             hdiag,   jdiag);
< 		survpenal(1, nfrail,  nvar,   hmat,  JJ, hdiag, jdiag,  
< 			  u, newbeta, &newpen, ptype, pdiag,
< 			  pexpr1, cptr1, pexpr2, cptr2, rho);
---
> 				y1 = (*dolik)(n, nvar, nstrat, 1, newbeta, asInteger(dist),
> 						strat, offset, time1, time2, status, wt, covar, hmat,
> 						JJ, u, dexpr, rho, zptr, nfrail, fgrp, hdiag, jdiag);
> 				survpenal(1, nfrail, nvar, hmat, JJ, hdiag, jdiag, u, newbeta,
> 						&newpen, ptype, pdiag, pexpr1, cptr1, pexpr2, cptr2,
> 						rho);
358c344
< 	    for (i=0; i<nvar3; i++)
---
> 			for (int i = 0; i < nvar3; i++)
360,368c346,350
< 	    y2 = (*dolik)(n,      nvar,             nstrat,  1,
< 			  newbeta,asInteger(dist),  strat,   offset,
< 			  time1,  time2,            status,  wt,
< 			  covar,  hmat,             JJ,      u,
< 			  dexpr,  rho,              zptr,
< 			  nfrail, fgrp,             hdiag,   jdiag);
< 	    survpenal(1, nfrail,  nvar,   hmat,  JJ, hdiag, jdiag,  
< 		      u, newbeta, &newpen, ptype, pdiag,
< 		      pexpr1, cptr1, pexpr2, cptr2, rho);
---
> 			y2 = (*dolik)(n, nvar, nstrat, 1, newbeta, asInteger(dist), strat,
> 					offset, time1, time2, status, wt, covar, hmat, JJ, u, dexpr,
> 					rho, zptr, nfrail, fgrp, hdiag, jdiag);
> 			survpenal(1, nfrail, nvar, hmat, JJ, hdiag, jdiag, u, newbeta,
> 					&newpen, ptype, pdiag, pexpr1, cptr1, pexpr2, cptr2, rho);
371c353
< 	    for (golden=0; golden< 8; golden++) {
---
> 			for (int golden = 0; golden < 8; golden++) {
377c359
< 		    for (i=0; i<nvar3; i++)
---
> 					for (int i = 0; i < nvar3; i++)
380,381c362
< 		    }
< 		else { /* toss away the interval from x3 to x4 */
---
> 				} else { /* toss away the interval from x3 to x4 */
386c367
< 		    for (i=0; i<nvar3; i++)
---
> 					for (int i = 0; i < nvar3; i++)
391,402c372,382
< 		newlk = (*dolik)(n,      nvar,             nstrat,  1,
< 				 newbeta,asInteger(dist),  strat,   offset,
< 				 time1,  time2,            status,  wt,
< 				 covar,  hmat,             JJ,      u,
< 				 dexpr,  rho,              zptr,
< 				 nfrail, fgrp,             hdiag,   jdiag);
< 		survpenal(1, nfrail,  nvar,   hmat,  JJ, hdiag, jdiag,  
< 			  u, newbeta, &newpen, ptype, pdiag,
< 			  pexpr1, cptr1, pexpr2, cptr2, rho);
< 		     
< 		if (goright) y3= newlk + newpen;
< 		else         y2= newlk + newpen;
---
> 				newlk = (*dolik)(n, nvar, nstrat, 1, newbeta, asInteger(dist),
> 						strat, offset, time1, time2, status, wt, covar, hmat,
> 						JJ, u, dexpr, rho, zptr, nfrail, fgrp, hdiag, jdiag);
> 				survpenal(1, nfrail, nvar, hmat, JJ, hdiag, jdiag, u, newbeta,
> 						&newpen, ptype, pdiag, pexpr1, cptr1, pexpr2, cptr2,
> 						rho);
> 
> 				if (goright)
> 					y3 = newlk + newpen;
> 				else
> 					y2 = newlk + newpen;
408,411c388,392
< 		     for (i=0; i<nvar3; i++) newbeta[i] = beta[i] + u[i]*x2;
< 		     }
< 		 else {
< 		     for (i=0; i<nvar3; i++) newbeta[i] = beta[i] + u[i]*x3;
---
> 					for (int i = 0; i < nvar3; i++)
> 						newbeta[i] = beta[i] + u[i] * x2;
> 				} else {
> 					for (int i = 0; i < nvar3; i++)
> 						newbeta[i] = beta[i] + u[i] * x3;
413,421c394,399
< 		 newlk = (*dolik)(n,      nvar,             nstrat,  0,
< 				  newbeta,asInteger(dist),  strat,   offset,
< 				  time1,  time2,            status,  wt,
< 				  covar,  hmat,             JJ,      u,
< 				  dexpr,  rho,              zptr,
< 				  nfrail, fgrp,             hdiag,   jdiag);
< 		 survpenal(0, nfrail,  nvar,   hmat,  JJ, hdiag, jdiag,  
< 			   u, newbeta, &newpen, ptype, pdiag,
< 			   pexpr1, cptr1, pexpr2, cptr2, rho);
---
> 				newlk = (*dolik)(n, nvar, nstrat, 0, newbeta, asInteger(dist),
> 						strat, offset, time1, time2, status, wt, covar, hmat,
> 						JJ, u, dexpr, rho, zptr, nfrail, fgrp, hdiag, jdiag);
> 				survpenal(0, nfrail, nvar, hmat, JJ, hdiag, jdiag, u, newbeta,
> 						&newpen, ptype, pdiag, pexpr1, cptr1, pexpr2, cptr2,
> 						rho);
424,425c402
< 		 }
< 	     else { /* abject failure */
---
> 			} else { /* abject failure */
435c411
< 	for (i=0; i<nvar3; i++) {
---
> 		for (int i = 0; i < nvar3; i++) {
443c419,420
<     if (maxiter > 1) *flag= 1000;  /* no "non convergence" for 0 or 1 iter */
---
> 	if (maxiter > 1)
> 		*flag = 1000; /* no "non convergence" for 0 or 1 iter */
449,452c426,429
< alldone:
<     *flag = cholesky3(hmat, nvar3, nfrail, hdiag, tol_chol);
<     for (i=0; i<nvar2; i++) {
< 	for (j=0; j<nvar3; j++)  hinv[i][j] = hmat[i][j];
---
> 	alldone: *flag = cholesky3(hmat, nvar3, nfrail, hdiag, tol_chol);
> 	for (int i = 0; i < nvar2; i++) {
> 		for (int j = 0; j < nvar3; j++)
> 			hinv[i][j] = hmat[i][j];
456c433
<     for (i=nfrail; i<nvar3; i++) {       /*nicer output for S user */
---
> 	for (int i = nfrail; i < nvar3; i++) { /*nicer output for S user */
460c437
< 	for (j=i+1; j<nvar3; j++) {
---
> 		for (int j = i + 1; j < nvar3; j++) {
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/survregc1.c Recommended/survival/src/survregc1.c
43a44
> #include <Rmath.h>
52,53c53,54
< #define  SPI    2.506628274631001     /* sqrt(2*pi) */
< #define  ROOT_2 1.414213562373095
---
> //#define  SPI    2.506628274631001     /* sqrt(2*pi) */
> //#define  ROOT_2 1.414213562373095
55,60c56,60
< double survregc1(int n,          int nvar,      int nstrat,     int whichcase,
< 		 double *beta,   int dist,      Sint *strat,    double *offset,
< 		 double *time1,  double *time2, double *status, double *wt,
< 		 double **covar, double **imat, double **JJ,    double *u, 
< 		 SEXP expr,      SEXP rho,      double *dummy,  int nf,
< 		 Sint *frail,    double *fdiag, double *jdiag ) {
---
> double survregc1(int n, int nvar, int nstrat, int whichcase, double *beta,
> 		int dist, Sint *strat, double *offset, double *time1, double *time2,
> 		double *status, double *wt, double **covar, double **imat, double **JJ,
> 		double *u, SEXP expr, SEXP rho, double *dummy, int nf, Sint *frail,
> 		double *fdiag, double *jdiag) {
62c62
<     int person, i,j,k;
---
> 	int j, k;
66,70c66,67
<     double  eta,
< 	    sigma;
<     double  z, zu,
< 	    loglik,
< 	    temp, temp2;
---
> 	double eta, sigma;
> 	double z, zu, loglik, temp, temp2;
80,82c77,85
< 	case 1: sreg_gg = exvalue_d;  break;
< 	case 2: sreg_gg = logistic_d; break;
< 	case 3: sreg_gg = gauss_d;    break;
---
> 	case 1:
> 		sreg_gg = exvalue_d;
> 		break;
> 	case 2:
> 		sreg_gg = logistic_d;
> 		break;
> 	case 3:
> 		sreg_gg = gauss_d;
> 		break;
90c93
< 	for (i=0; i<nf; i++) {
---
> 		for (int i = 0; i < nf; i++) {
94c97
< 	for (i=0; i<nvar3; i++) {
---
> 		for (int i = 0; i < nvar3; i++) {
96c99
< 	    for (j=0; j<nvar2; j++) {
---
> 			for (int j = 0; j < nvar2; j++) {
110c113
<     for (person=0; person<n; person++) {
---
> 	for (int person = 0; person < n; person++) {
121c124,125
< 	for (i=0; i<nvar; i++) eta += beta[i+nf] * covar[i][person];
---
> 		for (int i = 0; i < nvar; i++)
> 			eta += beta[i + nf] * covar[i][person];
142,144c146,149
< 		    dsig =0; ddsig=0; dsg=0;
< 		    }
< 		else {
---
> 				dsig = 0;
> 				ddsig = 0;
> 				dsg = 0;
> 			} else {
162,164c167,170
< 		    dsig =0; ddsig=0; dsg=0;
< 		    }
< 		else {
---
> 				dsig = 0;
> 				ddsig = 0;
> 				dsg = 0;
> 			} else {
181c187,189
< 		    dsig =0; ddsig=0; dsg=0;
---
> 				dsig = 0;
> 				ddsig = 0;
> 				dsg = 0;
183,184c191
< 		    }
< 		else {
---
> 			} else {
199,200c206,209
< 		if (z>0)  temp = funs[1] - ufun[1]; /*stop roundoff in tails*/
< 		else      temp = ufun[0] - funs[0];
---
> 			if (z > 0)
> 				temp = funs[1] - ufun[1]; /*stop roundoff in tails*/
> 			else
> 				temp = ufun[0] - funs[0];
206,208c215,218
< 		    dsig =0; ddsig=0; dsg=0;
< 		    }
< 		else {
---
> 				dsig = 0;
> 				ddsig = 0;
> 				dsg = 0;
> 			} else {
213,216c223,226
< 		    ddsig= ((zu*zu*ufun[3] - z*z*funs[3])/temp) -
< 			                dsig*(1+dsig);
< 		    dsg = ((zu*ufun[3] - z*funs[3])/ (temp*sigma)) -
< 				      dg * (dsig +1);
---
> 				ddsig = ((zu * zu * ufun[3] - z * z * funs[3]) / temp)
> 						- dsig * (1 + dsig);
> 				dsg = ((zu * ufun[3] - z * funs[3]) / (temp * sigma))
> 						- dg * (dsig + 1);
227c237,238
< 	if (whichcase==1) continue;     /*only needed the loglik */
---
> 		if (whichcase == 1)
> 			continue; /*only needed the loglik */
234c245
< 	for (i=0; i<nvar; i++) {
---
> 		for (int i = 0; i < nvar; i++) {
237,238c248,250
< 	    for (j=0; j<=i; j++) {
< 		imat[i][j+nf] -= covar[i][person] *covar[j][person] *ddg *w;
---
> 			for (int j = 0; j <= i; j++) {
> 				imat[i][j + nf] -= covar[i][person] * covar[j][person] * ddg
> 						* w;
250c262
< 	    for (i=0; i<nvar; i++) {
---
> 			for (int i = 0; i < nvar; i++) {
276,277c287
< static void logistic_d(double z, double ans[4], int j)
<     {
---
> static void logistic_d(double z, double ans[4], int j) {
289,290c299
< 	}
<     else {
---
> 	} else {
297c306,307
< 	case 1:  ans[1] = w/(temp*temp);
---
> 	case 1:
> 		ans[1] = w / (temp * temp);
301c311,312
< 	case 2:  ans[1-ii] = w/temp;
---
> 	case 2:
> 		ans[1 - ii] = w / temp;
309,310c320
< static void gauss_d(double z, double ans[4], int j)
<     {
---
> static void gauss_d(double z, double ans[4], int j) {
313c323
<     f = exp(-z*z/2) /SPI;
---
> 	f = exp(-z * z / 2) * M_1_SQRT_2PI;
315c325,326
< 	case 1: ans[1] =f;
---
> 	case 1:
> 		ans[1] = f;
319,325c330,336
< 	case 2: if (z>0) {
< 		    ans[0] = (1 + erf(z/ROOT_2))/2;
< 		    ans[1] =  erfc(z/ROOT_2) /2;
< 		    }
< 		else {
< 		    ans[1] = (1 + erf(-z/ROOT_2))/2;
< 		    ans[0] =  erfc(-z/ROOT_2) /2;
---
> 	case 2:
> 		if (z > 0) {
> 			ans[0] = (1 + erf(z / M_SQRT2)) / 2;
> 			ans[1] = erfc(z / M_SQRT2) / 2;
> 		} else {
> 			ans[1] = (1 + erf(-z / M_SQRT2)) / 2;
> 			ans[0] = erfc(-z / M_SQRT2) / 2;
341,342c352
< static void exvalue_d(double z, double ans[4], int j)
<     {
---
> static void exvalue_d(double z, double ans[4], int j) {
345,347c355,360
<     if (z < SMALL) w= exp(SMALL);
<     else if (-z < SMALL) w = exp(-SMALL);  /* stop infinite answers */
<     else   w = exp(z);
---
> 	if (z < SMALL)
> 		w = exp(SMALL);
> 	else if (-z < SMALL)
> 		w = exp(-SMALL); /* stop infinite answers */
> 	else
> 		w = exp(z);
351c364,365
< 	case 1:  ans[1] = w*temp;
---
> 	case 1:
> 		ans[1] = w * temp;
355c369,370
< 	case 2:  ans[0] = 1-temp;
---
> 	case 2:
> 		ans[0] = 1 - temp;
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/survregc2.c Recommended/survival/src/survregc2.c
15,20c15,19
< double survregc2(int n,          int nvar,     int nstrat,      int whichcase,
< 		 double *beta,   int dist,     Sint *strat,     double *offset,
< 		 double *time1,  double *time2, double *status, double *wt,
< 		 double **covar, double **imat, double **JJ,    double *u, 
< 		 SEXP expr,      SEXP rho,      double *z,      int nf,
< 		 Sint *frail,    double *fdiag, double *jdiag ) {
---
> double survregc2(int n, int nvar, int nstrat, int whichcase, double *beta,
> 		int dist, Sint *strat, double *offset, double *time1, double *time2,
> 		double *status, double *wt, double **covar, double **imat, double **JJ,
> 		double *u, SEXP expr, SEXP rho, double *z, int nf, Sint *frail,
> 		double *fdiag, double *jdiag) {
22c21
<     int person, i,j,k;
---
> 	int person, j, k;
25,26c24
<     double  eta,
< 	    sigma;
---
> 	double eta, sigma;
29,30c27
<     double  loglik,
< 	    temp;
---
> 	double loglik, temp;
44c41
< 	for (i=0; i<nf; i++) {
---
> 		for (int i = 0; i < nf; i++) {
48c45
< 	for (i=0; i<nvar2+nf; i++) {
---
> 		for (int i = 0; i < nvar2 + nf; i++) {
50c47
< 	    for (j=0; j<nvar2; j++) {
---
> 			for (int j = 0; j < nvar2; j++) {
73c70,71
< 	for (i=0; i<nvar; i++) eta += beta[i] * covar[i][person];
---
> 		for (int i = 0; i < nvar; i++)
> 			eta += beta[i] * covar[i][person];
97c95,96
<     for (i=0; i<4; i++) funs[i+1] = funs[i] + icount;
---
> 	for (int i = 0; i < 4; i++)
> 		funs[i + 1] = funs[i] + icount;
104c103
<     for (person=0; person<n; person++) {
---
> 	for (int person = 0; person < n; person++) {
124,126c123,126
< 		    dsig =0; ddsig=0; dsg=0;
< 		    }
< 		else {
---
> 				dsig = 0;
> 				ddsig = 0;
> 				dsg = 0;
> 			} else {
142,144c142,145
< 		    dsig =0; ddsig=0; dsg=0;
< 		    }
< 		else {
---
> 				dsig = 0;
> 				ddsig = 0;
> 				dsg = 0;
> 			} else {
147,148c148,149
< 		    temp2 = -funs[3][person]*funs[2][person]*sig2/
< 			               funs[1][person];
---
> 				temp2 = -funs[3][person] * funs[2][person] * sig2
> 						/ funs[1][person];
161c162,164
< 		    dsig =0; ddsig=0; dsg=0;
---
> 				dsig = 0;
> 				ddsig = 0;
> 				dsg = 0;
163,164c166
< 		    }
< 		else {
---
> 			} else {
167,168c169,170
< 		    temp2 = funs[3][person]*funs[2][person]*sig2/
< 			                      funs[0][person];
---
> 				temp2 = funs[3][person] * funs[2][person] * sig2
> 						/ funs[0][person];
179,180c181,184
< 		if (zz>0)  temp = funs[1][person] - funs[1][icount]; 
< 		else       temp = funs[0][icount] - funs[0][person];
---
> 			if (zz > 0)
> 				temp = funs[1][person] - funs[1][icount];
> 			else
> 				temp = funs[0][icount] - funs[0][person];
186,188c190,193
< 		    dsig =0; ddsig=0; dsg=0;
< 		    }
< 		else {
---
> 				dsig = 0;
> 				ddsig = 0;
> 				dsg = 0;
> 			} else {
193c198,199
< 		    ddg = (funs[3][icount] -funs[3][person])*sig2/temp - dg*dg;
---
> 				ddg = (funs[3][icount] - funs[3][person]) * sig2 / temp
> 						- dg * dg;
197,198c203,204
< 		    dsg = (zu*funs[3][icount] - zz*funs[3][person])/
< 			       (temp*sigma)  - dg *(1+dsig);
---
> 				dsg = (zu * funs[3][icount] - zz * funs[3][person])
> 						/ (temp * sigma) - dg * (1 + dsig);
208c214,215
< 	if (whichcase==1) continue;     /*only needed the loglik */
---
> 		if (whichcase == 1)
> 			continue; /*only needed the loglik */
216c223
< 	for (i=0; i<nvar; i++) {
---
> 		for (int i = 0; i < nvar; i++) {
219,220c226,228
< 	    for (j=0; j<=i; j++) {
< 		imat[i][j+nf] -= covar[i][person] *covar[j][person] *ddg *w;
---
> 			for (int j = 0; j <= i; j++) {
> 				imat[i][j + nf] -= covar[i][person] * covar[j][person] * ddg
> 						* w;
232c240
< 	    for (i=0; i<nvar; i++) {
---
> 			for (int i = 0; i < nvar; i++) {
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/tmerge.c Recommended/survival/src/tmerge.c
14,16c14,15
< SEXP tmerge(SEXP id2,  SEXP time2x, SEXP newx2,
<             SEXP nid2, SEXP ntime2, SEXP x2,  SEXP indx2) {
<     int i, k;
---
> SEXP tmerge(SEXP id2, SEXP time2x, SEXP newx2, SEXP nid2, SEXP ntime2, SEXP x2,
> 		SEXP indx2) {
20,21c19
<     double *time2, 
< 	   *ntime, *x;
---
> 	double *time2, *ntime, *x;
49,51c47,50
<     for (k=0; k<n2; k++) {
< 	for (i=indx[k]-1; i<n1; i++) {
< 	    if (id[i] != nid[k] || time2[i] <= ntime[k]) break;
---
> 	for (int k = 0; k < n2; k++) {
> 		for (int i = indx[k] - 1; i < n1; i++) {
> 			if (id[i] != nid[k] || time2[i] <= ntime[k])
> 				break;
Only in R-recommended/survival/tests: yates0.R
Only in R-recommended/survival/tests: yates1.R
Only in R-recommended/survival/tests: yates2.R
Only in R-recommended/survival/vignettes: population.Rnw
Only in R-recommended/survival/vignettes: temp.r
