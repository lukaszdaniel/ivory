msgid ""
msgstr ""
"Project-Id-Version: methods 4.1.0\n"
"POT-Creation-Date: 2021-01-30 18:45\n"
"PO-Revision-Date: 2021-01-07 23:46+0100\n"
"Last-Translator: r.zakauskas@gmail.com;gabriele.dauksaite@gmail.com\n"
"Language-Team: Lithuanian\n"
"Language: lt\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && (n"
"%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Poedit 2.4.1\n"

#. R/RMethodUtils.R: warning("\"MethodsList\" is defunct; allMethods now are empty")
#: R/RMethodUtils.R:0
msgid "\"MethodsList\" is defunct; allMethods now are empty"
msgstr "\"MethodsList\" yra nepilnas; allMethods dabar yra tušti"

#. R/MethodsList.R: gettext("## Signature:", domain = "R-methods")
#: R/MethodsList.R:0
msgid "## Signature:"
msgstr ""

#. R/MethodsListClass.R: gettext("%d: target %s: chose %s (others: %s)", domain = "R-methods")
#: R/MethodsListClass.R:0
#, fuzzy
msgid "%d: target %s: chose %s (others: %s)"
msgstr "%d: paskirtis \"%s\": pasirinkite \"%s\" (kiti: %s)"

#. R/MethodsList.R: gettextf("%f is not a valid generic function: methods list was an object of class %s",     sQuote(f), dQuote(class(mlist)))
#: R/MethodsList.R:0
msgid ""
"%f is not a valid generic function: methods list was an object of class %s"
msgstr ""
"%f nėra tinkama bendrinė funkcija: metodų sąrašas buvo klasės %s objektas"

#. R/RMethodUtils.R: gettextf("%s arguments (%s) after %s in the generic must appear in the method, in the same place at the end of the argument list",     .renderSignature(generic@generic, signature), paste(sQuote(trailingArgs), collapse = ", "),     sQuote("..."))
#: R/RMethodUtils.R:0
msgid ""
"%s arguments (%s) after %s in the generic must appear in the method, in the "
"same place at the end of the argument list"
msgstr ""
"%s argumentai (%s) po %s bendrinėje turi būti rodomi metode toje pačioje "
"vietoje argumentų sąrašo pabaigoje"

#. R/Methods.R: gettextf("%s dispatches internally;  methods can be defined, but the generic function is implicit, and cannot be changed.",     sQuote(name))
#: R/Methods.R:0
msgid ""
"%s dispatches internally;  methods can be defined, but the generic function "
"is implicit, and cannot be changed."
msgstr ""
"%s išsiuntimai viduje;  metodus galima apibrėžti, tačiau bendrinė funkcija "
"yra numanoma ir negali būti pakeista."

#. R/Methods.R: gettextf("%s has no methods defined", sQuote(f))
#: R/Methods.R:0
msgid "%s has no methods defined"
msgstr "%s neturi apibrėžtų metodų"

#. R/Methods.R: gettextf("%s is a primitive function; its generic form cannot be redefined", sQuote(name))
#: R/Methods.R:0
msgid "%s is a primitive function; its generic form cannot be redefined"
msgstr ""
"%s yra pirminė funkcija, jos bendrinė forma negali būti apibrėžta iš naujo"

#. R/SClasses.R: gettextf("%s is not a defined class", dQuote(Class))
#: R/SClasses.R:0
msgid "%s is not a defined class"
msgstr "%s nėra apibrėžta klasė"

#. R/refClass.R: gettextf("%s is not a defined class in this environment", dQuote(Class))
#: R/refClass.R:0
msgid "%s is not a defined class in this environment"
msgstr "%s nėra apibrėžta klasė šioje aplinkoje"

#. R/refClass.R: gettextf("%s is not a field in class %s", sQuote(field), dQuote(thisClass@className))
#. R/refClass.R: gettextf("%s is not a field in class %s", sQuote(what), dQuote(def@className))
#. R/refClass.R: gettextf("%s is not a field in class %s", sQuote(what), dQuote(className))
#: R/refClass.R:0
msgid "%s is not a field in class %s"
msgstr "%s nėra laukas klasėje %s"

#. R/refClass.R: gettextf("%s is not a field in this class", sQuote(name))
#: R/refClass.R:0
msgid "%s is not a field in this class"
msgstr "%s nėra laukas šioje klasėje"

#. R/RMethodUtils.R: gettextf("%s is not a generic function (or not visible here)", sQuote(f))
#: R/RMethodUtils.R:0
msgid "%s is not a generic function (or not visible here)"
msgstr "%s nėra bendrinė funkcija (ar nematoma čia)"

#. R/trace.R: gettextf("%s is not a method for reference class %s", sQuote(as.character(if (is.symbol(thisName)) thisName else what)),     dQuote(class(where)))
#: R/trace.R:0
msgid "%s is not a method for reference class %s"
msgstr "%s nėra metodas referencinei klasei %s"

#. R/refClass.R: gettextf("%s is not a reference class", dQuote(Class))
#. R/refClass.R: gettextf("%s is not a reference class", dQuote(def@className))
#: R/refClass.R:0
msgid "%s is not a reference class"
msgstr "%s nėra referencinė klasė"

#. R/SClasses.R: gettextf("%s is not a slot in class %s", sQuote(name), dQuote(cl))
#. R/SClasses.R: gettextf("%s is not a slot in class %s", sQuote(name), dQuote(cl))
#: R/SClasses.R:0
msgid "%s is not a slot in class %s"
msgstr "%s nėra laukas klasėje %s"

#. R/refClass.R: gettextf("%s is not a valid field or method name for reference class %s", sQuote(field),     dQuote(thisClass@className))
#: R/refClass.R:0
msgid "%s is not a valid field or method name for reference class %s"
msgstr "%s nėra tinkamas laukas ar metodo vardas referencinei klasei %s"

#. R/refClass.R: gettextf("%s is not a valid field or method name for this class", sQuote(what))
#: R/refClass.R:0
msgid "%s is not a valid field or method name for this class"
msgstr "%s nėra tinkamas laukas ar metodo vardas šiai klasei"

#. R/Methods.R: gettextf("%s is not an S4 generic function in %s; methods not removed", sQuote(f),     sQuote(getPackageName(where)))
#: R/Methods.R:0
msgid "%s is not an S4 generic function in %s; methods not removed"
msgstr "%s nėra S4 bendrinė funkcija %s, metodai nepašalinti"

#. R/Methods.R: gettextf("%s is not currently a generic:  define it first to create a non-default implicit form",     sQuote(name))
#: R/Methods.R:0
msgid ""
"%s is not currently a generic:  define it first to create a non-default "
"implicit form"
msgstr ""
"šiuo metu %s nėra bendrinė: pirma apibrėžkite, kad sukurtumėte nenumatytąją "
"išreikštinę formą"

#. R/RClassUtils.R: gettextf("%s is not eligible to be the data part of another class (must be a basic class or a virtual class with no slots)",     dQuote(dataPartClass))
#: R/RClassUtils.R:0
msgid ""
"%s is not eligible to be the data part of another class (must be a basic "
"class or a virtual class with no slots)"
msgstr ""
"%s negali būti kitos klasės duomenų dalis (turi būti pagrindinė klasė arba "
"virtuali klasė be laukų)"

#. R/addedFunctions.R: gettextf("%s is not one of the element names", sQuote(name))
#: R/addedFunctions.R:0
msgid "%s is not one of the element names"
msgstr "%s nėra vienas iš elemento vardų"

#. R/MethodsList.R: gettextf("%s must be TRUE, FALSE, or a named logical vector of those values; got an object of class %s",     sQuote("useInherited"), dQuote(class(useInherited)))
#: R/MethodsList.R:0
msgid ""
"%s must be TRUE, FALSE, or a named logical vector of those values; got an "
"object of class %s"
msgstr ""
"%s turi būti TRUE, FALSE arba įvardytas loginių reikšmių vektorius, gaunamas "
"klasės %s objektas"

#. R/trace.R: gettextf("%s() is not a generic function in the target environment -- methods will not be inserted",     f)
#: R/trace.R:0
msgid ""
"%s() is not a generic function in the target environment -- methods will not "
"be inserted"
msgstr "%s() nėra bendrinė funkcija aplinkoje -- metodai nebus įtraukti"

#. R/MethodsList.R: gettextf("%s, along with other use of the \"MethodsList\" metadata objects, is defunct.",     dQuote(this), domain = "R-methods")
#: R/MethodsList.R:0
msgid ""
"%s, along with other use of the \"MethodsList\" metadata objects, is defunct."
msgstr ""
"%s, kartu su kitais naudojamais \"MethodsList\" metaduomenų objektais, yra "
"nepilnas."

#. R/MethodsList.R: gettextf("%s, along with other use of the \"MethodsList\" metadata objects, is deprecated.",     dQuote(this), domain = "R-methods")
#: R/MethodsList.R:0
msgid ""
"%s, along with other use of the \"MethodsList\" metadata objects, is "
"deprecated."
msgstr ""
"%s, kartu su kitais naudojamais \"MethodsList\" metaduomenų objektais, yra "
"skirtingai naudojami."

#. R/Methods.R: gettextf("'%s' is not a known generic function {and 'package' not specified}", f)
#: R/Methods.R:0
msgid "'%s' is not a known generic function {and 'package' not specified}"
msgstr "'%s' nežinoma bendrinė funkcija {ir 'package' nenurodytas}"

#. R/Methods.R: gettextf("'%s' or '%s' argument must be supplied", "generic.function", "class")
#: R/Methods.R:0
#, fuzzy
msgid "'%s' or '%s' argument must be supplied"
msgstr "Nepateikti %s vardai"

#. R/RClassUtils.R: stop("'Class' argument must be a valid class definition or class")
#: R/RClassUtils.R:0
#, fuzzy
msgid "'Class' argument must be a valid class definition or class"
msgstr "'Class' turi būti galiojantis klasės apibrėžimas arba klasė"

#. R/oldClass.R: gettextf("'S3Class' can only assign to S4 objects that extend \"oldClass\"; not true of class %s",     dQuote(class(object)))
#: R/oldClass.R:0
msgid ""
"'S3Class' can only assign to S4 objects that extend \"oldClass\"; not true "
"of class %s"
msgstr ""
"'S3Class' gali priskirti tik S4 objektams, kurie išplečia \"oldClass\"; "
"netiesa apie klasę %s"

#. R/oldClass.R: gettextf("'S3Class' only defined for extensions of %s or classes with a data part:  not true of class %s",     dQuote("oldClass"), dQuote(class(object)))
#: R/oldClass.R:0
msgid ""
"'S3Class' only defined for extensions of %s or classes with a data part:  "
"not true of class %s"
msgstr ""
"'S3Class' apibrėžia tik %s plėtiniams arba klasėms su duomenų dalimi: "
"netikra klasė %s"

#. R/ClassExtensions.R: gettextf("'S3Part()' method is only defined for classes set up by 'setOldCLass()' method, basic classes or subclasses of these: not true of class %s",     dQuote(class(object)))
#: R/ClassExtensions.R:0
#, fuzzy
msgid ""
"'S3Part()' method is only defined for classes set up by 'setOldCLass()' "
"method, basic classes or subclasses of these: not true of class %s"
msgstr ""
"S3Part() apibrėžtas tik klasėms, sudarytoms setOldCLass(), pagrindinių "
"klasių ar jų poklasių: klaida apie klasę %s"

#. R/as.R: gettext("'as' method should have one argument, or match the arguments of 'coerce()' function: got (%s)",     domain = "R-methods")
#: R/as.R:0
#, fuzzy
msgid ""
"'as' method should have one argument, or match the arguments of 'coerce()' "
"function: got (%s)"
msgstr ""
"'as' metodas turi turėti vieną argumentą arba atitikti coerce() argumentus: "
"gauta (%s)"

#. R/Methods.R: stop("'callGeneric()' function must be called from within a method body")
#: R/Methods.R:0
#, fuzzy
msgid "'callGeneric()' function must be called from within a method body"
msgstr "callGeneric() turi būti iškviesta iš metodo pagrindinės dalies"

#. R/RClassUtils.R: stop("'class' is a reserved slot name and cannot be redefined")
#: R/RClassUtils.R:0
#, fuzzy
msgid "'class' is a reserved slot name and cannot be redefined"
msgstr ""
"\"class\" yra rezervuotas lauko pavadinimas ir negali būti apibrėžtas iš "
"naujo"

#. R/is.R: stop("'class1' must be the name of a class or a class definition")
#: R/is.R:0
msgid "'class1' must be the name of a class or a class definition"
msgstr "'class1' turi būti klasės vardas arba klasės apibrėžimas"

#. R/is.R: stop("'class2' must be the name of a class or a class definition")
#: R/is.R:0
msgid "'class2' must be the name of a class or a class definition"
msgstr "'class2' turi būti klasės vardas arba klasės apibrėžimas"

#. R/RClassUtils.R: stop("'externalptr' objects cannot be initialized from function 'new()'")
#: R/RClassUtils.R:0
#, fuzzy
msgid "'externalptr' objects cannot be initialized from function 'new()'"
msgstr "'externalptr' objektai negali būti inicijuoti iš new()"

#. R/Methods.R: stop("'file' must be a character string or a connection")
#. R/Methods.R: stop("'file' must be a character string or a connection")
#: R/Methods.R:0
msgid "'file' must be a character string or a connection"
msgstr "'file' turi būti simbolių eilutė ar ryšys"

#. R/MethodsListClass.R: gettext("'initialize' method returned an object of class %s instead of the required class %s",     domain = "R-methods")
#: R/MethodsListClass.R:0
msgid ""
"'initialize' method returned an object of class %s instead of the required "
"class %s"
msgstr ""
"'initialize' metodas grąžino klasės %s objektą, o ne reikalaujamą klasę %s"

#. R/MethodsListClass.R: gettextf("(All objects are from package %s)", unique(sQuote(pkg)), domain = "R-methods")
#: R/MethodsListClass.R:0
msgid "(All objects are from package %s)"
msgstr ""

#. R/show.R: gettext("(This generic function excludes non-simple inheritance; see '?setIs')")
#: R/show.R:0
msgid "(This generic function excludes non-simple inheritance; see '?setIs')"
msgstr ""

#. R/RClassUtils.R: gettextf("(class %s)", .dQ(slotDefs[match(pnames[check], slotNames)]))
#. R/RClassUtils.R: gettextf("(class %s)", .dQ(unlist(properties, recursive = FALSE)[undefClasses]))
#: R/RClassUtils.R:0
msgid "(class %s)"
msgstr "(klasė %s)"

#. R/methodsTable.R: gettextf("(definition from function %s)", sQuote(m@generic), domain = "R-methods")
#: R/methodsTable.R:0
#, fuzzy
msgid "(definition from function %s)"
msgstr "nėra esamos funkcijos %s apibrėžties"

#. R/methodsTable.R: gettextf("(inherited from: %s)", sigString(d), domain = "R-methods")
#: R/methodsTable.R:0
msgid "(inherited from: %s)"
msgstr ""

#. R/trace.R: gettext("(to see original from package, look at object@original)", domain = "R-methods")
#: R/trace.R:0
msgid "(to see original from package, look at object@original)"
msgstr ""

#. R/trace.R: gettext("(to see the tracing code, look at body(object))", domain = "R-methods")
#: R/trace.R:0
msgid "(to see the tracing code, look at body(object))"
msgstr ""

#. R/Methods.R: gettextf("* mlist environment with %d potential methods", length(mlist), domain = "R-methods")
#: R/Methods.R:0
msgid "* mlist environment with %d potential methods"
msgstr ""

#. R/methodsTable.R: gettext("** final methods' distances: (%s)", domain = "R-methods")
#: R/methodsTable.R:0
msgid "** final methods' distances: (%s)"
msgstr ""

#. R/methodsTable.R: gettext("** individual arguments' distances:", domain = "R-methods")
#: R/methodsTable.R:0
msgid "** individual arguments' distances:"
msgstr ""

#. R/methodsTable.R: gettextf(" .. method %d: length(sig) = %d < nArg = %d\n", i, length(sig), nArg, domain = "R-methods")
#: R/methodsTable.R:0
msgid ".. method %d: length(sig) = %d < nArg = %d"
msgstr ""

#. R/trace.R: message(".TraceWithMethods: about to assign or setMethod", domain = "R-methods")
#: R/trace.R:0
msgid ".TraceWithMethods: about to assign or setMethod"
msgstr ""

#. R/trace.R: message(".TraceWithMethods: after computing what, whereF", domain = "R-methods")
#: R/trace.R:0
msgid ".TraceWithMethods: after computing what, whereF"
msgstr ""

#. R/trace.R: message(".TraceWithMethods: untrace case", domain = "R-methods")
#: R/trace.R:0
msgid ".TraceWithMethods: untrace case"
msgstr ""

#. R/MethodsList.R: gettext("<Empty Methods List>", domain = "R-methods")
#: R/MethodsList.R:0
msgid "<Empty Methods List>"
msgstr ""

#. R/methodsTable.R: gettext("<No methods>\n\n", domain = "R-methods")
#: R/methodsTable.R:0
msgid "<No methods>"
msgstr ""

#. R/promptClass.R: gettextf("A shell of class documentation has been written to the connection %s.\n",     sQuote(summary(filename)$description))
#: R/promptClass.R:0
msgid "A shell of class documentation has been written to the connection %s."
msgstr ""

#. R/promptClass.R: gettextf("A shell of class documentation has been written to the file %s.\n", sQuote(filename),     domain = "R-methods")
#: R/promptClass.R:0
msgid "A shell of class documentation has been written to the file %s."
msgstr ""

#. R/MethodsList.R: gettextf("A shell of methods documentation has been written to the connection %s.\n",     sQuote(summary(filename)$description))
#: R/MethodsList.R:0
msgid "A shell of methods documentation has been written to the connection %s."
msgstr ""

#. R/MethodsList.R: gettextf("A shell of methods documentation has been written to the file %s.\n", sQuote(filename))
#: R/MethodsList.R:0
msgid "A shell of methods documentation has been written to the file %s."
msgstr ""

#. R/SClasses.R: gettext("All %s names must be distinct in:\n(%s)", domain = "R-methods")
#: R/SClasses.R:0
msgid ""
"All %s names must be distinct in:\n"
"(%s)"
msgstr ""
"Visi %s vardai turi būti skirtingi, esantys:\n"
"(%s)"

#. R/SClasses.R: gettext("All %s names must be nonempty in:\n(%s)", domain = "R-methods")
#: R/SClasses.R:0
msgid ""
"All %s names must be nonempty in:\n"
"(%s)"
msgstr ""
"Visi %s vardai turi būti netušti, esantys:\n"
"(%s)"

#. R/RClassUtils.R: gettextf("Also defined by %s", paste(sQuote(pkgs[-1]), collapse = " "))
#: R/RClassUtils.R:0
#, fuzzy
msgid "Also defined by %s"
msgstr "Taip pat apibrėžė"

#. R/BasicClasses.R: gettextf("An object of class %s", dQuote(cl), domain = "R-methods")
#. R/BasicClasses.R: gettextf("An object of class %s", dQuote(class(object)), domain = "R-methods")
#. R/show.R: gettextf("An object of class %s", classLabel(cl), domain = "R-methods")
#. R/show.R: gettextf("An object of class %s", dQuote(class(object)))
#. R/trace.R: gettextf("An object of class %s", dQuote(class(object)), domain = "R-methods")
#: R/BasicClasses.R:0 R/show.R:0 R/trace.R:0
msgid "An object of class %s"
msgstr "Klasės objektas %s"

#. R/trace.R: gettextf("An object of class %s, from source:", dQuote(class(object)), domain = "R-methods")
#: R/trace.R:0
#, fuzzy
msgid "An object of class %s, from source:"
msgstr "Klasės objektas %s"

#. R/MethodsListClass.R: gettextf("An object of class %s:", dQuote(class(object)), domain = "R-methods")
#: R/MethodsListClass.R:0
#, fuzzy
msgid "An object of class %s:"
msgstr "Klasės objektas %s"

#. R/trace.R: gettextf("An object with tracing code, class %s\nOriginal definition:\n", dQuote(class(object)),     domain = "R-methods")
#: R/trace.R:0
msgid ""
"An object with tracing code, class %s\n"
"Original definition:"
msgstr ""

#. R/SClasses.R: stop("Argument 'representation' cannot be used if argument 'slots' is supplied")
#: R/SClasses.R:0
#, fuzzy
msgid ""
"Argument 'representation' cannot be used if argument 'slots' is supplied"
msgstr ""
"Argumentas \"representation\" negali būti naudojamas, jei pateiktas \"slots"
"\" argumentas"

#. R/RClassUtils.R: gettextf("Calling function 'new()' on an undefined and non-basic class (\"%s\")",     Class)
#: R/RClassUtils.R:0
msgid "Calling function 'new()' on an undefined and non-basic class (\"%s\")"
msgstr ""

#. R/RClassUtils.R: gettextf("Class %s", .dQ(Class), domain = "R-methods")
#: R/RClassUtils.R:0
#, fuzzy
msgid "Class %s"
msgstr "(klasė %s)"

#. R/show.R: gettextf("Class %s (from package %s)", dQuote(className), sQuote(packageName))
#: R/show.R:0
msgid "Class %s (from package %s)"
msgstr ""

#. R/show.R: gettextf("Class %s (from the global environment)", dQuote(className))
#: R/show.R:0
msgid "Class %s (from the global environment)"
msgstr ""

#. R/RClassUtils.R: gettextf("Class %s [in %s]", .dQ(Class), sQuote(pkg), domain = "R-methods")
#: R/RClassUtils.R:0
msgid "Class %s [in %s]"
msgstr ""

#. R/RClassUtils.R: gettextf("Class %s [package in %s]", .dQ(Class), sQuote(pkg), domain = "R-methods")
#: R/RClassUtils.R:0
msgid "Class %s [package in %s]"
msgstr ""

#. R/RClassUtils.R: gettextf("Class %s consists of following classes: ", .dQ(Class), domain = "R-methods")
#: R/RClassUtils.R:0
msgid "Class %s consists of following classes:"
msgstr ""

#. R/show.R: gettextf("Class %s for generic %s defined from package %s", dQuote(class(object)),     dQuote(nam), sQuote(object@package), domain = "R-methods")
#: R/show.R:0
#, fuzzy
msgid "Class %s for generic %s defined from package %s"
msgstr "klasės generuojančioji funkcija klasei %s iš paketo %s"

#. R/show.R: gettext("Class %s for generic %s defined from package %s\n  belonging to group(s): %s\n",     domain = "R-methods")
#: R/show.R:0
#, fuzzy
msgid ""
"Class %s for generic %s defined from package %s\n"
"  belonging to group(s): %s"
msgstr "nėra metodų lentelės bendrinei %s iš paketo %s pakete %s"

#. R/show.R: gettext("Class %s for generic %s defined from package %s\n  belonging to group(s): %s\n  defined with value class: %s\n",     domain = "R-methods")
#: R/show.R:0
msgid ""
"Class %s for generic %s defined from package %s\n"
"  belonging to group(s): %s\n"
"  defined with value class: %s"
msgstr ""

#. R/show.R: gettextf("Class %s for generic %s defined from package %s\n  defined with value class: %s\n",     dQuote(class(object)), dQuote(nam), sQuote(object@package), dQuote(object@valueClass),     domain = "R-methods")
#: R/show.R:0
#, fuzzy
msgid ""
"Class %s for generic %s defined from package %s\n"
"  defined with value class: %s"
msgstr "nėra metodų lentelės bendrinei %s iš paketo %s pakete %s"

#. R/SClasses.R: gettextf("Class %s has a sealed class definition and cannot be redefined", dQuote(Class))
#: R/SClasses.R:0
#, fuzzy
msgid "Class %s has a sealed class definition and cannot be redefined"
msgstr ""
"%s turi patvirtintą klasės apibrėžimą ir negali būti apibrėžtas iš naujo"

#. R/refClass.R: gettextf("Class %s is not a subclass of %s; functional semantics not defined for this class",     dQuote(class(object)), dQuote("envRefClass"))
#: R/refClass.R:0
msgid ""
"Class %s is not a subclass of %s; functional semantics not defined for this "
"class"
msgstr "%s klasė nėra %s poklasis; šiai klasei neapibrėžta funkcinė semantika"

#. R/refClass.R: gettextf("Class %s is not one of the reference super classes for this object", dQuote(Class))
#: R/refClass.R:0
#, fuzzy
msgid "Class %s is not one of the reference super classes for this object"
msgstr "%s nėra viena iš referencinių viršklasių šiam objektui"

#. R/RClassUtils.R: gettextf("Class %s, by class %s", dQuote(what[i]), tmp_N, domain = "R-methods")
#: R/RClassUtils.R:0
#, fuzzy
msgid "Class %s, by class %s"
msgstr "klasė % negali praplėsti %s klasės"

#. R/RClassUtils.R: gettextf("Class %s, by class %s, with explicit coerce", dQuote(what[i]), tmp_N, domain = "R-methods")
#: R/RClassUtils.R:0
msgid "Class %s, by class %s, with explicit coerce"
msgstr ""

#. R/RClassUtils.R: gettextf("Class %s, by class %s, with explicit test", dQuote(what[i]), tmp_N, domain = "R-methods")
#: R/RClassUtils.R:0
msgid "Class %s, by class %s, with explicit test"
msgstr ""

#. R/RClassUtils.R: gettextf("Class %s, by class %s, with explicit test and coerce", dQuote(what[i]),     tmp_N, domain = "R-methods")
#: R/RClassUtils.R:0
msgid "Class %s, by class %s, with explicit test and coerce"
msgstr ""

#. R/RClassUtils.R: gettextf("Class %s, directly", dQuote(what[i]), domain = "R-methods")
#: R/RClassUtils.R:0
msgid "Class %s, directly"
msgstr ""

#. R/RClassUtils.R: gettextf("Class %s, directly, with explicit coerce", dQuote(what[i]), domain = "R-methods")
#: R/RClassUtils.R:0
msgid "Class %s, directly, with explicit coerce"
msgstr ""

#. R/RClassUtils.R: gettextf("Class %s, directly, with explicit test", dQuote(what[i]), domain = "R-methods")
#: R/RClassUtils.R:0
msgid "Class %s, directly, with explicit test"
msgstr ""

#. R/RClassUtils.R: gettextf("Class %s, directly, with explicit test and coerce", dQuote(what[i]), domain = "R-methods")
#: R/RClassUtils.R:0
msgid "Class %s, directly, with explicit test and coerce"
msgstr ""

#. R/RClassUtils.R: gettextf("Class %s, from data part", dQuote(what[i]), domain = "R-methods")
#: R/RClassUtils.R:0
msgid "Class %s, from data part"
msgstr ""

#. R/RClassUtils.R: gettextf("Class %s, from data part, with explicit coerce", dQuote(what[i]), domain = "R-methods")
#: R/RClassUtils.R:0
msgid "Class %s, from data part, with explicit coerce"
msgstr ""

#. R/RClassUtils.R: gettextf("Class %s, from data part, with explicit test", dQuote(what[i]), domain = "R-methods")
#: R/RClassUtils.R:0
msgid "Class %s, from data part, with explicit test"
msgstr ""

#. R/RClassUtils.R: gettextf("Class %s, from data part, with explicit test and coerce", dQuote(what[i]),     domain = "R-methods")
#: R/RClassUtils.R:0
msgid "Class %s, from data part, with explicit test and coerce"
msgstr ""

#. R/refClass.R: gettext("Class Methods: ", domain = "R-methods")
#: R/refClass.R:0
msgid "Class Methods:"
msgstr ""

#. R/refClass.R: gettext("Class fields:", domain = "R-methods")
#: R/refClass.R:0
msgid "Class fields:"
msgstr ""

#. R/refClass.R: gettextf("Class method definition (class %s) for method %s", dQuote(cl), sQuote(paste(object@name,     "()", collapse = "")), domain = "R-methods")
#: R/refClass.R:0
#, fuzzy
msgid "Class method definition (class %s) for method %s"
msgstr "klasės generuojančioji funkcija klasei %s iš paketo %s"

#. R/refClass.R: gettextf("Class method definition for method %s", sQuote(paste(object@name, "()",     collapse = "")), domain = "R-methods")
#: R/refClass.R:0
#, fuzzy
msgid "Class method definition for method %s"
msgstr "reikia apibrėžti metodą"

#. R/ClassUnion.R: gettext("Class must be an empty virtual class with NULL prototype")
#: R/ClassUnion.R:0
msgid "Class must be an empty virtual class with NULL prototype"
msgstr ""

#. R/RClassUtils.R: gettext("Class:", domain = "R-methods")
#: R/RClassUtils.R:0
msgid "Class:"
msgstr ""

#. R/trace.R: sprintf("Constructing traceable class %s", dQuote(traceClassName))
#: R/trace.R:0
msgid "Constructing traceable class %s"
msgstr ""

#. R/Methods.R: gettextf("Copying the generic function %s to environment %s, because the previous version was in a sealed namespace (%s)",     sQuote(f), sQuote(getPackageName(where)), sQuote(getPackageName(gwhere)))
#: R/Methods.R:0
msgid ""
"Copying the generic function %s to environment %s, because the previous "
"version was in a sealed namespace (%s)"
msgstr ""
"Bendrinė funkcija %s kopijuojama į %s aplinką, nes ankstesnė versija buvo "
"patvirtintoje vardų erdvėje (%s)"

#. R/refClass.R: stop("Could not find local object in supplied environment")
#: R/refClass.R:0
msgid "Could not find local object in supplied environment"
msgstr "Nepavyko rasti vietinio objekto pateiktoje aplinkoje"

#. R/packageName.R: gettextf("Created a package name, %s, when none found", sQuote(pkg))
#: R/packageName.R:0
msgid "Created a package name, %s, when none found"
msgstr "Sukurtas paketo vardas, %s, kai nieko nerasta"

#. R/Methods.R: gettextf("Creating a generic function for %s from %s in package %s (from the saved implicit definition)",     sQuote(name), sQuote(package), sQuote(thisPackage), domain = "R-methods")
#: R/Methods.R:0
#, fuzzy
msgid ""
"Creating a generic function for %s from %s in package %s (from the saved "
"implicit definition)"
msgstr ""
"Bendrinės funkcijos %s kūrimas iš %s esančios %s\n"
"(iš išsaugoto neišreikšto apibrėžimo)"

#. R/Methods.R: gettextf("Creating a generic function for %s from %s in the global environment (from the saved implicit definition)",     sQuote(name), sQuote(package), domain = "R-methods")
#: R/Methods.R:0
#, fuzzy
msgid ""
"Creating a generic function for %s from %s in the global environment (from "
"the saved implicit definition)"
msgstr ""
"Bendrinės funkcijos %s kūrimas iš %s esančios %s\n"
"(iš išsaugoto neišreikšto apibrėžimo)"

#. R/Methods.R: gettextf("Creating a generic function for %s from package %s in package %s", sQuote(f),     sQuote(fdef@package), sQuote(thisPackage), domain = "R-methods")
#: R/Methods.R:0
#, fuzzy
msgid "Creating a generic function for %s from package %s in package %s"
msgstr "Bendrinės funkcijos kūrimas %s iš paketo %s esančio %s"

#. R/Methods.R: gettextf("Creating a generic function for %s from package %s in the global environment",     sQuote(f), sQuote(fdef@package), domain = "R-methods")
#: R/Methods.R:0
#, fuzzy
msgid ""
"Creating a generic function for %s from package %s in the global environment"
msgstr "Bendrinės funkcijos kūrimas %s iš paketo %s esančio %s"

#. R/Methods.R: gettextf("Creating a generic function from function %s in package %s", sQuote(f),     sQuote(thisPackage))
#: R/Methods.R:0
#, fuzzy
msgid "Creating a generic function from function %s in package %s"
msgstr "Bendrinės funkcijos kūrimas iš funkcijos %s esančios %s"

#. R/Methods.R: gettextf("Creating a generic function from function %s in the global environment",     sQuote(f))
#: R/Methods.R:0
#, fuzzy
msgid "Creating a generic function from function %s in the global environment"
msgstr "Bendrinės funkcijos kūrimas iš funkcijos %s esančios %s"

#. R/Methods.R: gettextf("Creating a new generic function for %s in package %s", sQuote(name), sQuote(thisPackage))
#: R/Methods.R:0
#, fuzzy
msgid "Creating a new generic function for %s in package %s"
msgstr "Naujos bendrinės funkcijos kūrimas %s esančios %s"

#. R/Methods.R: gettextf("Creating a new generic function for %s in the global environment", sQuote(name))
#: R/Methods.R:0
#, fuzzy
msgid "Creating a new generic function for %s in the global environment"
msgstr "Naujos bendrinės funkcijos kūrimas %s esančios %s"

#. R/RClassUtils.R: stop("Data part ('.Data' slot) is undefined for general S4 object")
#: R/RClassUtils.R:0
#, fuzzy
msgid "Data part ('.Data' slot) is undefined for general S4 object"
msgstr "Duomenų dalis neapibrėžta bendram S4 objektui"

#. R/RClassUtils.R: gettextf("Definition of slot %s, in class %s, as %s conflicts with definition, inherited from class %s, as %s",     sQuote(dup), dQuote(name), dQuote(elNamed(allProps, dup)), dQuote(cl), dQuote(elNamed(theseProperties,         dup)))
#: R/RClassUtils.R:0
msgid ""
"Definition of slot %s, in class %s, as %s conflicts with definition, "
"inherited from class %s, as %s"
msgstr ""
"Lauko %s apibrėžimas klasėje %s, kaip %s prieštaravimas apibrėžimui "
"paveldėtam iš klasės %s, kaip %s"

#. R/RMethodUtils.R: message("Empty function name in .getGeneric", domain = "R-methods")
#: R/RMethodUtils.R:0
msgid "Empty function name in .getGeneric"
msgstr "Tuščias funkcijos vardas .getGeneric"

#. R/trace.R: gettextf("Environment of class %s is locked; using global environment for new class",     dQuote(className))
#: R/trace.R:0
msgid ""
"Environment of class %s is locked; using global environment for new class"
msgstr "Klasės %s aplinka užrakinta naudojant globalią aplinką naujai klasei"

#. R/show.R: gettext("Excluded from nextMethod:", domain = "R-methods")
#: R/show.R:0
msgid "Excluded from nextMethod:"
msgstr ""

#. R/show.R: gettextf("Extended class definition (%s)", classLabel(class(object)), domain = "R-methods")
#: R/show.R:0
#, fuzzy
msgid "Extended class definition (%s)"
msgstr "neapibrėžtos laukų klasės %s apibrėžtyje: %s"

#. R/refClass.R: gettextf("Field %s:", dQuote(fi), domain = "R-methods")
#: R/refClass.R:0
msgid "Field %s:"
msgstr ""

#. R/Methods.R: gettextf("For function %s, signature %s: argument in method definition changed from (%s) to (%s)",     sQuote(f), sQuote(signature), mnames, fnames)
#: R/Methods.R:0
msgid ""
"For function %s, signature %s: argument in method definition changed from "
"(%s) to (%s)"
msgstr ""
"Funkcijai %s prierašas %s: argumentas metodo apibrėžime pakeistas iš (%s) į "
"(%s)"

#. R/trace.R: gettextf("For package %s", sQuote(object@packageName), domain = "R-methods")
#: R/trace.R:0
msgid "For package %s"
msgstr ""

#. R/RClassUtils.R: gettextf("Found more than one class %s in cache; using the first, from namespace '%s'",     dQuote(value[[1]]@className), pkgs[1])
#: R/RClassUtils.R:0
#, fuzzy
msgid ""
"Found more than one class %s in cache; using the first, from namespace '%s'"
msgstr ""
"Podėlyje rasta daugiau nei viena klasė \"%s\"; naudojant pirmąjį, iš vardų "
"srities '%s'"

#. R/trace.R: gettextf("From source file %s", sQuote(object@sourceFile), domain = "R-methods")
#: R/trace.R:0
msgid "From source file %s"
msgstr ""

#. R/Methods.R: gettextf("Function %s is a group generic; do not call it directly", sQuote(name))
#: R/Methods.R:0
msgid "Function %s is a group generic; do not call it directly"
msgstr "Funkcija %s yra bendrinė grupė, nesikreipkite į ją tiesiogiai"

#. R/Methods.R: gettextf("Function %s is already a group generic; no change", sQuote(name))
#: R/Methods.R:0
msgid "Function %s is already a group generic; no change"
msgstr "Funkcija %s jau yra bendrinė grupės; jokių keitimų"

#. R/Methods.R: gettextf("Function %s:\n<not an S4 generic function>", sQuote(f), domain = "R-methods")
#: R/Methods.R:0
#, fuzzy
msgid ""
"Function %s:\n"
"<not an S4 generic function>"
msgstr "Funkcija turi būti S4 bendrinė"

#. R/debug.R: stop("Function must be an S4 generic")
#: R/debug.R:0
msgid "Function must be an S4 generic"
msgstr "Funkcija turi būti S4 bendrinė"

#. R/methodsTable.R: gettextf("Function: %s (package %s)", func, pkg, domain = "R-methods")
#: R/methodsTable.R:0
msgid "Function: %s (package %s)"
msgstr ""

#. R/refClass.R: gettext("Generator for class", domain = "R-methods")
#: R/refClass.R:0
#, fuzzy
msgid "Generator for class"
msgstr "nėra apibrėžties klasei %s"

#. R/methodsTable.R: gettext(" Group generics: ", domain = "R-methods")
#: R/methodsTable.R:0
msgid "Group generics:"
msgstr ""

#. R/MethodsList.R: gettextf("In command %s: use of \"MethodsList\" metadata objects is defunct.", deparse(this),     domain = "R-methods")
#: R/MethodsList.R:0
#, fuzzy
msgid "In command %s: use of \"MethodsList\" metadata objects is defunct."
msgstr "%s: \"MethodsList\" metaduomenų objektų naudojimas yra nepilnas."

#. R/MethodsList.R: gettextf("In command %s: use of \"MethodsList\" metadata objects is deprecated.",     sQuote(deparse(this)), domain = "R-methods")
#: R/MethodsList.R:0
#, fuzzy
msgid "In command %s: use of \"MethodsList\" metadata objects is deprecated."
msgstr "%s: \"MethodsList\" metaduomenų objektų naudojimas yra skirtingas."

#. R/RMethodUtils.R: gettextf("In method for %s with signature %s: ", sQuote(f), msig, domain = "R-methods")
#: R/RMethodUtils.R:0
#, fuzzy
msgid "In method for %s with signature %s:"
msgstr "metode %s su prierašu %s:"

#. R/SClasses.R: gettextf("In slot '%s' of class \"%s\": %s", slotNames[[i]], class(sloti), errori)
#: R/SClasses.R:0
#, fuzzy
msgid "In slot '%s' of class \"%s\": %s"
msgstr "neteisingas klasės %s lauko vardas: %s"

#. R/refClass.R: gettext(" Insert trace debugging for the specified method.  The arguments are the same as for the trace() function in package \"base\".  The first argument should be the name of the method to be traced, quoted or not.\n\n The additional argument classMethod= can be supplied as TRUE (by name only) in order to trace a method in a generator object (e.g., \"new\") rather than in the objects generated from that class.")
#: R/refClass.R:0
msgid ""
"Insert trace debugging for the specified method.  The arguments are the same "
"as for the trace() function in package \"base\".  The first argument should "
"be the name of the method to be traced, quoted or not.\n"
"\n"
" The additional argument classMethod= can be supplied as TRUE (by name only) "
"in order to trace a method in a generator object (e.g., \"new\") rather than "
"in the objects generated from that class."
msgstr ""

#. R/methodsTable.R: stop("Internal error in finding inherited methods; didn't return a unique method",     domain = "R-methods")
#: R/methodsTable.R:0
msgid ""
"Internal error in finding inherited methods; didn't return a unique method"
msgstr ""

#. R/RClassUtils.R: gettext("Known Subclasses: ", domain = "R-methods")
#: R/RClassUtils.R:0
msgid "Known Subclasses:"
msgstr ""

#. R/refClass.R: gettext("Locked Fields", domain = "R-methods")
#: R/refClass.R:0
msgid "Locked Fields"
msgstr ""

#. R/show.R: gettextf("Method Definition (Class %s):", dQuote(classLabel(cl)), domain = "R-methods")
#: R/show.R:0
#, fuzzy
msgid "Method Definition (Class %s):"
msgstr "nėra apibrėžties klasei %s"

#. R/show.R: gettext("Method Definition:", domain = "R-methods")
#: R/show.R:0
#, fuzzy
msgid "Method Definition:"
msgstr "Metodai nerasti: %s"

#. R/trace.R: gettext("Methods inserted for function %s(): %s", domain = "R-methods")
#: R/trace.R:0
msgid "Methods inserted for function %s(): %s"
msgstr "Metodai įterpti į funkciją %s(): %s"

#. R/RMethodUtils.R: gettextf("Methods list objects are not maintained in this version of R:  request for function %s may return incorrect information",     sQuote(fdef@generic))
#: R/RMethodUtils.R:0
msgid ""
"Methods list objects are not maintained in this version of R:  request for "
"function %s may return incorrect information"
msgstr ""

#. R/show.R: gettext("Methods may be defined for arguments: %s\nUse 'showMethods(\"%s\")' for currently available ones.",     domain = "R-methods")
#: R/show.R:0
msgid ""
"Methods may be defined for arguments: %s\n"
"Use 'showMethods(\"%s\")' for currently available ones."
msgstr ""

#. R/refClass.R: gettextf("Methods not found: %s", paste(dQuote(methods[missing]), collapse = ", "))
#: R/refClass.R:0
msgid "Methods not found: %s"
msgstr "Metodai nerasti: %s"

#. R/refClass.R: gettext("Methods used: ", domain = "R-methods")
#: R/refClass.R:0
#, fuzzy
msgid "Methods used:"
msgstr "Metodai nerasti: %s"

#. R/trace.R: gettext("Modified functions inserted through trace(): %s", domain = "R-methods")
#: R/trace.R:0
msgid "Modified functions inserted through trace(): %s"
msgstr "Pakeistos funkcijos įterptos per trace(): %s"

#. R/RClassUtils.R: gettext("NOTE: arguments in definition %s changed from (%s) to (%s)", domain = "R-methods")
#: R/RClassUtils.R:0
#, fuzzy
msgid "NOTE: arguments in definition %s changed from (%s) to (%s)"
msgstr ""
"Funkcijai %s prierašas %s: argumentas metodo apibrėžime pakeistas iš (%) į "
"(%s)"

#. R/RClassUtils.R: gettext("Name:", domain = "R-methods")
#: R/RClassUtils.R:0
msgid "Name:"
msgstr ""

#. R/trace.R: gettext("New functions are not currently inserted (not untraceable): %s", domain = "R-methods")
#: R/trace.R:0
msgid "New functions are not currently inserted (not untraceable): %s"
msgstr "Naujos funkcijos šiuo metu nėra įterptos (nėra atsekamos): %s"

#. R/SClasses.R: gettextf("No %s names supplied", what)
#: R/SClasses.R:0
msgid "No %s names supplied"
msgstr "Nepateikti %s vardai"

#. R/refClass.R: gettext("No Class Methods", domain = "R-methods")
#: R/refClass.R:0
msgid "No Class Methods"
msgstr ""

#. R/refClass.R: gettext("No fields defined", domain = "R-methods")
#: R/refClass.R:0
#, fuzzy
msgid "No fields defined"
msgstr "Taip pat apibrėžė"

#. R/NextMethod.R: stop("No next method available")
#: R/NextMethod.R:0
msgid "No next method available"
msgstr "Nėra kito metodo"

#. R/methodsTable.R: gettextf("No simply inherited methods found for function %s; using non-simple method",     sQuote(fdef@generic))
#: R/methodsTable.R:0
msgid ""
"No simply inherited methods found for function %s; using non-simple method"
msgstr ""
"Nerasta paprastai paveldimų metodų funkcijai %s naudojant nepaprastą metodą"

#. R/RClassUtils.R: gettextf("No slots, prototype of class %s", dQuote(.class1(ClassDef@prototype)),     domain = "R-methods")
#: R/RClassUtils.R:0
msgid "No slots, prototype of class %s"
msgstr ""

#. R/trace.R: gettext("Non-function objects are not currently inserted (not traceable): %s", domain = "R-methods")
#: R/trace.R:0
msgid "Non-function objects are not currently inserted (not traceable): %s"
msgstr "Nefunkciniai objektai nėra šiuo metu įterpti (nesurandami): %s"

#. R/methodsTable.R: gettext("Note: method with signature %s chosen for function %s,\n target signature %s.\n %s would also be valid",     domain = "R-methods")
#: R/methodsTable.R:0
msgid ""
"Note: method with signature %s chosen for function %s,\n"
" target signature %s.\n"
" %s would also be valid"
msgstr ""
"Pastaba: metodas su prierašu %s parinktas funkcijai %s,\n"
"paskirties prierašas %s.\n"
"%s taip pat būtų teisinga"

#. R/RClassUtils.R: gettextf("Note: some superclasses of class %s in package %s have duplicate definitions. This definition is not being treated as equivalent to that from package %s",     dQuote(def@className), sQuote(def@package), sQuote(prev@package))
#: R/RClassUtils.R:0
#, fuzzy
msgid ""
"Note: some superclasses of class %s in package %s have duplicate "
"definitions. This definition is not being treated as equivalent to that from "
"package %s"
msgstr ""
"Pastaba: kai kurių klasių %s viršklasiai pakete %s turi sudubliuotas "
"apibrėžtis. Ši apibrėžtis nėra tokia pat kaip iš šio paketo %s"

#. R/RClassUtils.R: gettextf("Note: the specification for class %s in package %s seems equivalent to one from package %s and is not turning on duplicate class definitions for this class",     dQuote(def@className), sQuote(def@package), sQuote(prev@package))
#: R/RClassUtils.R:0
#, fuzzy
msgid ""
"Note: the specification for class %s in package %s seems equivalent to one "
"from package %s and is not turning on duplicate class definitions for this "
"class"
msgstr ""
"Pastaba: klasės %s specifikacija pakete %s yra ekvivalenti vienai iš paketo "
"%s: neatsižvelgiant į sudubliuotus klasės apibrėžimus šiai klasei."

#. R/MethodsListClass.R: gettextf("Notes: %s.", notei, domain = "R-methods")
#: R/MethodsListClass.R:0
msgid "Notes: %s."
msgstr "Pastabos: %s."

#. R/BasicClasses.R: gettextf("OOPS: something wrong with '.OldClassesPrototypes[[%d]]'", i)
#: R/BasicClasses.R:0
msgid "OOPS: something wrong with '.OldClassesPrototypes[[%d]]'"
msgstr "Ak!: kažkas negerai su '.OldClassesPrototypes[[%d]]'"

#. R/MethodsListClass.R: gettext("Object:", domain = "R-methods")
#: R/MethodsListClass.R:0
msgid "Object:"
msgstr ""

#. R/MethodsListClass.R: gettext("Package:", domain = "R-methods")
#: R/MethodsListClass.R:0
msgid "Package:"
msgstr ""

#. R/trace.R: gettextf("Pretend we inserted class %s", class)
#: R/trace.R:0
#, fuzzy
msgid "Pretend we inserted class %s"
msgstr "nėra paveldėtos klasės apibrėžties: %s"

#. R/refClass.R: gettext("Prototypical reference class object", domain = "R-methods")
#: R/refClass.R:0
#, fuzzy
msgid "Prototypical reference class object"
msgstr "ne referencinė klasė: %s"

#. R/methodsTable.R: stop(gettextf("invalid or unset methods table in generic function %s", sQuote(fdef@generic)),     damain = "R-methods")
#: R/methodsTable.R:0
msgid "R-methods"
msgstr ""

#. R/refClass.R: gettext("Reference Class", domain = "R-methods")
#: R/refClass.R:0
#, fuzzy
msgid "Reference Class"
msgstr "ne referencinė klasė: %s"

#. R/refClass.R: gettext("Reference Superclasses: ", domain = "R-methods")
#: R/refClass.R:0
#, fuzzy
msgid "Reference Superclasses:"
msgstr "ne referencinė klasė: %s"

#. R/refClass.R: gettextf("Reference class object of class %s", classLabel(class(.self)), domain = "R-methods")
#: R/refClass.R:0
#, fuzzy
msgid "Reference class object of class %s"
msgstr "Klasės objektas %s"

#. R/refClass.R: gettext(" Reference methods used by this method are named as the arguments  either quoted or unquoted.  In the code analysis phase of installing the  the present method, the declared methods will be included.  It is essntial  to declare any methods used in a nonstandard way (e.g., via an apply function). Methods called directly do not need to be declared, but it is harmless to do so. $usingMethods() does nothing at run time.")
#: R/refClass.R:0
msgid ""
"Reference methods used by this method are named as the arguments  either "
"quoted or unquoted.  In the code analysis phase of installing the  the "
"present method, the declared methods will be included.  It is essntial  to "
"declare any methods used in a nonstandard way (e.g., via an apply function). "
"Methods called directly do not need to be declared, but it is harmless to do "
"so. $usingMethods() does nothing at run time."
msgstr ""

#. R/refClass.R: gettextf("Reference superclasses must come from the same package for the environment to be defined:  got %s and %s",     .nQuote(clRefMethods$.objectPackage), .nQuote(pkg))
#: R/refClass.R:0
msgid ""
"Reference superclasses must come from the same package for the environment "
"to be defined:  got %s and %s"
msgstr ""
"Referencinės superklasės turi būti iš aplinkos, kurią reikia apibrėžti, to "
"paties paketo: gaunami %s ir %s"

#. R/RClassUtils.R: gettextf("Required method %s not defined for signature %s", message, target)
#: R/RClassUtils.R:0
#, fuzzy
msgid "Required method %s not defined for signature %s"
msgstr "nepavyko atsekti metodo %s, nėra apibrėžto šio metodo prierašo: %s"

#. R/RClassUtils.R: gettextf("Required method %s not defined for signature %s, required for signature %s",     message, target, defined)
#: R/RClassUtils.R:0
#, fuzzy
msgid ""
"Required method %s not defined for signature %s, required for signature %s"
msgstr "nepavyko atsekti metodo %s, nėra apibrėžto šio metodo prierašo: %s"

#. R/RClassUtils.R: gettextf("Required method not defined: %s", message)
#: R/RClassUtils.R:0
#, fuzzy
msgid "Required method not defined: %s"
msgstr "Metodai nerasti: %s"

#. R/Methods.R: gettextf("Restoring default function definition of %s", sQuote(f))
#: R/Methods.R:0
msgid "Restoring default function definition of %s"
msgstr "Atstatomas numatytasis %s funkcijos apibrėžimas"

#. R/MethodsList.R: gettext("See ?MethodsList.", domain = "R-methods")
#: R/MethodsList.R:0
msgid "See ?MethodsList."
msgstr ""

#. R/MethodsList.R: gettext("See ?MethodsList. (This warning is shown once per session.)", domain = "R-methods")
#: R/MethodsList.R:0
msgid "See ?MethodsList. (This warning is shown once per session.)"
msgstr ""

#. R/show.R: gettext("Signatures:", domain = "R-methods")
#: R/show.R:0
msgid "Signatures:"
msgstr ""

#. R/method.skeleton.R: gettextf("Skeleton of method written to %s", sQuote(file))
#: R/method.skeleton.R:0
msgid "Skeleton of method written to %s"
msgstr "Metodo struktūra įrašyta į %s"

#. R/method.skeleton.R: message("Skeleton of method written to connection", domain = "R-methods")
#: R/method.skeleton.R:0
#, fuzzy
msgid "Skeleton of method written to connection"
msgstr "Metodo struktūra įrašyta į %s"

#. R/BasicClasses.R: gettextf("Slot %s:", dQuote(what), domain = "R-methods")
#. R/show.R: gettextf("Slot %s:", deparse(what), domain = "R-methods")
#. R/show.R: gettextf("Slot %s:", dQuote(s), domain = "R-methods")
#: R/BasicClasses.R:0 R/show.R:0
msgid "Slot %s:"
msgstr ""

#. R/RClassUtils.R: gettext("Slots:", domain = "R-methods")
#: R/RClassUtils.R:0
msgid "Slots:"
msgstr ""

#. R/trace.R: gettextf("Source environment created %s", format(object@dateCreated), domain = "R-methods")
#: R/trace.R:0
msgid "Source environment created %s"
msgstr ""

#. R/refClass.R: gettextf("The definition of class %s follows.", dQuote(className))
#: R/refClass.R:0
#, fuzzy
msgid "The definition of class %s follows."
msgstr "nėra %s klasės apibrėžties"

#. R/RClassUtils.R: gettextf("The prototype for class %s has undefined slot(s): %s", dQuote(name), paste0("'",     undefinedPrototypeSlots, "'", collapse = ", "))
#: R/RClassUtils.R:0
msgid "The prototype for class %s has undefined slot(s): %s"
msgstr "%s klasės prototipas turi neapibrėžtą (-us) lizdą (-us): %s"

#. R/trace.R: gettext("Tracing ", domain = "R-methods")
#: R/trace.R:0
msgid "Tracing"
msgstr ""

#. R/refClass.R: gettext("Usage:  $help(topic) where topic is the name of a method (quoted or not)")
#: R/refClass.R:0
msgid ""
"Usage:  $help(topic) where topic is the name of a method (quoted or not)"
msgstr ""

#. R/MethodsList.R: gettextf("Use %s instead. ", dQuote(instead), domain = "R-methods")
#. R/MethodsList.R: gettextf("Use %s instead. ", dQuote(instead), domain = "R-methods")
#: R/MethodsList.R:0
msgid "Use %s instead."
msgstr "Vietoj to naudokite %s."

#. R/MethodsList.R: gettext("Use of the \"MethodsList\" meta data objects is defunct.", domain = "R-methods")
#: R/MethodsList.R:0
#, fuzzy
msgid "Use of the \"MethodsList\" meta data objects is defunct."
msgstr "%s: \"MethodsList\" metaduomenų objektų naudojimas yra nepilnas."

#. R/MethodsList.R: gettext("Use of the \"MethodsList\" meta data objects is deprecated.", domain = "R-methods")
#: R/MethodsList.R:0
#, fuzzy
msgid "Use of the \"MethodsList\" meta data objects is deprecated."
msgstr "%s: \"MethodsList\" metaduomenų objektų naudojimas yra skirtingas."

#. R/RClassUtils.R: gettextf("Virtual Class %s", .dQ(Class), domain = "R-methods")
#: R/RClassUtils.R:0
msgid "Virtual Class %s"
msgstr ""

#. R/RClassUtils.R: gettextf("Virtual Class %s [in %s]", .dQ(Class), sQuote(pkg), domain = "R-methods")
#: R/RClassUtils.R:0
msgid "Virtual Class %s [in %s]"
msgstr ""

#. R/RClassUtils.R: gettextf("Virtual Class %s [package in %s]", .dQ(Class), sQuote(pkg), domain = "R-methods")
#: R/RClassUtils.R:0
msgid "Virtual Class %s [package in %s]"
msgstr ""

#. R/trace.R: gettext("Warning: Tracing only in the namespace; to untrace you will need:", domain = "R-methods")
#: R/trace.R:0
msgid "Warning: Tracing only in the namespace; to untrace you will need:"
msgstr ""

#. R/as.R: gettextf("a 'replace' method definition in 'setAs' function must be a function of two arguments, got %d",     length(args))
#: R/as.R:0
#, fuzzy
msgid ""
"a 'replace' method definition in 'setAs' function must be a function of two "
"arguments, got %d"
msgstr ""
"'replace' metodo apibrėžimas, esantis 'setAs' turi būti dviejų argumentų "
"funkcija, gauta %d"

#. R/refClass.R: gettextf("a call to 'superClass()' is in the method %s but there is no superclass definition of this method for class %s",     sQuote(me), dQuote(thisClass@className))
#: R/refClass.R:0
#, fuzzy
msgid ""
"a call to 'superClass()' is in the method %s but there is no superclass "
"definition of this method for class %s"
msgstr ""
"kreipinys į superClass() yra metode %s, bet jame nėra šio metodo viršklasio "
"apibrėžimo klasei %s"

#. R/NextMethod.R: gettextf("a call to callNextMethod() appears in a call to %s, but the call does not seem to come from either a generic function or another 'callNextMethod'",     sQuote(f))
#: R/NextMethod.R:0
msgid ""
"a call to callNextMethod() appears in a call to %s, but the call does not "
"seem to come from either a generic function or another 'callNextMethod'"
msgstr ""
"kreipinys į callNextMethod() atsiranda kreipinyje į %s, bet kreipinys nėra "
"iš bendrinės funkcijos ar kito 'callNextMethod'"

#. R/Methods.R: stop("a function for argument 'f' must be a generic function")
#. R/trace.R: stop("a function for argument 'f' must be a generic function")
#: R/Methods.R:0 R/trace.R:0
msgid "a function for argument 'f' must be a generic function"
msgstr "funkcija argumentui 'f' turi būti bendrinė funkcija"

#. R/RClassUtils.R: gettextf("a prototype object was supplied with object slot of class %s, but the class definition requires an object that is class %s",     dQuote(class(prototype@object)), dQuote(dataPartClass))
#: R/RClassUtils.R:0
msgid ""
"a prototype object was supplied with object slot of class %s, but the class "
"definition requires an object that is class %s"
msgstr ""
"prototipo objektas buvo taikomas su objekto klasės %s lauku, bet klasės "
"apibrėžimui reikia objekto, kuris yra %s klasė"

#. R/RClassUtils.R: gettextf("a prototype was supplied of class %s, but the class definition requires an object that is class %s",     dQuote(class(prototype)), dQuote(dataPartClass))
#: R/RClassUtils.R:0
msgid ""
"a prototype was supplied of class %s, but the class definition requires an "
"object that is class %s"
msgstr ""
"buvo taikomas klasės %s prototipas, bet klasės apibrėžtis reikia objekto, "
"kuris yra %s klasė"

#. R/refClass.R: gettextf("a single class name is needed for field %s, got a character vector of length %d",     sQuote(thisName), length(thisField))
#: R/refClass.R:0
msgid ""
"a single class name is needed for field %s, got a character vector of length "
"%d"
msgstr ""
"vienos klasės vardas reikalingas %s laukui, gautas %d ilgio tekstinis "
"vektorius"

#. R/RClassUtils.R: gettextf("a validity method must be a function of one argument, got an object of class %s",     dQuote(class(validity)))
#: R/RClassUtils.R:0
msgid ""
"a validity method must be a function of one argument, got an object of class "
"%s"
msgstr ""
"metodo galiojimas turi būti vieno argumento funkcija, gautas klasės %s "
"objektas"

#. R/SClasses.R: gettextf("abnormal type %s is not supported as a superclass of a class definition",     dQuote(type))
#: R/SClasses.R:0
msgid "abnormal type %s is not supported as a superclass of a class definition"
msgstr "nenormalus tipas %s nėra palaikomas kaip klasės apibrėžties viršklasis"

#. R/RMethodUtils.R: gettextf("action function %s has no arguments, should have at least 1", sQuote(fname))
#: R/RMethodUtils.R:0
msgid "action function %s has no arguments, should have at least 1"
msgstr "veikimo funkcija %s neturi argumentų, turėtų turėti bent 1"

#. R/as.R: warning("ambiguous object (length != 1) to coerce to \"name\"")
#: R/as.R:0
msgid "ambiguous object (length != 1) to coerce to \"name\""
msgstr "neapibrėžtą objektą (ilgis != 1) paversti į \"name\""

#. R/Methods.R: sprintf("apparent internal error: a generic function was found for \"%s\", but no corresponding object was found searching from \"%s\"",     f, getPackageName(where))
#: R/Methods.R:0
msgid ""
"apparent internal error: a generic function was found for \"%s\", but no "
"corresponding object was found searching from \"%s\""
msgstr ""

#. R/zzz.R: warning("apparently bad method or class metadata in saved environment;\nmove the file or remove the class/method")
#: R/zzz.R:0
#, fuzzy
msgid ""
"apparently bad method or class metadata in saved environment;\n"
"move the file or remove the class/method"
msgstr "blogas metodas ar klasės metaduomenys išsaugotoje aplinkoje;"

#. R/Methods.R: gettextf("argument %s is not S4", deparse1(substitute(f1)), domain = "R-methods")
#. R/Methods.R: gettextf("argument %s is not S4", deparse1(substitute(f2)), domain = "R-methods")
#: R/Methods.R:0
msgid "argument %s is not S4"
msgstr "argumentas %s nėra S4"

#. R/Methods.R: gettextf("argument %s must be a generic function or a single character string; got an object of class %s",     sQuote("f"), dQuote(class(f)))
#: R/Methods.R:0
msgid ""
"argument %s must be a generic function or a single character string; got an "
"object of class %s"
msgstr ""
"argumentas %s turi būti bendrinė funkcija arba vieno simbolio eilutė, "
"gaunamas klasės %s objektas"

#. R/SClasses.R: gettextf("argument %s must be a list or a character vector; got an object of class %s",     dQuote(what), dQuote(class(fields)))
#: R/SClasses.R:0
msgid ""
"argument %s must be a list or a character vector; got an object of class %s"
msgstr ""
"argumentas %s turi būti sąrašas arba tekstinis vektorius, gautas klasės %s "
"objektas"

#. R/oldClass.R: gettextf("argument 'Classes' must be a vector of two classes; got an argument of length %d",     length(Classes))
#: R/oldClass.R:0
msgid ""
"argument 'Classes' must be a vector of two classes; got an argument of "
"length %d"
msgstr ""
"argumentas 'Classes' turi būti dviejų klasių vektorius, gautas %d ilgio "
"argumentas"

#. R/oldClass.R: gettextf("argument 'S4Class' must be a class definition: got an object of class %s",     dQuote(class(S4Class)))
#: R/oldClass.R:0
msgid ""
"argument 'S4Class' must be a class definition: got an object of class %s"
msgstr ""
"argumentas 'S4Class' turi būti klasės apibrėžimas, gaunamas klasės %s "
"objektas"

#. R/RClassUtils.R: stop("argument 'abbreviate' must be 0, 1, 2, or 3")
#: R/RClassUtils.R:0
msgid "argument 'abbreviate' must be 0, 1, 2, or 3"
msgstr "argumentas 'abbreviate' turi būti 0, 1, 2 arba 3"

#. R/SClasses.R: stop("argument 'classDef' must be a class definition or the name of a class")
#: R/SClasses.R:0
msgid "argument 'classDef' must be a class definition or the name of a class"
msgstr "argumentas 'classDef' turi būti klasės apibrėžimas arba klasės vardas"

#. R/SClasses.R: gettextf("argument 'classDef' must be a string or a class representation; got an object of class %s",     dQuote(class(classDef)))
#: R/SClasses.R:0
msgid ""
"argument 'classDef' must be a string or a class representation; got an "
"object of class %s"
msgstr ""
"argumentas 'classDef' turi būti eilutė ar klasės atvaizdavimas, gautas "
"klasės %s objektas"

#. R/Methods.R: gettextf("argument 'f' must be a generic function or %s", .notSingleString(f))
#: R/Methods.R:0
msgid "argument 'f' must be a generic function or %s"
msgstr "argumentas 'f' turi būti bendrinė funkcija arba %s"

#. R/RMethodUtils.R: stop("argument 'f' must be a string, generic function, or primitive: got an ordinary function")
#: R/RMethodUtils.R:0
msgid ""
"argument 'f' must be a string, generic function, or primitive: got an "
"ordinary function"
msgstr ""
"argumentas 'f' turi būti eilutė, bendrinė funkcija arba primityvas: gaunama "
"paprastoji funkcija"

#. R/RClassUtils.R: stop("argument 'includeSubclasses' must be a logical, either one value or a vector of the same length as argument 'classes'")
#: R/RClassUtils.R:0
msgid ""
"argument 'includeSubclasses' must be a logical, either one value or a vector "
"of the same length as argument 'classes'"
msgstr ""
"argumentas 'includeSubclasses' turi būti loginis arba viena reikšmė, arba to "
"paties ilgio kaip argumentas 'classes' vektorius"

#. R/trace.R: stop("argument 'signature' is not meaningful for tracing reference methods")
#: R/trace.R:0
msgid "argument 'signature' is not meaningful for tracing reference methods"
msgstr "argumentas 'signature' neturi prasmės sekant referencinius metodus"

#. R/Methods.R: warning("argument 'signature' is not meaningful with the current implementation and is ignored \n(extract a subset of the methods list instead)")
#: R/Methods.R:0
msgid ""
"argument 'signature' is not meaningful with the current implementation and "
"is ignored \n"
"(extract a subset of the methods list instead)"
msgstr ""
"argumentas 'signature' neturi prasmės su dabartiniu įgyvendinimu ir yra "
"ignoruojamas\n"
"(vietoj to išskirkite metodų sąrašo poaibį)"

#. R/methodsTable.R: stop("argument 'signatures' must be a character matrix whose rows are method signatures")
#: R/methodsTable.R:0
msgid ""
"argument 'signatures' must be a character matrix whose rows are method "
"signatures"
msgstr ""
"argumentas 'signatures' turi būti simbolių matrica, kurios eilutės yra "
"metodo prierašai"

#. R/trace.R: stop("argument 'what' should be the name of a function")
#: R/trace.R:0
msgid "argument 'what' should be the name of a function"
msgstr "argumentas 'what' turėtų būti funkcijos vardas"

#. R/RMethodUtils.R: stop("argument f must be a generic function with signature \"...\"")
#: R/RMethodUtils.R:0
msgid "argument f must be a generic function with signature \"...\""
msgstr "argumentas f turi būti bendrinė funkcija su prierašu \"...\""

#. R/as.R: gettextf("argument names in 'replace' method changed to agree with 'coerce<-' generic function:\n%s",     paste(deparse(replace), sep = "\n    "))
#: R/as.R:0
#, fuzzy
msgid ""
"argument names in 'replace' method changed to agree with 'coerce<-' generic "
"function:\n"
"%s"
msgstr ""
"argumentų vardai 'replace' pakeisti pritarus 'coerce<-' generic:\n"
"%s"

#. R/MethodsList.R: stop("arguments 'names' and 'signature' must have the same length")
#: R/MethodsList.R:0
msgid "arguments 'names' and 'signature' must have the same length"
msgstr "argumentai 'names' ir 'signature' turi būti tokio paties ilgio"

#. R/refClass.R: stop("arguments must all be character string names of fields")
#: R/refClass.R:0
msgid "arguments must all be character string names of fields"
msgstr "visi argumentai turi būti simbolių eilučių laukų vardai"

#. R/refClass.R: stop("arguments to 'methods()' must be named, or one named list")
#: R/refClass.R:0
#, fuzzy
msgid "arguments to 'methods()' must be named, or one named list"
msgstr "methods() argumentai turi būti įvardyti arba vienas įvardytas sąrašas"

#. R/RClassUtils.R: gettextf("assigning as %s a class representation with internal name %s", dQuote(Class),     dQuote(def@className))
#: R/RClassUtils.R:0
msgid "assigning as %s a class representation with internal name %s"
msgstr "priskyrimas kaip %s klasės atvaizdavimas su vidiniu vardu %s"

#. R/trace.R: gettextf("assigning over the binding of symbol %s in environment/package %s", sQuote(what),     sQuote(pname))
#: R/trace.R:0
msgid "assigning over the binding of symbol %s in environment/package %s"
msgstr "priskyrimas per simbolio %s saistymą aplinkoje/pakete %s"

#. R/SClasses.R: gettextf("assignment of an object of class %s is not valid for @%s in an object of class %s; is(value, \"%s\") is not TRUE",     dQuote(valueClass), sQuote(name), dQuote(cl), slotClass)
#: R/SClasses.R:0
msgid ""
"assignment of an object of class %s is not valid for @%s in an object of "
"class %s; is(value, \"%s\") is not TRUE"
msgstr ""
"klasės %s objekto priskyrimas nėra tinkamas @%s klasės %s objekte; is(value, "
"\"%s\") nėra TRUE"

#. R/SClasses.R: gettextf("assignment of an object of class %s is not valid for slot %s in an object of class %s; is(value, \"%s\") is not TRUE",     dQuote(valueClass), sQuote(name), dQuote(cl), slotClass)
#: R/SClasses.R:0
msgid ""
"assignment of an object of class %s is not valid for slot %s in an object of "
"class %s; is(value, \"%s\") is not TRUE"
msgstr ""
"klasės %s objekto priskyrimas nėra teisingas %s laukui klasės %s objekte, "
"is(value, \"%s\") nėra TRUE"

#. R/Methods.R: gettextf("bad class specified for element %d (should be a single character string)",     i)
#: R/Methods.R:0
msgid ""
"bad class specified for element %d (should be a single character string)"
msgstr ""
"netinkamai nurodyta klasė %d elementui (turi būti viena simbolių eilutė)"

#. R/methodsTable.R: gettextf("bad method object stored in method table, class %s", dQuote(class(current)))
#: R/methodsTable.R:0
msgid "bad method object stored in method table, class %s"
msgstr "netinkamas metodo objektas saugomas metodo lentelėje, klasė %s"

#. R/NextMethod.R: gettextf("bad object found as method (class %s)", dQuote(class(method)))
#: R/NextMethod.R:0
msgid "bad object found as method (class %s)"
msgstr "netinkamas objektas rastas kaip metodas (klasė %s)"

#. R/RMethodUtils.R: stop("botched namespace: failed to find 'base' namespace in its parents", domain = "R-methods")
#: R/RMethodUtils.R:0
msgid "botched namespace: failed to find 'base' namespace in its parents"
msgstr ""

#. R/is.R: gettext("both classes must be defined")
#: R/is.R:0
msgid "both classes must be defined"
msgstr "turi būti apibrėžtos abi klasės"

#. R/RMethodUtils.R: gettextf("caching class %s", dQuote(cl))
#: R/RMethodUtils.R:0
#, fuzzy
msgid "caching class %s"
msgstr "(klasė %s)"

#. R/NextMethod.R: stop("call to 'callNextMethod' does not appear to be in a 'method' or 'callNextMethod' context")
#: R/NextMethod.R:0
msgid ""
"call to 'callNextMethod' does not appear to be in a 'method' or "
"'callNextMethod' context"
msgstr ""
"kreipinys į 'callNextMethod' neatsiras 'method' arba 'callNextMethod' "
"kontekste"

#. R/RMethodUtils.R: gettext("called 'doPrimitiveMethod()'", domain = "R-methods")
#: R/RMethodUtils.R:0
msgid "called 'doPrimitiveMethod()'"
msgstr ""

#. R/methodsTable.R: gettext(" can eliminate dominated ones,", domain = "R-methods")
#: R/methodsTable.R:0
msgid "can eliminate dominated ones,"
msgstr ""

#. R/is.R: gettextf("cannot create a 'setIs' relation when neither of the classes (%s and %s) is local and modifiable in this package",     dQuote(class1), dQuote(class2))
#: R/is.R:0
msgid ""
"cannot create a 'setIs' relation when neither of the classes (%s and %s) is "
"local and modifiable in this package"
msgstr ""
"nepavyko sukurti 'setls' ryšio kai nė viena iš klasių (%s ir %s) nėra vidinė "
"ir pakeičiama šiame pakete"

#. R/trace.R: gettextf("cannot find an environment corresponding to package name '%s'", package)
#: R/trace.R:0
#, fuzzy
msgid "cannot find an environment corresponding to package name '%s'"
msgstr "nepavyko surasti aplinkos atitinkančios paketo vardą '%s'"

#. R/BasicClasses.R: stop("cannot have more than one unnamed argument as environment")
#: R/BasicClasses.R:0
msgid "cannot have more than one unnamed argument as environment"
msgstr "negali turėti daugiau nei vieną neįvardytą argumentą kaip aplinką"

#. R/trace.R: gettext("cannot insert methods for these functions (methods table not found in source): %s",     domain = "R-methods")
#: R/trace.R:0
msgid ""
"cannot insert methods for these functions (methods table not found in "
"source): %s"
msgstr ""
"nepavyko įterpti metodų į šias funkcijas (metodų lentelės šaltinyje nėra): %s"

#. R/trace.R: gettext("cannot insert these (not found in source): %s", domain = "R-methods")
#: R/trace.R:0
msgid "cannot insert these (not found in source): %s"
msgstr "nepavyko įterpti (nėra šaltinyje): %s"

#. R/Methods.R: gettextf("cannot remove methods for %s in locked environment/package %s", sQuote(f),     sQuote(getPackageName(db)))
#: R/Methods.R:0
msgid "cannot remove methods for %s in locked environment/package %s"
msgstr "nepavyko pašalinti metodų %s užrakintoje aplinkoje/pakete %s"

#. R/BasicClasses.R: stop("cannot specify arguments for 'array()' method when specifying '.Data'")
#: R/BasicClasses.R:0
#, fuzzy
msgid "cannot specify arguments for 'array()' method when specifying '.Data'"
msgstr "nepavyko nurodyti array() argumentų, kai nurodyta '.Data'"

#. R/BasicClasses.R: stop("cannot specify arguments for 'matrix()' method when specifying '.Data'")
#: R/BasicClasses.R:0
#, fuzzy
msgid "cannot specify arguments for 'matrix()' method when specifying '.Data'"
msgstr "nepavyko nurodyti matrix() argumentų, kai nurodyta '.Data'"

#. R/trace.R: gettext("cannot untrace method for %s; no method defined for this signature: %s",     domain = "R-methods")
#: R/trace.R:0
msgid "cannot untrace method for %s; no method defined for this signature: %s"
msgstr "nepavyko atsekti metodo %s, nėra apibrėžto šio metodo prierašo: %s"

#. R/trace.R: stop("cannot use 'at' argument unless the function body has the form '{ ... }'")
#: R/trace.R:0
msgid ""
"cannot use 'at' argument unless the function body has the form '{ ... }'"
msgstr ""
"negalima naudoti 'at' argumento, nebent funkcijos pagrindinė dalies forma "
"yra '{ ... }'"

#. R/trace.R: stop("cannot use 'at' argument without a trace expression")
#: R/trace.R:0
msgid "cannot use 'at' argument without a trace expression"
msgstr "negalima naudoti 'at' argumento be išraiškos pėdsako"

#. R/SClasses.R: gettextf("cannot use object of class %s in new(): class %s does not extend that class",     dQuote(Classi), dQuote(Class))
#: R/SClasses.R:0
#, fuzzy
msgid ""
"cannot use object of class %s in new(): class %s does not extend that class"
msgstr ""
"negalima naudoti klasės %s objekto new(): klasė %s nepraplečia šios klasės"

#. R/is.R: gettextf("class %s cannot extend class %s", dQuote(class1), dQuote(class2))
#: R/is.R:0
msgid "class %s cannot extend class %s"
msgstr "klasė %s negali praplėsti %s klasės"

#. R/RClassUtils.R: gettextf("class %s does not have a data part (a .Data slot) defined", dQuote(class(object)))
#: R/RClassUtils.R:0
msgid "class %s does not have a data part (a .Data slot) defined"
msgstr "klasė %s neturi apibrėžtos duomenų dalies (.Data laukas)"

#. R/BasicClasses.R: gettextf("class %s does not have an S3 data part, and so is of type \"S4\"; no S3 equivalent",     dQuote(class(from)))
#: R/BasicClasses.R:0
msgid ""
"class %s does not have an S3 data part, and so is of type \"S4\"; no S3 "
"equivalent"
msgstr ""
"klasė %s neturi S3 duomenų dalies, todėl yra \"S4\" tipo, nėra S3 atitikmuo"

#. R/RClassUtils.R: gettextf("class %s extends an undefined class (%s)", dQuote(name), dQuote(cl))
#: R/RClassUtils.R:0
msgid "class %s extends an undefined class (%s)"
msgstr "klasė %s praplečia neapibrėžtą klasę (%s)"

#. R/RClassUtils.R: gettextf("class %s extends an undefined class, %s", dQuote(ClassDef@className), dQuote(what))
#: R/RClassUtils.R:0
msgid "class %s extends an undefined class, %s"
msgstr "klasė %s praplečia neapibrėžtą klasę, %s"

#. R/refClass.R: gettextf("class %s for field %s is not defined", dQuote(thisField), sQuote(thisName))
#: R/refClass.R:0
msgid "class %s for field %s is not defined"
msgstr "klasė %s laukui %s neapibrėžta"

#. R/RClassUtils.R: gettextf("class %s has a locked definition in package %s", dQuote(Class), sQuote(getPackageName(where)))
#: R/RClassUtils.R:0
msgid "class %s has a locked definition in package %s"
msgstr "klasė %s turi užrakintą apibrėžimą pakete %s"

#. R/SClasses.R: gettextf("class %s has multiple definitions visible; only the first removed", dQuote(Class))
#: R/SClasses.R:0
msgid "class %s has multiple definitions visible; only the first removed"
msgstr "klasė %s turi matomus sudėtinius apibrėžimus, tik pirmasis pašalintas"

#. R/is.R: gettextf("class %s has no visible definition from package or environment %s", dQuote(class2),     sQuote(getPackageName(where)))
#: R/is.R:0
msgid "class %s has no visible definition from package or environment %s"
msgstr "klasė %s neturi matomo apibrėžimo iš paketo ar aplinkos %s"

#. R/BasicClasses.R: gettextf("class %s is VIRTUAL; not meaningful to create an S4 object from this class",     dQuote(cl))
#: R/BasicClasses.R:0
msgid ""
"class %s is VIRTUAL; not meaningful to create an S4 object from this class"
msgstr "%s klasė yra VIRTUAL; nėra prasminga sukurti S4 objektą iš šios klasės"

#. R/as.R: gettextf("class %s is a class union: 'coerce' relations to a class union are not meaningful",     dQuote(to))
#: R/as.R:0
msgid ""
"class %s is a class union: 'coerce' relations to a class union are not "
"meaningful"
msgstr ""
"klasė %s yra klasės sąjunga: 'coerce' ryšiai su klasės sąjunga nėra prasmingi"

#. R/is.R: gettextf("class %s is defined (with package slot %s) but no metadata object found to revise %s information---not imported?  Making a copy in package %s",     .dQ(class), sQuote(classDef@package), purpose, sQuote(getPackageName(where, FALSE)))
#: R/is.R:0
msgid ""
"class %s is defined (with package slot %s) but no metadata object found to "
"revise %s information---not imported?  Making a copy in package %s"
msgstr ""
"klasė %s apibrėžta (su paketo lauku %s), bet nerasta metaduomenų objekto, "
"kad būtų galima peržiūrėti %s informaciją -- neeksportuojamas? Kopijuojama "
"pakete %s"

#. R/refClass.R: gettextf("class %s is defined but is not a reference class", dQuote(Class))
#: R/refClass.R:0
msgid "class %s is defined but is not a reference class"
msgstr "klasė %s yra apibrėžta, bet nėra referencinė klasė"

#. R/SClasses.R: gettextf("class %s is defined, with package %s, but no corresponding metadata object was found (not exported?)",     dQuote(Class), sQuote(classDef@package))
#: R/SClasses.R:0
msgid ""
"class %s is defined, with package %s, but no corresponding metadata object "
"was found (not exported?)"
msgstr ""
"klasė %s apibrėžta su paketu %s, bet nerasta atitinkamų objekto metaduomenų "
"(neeksportuoti?)"

#. R/RClassUtils.R: gettext("class %s is inheriting an inconsistent superclass structure from class %s, inconsistent with %s",     domain = "R-methods")
#: R/RClassUtils.R:0
msgid ""
"class %s is inheriting an inconsistent superclass structure from class %s, "
"inconsistent with %s"
msgstr ""
"klasė %s paveldi nesuderinamą viršklasio struktūrą iš klasės %s, tai "
"nesuderinama su %s"

#. R/as.R: gettextf("class %s is not defined in this environment", dQuote(to))
#: R/as.R:0
msgid "class %s is not defined in this environment"
msgstr "klasė %s neapibrėžta šioje aplinkoje"

#. R/SClasses.R: gettextf("class %s is sealed; 'resetClass' will have no effect", dQuote(Class))
#: R/SClasses.R:0
msgid "class %s is sealed; 'resetClass' will have no effect"
msgstr "%s klasė yra patvirtinta; 'resetClass' neturės jokios įtakos"

#. R/is.R: gettextf("class %s is sealed; new superclasses can not be defined, except by 'setClassUnion'",     dQuote(class1))
#: R/is.R:0
msgid ""
"class %s is sealed; new superclasses can not be defined, except by "
"'setClassUnion'"
msgstr ""
"%s klasė yra patvirtinta; naujų superklasių apibrėžti negalima, išskyrus "
"'setClassUnion'"

#. R/RClassUtils.R: gettextf("class %s may not contain itself: it contains class %s, with a circular relation back to %s",     dQuote(className), dQuote(exti@by), dQuote(className))
#: R/RClassUtils.R:0
msgid ""
"class %s may not contain itself: it contains class %s, with a circular "
"relation back to %s"
msgstr ""

#. R/RClassUtils.R: gettextf("class %s may not have itself as a subclass: it contains class %s, with a circular relation back to %s",     dQuote(className), dQuote(exti@by), dQuote(className))
#: R/RClassUtils.R:0
msgid ""
"class %s may not have itself as a subclass: it contains class %s, with a "
"circular relation back to %s"
msgstr ""

#. R/SClasses.R: gettextf("class %s not found on %s; 'resetClass' will have no effect", dQuote(Class),     sQuote(getPackageName(where)))
#: R/SClasses.R:0
msgid "class %s not found on %s; 'resetClass' will have no effect"
msgstr "klasė %s nerasta %s; 'resetClass' neturės jokios įtakos"

#. R/RClassUtils.R: stop("class cannot have both an ordinary and hidden data type")
#: R/RClassUtils.R:0
msgid "class cannot have both an ordinary and hidden data type"
msgstr "klasė negali turėti ir paprasto ir paslėpto duomenų tipo"

#. R/SClasses.R: gettext("class definition cannot extend more than one of these data types:", domain = "R-methods")
#: R/SClasses.R:0
#, fuzzy
msgid "class definition cannot extend more than one of these data types:"
msgstr ""
"klasės apibrėžtis nepraplečia daugiau nei vieno iš šių duomenų tipų: %s"

#. R/SClasses.R: gettextf("class definition for %s not found (no action taken)", dQuote(Class))
#: R/SClasses.R:0
msgid "class definition for %s not found (no action taken)"
msgstr "%s klasė neapibrėžta (nesiimta jokių veiksmų)"

#. R/MethodsListClass.R: gettextf("class generator function for class %s from package %s", dQuote(object@className),     sQuote(object@package), domain = "R-methods")
#: R/MethodsListClass.R:0
msgid "class generator function for class %s from package %s"
msgstr "klasės generuojančioji funkcija klasei %s iš paketo %s"

#. R/refClass.R: gettextf("class must be a reference class representation or a character string; got an object of class %s",     dQuote(class(Class)))
#: R/refClass.R:0
msgid ""
"class must be a reference class representation or a character string; got an "
"object of class %s"
msgstr ""
"klasė turi būti referencinės klasės atvaizdavimas ar simbolių eilutė, "
"gaunamas klasės %s objektas"

#. R/refClass.R: gettextf("code for methods in class %s was not checked for suspicious field assignments (recommended package %s not available?)",     dQuote(Class), sQuote("codetools"))
#: R/refClass.R:0
msgid ""
"code for methods in class %s was not checked for suspicious field "
"assignments (recommended package %s not available?)"
msgstr ""
"metodo kodas klasėje %s nepatikrintas dėl įtartinų lauko priskyrimų "
"(rekomenduojamas paketas %s negalimas?)"

#. R/RClassUtils.R: gettextf("conflicting definition of data part: .Data = %s, superclass implies %s",     dQuote(elNamed(properties, ".Data")), dQuote(dataPartClass))
#: R/RClassUtils.R:0
msgid "conflicting definition of data part: .Data = %s, superclass implies %s"
msgstr ""
"nesuderinamas duomenų dalies apibrėžimas: .Data = %s, viršklasis reiškia %s"

#. R/MethodsList.R: gettextf("default method must be a method definition, a primitive or NULL: got an object of class %s",     dQuote(class(method)))
#: R/MethodsList.R:0
msgid ""
"default method must be a method definition, a primitive or NULL: got an "
"object of class %s"
msgstr ""
"numatytasis metodas turi būti metodo apibrėžimas, pirminis arba NULL: gauta "
"klasės %s objektas"

#. R/Methods.R: stop("defunct methods list search", domain = "R-Methods")
#: R/Methods.R:0
msgid "defunct methods list search"
msgstr ""

#. R/refClass.R: stop("direct calls to 'callSuper()' are invalid: should only be called from another method")
#: R/refClass.R:0
#, fuzzy
msgid ""
"direct calls to 'callSuper()' are invalid: should only be called from "
"another method"
msgstr ""
"tiesioginiai kreipiniai į callSuper() klaidingi: turėtų būti iškviesti iš "
"kito metodo"

#. R/as.R: warning("direct use of 'coerce()' method is deprecated: use 'as(from, class(to)) <- value' instead",     domain = "R-methods")
#: R/as.R:0
msgid ""
"direct use of 'coerce()' method is deprecated: use 'as(from, class(to)) <- "
"value' instead"
msgstr ""

#. R/as.R: warning("direct use of 'coerce()' method is deprecated: use 'as(from, class(to))' instead",     domain = "R-methods")
#: R/as.R:0
msgid ""
"direct use of 'coerce()' method is deprecated: use 'as(from, class(to))' "
"instead"
msgstr ""

#. R/RClassUtils.R: gettextf("distance %d", eli@distance)
#. R/RClassUtils.R: gettextf("distance %d", eli@distance)
#. R/RClassUtils.R: gettextf("distance %d", eli@distance)
#. R/RClassUtils.R: gettextf("distance %d", eli@distance)
#: R/RClassUtils.R:0
msgid "distance %d"
msgstr ""

#. R/trace.R: gettextf("does not seem to be a method table for generic %s in tracing environment",     sQuote(what))
#: R/trace.R:0
msgid ""
"does not seem to be a method table for generic %s in tracing environment"
msgstr "neatrodo, kad yra metodų lentelė bendriniam %s sekimo aplinkoje"

#. R/zzz.R: gettext(" done", domain = "R-methods")
#: R/zzz.R:0
msgid "done"
msgstr ""

#. R/RMethodUtils.R: gettextf("done caching class %s", dQuote(cl))
#: R/RMethodUtils.R:0
msgid "done caching class %s"
msgstr ""

#. R/RMethodUtils.R: gettextf("done getting generic '%s'", f)
#: R/RMethodUtils.R:0
msgid "done getting generic '%s'"
msgstr ""

#. R/SClasses.R: gettext("duplicate class names among superclasses: %s", domain = "R-methods")
#: R/SClasses.R:0
msgid "duplicate class names among superclasses: %s"
msgstr "vienodi klasės vardai viršklasiuose: %s"

#. R/MethodsList.R: gettextf("duplicate element names in 'MethodsList' at level %d: %s", level, paste(dQuote(unique(mnames[duplicated(mnames)])),     collapse = ", "), domain = "R-methods")
#: R/MethodsList.R:0
msgid "duplicate element names in 'MethodsList' at level %d: %s"
msgstr "vienodi elementų vardai, esantys 'MethodsList' lygyje %d: %s"

#. R/MethodsList.R: gettextf("element %d at level %d (class %s) cannot be interpreted as a function or named list",     i, level, dQuote(class(eli)))
#: R/MethodsList.R:0
msgid ""
"element %d at level %d (class %s) cannot be interpreted as a function or "
"named list"
msgstr ""
"elementas %d lygyje %d (klasė %s) negali būti interpretuojamas kaip funkcija "
"ar įvardytas sąrašas"

#. R/SClasses.R: gettextf("element %d of the representation was not a single character string", i)
#: R/SClasses.R:0
msgid "element %d of the representation was not a single character string"
msgstr "atvaizdavimo elementas %d nebuvo vieno simbolio eilutė"

#. R/SClasses.R: gettextf("error in contained classes (%s) for class %s and unable to remove definition from %s",     msg, dQuote(Class), sQuote(getPackageName(where)))
#: R/SClasses.R:0
msgid ""
"error in contained classes (%s) for class %s and unable to remove definition "
"from %s"
msgstr ""
"klaida uždarose klasėse (%s) klasei %s ir negalima pašalinti apibrėžimo iš %s"

#. R/SClasses.R: gettextf("error in contained classes (%s) for class %s and unable to restore previous definition from %s",     msg, dQuote(Class), sQuote(getPackageName(where)))
#: R/SClasses.R:0
msgid ""
"error in contained classes (%s) for class %s and unable to restore previous "
"definition from %s"
msgstr ""
"klaida uždarose klasėse (%s) klasei %s ir negalima atkurti ankstesnio "
"apibrėžimo iš %s"

#. R/SClasses.R: gettextf("error in contained classes (%s) for class %s; class definition removed from %s",     msg, dQuote(Class), sQuote(getPackageName(where)))
#: R/SClasses.R:0
msgid ""
"error in contained classes (%s) for class %s; class definition removed from "
"%s"
msgstr ""
"klaida uždarose klasėse (%s) klasei %s ir negalima pašalinti apibrėžimo iš %s"

#. R/SClasses.R: gettextf("error in contained classes (%s) for class %s; previous definition restored to %s",     msg, dQuote(Class), sQuote(getPackageName(where)))
#: R/SClasses.R:0
msgid ""
"error in contained classes (%s) for class %s; previous definition restored "
"to %s"
msgstr ""
"klaida uždarose klasėse (%s) klasei %s ir negalima atkurti ankstesnio "
"apibrėžimo iš %s"

#. R/RMethodUtils.R: gettextf("error in load action %s for package %s: %s: %s", aname, getPackageName(where),     callString, value$message)
#: R/RMethodUtils.R:0
msgid "error in load action %s for package %s: %s: %s"
msgstr "klaida įkėlime veiksme %s paketui %s: %s: %s"

#. R/Methods.R: gettextf("error in updating S4 generic function %s; the function definition is not an S4 generic function (class %s)",     sQuote(f), dQuote(class(fdef)))
#: R/Methods.R:0
msgid ""
"error in updating S4 generic function %s; the function definition is not an "
"S4 generic function (class %s)"
msgstr ""
"klaida atnaujinant S4 bendrinę funkciją %s; funkcijos apibrėžimas nėra S4 "
"bendrinė funkcija (klasė %s)"

#. R/RMethodUtils.R: gettext("expanding the signature to include omitted arguments in definition: %s",     domain = "R-methods")
#: R/RMethodUtils.R:0
msgid "expanding the signature to include omitted arguments in definition: %s"
msgstr ""
"išplečiamas prierašas, kad įterpti praleistus argumentus apibrėžime: %s"

#. R/addedFunctions.R: gettextf("expected a non-empty character string for argument 'name'")
#: R/addedFunctions.R:0
#, fuzzy
msgid "expected a non-empty character string for argument 'name'"
msgstr "turėtų būti ne tuščia simbolių eilutė argumento varde"

#. R/Methods.R: gettextf("expected a non-empty character string for argument name")
#: R/Methods.R:0
msgid "expected a non-empty character string for argument name"
msgstr "turėtų būti ne tuščia simbolių eilutė argumento varde"

#. R/oldClass.R: gettext("explicit coercion of old-style class (%s) is not defined", domain = "R-methods")
#: R/oldClass.R:0
msgid "explicit coercion of old-style class (%s) is not defined"
msgstr "išreikštinis seno stiliaus klasės (%s) pavertimas neapibrėžtas"

#. R/oldClass.R: gettextf("explicit replacement not defined for as(x, \"%s\") <- value for old-style class %s",     to, dQuote(class(from)[1L]))
#: R/oldClass.R:0
msgid ""
"explicit replacement not defined for as(x, \"%s\") <- value for old-style "
"class %s"
msgstr ""
"išreikštinis pakeitimas neapibrėžtas as(x, \"%s\") <- reikšmė seno stiliaus "
"klasei %s"

#. R/methodsTable.R: stop("failed to find expected group generic function: ", what)
#: R/methodsTable.R:0
msgid "failed to find expected group generic function:"
msgstr "nepavyko rasti grupės bendrinės funkcijos:"

#. R/refClass.R: gettextf("field %s is already locked", sQuote(what))
#: R/refClass.R:0
msgid "field %s is already locked"
msgstr "laukas %s jau užrakintas"

#. R/refClass.R: gettextf("field %s of class %s has a non-default binding and cannot be locked", sQuote(what),     dQuote(className))
#: R/refClass.R:0
msgid "field %s of class %s has a non-default binding and cannot be locked"
msgstr ""
"laukas %s klasės %s neturi numatytojo susiejimo ir negali būti užrakintas"

#. R/refClass.R: gettextf("field %s was supplied as an object of class %s; must be a class name or a binding function",     sQuote(thisName), dQuote(class(thisField)))
#: R/refClass.R:0
msgid ""
"field %s was supplied as an object of class %s; must be a class name or a "
"binding function"
msgstr ""
"laukas %s buvo pateiktas kaip klasės %s objektas, turi būti klasės vardas "
"arba funkcijos susiejimas"

#. R/Methods.R: gettextf("first argument should be the names of one of more generic functions (got object of class %s)",     dQuote(class(f)))
#: R/Methods.R:0
msgid ""
"first argument should be the names of one of more generic functions (got "
"object of class %s)"
msgstr ""
"pirmas argumentas turėtų būti vienas iš daugelio bendrinių funkcijų vardų "
"(gautas klasės %s objektas)"

#. R/RClassUtils.R: gettextf("for function %s: %s", f, message)
#: R/RClassUtils.R:0
#, fuzzy
msgid "for function %s: %s"
msgstr "funkcijos %s nėra"

#. R/RMethodUtils.R: gettextf("formal arguments (%s) omitted in the method definition cannot be in the signature",     bad2)
#: R/RMethodUtils.R:0
msgid ""
"formal arguments (%s) omitted in the method definition cannot be in the "
"signature"
msgstr ""
"formalieji argumentai (%s), kurie praleisti metodo apibrėžime, negali būti "
"prieraše"

#. R/Methods.R: gettext("formal arguments differ (in default values?)", domain = "R-methods")
#: R/Methods.R:0
msgid "formal arguments differ (in default values?)"
msgstr "skiriasi formalieji parametrai (numatytose reikšmėse?)"

#. R/Methods.R: gettextf("formal arguments differ: (%s), (%s)", paste(a1, collapse = ", "), paste(a2,     collapse = ", "), domain = "R-methods")
#: R/Methods.R:0
msgid "formal arguments differ: (%s), (%s)"
msgstr "skiriasi formalieji parametrai: (%s), (%s)"

#. R/RMethodUtils.R: stop(.renderSignature(f, signature), "formal arguments in method and generic do not appear in the same order",     call. = FALSE)
#. R/RMethodUtils.R: stop(.renderSignature(generic@generic, signature), "formal arguments in method and generic do not appear in the same order",     call. = FALSE)
#: R/RMethodUtils.R:0
msgid "formal arguments in method and generic do not appear in the same order"
msgstr ""
"formalieji argumentai metode ir bendrinėje funkcijoje nėra pateikti tokia "
"pat tvarka"

#. R/RMethodUtils.R: gettext(" found on: %s; using the first one", domain = "R-methods")
#: R/RMethodUtils.R:0
#, fuzzy
msgid "found on: %s; using the first one"
msgstr "keli tiesioginiai atitikmenys: %s, naudojant pirmą iš šių"

#. R/Methods.R: gettextf("function %s appears to be a generic function, but with generic name %s",     sQuote(f), sQuote(gen))
#: R/Methods.R:0
msgid "function %s appears to be a generic function, but with generic name %s"
msgstr ""
"funkcija %s atrodo kaip bendrinė funkcija, tačiau su bendruoju vardu %s"

#. R/Methods.R: stop("function supplied as argument 'f' must be a generic")
#: R/Methods.R:0
msgid "function supplied as argument 'f' must be a generic"
msgstr "funkcija, kuri pateikta kaip argumentas 'f', turi būti bendrinė"

#. R/Methods.R: gettextf("generic function %s not found for removal", sQuote(f))
#: R/Methods.R:0
msgid "generic function %s not found for removal"
msgstr "nėra bendrinės funkcijos %s, kurią reikia pašalinti"

#. R/Methods.R: gettextf("generic function supplied was not created for %s", sQuote(name))
#: R/Methods.R:0
msgid "generic function supplied was not created for %s"
msgstr "pateikta bendrinė funkcija nebuvo sukurta %s"

#. R/Methods.R: gettextf("generic names differ: %s, %s", .dQ(f1@generic), .dQ(f2@generic), domain = "R-methods")
#: R/Methods.R:0
msgid "generic names differ: %s, %s"
msgstr "bendrieji vardai skiriasi: %s, %s"

#. R/RClassUtils.R: gettext("get rid of variables in definition %s (%s); they conflict with the needed change to argument names (%s)",     domain = "R-methods")
#: R/RClassUtils.R:0
msgid ""
"get rid of variables in definition %s (%s); they conflict with the needed "
"change to argument names (%s)"
msgstr ""

#. R/RMethodUtils.R: gettextf("getting generic '%s'", f)
#: R/RMethodUtils.R:0
msgid "getting generic '%s'"
msgstr ""

#. R/RMethodUtils.R: stop("got a negative maximum number of frames to look at")
#: R/RMethodUtils.R:0
msgid "got a negative maximum number of frames to look at"
msgstr "turite peržvelgti neigiamą maksimalų kadrų skaičių"

#. R/Methods.R: gettextf("groups differ: %s, %s", .dQ(gpString(f1@group)), .dQ(gpString(f2@group)),     domain = "R-methods")
#: R/Methods.R:0
msgid "groups differ: %s, %s"
msgstr "skiriasi grupės: %s, %s"

#. R/methodsTable.R: gettext(" have best ones", domain = "R-methods")
#: R/methodsTable.R:0
msgid "have best ones"
msgstr ""

#. R/Methods.R: gettextf("if the 'def' argument is supplied, it must be a function that calls standardGeneric(\"%s\") or is the default",     name)
#: R/Methods.R:0
msgid ""
"if the 'def' argument is supplied, it must be a function that calls "
"standardGeneric(\"%s\") or is the default"
msgstr ""
"jei pateiktas 'def' argumentas, tai turi būti funkcija, kuri iškviečia "
"standardGeneric(\"\"%s\"\") arba yra numatytoji"

#. R/RMethodUtils.R: gettext("in changing formal arguments in %s, some of the old names are not in fact arguments: %s",     domain = "R-methods")
#: R/RMethodUtils.R:0
msgid ""
"in changing formal arguments in %s, some of the old names are not in fact "
"arguments: %s"
msgstr ""
"keičiant formaliuosius argumentus, esančius %s, kai kurie seni vardai nėra "
"faktiniuose argumentuose: %s"

#. R/RClassUtils.R: gettext("in constructing the prototype for class %s, slots in prototype and not in class: %s",     domain = "R-methods")
#: R/RClassUtils.R:0
msgid ""
"in constructing the prototype for class %s, slots in prototype and not in "
"class: %s"
msgstr "konstruojant klasės %s prototipą, laukai prototipe ir ne klasėje: %s"

#. R/RClassUtils.R: gettextf("in constructing the prototype for class %s: prototype has class %s, but the data part specifies class %s",     dQuote(className), dQuote(.class1(prototype)), dQuote(dataPartClass))
#: R/RClassUtils.R:0
msgid ""
"in constructing the prototype for class %s: prototype has class %s, but the "
"data part specifies class %s"
msgstr ""
"konstruojant klasės %s prototipą: prototipas turi klasę %s, bet duomenų "
"dalis nurodo klasę %s"

#. R/RClassUtils.R: gettextf("in defining class %s, the supplied data part class, %s is not valid (must be a basic class or a virtual class combining basic classes)",     dQuote(name), dQuote(dataPartClass))
#: R/RClassUtils.R:0
msgid ""
"in defining class %s, the supplied data part class, %s is not valid (must be "
"a basic class or a virtual class combining basic classes)"
msgstr ""
"apibrėžiant klasę %s, pateikta duomenų dalies klasė %s nėra tinkama (turi "
"būti pagrindinė klasė arba virtuali klasė, derinant pagrindines klases)"

#. R/RClassUtils.R: gettextf("in definition of class %s, information for superclass %s is of class %s (expected \"SClassExtension\")",     dQuote(ClassDef@className), dQuote(what), dQuote(class(exti)))
#: R/RClassUtils.R:0
msgid ""
"in definition of class %s, information for superclass %s is of class %s "
"(expected \"SClassExtension\")"
msgstr ""
"klasės %s apibrėžime, viršklasio %s informacija yra klasės %s (turėtų būti "
"\"SClassExtension\")"

#. R/RClassUtils.R: gettext("in making the prototype for class %s elements of the prototype failed to match the corresponding slot class: %s",     domain = "R-methods")
#: R/RClassUtils.R:0
msgid ""
"in making the prototype for class %s elements of the prototype failed to "
"match the corresponding slot class: %s"
msgstr ""
"kuriant klasės %s elementų prototipo prototipą nepavyko suderinti "
"atitinkamos lauko klasės: %s"

#. R/oldClass.R: gettextf("inconsistent old-style class information for %s (maybe mixing old and new classes?)",     dQuote(cl))
#: R/oldClass.R:0
msgid ""
"inconsistent old-style class information for %s (maybe mixing old and new "
"classes?)"
msgstr ""
"nesuderinama seno stiliaus klasės informacija %s (galbūt sumaišomos senos ir "
"naujos klases?)"

#. R/oldClass.R: gettextf("inconsistent old-style class information for %s; the class is defined but does not extend %s and is not valid as the data part",     dQuote(cl), dQuote(prevClass))
#: R/oldClass.R:0
msgid ""
"inconsistent old-style class information for %s; the class is defined but "
"does not extend %s and is not valid as the data part"
msgstr ""
"nesuderinama seno stiliaus klasės informacija %s, klasė yra apibrėžta, bet "
"nepraplečia %s ir nėra tinkama kaip duomenų dalis"

#. R/zzz.R: gettext("initializing class and method definitions ...", domain = "R-methods")
#: R/zzz.R:0
msgid "initializing class and method definitions ..."
msgstr ""

#. R/RClassUtils.R: gettextf("initializing objects from class %s with these arguments is not supported",     dQuote(Class))
#: R/RClassUtils.R:0
msgid ""
"initializing objects from class %s with these arguments is not supported"
msgstr "objektų iniciavimas iš klasės %s su šiais argumentais nepalaikomas"

#. R/MethodsList.R: stop("inserting method corresponding to empty signature")
#: R/MethodsList.R:0
msgid "inserting method corresponding to empty signature"
msgstr "įterpiamas metodas, atitinkantis tuščią prierašą"

#. R/MethodsList.R: gettextf("inserting method into non-methods-list object (class %s)", dQuote(.class1(mlist)))
#: R/MethodsList.R:0
msgid "inserting method into non-methods-list object (class %s)"
msgstr "įterpiamas metodas į ne metodų sąrašo objektą (klasė %s)"

#. R/MethodsList.R: gettextf("inserting method with invalid signature matching argument '...' to class %s",     dQuote(signature[[1L]]))
#: R/MethodsList.R:0
msgid ""
"inserting method with invalid signature matching argument '...' to class %s"
msgstr ""
"įterpiamas metodas su neteisingu prierašu atitinkančiu argumentą '...' "
"klasėje %s"

#. R/RMethodUtils.R: gettextf("internal error: Bad methods list object in fixing methods for primitive function %s",     sQuote(f))
#: R/RMethodUtils.R:0
#, fuzzy
msgid ""
"internal error: Bad methods list object in fixing methods for primitive "
"function %s"
msgstr "%s aplinka yra užrakinta; negali priskirti metodų funkcijai %s"

#. R/SClasses.R: sprintf("internal error: definition of class %s not properly assigned", dQuote(Class))
#: R/SClasses.R:0
#, fuzzy
msgid "internal error: definition of class %s not properly assigned"
msgstr "nėra %s klasės apibrėžties"

#. R/Methods.R: sprintf("internal error: did not get a valid generic function object for function %s",     sQuote(f))
#: R/Methods.R:0
#, fuzzy
msgid ""
"internal error: did not get a valid generic function object for function %s"
msgstr "Bendrinės funkcijos kūrimas iš funkcijos %s esančios %s"

#. R/as.R: sprintf("internal problem in 'as()' function: %s is(object, \"%s\") is TRUE, but the metadata asserts that the 'is' relation is FALSE",     dQuote(thisClass), Class)
#: R/as.R:0
msgid ""
"internal problem in 'as()' function: %s is(object, \"%s\") is TRUE, but the "
"metadata asserts that the 'is' relation is FALSE"
msgstr ""

#. R/refClass.R: stop("invalid 'Class' argument:  should be a single string")
#: R/refClass.R:0
msgid "invalid 'Class' argument:  should be a single string"
msgstr "neteisingas 'Class' argumentas: turėtų būti viena eilutė"

#. R/show.R: gettextf("invalid 'ignore' argument; should be a class definition or a character vector, got an object of class %s",     dQuote(class(ignore)))
#: R/show.R:0
msgid ""
"invalid 'ignore' argument; should be a class definition or a character "
"vector, got an object of class %s"
msgstr ""
"neteisingas 'ignore' argumentas, turėtų būti klasės apibrėžtis arba "
"tekstinis vektorius, gaunamas klasės %s objektas"

#. R/MethodsList.R: stop("invalid 'package' slot or attribute, wrong length")
#: R/MethodsList.R:0
msgid "invalid 'package' slot or attribute, wrong length"
msgstr "neteisingas 'package' laukas ar atributas, klaidingas ilgis"

#. R/trace.R: gettextf("invalid 'source' argument: expected file names or a connection but got an object of class %s",     dQuote(class(source)[[1L]]))
#: R/trace.R:0
msgid ""
"invalid 'source' argument: expected file names or a connection but got an "
"object of class %s"
msgstr ""
"neteisingas 'source' argumentas: turėtų būti failo vardai ar ryšiai, bet yra "
"klasės %s objektas"

#. R/oldClass.R: gettext("invalid S4 class corresponding to S3 class: slots in  S4 version must extend corresponding slots in S3 version: fails for %s",     domain = "R-methods")
#: R/oldClass.R:0
msgid ""
"invalid S4 class corresponding to S3 class: slots in  S4 version must extend "
"corresponding slots in S3 version: fails for %s"
msgstr ""
"neteisinga S4 klasė atitinkanti S3 klasę: laukai S4 versijoje turi praplėsti "
"laukus S3 versijoje: klaida %s"

#. R/Methods.R: gettextf("invalid argument 'name': %s", .isSingleName(name))
#: R/Methods.R:0
msgid "invalid argument 'name': %s"
msgstr "neteisingas argumentas 'name': %s"

#. R/refClass.R: gettextf("invalid assignment for reference class field %s, should be from class %s or a subclass (was class %s)",     sQuote(fieldName), dQuote(fieldClass), dQuote(class(value)))
#: R/refClass.R:0
msgid ""
"invalid assignment for reference class field %s, should be from class %s or "
"a subclass (was class %s)"
msgstr ""
"neteisingas priskyrimas referencinės klasės laukui %s, turėtų būti iš klasės "
"%s arba poklasio (buvo klasė %s)"

#. R/RMethodUtils.R: gettextf("invalid call in method dispatch to '%s' (no default method)", name)
#: R/RMethodUtils.R:0
msgid "invalid call in method dispatch to '%s' (no default method)"
msgstr "neteisingas kreipinys metodo perdavime į '%s' (nėra numatytojo metodo)"

#. R/show.R: gettextf("invalid call passed to 'classLabel': expected a name or a class definition, got an object of class %s",     classLabel(class(Class)))
#: R/show.R:0
#, fuzzy
msgid ""
"invalid call passed to 'classLabel': expected a name or a class definition, "
"got an object of class %s"
msgstr ""
"neteisingas kreipinys į 'classLabel': turėtų būti vardas arba klasės "
"apibrėžtis, gaunamas klasės %s objektas"

#. R/SClasses.R: gettextf("invalid class %s object:", dQuote(Class), domain = "R-methods")
#. R/SClasses.R: gettextf("invalid class %s object:", dQuote(Class), domain = "R-methods")
#: R/SClasses.R:0
#, fuzzy
msgid "invalid class %s object:"
msgstr "neteisingas klasės %s objektas"

#. R/MethodsList.R: gettextf("invalid element in a list for \"signature\" argument; element %d is neither a class definition nor a class name",     i)
#: R/MethodsList.R:0
msgid ""
"invalid element in a list for \"signature\" argument; element %d is neither "
"a class definition nor a class name"
msgstr ""
"neteisingas elementas \"signature\" argumento sąraše, elementas %d nėra nei "
"klasės apibrėžtis, nei klasės vardas"

#. R/RMethodUtils.R: gettextf("invalid element in the \"groupMembers\" slot (class %s)", dQuote(class(x)))
#: R/RMethodUtils.R:0
msgid "invalid element in the \"groupMembers\" slot (class %s)"
msgstr "neteisingas elementas \"groupMembers\" lauke (klasė %s)"

#. R/MethodsList.R: stop("invalid first argument: should be the name of the first argument in the dispatch")
#: R/MethodsList.R:0
msgid ""
"invalid first argument: should be the name of the first argument in the "
"dispatch"
msgstr ""
"neteisingas pirmas argumentas: perdavime turėtų būti pirmo argumento vardas"

#. R/methodsTable.R: gettextf("invalid group generic function in search for inherited method (class %s)",     dQuote(class(gen)))
#: R/methodsTable.R:0
msgid ""
"invalid group generic function in search for inherited method (class %s)"
msgstr ""
"neteisinga grupės bendrinė funkcija ieškant paveldėto metodo (klasė %s)"

#. R/languageEl.R: stop("invalid index for function argument")
#: R/languageEl.R:0
msgid "invalid index for function argument"
msgstr "neteisinga funkcijos argumento rodyklė"

#. R/Methods.R: gettextf("invalid method definition: expected a function, got an object of class %s",     dQuote(class(definition)))
#: R/Methods.R:0
msgid ""
"invalid method definition: expected a function, got an object of class %s"
msgstr ""
"neteisinga metodo apibrėžtis: turėtų būti funkcija, gautas klasės %s objektas"

#. R/MethodsList.R: stop("invalid method sublist")
#: R/MethodsList.R:0
msgid "invalid method sublist"
msgstr "neteisingas metodo posąrašis"

#. R/methodsTable.R: stop("invalid methods table request")
#: R/methodsTable.R:0
msgid "invalid methods table request"
msgstr "neteisinga metodų lentelės užklausa"

#. R/methodsTable.R: gettextf("invalid mlist element for signature %s at level %d (should be MethodDefinition or .Primitive, had class %s)",     sQuote(classes[[j]]), i, dQuote(class(el)))
#: R/methodsTable.R:0
msgid ""
"invalid mlist element for signature %s at level %d (should be "
"MethodDefinition or .Primitive, had class %s)"
msgstr ""
"neteisingas mlist elementas prierašui %s lygyje %d (turėtų būti "
"MethodDefinition arba .Primitive, turi klasę %s)"

#. R/MethodsListClass.R: gettextf("invalid object for formal method definition: type %s", dQuote(typeof(def)))
#: R/MethodsListClass.R:0
msgid "invalid object for formal method definition: type %s"
msgstr "neteisingas objektas formaliam metodo apibrėžimui: tipas %s"

#. R/SClasses.R: gettextf("invalid object for slot '%s' in class \"%s\": got class \"%s\", should be or extend class \"%s\"",     slotNames[[i]], Class, class(sloti)[[1L]], classi)
#: R/SClasses.R:0
#, fuzzy
msgid ""
"invalid object for slot '%s' in class \"%s\": got class \"%s\", should be or "
"extend class \"%s\""
msgstr "laukas %s: klasė %s turi praplėsti klasę %s"

#. R/methodsTable.R: gettextf("invalid object in meta table of methods for %s, label %s, had class %s",     sQuote(generic@generic), sQuote(what), dQuote(class(obj)))
#: R/methodsTable.R:0
msgid "invalid object in meta table of methods for %s, label %s, had class %s"
msgstr ""
"neteisingas objektas metodų meta lentelėje %s, žymei %s, turėjo klasę %s"

#. R/methodsTable.R: gettextf("invalid object in methods table (%s), expected a method, got an object of class %s",     sQuote(what), dQuote(class(method)))
#: R/methodsTable.R:0
msgid ""
"invalid object in methods table (%s), expected a method, got an object of "
"class %s"
msgstr ""
"neteisingas objektas metodų lentelėje (%s), turėtų būti metodas, gautas "
"klasės %s objektas"

#. R/methodsTable.R: gettextf("invalid or unset methods table in generic function %s", sQuote(fdef@generic))
#: R/methodsTable.R:0
msgid "invalid or unset methods table in generic function %s"
msgstr "neteisinga arba nenustatyta metodų lentelė bendrinėje funkcijoje %s"

#. R/refClass.R: gettextf("invalid replacement: reference class field %s is read-only", sQuote(fieldName))
#: R/refClass.R:0
msgid "invalid replacement: reference class field %s is read-only"
msgstr ""
"neteisingas pakeitimas: referencinės klasės laukas %s skirtas tik skaityti"

#. R/RMethodUtils.R: gettextf("invalid value from generic function %s, class %s, expected one of %s",     sQuote(fname), dQuote(class(object)), paste(dQuote(classes), collapse = ", "))
#: R/RMethodUtils.R:0
#, fuzzy
msgid "invalid value from generic function %s, class %s, expected one of %s"
msgstr "neteisinga bendrinės funkcijos %s, klasės %s, reikšmė, turėtų būti %s"

#. R/refClass.R: gettextf("local assignment to field name will not change the field:\n    %s\n Did you mean to use \"<<-\"? ( in method %s for class %s)",     paste(unlist(assigned$locals)[localsAreFields], collapse = "; "), methodName,     className)
#: R/refClass.R:0
msgid ""
"local assignment to field name will not change the field:\n"
"    %s\n"
" Did you mean to use \"<<-\"? ( in method %s for class %s)"
msgstr ""
"vietos priskyrimas lauko vardui nepakeis lauko:\n"
"%s\n"
"Norėjote naudoti \"<<-\"? ( metode %s klasei %s)"

#. R/RMethodUtils.R: gettextf("making a generic for special function %s", sQuote(f), domain = "R-methods")
#: R/RMethodUtils.R:0
msgid "making a generic for special function %s"
msgstr "sukurti bendrinę specialiajai funkcijai %s"

#. R/trace.R: warning("making a traced version of a special; arguments may be altered")
#: R/trace.R:0
msgid "making a traced version of a special; arguments may be altered"
msgstr ""
"darant atsekamą specialiosios versijos variantą; argumentai gali būti "
"pakeisti"

#. R/debug.R: warning("method is not being debugged")
#: R/debug.R:0
msgid "method is not being debugged"
msgstr "metodas nėra derinamas"

#. R/RMethodUtils.R: gettextf("methods can add arguments to the generic %s only if '...' is an argument to the generic",     sQuote(generic@generic))
#: R/RMethodUtils.R:0
msgid ""
"methods can add arguments to the generic %s only if '...' is an argument to "
"the generic"
msgstr ""
"metodai gali pridėti argumentus į bendrinę %s tik jei '...' yra bendrinės "
"funkcijos argumentas"

#. R/as.R: gettextf("methods currently exist for coercing from %s to %s; they will be replaced.",     dQuote(from), dQuote(to))
#: R/as.R:0
msgid ""
"methods currently exist for coercing from %s to %s; they will be replaced."
msgstr "šiuo metu egzistuoja metodai perversti iš %s į %s, jie bus pakeisti."

#. R/refClass.R: gettext("methods declared in usingMethods() but not found: %s", domain = "R-methods")
#: R/refClass.R:0
msgid "methods declared in usingMethods() but not found: %s"
msgstr "metodai aprašyti usingMethods(), tačiau nerasti: %s"

#. R/BasicFunsList.R: gettextf("methods may not be defined for primitive function %s in this version of R",     sQuote(f))
#: R/BasicFunsList.R:0
msgid ""
"methods may not be defined for primitive function %s in this version of R"
msgstr "šioje R versijoje negalima apibrėžti primityvios funkcijos %s metodų"

#. R/Defunct.R: stop("methods:::bind_activation() is defunct;\n rather provide methods for cbind2() / rbind2()")
#: R/Defunct.R:0
msgid ""
"methods:::bind_activation() is defunct;\n"
" rather provide methods for cbind2() / rbind2()"
msgstr ""
"methods:::bind_activation() yra nebenaudojamas;\n"
" geriau pateikti metodus cbind2() / rbind2()"

#. R/RMethodUtils.R: gettextf("missing function for load action: %s", what)
#: R/RMethodUtils.R:0
msgid "missing function for load action: %s"
msgstr "įkėlimo veiksme trūksta funkcijos: %s"

#. R/MethodsListClass.R: gettextf("missing package slot (%s) in object of class %s (package info added)",     packageSlot(co), dQuote(class(.Object)))
#: R/MethodsListClass.R:0
msgid "missing package slot (%s) in object of class %s (package info added)"
msgstr ""
"trūksta paketo lauko (%s) klasės %s objekte (pridėta paketo informacija)"

#. R/MethodsList.R: gettextf("more elements in the method signature (%d) than in the generic signature (%d) for function %s",     length(signature), length(anames), sQuote(fun@generic))
#: R/MethodsList.R:0
msgid ""
"more elements in the method signature (%d) than in the generic signature "
"(%d) for function %s"
msgstr ""
"daugiau elementų metodo prieraše (%d) negu bendriniame prieraše (%d) "
"funkcijai %s"

#. R/RClassUtils.R: gettextf("more than one possible class for the data part: using %s rather than %s",     .dQ(prevDataPartClass), .dQ(value))
#: R/RClassUtils.R:0
msgid "more than one possible class for the data part: using %s rather than %s"
msgstr "daugiau negu viena galima klasė duomenų dalyje: naudojant %s, o ne %s"

#. R/SClasses.R: gettext("multiple class definitions for class %s from packages: %s; picking the first",     domain = "R-methods")
#: R/SClasses.R:0
#, fuzzy
msgid ""
"multiple class definitions for class %s from packages: %s; picking the first"
msgstr "kelių klasių apibrėžtys %s iš paketų: %s, pasirenkant pirmą"

#. R/RMethodUtils.R: gettext("multiple definitions exist for class %s, but the supplied package (%s) is not one of them (%s)",     domain = "R-methods")
#: R/RMethodUtils.R:0
msgid ""
"multiple definitions exist for class %s, but the supplied package (%s) is "
"not one of them (%s)"
msgstr ""
"yra kelios klasės %s apibrėžtys, tačiau pateiktas paketas (%s) nėra viena iš "
"jų (%s)"

#. R/RMethodUtils.R: gettext("multiple definitions exist for class %s; should specify one of them (%s), e.g. by className()",     domain = "R-methods")
#: R/RMethodUtils.R:0
msgid ""
"multiple definitions exist for class %s; should specify one of them (%s), e."
"g. by className()"
msgstr ""
"yra kelios klasės %s apibrėžtys, turėtumėte nurodyti vieną iš jų (%s), "
"pavyzdžiui, pagal className()"

#. R/promptClass.R: gettextf("multiple definitions of %s found; using the one on %s", dQuote(clName),     whereClass)
#: R/promptClass.R:0
msgid "multiple definitions of %s found; using the one on %s"
msgstr "rastos %s kelios apibrėžtys, naudojant vieną %s"

#. R/RMethodUtils.R: gettextf("multiple direct matches: %s; using the first of these", .pasteC(classes))
#: R/RMethodUtils.R:0
msgid "multiple direct matches: %s; using the first of these"
msgstr "keli tiesioginiai atitikmenys: %s, naudojant pirmą iš šių"

#. R/RMethodUtils.R: gettextf("multiple equivalent inherited matches: %s; using the first of these", .pasteC(classes))
#: R/RMethodUtils.R:0
msgid "multiple equivalent inherited matches: %s; using the first of these"
msgstr "keli ekvivalentūs paveldėti atitikmenys: %s, naudojant pirmą iš šių"

#. R/trace.R: gettextf("multiple generics match pattern, using table %s", table)
#: R/trace.R:0
msgid "multiple generics match pattern, using table %s"
msgstr "kelios bendrinės atitinka šabloną, naudojant lentelę %s"

#. R/Methods.R: gettextf("must provide an environment table; got class %s", dQuote(class(what)))
#: R/Methods.R:0
msgid "must provide an environment table; got class %s"
msgstr "privalo pateikti aplinkos lentelę, gauta klasė %s"

#. R/Methods.R: gettextf("must supply a function skeleton for %s, explicitly or via an existing function",     sQuote(name))
#: R/Methods.R:0
msgid ""
"must supply a function skeleton for %s, explicitly or via an existing "
"function"
msgstr ""
"privalo teikti funkcijos struktūrą %s, aiškiai arba per egzistuojančią "
"funkciją"

#. R/RMethodUtils.R: gettextf("must supply either a generic function or a function as default for %s",     sQuote(f))
#: R/RMethodUtils.R:0
msgid "must supply either a generic function or a function as default for %s"
msgstr "turi pateikti arba bendrinę funkciją arba funkciją kaip numatytąją %s"

#. R/method.skeleton.R: stop("need a definition for the method here")
#: R/method.skeleton.R:0
msgid "need a definition for the method here"
msgstr "reikia apibrėžti metodą"

#. R/RClassUtils.R: gettextf("needed the supplied labels vector of length %d, got %d", length(nodes),     length(short))
#: R/RClassUtils.R:0
msgid "needed the supplied labels vector of length %d, got %d"
msgstr "reikalingas pateiktų žymenų vektorius, kurio ilgis %d, gaunamas %d"

#. R/RClassUtils.R: gettextf("no '.Data' slot defined for class %s", dQuote(class(object)))
#: R/RClassUtils.R:0
msgid "no '.Data' slot defined for class %s"
msgstr "nėra apibrėžtas '.Data' laukas klasei %s"

#. R/ClassExtensions.R: gettextf("no 'replace' method was defined for 'as(x, \"%s\") <- value' for class %s",     to, dQuote(class(from)))
#: R/ClassExtensions.R:0
msgid ""
"no 'replace' method was defined for 'as(x, \"%s\") <- value' for class %s"
msgstr "neapibrėžtas 'replace' metodas 'as(x, \"%s\") <- value' klasei %s"

#. R/Methods.R: gettext("no applicable functions", domain = "R-methods")
#: R/Methods.R:0
#, fuzzy
msgid "no applicable functions"
msgstr "ne abi funkcijos!"

#. R/trace.R: gettextf("no definition for object %s found in tracing environment", sQuote(what),     source)
#: R/trace.R:0
msgid "no definition for object %s found in tracing environment"
msgstr "nėra apibrėžties objektui %s sekimo aplinkoje"

#. R/fixPrevious.R: gettextf("no definition for the class of %s (class %s) found", sQuote(what), dQuote(class))
#: R/fixPrevious.R:0
msgid "no definition for the class of %s (class %s) found"
msgstr "nerasta klasės %s apibrėžties (klasė %s)"

#. R/RMethodUtils.R: gettextf("no definition found for class %s", dQuote(classi), domain = "R-methods")
#: R/RMethodUtils.R:0
msgid "no definition found for class %s"
msgstr "nėra klasės %s apibrėžties"

#. R/refClass.R: gettext("no definition found for inherited class: %s", domain = "R-methods")
#: R/refClass.R:0
msgid "no definition found for inherited class: %s"
msgstr "nėra paveldėtos klasės apibrėžties: %s"

#. R/SClasses.R: gettextf("no definition of %s to use for %s", dQuote(Class), unique)
#: R/SClasses.R:0
msgid "no definition of %s to use for %s"
msgstr "nėra %s apibrėžties naudojamos %s"

#. R/promptClass.R: gettextf("no definition of class %s found", dQuote(clName))
#: R/promptClass.R:0
msgid "no definition of class %s found"
msgstr "nėra %s klasės apibrėžties"

#. R/RClassUtils.R: gettextf("no definition of inheritance from %s to %s, though the relation was implied by the setIs() from %s",     .dQ(what), .dQ(def2@className), .dQ(class))
#: R/RClassUtils.R:0
msgid ""
"no definition of inheritance from %s to %s, though the relation was implied "
"by the setIs() from %s"
msgstr ""
"nėra paveldėjimo iš %s į %s apibrėžimo, nors ryšys buvo numatytas setIs() iš "
"%s"

#. R/RClassUtils.R: gettextf("no definition was found for superclass %s in the specification of class %s",     dQuote(cl), dQuote(name))
#: R/RClassUtils.R:0
msgid ""
"no definition was found for superclass %s in the specification of class %s"
msgstr "nėra viršklasio %s apibrėžties klasės %s specifikacijoje"

#. R/Methods.R: gettext("  no direct match found to signature (%s)", domain = "R-methods")
#: R/Methods.R:0
#, fuzzy
msgid "no direct match found to signature (%s)"
msgstr "nėra prierašo %s metodo"

#. R/Methods.R: gettextf("no environment or package corresponding to argument where=%s", deparse(where))
#: R/Methods.R:0
msgid "no environment or package corresponding to argument where=%s"
msgstr "nėra aplinkos ar paketo atitinkančio argumentą where=%s"

#. R/Methods.R: gettextf("no existing definition for function %s", sQuote(f))
#: R/Methods.R:0
msgid "no existing definition for function %s"
msgstr "nėra esamos funkcijos %s apibrėžties"

#. R/addedFunctions.R: gettextf("no function %s found", sQuote(name))
#: R/addedFunctions.R:0
msgid "no function %s found"
msgstr "funkcijos %s nėra"

#. R/trace.R: gettextf("no function definition for %s found", sQuote(what))
#: R/trace.R:0
msgid "no function definition for %s found"
msgstr "nėra funkcijos apibrėžties %s"

#. R/method.skeleton.R: gettextf("no function definition found for %s", sQuote(generic))
#: R/method.skeleton.R:0
msgid "no function definition found for %s"
msgstr "nėra funkcijos apibrėžties %s"

#. R/Methods.R: gettextf("no generic function %s found", sQuote(f))
#. R/Methods.R: gettextf("no generic function %s found", sQuote(f))
#. R/Methods.R: gettextf("no generic function %s found", sQuote(f))
#: R/Methods.R:0
msgid "no generic function %s found"
msgstr "nerasta bendrinės funkcijos %s"

#. R/MethodsList.R: gettextf("no generic function found corresponding to %s", sQuote(f))
#: R/MethodsList.R:0
msgid "no generic function found corresponding to %s"
msgstr "nerasta bendrinės funkcijos atitinkančios %s"

#. R/Methods.R: gettextf("no generic function found for %s", sQuote(f))
#. R/RMethodUtils.R: gettextf("no generic function found for %s", sQuote(f))
#: R/Methods.R:0 R/RMethodUtils.R:0
msgid "no generic function found for %s"
msgstr "nerasta bendrinės funkcijos %s"

#. R/Methods.R: gettextf("no generic version of %s on package %s is allowed; a new generic will be assigned for package %s",     sQuote(name), sQuote(package), sQuote(thisPackage))
#: R/Methods.R:0
#, fuzzy
msgid ""
"no generic version of %s on package %s is allowed; a new generic will be "
"assigned for package %s"
msgstr ""
"negalima bendrinės %s versija pakete %s;\n"
"nauja bendrinė bus priskirta %s"

#. R/Methods.R: gettextf("no generic version of %s on package %s is allowed; a new generic will be assigned for the global environment",     sQuote(name), sQuote(package))
#: R/Methods.R:0
#, fuzzy
msgid ""
"no generic version of %s on package %s is allowed; a new generic will be "
"assigned for the global environment"
msgstr ""
"negalima bendrinės %s versija pakete %s;\n"
"nauja bendrinė bus priskirta %s"

#. R/Methods.R: gettextf("no method for %s matches class %s", sQuote("..."), dQuote(signature))
#: R/Methods.R:0
msgid "no method for %s matches class %s"
msgstr "nėra metodo %s, kuris atitinka klasę %s"

#. R/Methods.R: gettext("no method found for function %s and signature %s", domain = "R-methods")
#: R/Methods.R:0
msgid "no method found for function %s and signature %s"
msgstr "nėra funkcijos %s ir prierašo %s metodo"

#. R/Methods.R: gettext("no method found for function '%s' and signature %s", domain = "R-methods")
#: R/Methods.R:0
msgid "no method found for function '%s' and signature %s"
msgstr "nėra funkcijos '%s' ir prierašo %s metodo"

#. R/Methods.R: gettextf("no method found for signature %s", paste(signature, collapse = ", "), domain = "R-methods")
#: R/Methods.R:0
msgid "no method found for signature %s"
msgstr "nėra prierašo %s metodo"

#. R/trace.R: gettextf("no method in methods table for %s for signature %s", sQuote(what), sQuote(signature))
#: R/trace.R:0
msgid "no method in methods table for %s for signature %s"
msgstr "nėra metodo metodų lentelėje %s prierašui %s"

#. R/as.R: gettextf("no method or default for 'as()' function replacement of %s with class=\"%s\"",     dQuote(thisClass), Class)
#: R/as.R:0
#, fuzzy
msgid ""
"no method or default for 'as()' function replacement of %s with class=\"%s\""
msgstr ""
"nėra metodo ar numatytojo parametro dėl as() pakeitimo %s su Class=\"%s\""

#. R/RMethodUtils.R: gettextf("no method or default matching the \"...\" arguments in %s", deparse(sys.call(sys.parent()),     nlines = 1))
#: R/RMethodUtils.R:0
msgid "no method or default matching the \"...\" arguments in %s"
msgstr "nėra metodo ar atitikimo \"...\" argumentams, esantiems %s"

#. R/as.R: gettextf("no method or default scheme for coercing %s to %s", dQuote(thisClass),     dQuote(Class))
#: R/as.R:0
#, fuzzy
msgid "no method or default scheme for coercing %s to %s"
msgstr "nėra metodo ar numatytojo parametro paversti %s į %s"

#. R/RMethodUtils.R: gettextf("no methods found for %s; cacheGenericsMetaData() will have no effect",     sQuote(f))
#: R/RMethodUtils.R:0
msgid "no methods found for %s; cacheGenericsMetaData() will have no effect"
msgstr "%s metodų nerasta; cacheGenericsMetaData() neturės jokio poveikio"

#. R/methodsTable.R: gettextf("no methods table for generic %s from package %s in package %s", sQuote(generic@generic),     sQuote(generic@package), sQuote(getPackageName(where)))
#: R/methodsTable.R:0
msgid "no methods table for generic %s from package %s in package %s"
msgstr "nėra metodų lentelės bendrinei %s iš paketo %s pakete %s"

#. R/addedFunctions.R: gettextf("no non-generic function %s found", sQuote(name))
#: R/addedFunctions.R:0
msgid "no non-generic function %s found"
msgstr "nėra nebendrinės funkcijos %s"

#. R/SClasses.R: gettextf("no package name supplied and no class definition found for class %s", dQuote(className))
#: R/SClasses.R:0
#, fuzzy
msgid "no package name supplied and no class definition found for class %s"
msgstr "nėra paketo vardo ir klasės %s apibrėžimo"

#. R/RMethodUtils.R: stop("no suitable arguments to dispatch methods in this function")
#. R/RMethodUtils.R: stop("no suitable arguments to dispatch methods in this function")
#: R/RMethodUtils.R:0
msgid "no suitable arguments to dispatch methods in this function"
msgstr "nėra tinkamų argumentų perduoti metodus šioje funkcijoje"

#. R/RMethodUtils.R: gettext("non-empty string; got \"\"")
#: R/RMethodUtils.R:0
msgid "non-empty string; got \"\""
msgstr ""

#. R/RMethodUtils.R: gettextf("non-function action: %s", sQuote(fname))
#: R/RMethodUtils.R:0
msgid "non-function action: %s"
msgstr "ne funkcinis veiksmas: %s"

#. R/Methods.R: gettextf("non-generic function '%s' given to findMethods()", f)
#: R/Methods.R:0
msgid "non-generic function '%s' given to findMethods()"
msgstr "nebendrinė funkcija '%s' perduota findMethods()"

#. R/refClass.R: gettextf("non-local assignment to method names is not allowed\n    %s\n( in method %s for class %s)",     paste(unlist(assigned$globals)[globalsInMethods], collapse = "; "), methodName,     className)
#: R/refClass.R:0
msgid ""
"non-local assignment to method names is not allowed\n"
"    %s\n"
"( in method %s for class %s)"
msgstr ""
"nevietinis priskyrimas į metodo vardus nėra leidžiamas\n"
"%s\n"
"(metode %s klasei %s )"

#. R/refClass.R: gettextf("non-local assignment to non-field names (possibly misspelled?)\n    %s\n( in method %s for class %s)",     paste(unlist(assigned$globals)[globalsNotFields], collapse = "; "), methodName,     className)
#: R/refClass.R:0
msgid ""
"non-local assignment to non-field names (possibly misspelled?)\n"
"    %s\n"
"( in method %s for class %s)"
msgstr ""
"nevietinis priskyrimas laukų neturintiems vardams (galbūt parašyta su "
"klaidomis?)\n"
"%s\n"
"(metode %s klasei %s )"

#. R/trace.R: stop("none of the objects in the source code could be found:  need to attach or specify the package")
#: R/trace.R:0
msgid ""
"none of the objects in the source code could be found:  need to attach or "
"specify the package"
msgstr ""
"nerastas joks objektas pirminiame programos kode: reikia pridėti arba "
"nurodyti paketą"

#. R/refClass.R: gettextf("not a reference class: %s", ClassDef@name)
#. R/refClass.R: gettextf("not a reference class: %s", ClassDef@name)
#: R/refClass.R:0
msgid "not a reference class: %s"
msgstr "ne referencinė klasė: %s"

#. R/oldClass.R: stop("not allowed to have test==TRUE and an S4Class definition")
#: R/oldClass.R:0
msgid "not allowed to have test==TRUE and an S4Class definition"
msgstr "negali būti test==TRUE ir S4Class apibrėžtis"

#. R/Methods.R: gettext("not both functions!", domain = "R-methods")
#: R/Methods.R:0
msgid "not both functions!"
msgstr "ne abi funkcijos!"

#. R/fixPrevious.R: gettextf("object %s not changed (it does not appear to be from a version of R earlier than 1.8.0)",     sQuote(what))
#: R/fixPrevious.R:0
msgid ""
"object %s not changed (it does not appear to be from a version of R earlier "
"than 1.8.0)"
msgstr ""
"objektas %s nepakeistas (neatrodo, kad jis būtų R ankstesnėje nei 1.8.0 "
"versijoje)"

#. R/fixPrevious.R: gettextf("object %s not changed (it is not consistent with the current definition of class %s from %s)",     sQuote(what), dQuote(Class), sQuote(ClassDef@package))
#: R/fixPrevious.R:0
msgid ""
"object %s not changed (it is not consistent with the current definition of "
"class %s from %s)"
msgstr ""
"objektas %s nepakeistas (jis neatitinka dabartinio klasės %s apibrėžimo iš "
"%s)"

#. R/fixPrevious.R: gettextf("object %s was not found", sQuote(what))
#: R/fixPrevious.R:0
#, fuzzy
msgid "object %s was not found"
msgstr "objektas %s nerastas"

#. R/BasicClasses.R: gettextf("object must be a valid data part for class %s; not true of type %s", dQuote(cl),     dQuote(class(data)))
#: R/BasicClasses.R:0
msgid "object must be a valid data part for class %s; not true of type %s"
msgstr ""
"objektas turi būti galiojanti duomenų dalis klasei %s, neteisingas %s tipas"

#. R/MethodsList.R: gettextf("object to use as a method signature for function %s does not look like a legitimate signature (a vector of single class names): there were %d class names, but %d elements in the signature object",     sQuote(fun@generic), length(sigClasses), length(signature))
#: R/MethodsList.R:0
msgid ""
"object to use as a method signature for function %s does not look like a "
"legitimate signature (a vector of single class names): there were %d class "
"names, but %d elements in the signature object"
msgstr ""
"objektas naudojamas kaip metodo prierašas funkcijai %s, nėra leistinas "
"prierašas (atskiros klasės vardų vektorius): %d klasės vardai, bet %d "
"elementai prierašo objekte"

#. R/trace.R: gettext("objects found in multiple packages: using %s and ignoring %s", domain = "R-methods")
#: R/trace.R:0
msgid "objects found in multiple packages: using %s and ignoring %s"
msgstr "objektai rasti keliuose paketuose, naudojant %s ir ignoruojant %s"

#. R/Methods.R: gettextf("only FALSE is meaningful for 'inherited', when 'where' is supplied (got %s)",     inherited)
#: R/Methods.R:0
msgid ""
"only FALSE is meaningful for 'inherited', when 'where' is supplied (got %s)"
msgstr "tik FALSE yra reikšminga 'inherited', kai pateikta 'where' (yra %s)"

#. R/SClasses.R: stop("only arguments 'Class' and 'where' can be supplied when argument 'representation' is a \"classRepresentation\" object")
#: R/SClasses.R:0
#, fuzzy
msgid ""
"only arguments 'Class' and 'where' can be supplied when argument "
"'representation' is a \"classRepresentation\" object"
msgstr ""
"tik argumentai 'Class' ir 'where' gali būti pateikti kai argumentas "
"'representation' yra 'classRepresentation' objektas"

#. R/SClasses.R: stop("only one data object (unnamed argument passed to 'prototype()' function) allowed")
#: R/SClasses.R:0
#, fuzzy
msgid ""
"only one data object (unnamed argument passed to 'prototype()' function) "
"allowed"
msgstr "leidžiamas tik duomenų objektas (neįvardytas argumentas prototipui)"

#. R/Methods.R: gettext("original function is prohibited as a generic function", domain = "R-methods")
#: R/Methods.R:0
msgid "original function is prohibited as a generic function"
msgstr "pradinė funkcija draudžiama kaip bendrinė funkcija"

#. R/trace.R: gettextf("package %s is not attached and no namespace found for it", sQuote(package))
#: R/trace.R:0
msgid "package %s is not attached and no namespace found for it"
msgstr "paketas %s nepridėtas ir jo vardų erdvė nerasta"

#. R/methodsTable.R: gettext("package slot missing from signature for generic %s\n and classes %s\ncannot use with duplicate class names (the package may need to be re-installed)",     domain = "R-methods")
#: R/methodsTable.R:0
msgid ""
"package slot missing from signature for generic %s\n"
" and classes %s\n"
"cannot use with duplicate class names (the package may need to be re-"
"installed)"
msgstr ""

#. R/Methods.R: gettextf("package slots  differ: %s, %s", .dQ(gpString(f1@package)), .dQ(gpString(f2@package)),     domain = "R-methods")
#: R/Methods.R:0
msgid "package slots  differ: %s, %s"
msgstr "paketo laukai skiriasi: %s, %s"

#. R/RClassUtils.R: gettext("potential cycle in class inheritance: %s has duplicates in superclasses and subclasses (%s)",     domain = "R-methods")
#: R/RClassUtils.R:0
msgid ""
"potential cycle in class inheritance: %s has duplicates in superclasses and "
"subclasses (%s)"
msgstr ""
"galimas ciklas klasės paveldėjime: %s turi dublikatus viršklasiuose ir "
"poklasiuose (%s)"

#. R/Methods.R: stop("primitive functions cannot be methods; they must be enclosed in a regular function")
#: R/Methods.R:0
msgid ""
"primitive functions cannot be methods; they must be enclosed in a regular "
"function"
msgstr ""
"primityvios funkcijos negali būti metodai, jos turi būti uždaros "
"reguliariojoje funkcijoje"

#. R/RClassUtils.R: warning("prototype is a list with named elements (could be ambiguous): better to use function 'prototype()' to avoid trouble.")
#: R/RClassUtils.R:0
#, fuzzy
msgid ""
"prototype is a list with named elements (could be ambiguous): better to use "
"function 'prototype()' to avoid trouble."
msgstr ""
"prototipas sąraše su įvardytais elementais (gali būti dviprasmiškas): geriau "
"naudoti funkciją prototype() norint išvengti problemų."

#. R/ClassExtensions.R: gettextf("replacement value must be of class %s, got one of class %s", dQuote(CLASS),     dQuote(class(value)[[1L]]))
#: R/ClassExtensions.R:0
msgid "replacement value must be of class %s, got one of class %s"
msgstr "pakeitimo reikšmė turi būti %s klasės, yra viena iš %s klasės"

#. R/ClassExtensions.R: gettextf("replacement value must extend class %s, got %s", dQuote(needClass), dQuote(S3Class[[1L]]))
#: R/ClassExtensions.R:0
msgid "replacement value must extend class %s, got %s"
msgstr "pakeitimo reikšmė turi praplėsti klasę %s, yra %s"

#. R/oldClass.R: gettextf("restoring definition of class %s", dQuote(cl))
#: R/oldClass.R:0
msgid "restoring definition of class %s"
msgstr "atkuriama klasės %s apibrėžtis"

#. R/Methods.R: stop("selectMethod(): mlist is not an environment or NULL :\n** should no longer happen!",     domain = "R-methods")
#: R/Methods.R:0
msgid ""
"selectMethod(): mlist is not an environment or NULL :\n"
"** should no longer happen!"
msgstr ""

#. R/trace.R: gettextf("setting a method over the binding of symbol %s in environment/package %s",     sQuote(what), sQuote(getPackageName(where)))
#: R/trace.R:0
msgid ""
"setting a method over the binding of symbol %s in environment/package %s"
msgstr "metodo nustatymas per simbolio %s saistymą aplinkoje/pakete %s"

#. R/Methods.R: gettextf("signatures differ:  (%s), (%s)", paste(f1@signature, collapse = ", "),     paste(f2@signature, collapse = ", "), domain = "R-methods")
#: R/Methods.R:0
msgid "signatures differ:  (%s), (%s)"
msgstr "skiriasi prierašai: (%s), (%s)"

#. R/RMethodUtils.R: gettextf("single string; got a character vector of length %d", length(what))
#: R/RMethodUtils.R:0
#, fuzzy
msgid "single string; got a character vector of length %d"
msgstr ""
"vienos klasės vardas reikalingas %s laukui, gautas %d ilgio tekstinis "
"vektorius"

#. R/RMethodUtils.R: gettextf("single string; got an object of class %s", dQuote(class(what)[[1L]]))
#: R/RMethodUtils.R:0
msgid "single string; got an object of class %s"
msgstr "viena eilutė, gaunamas klasės %s objektas"

#. R/MethodsList.R: gettext("skipping methods list element %s of unexpected class %s\n\n", domain = "R-methods")
#: R/MethodsList.R:0
msgid "skipping methods list element %s of unexpected class %s"
msgstr "praleidžiamas metodų sąrašo elementas %s nenumatytos klasės %s"

#. R/oldClass.R: gettextf("slot %s: class %s should extend class %s", sQuote(what), dQuote(slots1[[what]]),     dQuote(slots2[[what]]))
#: R/oldClass.R:0
msgid "slot %s: class %s should extend class %s"
msgstr "laukas %s: klasė %s turi praplėsti klasę %s"

#. R/SClasses.R: gettext("slots in class definition but not in object:")
#: R/SClasses.R:0
msgid "slots in class definition but not in object:"
msgstr ""

#. R/RMethodUtils.R: gettext("some actions are missing: %s", domain = "R-methods")
#: R/RMethodUtils.R:0
msgid "some actions are missing: %s"
msgstr "trūksta kai kurių veiksmų: %s"

#. R/methodsTable.R: gettextf("something weird: inconsistent number of args in methods table strings: %s (using the largest value)",     paste(nargs, collapse = ", "), domain = "R-methods")
#: R/methodsTable.R:0
msgid ""
"something weird: inconsistent number of args in methods table strings: %s "
"(using the largest value)"
msgstr ""

#. R/SClasses.R: gettextf("superclass \"%s\" not defined in the environment of the object's class",     superClass)
#: R/SClasses.R:0
#, fuzzy
msgid "superclass \"%s\" not defined in the environment of the object's class"
msgstr "klasė %s neapibrėžta šioje aplinkoje"

#. R/trace.R: gettextf("supplied package, %s, differs from package inferred from source, %s", sQuote(package),     sQuote(envPackage))
#: R/trace.R:0
msgid "supplied package, %s, differs from package inferred from source, %s"
msgstr ""
"pateiktas paketas %s skiriasi nuo paketo, kuris paveldėtas iš šaltinio %s"

#. R/methodsTable.R: gettextf("the \"ambiguousMethodSelection\" option should be a function to be called as the condition action; got an object of class %s",     dQuote(class(condAction)))
#: R/methodsTable.R:0
msgid ""
"the \"ambiguousMethodSelection\" option should be a function to be called as "
"the condition action; got an object of class %s"
msgstr ""
"\"ambiguousMethodSelection\" parinktis turi būti funkcija, kuri iškviečiama "
"kaip sąlygos veiksmas, yra klasės %s objektas"

#. R/RMethodUtils.R: gettextf("the %s argument must be NULL or a generic function object; got an object of class %s",     sQuote("genericFunction"), dQuote(class(genericFunction)))
#: R/RMethodUtils.R:0
msgid ""
"the %s argument must be NULL or a generic function object; got an object of "
"class %s"
msgstr ""
"%s argumentas turi būti NULL arba bendrinės funkcijos objektas; gaunamas "
"klasės %s objektas"

#. R/RClassUtils.R: gettextf("the '%s' list for class %s, includes an undefined class %s", if (superClassCase) "superClass" else "subClass",     dQuote(className), dQuote(.className(by)))
#: R/RClassUtils.R:0
msgid "the '%s' list for class %s, includes an undefined class %s"
msgstr "'%s' sąrašas klasei %s apima neapibrėžtą klasę %s"

#. R/ClassExtensions.R: gettextf("the 'S3Class' argument must be a superclass of %s: not true of class %s",     dQuote(class(object)), dQuote(S3Class))
#: R/ClassExtensions.R:0
#, fuzzy
msgid "the 'S3Class' argument must be a superclass of %s: not true of class %s"
msgstr "'S3Class' argumentas turi būti %s viršklasis: neteisinga klasei %s"

#. R/ClassExtensions.R: gettextf("the 'coerce' argument to 'setIs' should be a function of one argument, got an object of class %s",     dQuote(class(coerce)))
#: R/ClassExtensions.R:0
msgid ""
"the 'coerce' argument to 'setIs' should be a function of one argument, got "
"an object of class %s"
msgstr ""
"coerce' argumentas į 'setIs' turi būti vieno argumento funkcija, yra klasės "
"%s objektas"

#. R/refClass.R: gettextf("the 'contains' argument should be the names of superclasses:  got an element of class %s",     dQuote(class(what)))
#: R/refClass.R:0
msgid ""
"the 'contains' argument should be the names of superclasses:  got an element "
"of class %s"
msgstr ""
"'contains' argumentas turėtų būti viršklasių vardai: gaunamas klasės %s "
"elementas"

#. R/show.R: gettext("the 'oldMethods' argument is deprecated, as it has been unused since R 1.7.0",     domain = "R-methods")
#: R/show.R:0
msgid ""
"the 'oldMethods' argument is deprecated, as it has been unused since R 1.7.0"
msgstr ""

#. R/ClassExtensions.R: gettextf("the 'replace' argument to setIs() should be a function of 2 or 3 arguments, got an object of class %s",     dQuote(class(replace)))
#: R/ClassExtensions.R:0
msgid ""
"the 'replace' argument to setIs() should be a function of 2 or 3 arguments, "
"got an object of class %s"
msgstr ""
"'replace' argumentas setIs() turi būti 2 arba 3 argumentų funkcija, yra "
"klasės %s objektas"

#. R/Methods.R: gettextf("the 'where' environment (%s) is a locked namespace; cannot assign methods there",     getPackageName(where))
#: R/Methods.R:0
msgid ""
"the 'where' environment (%s) is a locked namespace; cannot assign methods "
"there"
msgstr "'where' aplinka (%s) yra uždara vardų erdvė, negalima priskirti metodų"

#. R/oldClass.R: gettextf("the S3 class of the prototype, \"%s\", is undefined; only allowed when this is the S3 class being registered (\"%s\")",     .class1(prototype), mainClass)
#: R/oldClass.R:0
msgid ""
"the S3 class of the prototype, \"%s\", is undefined; only allowed when this "
"is the S3 class being registered (\"%s\")"
msgstr ""
"prototipo S3 klasė \"%s\" yra neapibrėžta, leidžiama tik tada, kai ji yra "
"registruota S3 klasė (\"%s\")"

#. R/RMethodUtils.R: gettextf("the body of the generic function for %s calls 'standardGeneric' to dispatch on a different name (\"%s\")!",     sQuote(fname), paste(as.character(x[[2L]]), collapse = "\n"))
#: R/RMethodUtils.R:0
msgid ""
"the body of the generic function for %s calls 'standardGeneric' to dispatch "
"on a different name (\"%s\")!"
msgstr ""
"pagrindinė bendrinės funkcijos %s dalis iškviečia 'standardGeneric' perduoti "
"skirtingu vardu (\"%s\")!"

#. R/refClass.R: gettextf("the class of field %s in the object is not compatible with the desired class %s in the target",     sQuote(field), dQuote(fieldClasses[[field]]))
#. R/refClass.R: gettextf("the class of field %s in the object is not compatible with the desired class %s in the target",     sQuote(field), dQuote(fieldClasses[[field]]))
#: R/refClass.R:0
msgid ""
"the class of field %s in the object is not compatible with the desired class "
"%s in the target"
msgstr "klasės laukas %s objekte nesuderinamas su norima klase %s paskirtyje"

#. R/ClassExtensions.R: gettextf("the computation: 'as(object,\"%s\") <- value' is valid when object has class %s only if 'is(value, \"%s\")' is TRUE ('class(value)' was %s)\n",     TO, dQuote(FROM), TO, dQuote(class(value)))
#: R/ClassExtensions.R:0
msgid ""
"the computation: 'as(object,\"%s\") <- value' is valid when object has class "
"%s only if 'is(value, \"%s\")' is TRUE ('class(value)' was %s)"
msgstr ""
"skaičiavimas: 'as(object,\"%s\") <- value' yra tinkamas, kai objektas turi "
"klasę %s tik tada kai 'is(value, \"%s\")' yra TRUE ('class(value)' buvo %s)"

#. R/refClass.R: gettextf("the definition of class %s in package %s is locked so fields may not be modified",     dQuote(def@className), sQuote(def@package))
#. R/refClass.R: gettextf("the definition of class %s in package %s is locked so fields may not be modified",     dQuote(def@className), sQuote(def@package))
#: R/refClass.R:0
msgid ""
"the definition of class %s in package %s is locked so fields may not be "
"modified"
msgstr ""
"klasės %s apibrėžtis pakete %s yra užrakinta, todėl laukai gali būti "
"nekeičiami"

#. R/refClass.R: gettextf("the definition of class %s in package %s is locked, methods may not be redefined",     dQuote(def@className), sQuote(def@package))
#: R/refClass.R:0
msgid ""
"the definition of class %s in package %s is locked, methods may not be "
"redefined"
msgstr ""
"klasės %s apibrėžtis pakete %s yra užrakinta, nebūtina apibrėžti metodų iš "
"naujo"

#. R/trace.R: stop("the editing in trace() can only change the body of the function, not the arguments or defaults")
#: R/trace.R:0
msgid ""
"the editing in trace() can only change the body of the function, not the "
"arguments or defaults"
msgstr ""
"redagavimas trace() gali pakeisti tik pagrindinę funkcijos dalį, bet ne "
"argumentus ar numatytuosius parametrus"

#. R/trace.R: gettextf("the editing in trace() can only change the body of the function; got an object of class %s",     dQuote(class(def2)))
#: R/trace.R:0
msgid ""
"the editing in trace() can only change the body of the function; got an "
"object of class %s"
msgstr ""
"redagavimas trace() gali pakeisti tik pagrindinę funkcijos dalį, gaunamas "
"klasės %s objektas"

#. R/Methods.R: gettextf("the environment %s is locked; cannot assign methods for function %s", sQuote(getPackageName(where)),     sQuote(f))
#: R/Methods.R:0
msgid "the environment %s is locked; cannot assign methods for function %s"
msgstr "%s aplinka yra užrakinta; negali priskirti metodų funkcijai %s"

#. R/RMethodUtils.R: gettextf("the function being used as %s in making a generic function for %s is currently traced; the function used will have tracing removed",     what, sQuote(f))
#: R/RMethodUtils.R:0
msgid ""
"the function being used as %s in making a generic function for %s is "
"currently traced; the function used will have tracing removed"
msgstr ""
"funkcija naudojama kaip %s kuriant bendrinę funkciją %s, kuri yra žymėtoji; "
"naudojama funkcija turės pašalintą žymėjimą"

#. R/ClassUnion.R: gettext("the member classes must be defined: not true of %s", domain = "R-methods")
#: R/ClassUnion.R:0
msgid "the member classes must be defined: not true of %s"
msgstr "klasių nariai turi būti apibrėžti: %s neteisinga"

#. R/trace.R: gettextf("the method for %s for this signature was not being traced", sQuote(what))
#: R/trace.R:0
msgid "the method for %s for this signature was not being traced"
msgstr "metodas %s šiam prierašui nebuvo atsektas"

#. R/Methods.R: gettextf("the method for function %s and signature %s is sealed and cannot be re-defined",     sQuote(f), .signatureString(fdef, signature))
#: R/Methods.R:0
msgid ""
"the method for function %s and signature %s is sealed and cannot be re-"
"defined"
msgstr ""
"metodas funkcijai %s ir prierašas %s yra patvirtinti bei negali būti "
"apibrėžtas iš naujo"

#. R/MethodsListClass.R: gettext("the names in signature for method (%s) do not match %s's arguments (%s)",     domain = "R-methods")
#: R/MethodsListClass.R:0
msgid "the names in signature for method (%s) do not match %s's arguments (%s)"
msgstr "vardai metodo (%s) prieraše neatitinka %s argumentų (%s)"

#. R/MethodsListClass.R: gettext("the names in signature for method (%s) do not match function's arguments (%s)",     domain = "R-methods")
#: R/MethodsListClass.R:0
msgid ""
"the names in signature for method (%s) do not match function's arguments (%s)"
msgstr "vardai metodo (%s) prieraše neatitinka funkcijos argumentų (%s)"

#. R/refClass.R: gettextf("the overriding class (\"%s\") of field %s is not a subclass of the existing field definition (\"%s\")",     value[[field]], sQuote(field), fieldList[[field]])
#: R/refClass.R:0
msgid ""
"the overriding class (\"%s\") of field %s is not a subclass of the existing "
"field definition (\"%s\")"
msgstr ""
"pagrindinė klasė (\"%s\") lauko %s nėra poklasis egzistuojančio lauko "
"apibrėžimo (\"%s\")"

#. R/MethodsList.R: gettextf("there are named arguments (%s) in the method signature that ambiguously match the generic signature, for function %s",     paste(sQuote(names(sigList)[ambig]), collapse = ", "), sQuote(fun@generic), domain = "R-methods")
#: R/MethodsList.R:0
#, fuzzy
msgid ""
"there are named arguments (%s) in the method signature that ambiguously "
"match the generic signature, for function %s"
msgstr ""
"daugiau elementų metodo prieraše (%d) negu bendriniame prieraše (%d) "
"funkcijai %s"

#. R/MethodsList.R: gettextf("there are named arguments (%s) in the method signature that are missing from the generic signature, for function %s",     paste(sQuote(names(sigList)[is.na(argmatches)]), collapse = ", "), sQuote(fun@generic),     domain = "R-methods")
#: R/MethodsList.R:0
#, fuzzy
msgid ""
"there are named arguments (%s) in the method signature that are missing from "
"the generic signature, for function %s"
msgstr ""
"daugiau elementų metodo prieraše (%d) negu bendriniame prieraše (%d) "
"funkcijai %s"

#. R/ClassExtensions.R: gettextf("there is no automatic definition for 'as(object, \"%s\") <- value' when object has class %s and no 'replace' argument was supplied; replacement will be an error",     to, dQuote(Class))
#: R/ClassExtensions.R:0
msgid ""
"there is no automatic definition for 'as(object, \"%s\") <- value' when "
"object has class %s and no 'replace' argument was supplied; replacement will "
"be an error"
msgstr ""
"nėra automatinės apibrėžties 'as(object, \"%s\") <- value' kai objektas turi "
"klasę %s ir nepateiktas 'replace' argumentas; pakeitimas bus neteisingas"

#. R/refClass.R: gettextf("topic %s is not a method name in class %s\nThe class definition follows\n",     sQuote(topic), dQuote(className), domain = "R-methods")
#: R/refClass.R:0
msgid ""
"topic %s is not a method name in class %s\n"
"The class definition follows"
msgstr ""
"tema %s nėra metodo vardas klasėje %s\n"
"Klasės apibrėžtis seka"

#. R/trace.R: gettextf("tracing the internal function %s is not allowed", sQuote(what))
#: R/trace.R:0
msgid "tracing the internal function %s is not allowed"
msgstr "vidinės funkcijos %s sekimas negalimas"

#. R/RClassUtils.R: gettextf("trying to assign an object of class %s as the definition of class %s: must supply a \"classRepresentation\" object",     dQuote(class(def)), dQuote(Class))
#: R/RClassUtils.R:0
msgid ""
"trying to assign an object of class %s as the definition of class %s: must "
"supply a \"classRepresentation\" object"
msgstr ""
"bandymas priskirti klasės %s objektą kaip klasės %s apibrėžtį: turi pateikti "
"\"classRepresentation\" objektą"

#. R/RClassUtils.R: gettext("trying to change the argument list of %s with %d arguments to have arguments (%s)",     domain = "R-methods")
#: R/RClassUtils.R:0
#, fuzzy
msgid ""
"trying to change the argument list of %s with %d arguments to have arguments "
"(%s)"
msgstr ""
"bandymas pakeisti formaliuosius argumentus, esančius %s, bet egzistuojančių "
"argumentų skaičius yra mažesnis negu naujų argumentų: (%s) prieš (%s)"

#. R/RMethodUtils.R: gettextf("trying to change the formal arguments in %s in an object of class %s; expected a function definition",     msg, dQuote(class(def)))
#: R/RMethodUtils.R:0
msgid ""
"trying to change the formal arguments in %s in an object of class %s; "
"expected a function definition"
msgstr ""
"bandymas pakeisti formaliuosius argumentus %s klasės %s objekte; turėtų būti "
"funkcijos apibrėžtis"

#. R/RMethodUtils.R: gettextf("trying to change the formal arguments in %s, but getting the new formals from an object of class %s; expected a function definition",     msg, dQuote(class(def)))
#: R/RMethodUtils.R:0
msgid ""
"trying to change the formal arguments in %s, but getting the new formals "
"from an object of class %s; expected a function definition"
msgstr ""
"bandymas pakeisti formaliuosius argumentus, esančius %s, bet gauti nauji "
"formalieji argumentai iš klasės %s objekto, turėtų būti funkcijos apibrėžtis"

#. R/RMethodUtils.R: gettext("trying to change the formal arguments in %s, but the number of existing arguments is greater than the number of new arguments (the extra arguments won't be used): (%s) vs (%s)",     domain = "R-methods")
#: R/RMethodUtils.R:0
msgid ""
"trying to change the formal arguments in %s, but the number of existing "
"arguments is greater than the number of new arguments (the extra arguments "
"won't be used): (%s) vs (%s)"
msgstr ""
"bandymas pakeisti formaliuosius argumentus, esančius %s, bet egzistuojančių "
"argumentų skaičius yra didesnis negu naujų parametrų (papildomi parametrai "
"nebus naudojami): (%s) prieš (%s)"

#. R/RMethodUtils.R: gettext("trying to change the formal arguments in %s, but the number of existing arguments is less than the number of new arguments: (%s) vs (%s)",     domain = "R-methods")
#: R/RMethodUtils.R:0
msgid ""
"trying to change the formal arguments in %s, but the number of existing "
"arguments is less than the number of new arguments: (%s) vs (%s)"
msgstr ""
"bandymas pakeisti formaliuosius argumentus, esančius %s, bet egzistuojančių "
"argumentų skaičius yra mažesnis negu naujų argumentų: (%s) prieš (%s)"

#. R/methodsTable.R: gettext("trying to check signature length of generic %s, but it is not a generic function: i = %d, funs = %s, gnames = %s",     domain = "R-methods")
#: R/methodsTable.R:0
#, fuzzy
msgid ""
"trying to check signature length of generic %s, but it is not a generic "
"function: i = %d, funs = %s, gnames = %s"
msgstr ""
"bandymas patikrinti bendrinės funkcijos '%s' prierašo ilgį, bet tai nėra "
"bendrinė funkcija: i = %d, funs = %s, gnames = %s"

#. R/methodsTable.R: gettextf("trying to check signature length of group generic %s, but it is not a group generic",     sQuote(what))
#: R/methodsTable.R:0
#, fuzzy
msgid ""
"trying to check signature length of group generic %s, but it is not a group "
"generic"
msgstr ""
"bandymas patikrinti bendrinės grupės '%s' prierašo ilgį, bet tai nėra "
"bendrinė grupė"

#. R/methodsTable.R: stop("trying to find a methods table in a non-generic function")
#: R/methodsTable.R:0
msgid "trying to find a methods table in a non-generic function"
msgstr "bandymas rasti metodų lentelę nebendrinėje funkcijoje"

#. R/MethodsList.R: gettextf("trying to match a method signature of class %s; expects a list or a character vector",     dQuote(class(signature)))
#: R/MethodsList.R:0
msgid ""
"trying to match a method signature of class %s; expects a list or a "
"character vector"
msgstr ""
"bandymas suderinti klasės %s metodo prierašą, turi būti sąrašas arba "
"tekstinis vektorius"

#. R/MethodsList.R: gettextf("trying to match a method signature to an object (of class %s) that is not a generic function",     dQuote(class(fun)))
#: R/MethodsList.R:0
msgid ""
"trying to match a method signature to an object (of class %s) that is not a "
"generic function"
msgstr ""
"bandymas suderinti metodo prierašą su objektu (klasės %s), kuris nėra "
"bendrinė funkcija"

#. R/as.R: gettextf("trying to set an 'as' relation from %s to itself", dQuote(.class1(from)))
#: R/as.R:0
msgid "trying to set an 'as' relation from %s to itself"
msgstr "bandymas nustatyti 'as' ryšį iš %s į patį save"

#. R/ClassUnion.R: gettext("unable to create union class: could not set members %s", domain = "R-methods")
#: R/ClassUnion.R:0
#, fuzzy
msgid "unable to create union class: could not set members %s"
msgstr "nepavyko sukurti sąjungos klasės: nepavyko nustatyti narių %s"

#. R/RClassUtils.R: gettext("unable to find a consistent ordering of superclasses for class %s: order chosen is inconsistent with the superclasses of %s",     domain = "R-methods")
#: R/RClassUtils.R:0
msgid ""
"unable to find a consistent ordering of superclasses for class %s: order "
"chosen is inconsistent with the superclasses of %s"
msgstr ""
"nepavyko rasti viršklasių nuoseklios tvarkos klasei %s: pasirinkta tvarka "
"yra nesuderinama su %s viršklasiu"

#. R/RClassUtils.R: gettextf("unable to find an environment containing class %s", dQuote(Class))
#: R/RClassUtils.R:0
msgid "unable to find an environment containing class %s"
msgstr "nepavyko rasti aplinkos, kurioje yra %s klasė"

#. R/methodsTable.R: gettextf("unable to find an inherited method for function %s for signature %s", sQuote(fdef@generic),     sQuote(cnames))
#: R/methodsTable.R:0
msgid "unable to find an inherited method for function %s for signature %s"
msgstr "nepavyko rasti paveldėto metodo funkcijos %s prierašui %s"

#. R/RClassUtils.R: gettextf("unable to find required package %s", sQuote(package))
#: R/RClassUtils.R:0
msgid "unable to find required package %s"
msgstr "nepavyko rasti būtino paketo %s"

#. R/as.R: stop("undefined 'coerce' method")
#: R/as.R:0
msgid "undefined 'coerce' method"
msgstr "neapibrėžtas 'coerce' metodas"

#. R/SClasses.R: gettextf("undefined class for slot '%s' (\"%s\")", slotNames[[i]], classi)
#: R/SClasses.R:0
#, fuzzy
msgid "undefined class for slot '%s' (\"%s\")"
msgstr "neapibrėžtos laukų klasės %s apibrėžtyje: %s"

#. R/methodsTable.R: gettext("undefined classes (%s) will be ignored for argument %s", domain = "R-methods")
#: R/methodsTable.R:0
#, fuzzy
msgid "undefined classes (%s) will be ignored for argument %s"
msgstr "neapibrėžtos klasės (%s) bus ignoruojamos argumentui '%s'"

#. R/RClassUtils.R: gettext("undefined slot classes in definition of %s: %s", domain = "R-methods")
#: R/RClassUtils.R:0
msgid "undefined slot classes in definition of %s: %s"
msgstr "neapibrėžtos laukų klasės %s apibrėžtyje: %s"

#. R/RClassUtils.R: gettextf("undefined subclass %s of class %s; definition not updated", .dQ(what),     .dQ(def@className))
#: R/RClassUtils.R:0
msgid "undefined subclass %s of class %s; definition not updated"
msgstr "neapibrėžtas poklasis %s klasės %s, apibrėžtis neatnaujinta"

#. R/zzz.R: message("unloading 'methods' package ...")
#: R/zzz.R:0
msgid "unloading 'methods' package ..."
msgstr "iškeliamas 'methods' paketas ..."

#. R/BasicClasses.R: gettextf("unnamed argument must extend either the S3 class or the class of the data part; not true of class %s",     dQuote(Classi))
#: R/BasicClasses.R:0
msgid ""
"unnamed argument must extend either the S3 class or the class of the data "
"part; not true of class %s"
msgstr ""
"neįvardyti argumentai turi praplėsti arba S3 klasę, arba duomenų dalies "
"klasę, neteisinga apie %s klasę"

#. R/BasicClasses.R: gettextf("unnamed argument passed to 'initialize()' for S3 class must have a class definition; %s does not",     dQuote(Classi))
#: R/BasicClasses.R:0
#, fuzzy
msgid ""
"unnamed argument passed to 'initialize()' for S3 class must have a class "
"definition; %s does not"
msgstr ""
"neįvardytas argumentas į initialize() S3 klasei turi būti klasės apibrėžtis, "
"%s nėra"

#. R/BasicClasses.R: stop("unnamed argument passed to 'new()' method must be an environment for the new object")
#: R/BasicClasses.R:0
#, fuzzy
msgid ""
"unnamed argument passed to 'new()' method must be an environment for the new "
"object"
msgstr "neįvardytas argumentas į new() turi būti aplinka naujam objektui"

#. R/refClass.R: gettextf("unnamed arguments to $new() must be objects from a reference class; got an object of class %s",     dQuote(class(super)))
#: R/refClass.R:0
msgid ""
"unnamed arguments to $new() must be objects from a reference class; got an "
"object of class %s"
msgstr ""
"neįvardyti argumentai $new() turi būti objektai iš referencinės klasės; "
"gaunamas klasės %s objektas"

#. R/RClassUtils.R: gettextf("validity method for class \"%s\"", Class)
#: R/RClassUtils.R:0
#, fuzzy
msgid "validity method for class \"%s\""
msgstr "nėra metodo %s, kuris atitinka klasę %s"

#. R/SClasses.R: stop("validity method must be NULL or a function of one argument")
#: R/SClasses.R:0
msgid "validity method must be NULL or a function of one argument"
msgstr "pagrįstumo metodas turi būti NULL arba vienas iš funkcijos argumentų"

#. R/Methods.R: gettextf("value classes differ: %s, %s", .dQ(gpString(f1@valueClass)), .dQ(gpString(f2@valueClass)))
#: R/Methods.R:0
msgid "value classes differ: %s, %s"
msgstr "klasių reikšmės skiriasi: %s, %s"

#. R/methodsTable.R: ngettext(length(pkgs), "  (%d methods defined for this signature, with different packages)\n",     "  (%d methods defined for this signature, with different packages)\n", domain = "R-methods")
#: R/methodsTable.R:0
#, fuzzy
msgid "  (%d methods defined for this signature, with different packages)\n"
msgid_plural ""
"  (%d methods defined for this signature, with different packages)\n"
msgstr[0] "metodas %s šiam prierašui nebuvo atsektas"
msgstr[1] "metodas %s šiam prierašui nebuvo atsektas"
msgstr[2] "metodas %s šiam prierašui nebuvo atsektas"

#. R/methodsTable.R: ngettext(length(candidates), "Choosing method %s from %d ambiguous possibility",     "Choosing method %s from %d ambiguous possibilities", domain = "R-methods")
#: R/methodsTable.R:0
msgid "Choosing method %s from %d ambiguous possibility"
msgid_plural "Choosing method %s from %d ambiguous possibilities"
msgstr[0] "Metodo %s pasirinkimas iš %d neapibrėžtos galimybės"
msgstr[1] "Metodo %s pasirinkimas iš %d neapibrėžtų galimybių"
msgstr[2] "Metodo %s pasirinkimas iš %d neapibrėžtų galimybių"

#. R/MethodsListClass.R: ngettext(nreport, "Reported %d ambiguous selection out of %d for function %s", "Reported %d ambiguous selections out of %d for function %s",     domain = "R-methods")
#: R/MethodsListClass.R:0
#, fuzzy
msgid "Reported %d ambiguous selection out of %d for function %s"
msgid_plural "Reported %d ambiguous selections out of %d for function %s"
msgstr[0] "Pranešta, kad %d neapibrėžtas pasirinkimas iš %d funkcijai %s\n"
msgstr[1] "Pranešta, kad %d neapibrėžti pasirinkimai iš %d funkcijai %s\n"
msgstr[2] "Pranešta, kad %d neapibrėžtų pasirinkimų iš %d funkcijai %s\n"

#. R/methodsTable.R: ngettext(which2, "Selecting %d method of minimum distance", "Selecting %d methods of minimum distance",     domain = "R-methods")
#: R/methodsTable.R:0
msgid "Selecting %d method of minimum distance"
msgid_plural "Selecting %d methods of minimum distance"
msgstr[0] "Minimalaus atstumo %d metodo pasirinkimas"
msgstr[1] "Minimalaus atstumo %d metodų pasirinkimas"
msgstr[2] "Minimalaus atstumo %d metodų pasirinkimas"

#. R/methodsTable.R: ngettext(length(which), "Selecting %d non-group method", "Selecting %d non-group methods",     domain = "R-methods")
#: R/methodsTable.R:0
msgid "Selecting %d non-group method"
msgid_plural "Selecting %d non-group methods"
msgstr[0] "Ne grupės %d metodo pasirinkimas"
msgstr[1] "Ne grupės %d metodų pasirinkimas"
msgstr[2] "Ne grupės %d metodų pasirinkimas"

#. R/methodsTable.R: ngettext(length(which), "Selecting %d partially exact-matching method", "Selecting %d partially exact-matching methods",     domain = "R-methods")
#: R/methodsTable.R:0
msgid "Selecting %d partially exact-matching method"
msgid_plural "Selecting %d partially exact-matching methods"
msgstr[0] "Iš dalies atitinkamo %d metodo pasirinkimas"
msgstr[1] "Iš dalies atitinkamų %d metodų pasirinkimas"
msgstr[2] "Iš dalies atitinkamų %d metodų pasirinkimas"

#. R/is.R: ngettext(sum(is.na(match(n2, n1))), "class %s is missing slot from class %s (%s), and no coerce method was supplied",     "class %s is missing slots from class %s (%s), and no coerce method was supplied",     domain = "R-methods")
#: R/is.R:0
msgid ""
"class %s is missing slot from class %s (%s), and no coerce method was "
"supplied"
msgid_plural ""
"class %s is missing slots from class %s (%s), and no coerce method was "
"supplied"
msgstr[0] ""
"klasė %s yra trūkstamas laukas iš klasės %s (%s), ir priverstinis metodas "
"nebuvo taikomas"
msgstr[1] ""
"klasė %s yra trūkstami laukai iš klasės %s (%s), ir priverstinis metodas "
"nebuvo taikomas"
msgstr[2] ""
"klasė %s yra trūkstami laukai iš klasės %s (%s), ir priverstinis metodas "
"nebuvo taikomas"

#. R/SClasses.R: ngettext(length(dslots), "duplicated slot name: %s", "duplicated slot names: %s",     domain = "R-methods")
#. R/SClasses.R: ngettext(length(duplicated(snames)), "duplicated slot name: %s", "duplicated slot names: %s",     domain = "R-methods")
#: R/SClasses.R:0
msgid "duplicated slot name: %s"
msgid_plural "duplicated slot names: %s"
msgstr[0] "dubliuotas lauko pavadinimas: %s"
msgstr[1] "dubliuoti lauko pavadinimai: %s"
msgstr[2] "dubliuotų lauko pavadinimų: %s"

#. R/methodsTable.R: ngettext(length(methods), "found %d equally good next method", "found %d equally good next methods",     domain = "R-methods")
#: R/methodsTable.R:0
msgid "found %d equally good next method"
msgid_plural "found %d equally good next methods"
msgstr[0] "rastas %d vienodai geras kitas metodas"
msgstr[1] "rasti %d vienodai geri kiti metodai"
msgstr[2] "rasta %d vienodai gerų kitų metodų"

#. R/MethodsList.R: ngettext(sum(is.na(which)), "in the method signature for function %s invalid argument name in the signature: %s",     "in the method signature for function %s invalid argument names in the signature: %s",     domain = "R-methods")
#: R/MethodsList.R:0
msgid ""
"in the method signature for function %s invalid argument name in the "
"signature: %s"
msgid_plural ""
"in the method signature for function %s invalid argument names in the "
"signature: %s"
msgstr[0] ""
"metodo prieraše funkcijai %s neteisingas argumento vardas prieraše: %s"
msgstr[1] ""
"metodo prieraše funkcijai %s neteisingi argumento vardai prieraše: %s"
msgstr[2] ""
"metodo prieraše funkcijai %s neteisingų argumento vardų prieraše: %s"

#. R/SClasses.R: ngettext(sum(is.na(which)), "invalid name for slot of class %s: %s", "invalid names for slots of class %s: %s",     domain = "R-methods")
#: R/SClasses.R:0
msgid "invalid name for slot of class %s: %s"
msgid_plural "invalid names for slots of class %s: %s"
msgstr[0] "neteisingas klasės %s lauko vardas: %s"
msgstr[1] "neteisingi klasės %s laukų vardai: %s"
msgstr[2] "neteisingų klasės %s laukų vardų: %s"

#. R/SClasses.R: ngettext(length(pkgs), "multiple definition of class %s visible (%s); using the definition\n   in package %s for %s",     "multiple definitions of class %s visible (%s); using the definition\n   in package %s for %s",     domain = "R-methods")
#: R/SClasses.R:0
msgid ""
"multiple definition of class %s visible (%s); using the definition\n"
"   in package %s for %s"
msgid_plural ""
"multiple definitions of class %s visible (%s); using the definition\n"
"   in package %s for %s"
msgstr[0] ""
"daugkartinis apibrėžimas klasės %s matomume (%s); naudojant apibrėžimą\n"
"   pakete %s dėl %s"
msgstr[1] ""
"daugkartiniai apibrėžimai klasės %s matomume (%s); naudojant apibrėžimą\n"
"   pakete %s dėl %s"
msgstr[2] ""
"daugkartinių apibrėžimų klasės %s matomume (%s); naudojant apibrėžimą\n"
"   pakete %s dėl %s"

#. R/RClassUtils.R: ngettext(sum(is.na(match(pnames, slots))), "named elements of prototype do not correspond to slot name: %s",     "named elements of prototype do not correspond to slot names: %s", domain = "R-methods")
#: R/RClassUtils.R:0
msgid "named elements of prototype do not correspond to slot name: %s"
msgid_plural "named elements of prototype do not correspond to slot names: %s"
msgstr[0] "įvardyti prototipo elementai neatitinka lauko pavadinimo: %s"
msgstr[1] "įvardyti prototipo elementai neatitinka lauko pavadinimų: %s"
msgstr[2] "įvardyti prototipo elementai neatitinka lauko pavadinimų: %s"

#. R/MethodsList.R: ngettext(length(unknown), "no definition for class %s", "no definition for classes %s",     domain = "R-methods")
#: R/MethodsList.R:0
msgid "no definition for class %s"
msgid_plural "no definition for classes %s"
msgstr[0] "nėra apibrėžties klasei %s"
msgstr[1] "nėra apibrėžties klasėms %s"
msgstr[2] "nėra apibrėžties klasėms %s"

#. R/promptClass.R: ngettext(length(whereClass), "no definition of class %s in the specified position, %s, definition on : %s",     "no definition of class %s in the specified position, %s, definitions on : %s",     domain = "R-methods")
#: R/promptClass.R:0
msgid ""
"no definition of class %s in the specified position, %s, definition on : %s"
msgid_plural ""
"no definition of class %s in the specified position, %s, definitions on : %s"
msgstr[0] ""
"klasė %s nurodytoje pozicijoje neturi apibrėžties, %s, apibrėžimas : %s"
msgstr[1] ""
"klasė %s nurodytoje pozicijoje neturi apibrėžties, %s, apibrėžimai : %s"
msgstr[2] ""
"klasė %s nurodytoje pozicijoje neturi apibrėžties, %s, apibrėžimų : %s"

#. R/RMethodUtils.R: ngettext(sum(not.s.in.a), "non-argument found in the signature: %s", "non-arguments found in the signature: %s",     domain = "R-methods")
#. R/RMethodUtils.R: ngettext(sum(not.s.in.a), "non-argument found in the signature: %s", "non-arguments found in the signature: %s",     domain = "R-methods")
#: R/RMethodUtils.R:0
msgid "non-argument found in the signature: %s"
msgid_plural "non-arguments found in the signature: %s"
msgstr[0] "ne argumentas rastas prieraše: %s"
msgstr[1] "ne argumentai rasti prieraše: %s"
msgstr[2] "ne argumentų rasta prieraše: %s"

#. R/is.R: ngettext(length(bad), "slot in class %s must extend corresponding slot in class %s: fails for %s",     "slots in class %s must extend corresponding slots in class %s: fails for %s",     domain = "R-methods")
#: R/is.R:0
msgid ""
"slot in class %s must extend corresponding slot in class %s: fails for %s"
msgid_plural ""
"slots in class %s must extend corresponding slots in class %s: fails for %s"
msgstr[0] ""
"laukas klasėje %s turi papildyti atitinkamą lauką klasėje %s: nepavyksta dėl "
"%s"
msgstr[1] ""
"laukai klasėje %s turi papildyti atitinkamus laukus klasėje %s: nepavyksta "
"dėl %s"
msgstr[2] ""
"laukai klasėje %s turi papildyti atitinkamus laukus klasėje %s: nepavyksta "
"dėl %s"

#. R/RMethodUtils.R: ngettext(length(fdef), "the formal argument of the generic function for %s (%s) differs from that of the non-generic to be used as the default (%s)",     "the formal arguments of the generic function for %s (%s) differ from those of the non-generic to be used as the default (%s)",     domain = "R-methods")
#: R/RMethodUtils.R:0
msgid ""
"the formal argument of the generic function for %s (%s) differs from that of "
"the non-generic to be used as the default (%s)"
msgid_plural ""
"the formal arguments of the generic function for %s (%s) differ from those "
"of the non-generic to be used as the default (%s)"
msgstr[0] ""
"bendrinės funkcijos %s (%s) formalusis argumentas skiriasi nuo nebendrinės "
"funkcijos, kuri bus naudojama kaip numatytoji (%s)"
msgstr[1] ""
"bendrinės funkcijos %s (%s) formalieji argumentai skiriasi nuo nebendrinės "
"funkcijos, kuri bus naudojama kaip numatytoji (%s)"
msgstr[2] ""
"bendrinės funkcijos %s (%s) formaliųjų argumentų skiriasi nuo nebendrinės "
"funkcijos, kuri bus naudojama kaip numatytoji (%s)"

#~ msgid "no generic function found for '%s'"
#~ msgstr "nerasta bendrinės funkcijos '%s'"

#~ msgid "must supply 'generic.function' or 'class'"
#~ msgstr "privalo teikti 'generic.function' arba 'class'"

#~ msgid ""
#~ "Debugging .checkSubclasses(): assignClassDef(what=\"%s\", *, where=%s, "
#~ "force=TRUE);"
#~ msgstr ""
#~ "Derinimas .checkSubclasses(): assignClassDef(what=\"%s\", *, where=%s, "
#~ "force=TRUE);"

#~ msgid "E := environment(): %s; parent.env(E): %s"
#~ msgstr "E := environment(): %s; parent.env(E): %s"

#~ msgid "duplicated slot names: %s"
#~ msgstr "dubliuoti lauko pavadinimai: %s"

#~ msgid "move the file or remove the class/method"
#~ msgstr "perkelti failą ar pašalinti klasę/metodą"
