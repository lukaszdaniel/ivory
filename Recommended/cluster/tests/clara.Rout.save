
Ivory Under development (unstable) (2019-04-04 r1101) -- "Internationalized Version of R"
Copyright (C) 2013-2019 Lukasz Daniel (lukasz.daniel@gmail.com)
See README-IVORY file for details.

R Under development (unstable) (2019-04-04 r76312) -- "Unsuffered Consequences"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

Ivory is not part of the R project, so please do not report bugs
via r-bugs or the R website - instead refer to the author.

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(cluster)
> 
> ## generate 1500 objects, divided into 2 clusters.
> set.seed(144)
> x <- rbind(cbind(rnorm(700, 0,8), rnorm(700, 0,8)),
+            cbind(rnorm(800,50,8), rnorm(800,10,8)))
> 
> isEq <- function(x,y, epsF = 100)
+     is.logical(r <- all.equal(x,y, tol = epsF * .Machine$double.eps)) && r
> 
> .proctime00 <- proc.time()
> 
> ## full size sample {should be = pam()}:
> n0 <- length(iSml <- c(1:70, 701:720))
> summary(clara0 <- clara(x[iSml,], k = 2, sampsize = n0))
Object of class 'clara' from call:
clara(x = x[iSml, ], k = 2, sampsize = n0)
Medoids:
          [,1]      [,2]
[1,] -1.499522 -1.944452
[2,] 48.629631 12.998515
Objective function:	10.23588
Numerical information per cluster:
     size max_diss  av_diss isolation
[1,]   70 24.81995 10.25745 0.4744879
[2,]   20 19.07782 10.16040 0.3647145
Average silhouette width per cluster:
[1] 0.7144587 0.7090915
Average silhouette width of best sample: 0.713266

 Best sample: 
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
[51] 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75
[76] 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90
Clustering vector: 
 [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[39] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2
[77] 2 2 2 2 2 2 2 2 2 2 2 2 2 2

 Silhouette plot information for best sample: 
   cluster neighbor sil_width
45       1        2 0.8033727
60       1        2 0.8021017
55       1        2 0.8005931
66       1        2 0.8002776
58       1        2 0.7991899
11       1        2 0.7991773
41       1        2 0.7973302
26       1        2 0.7962397
63       1        2 0.7962229
13       1        2 0.7949705
67       1        2 0.7942590
54       1        2 0.7936184
17       1        2 0.7916087
16       1        2 0.7913570
39       1        2 0.7912755
6        1        2 0.7840455
34       1        2 0.7833568
49       1        2 0.7819733
9        1        2 0.7789087
23       1        2 0.7785009
32       1        2 0.7757325
22       1        2 0.7655369
61       1        2 0.7639754
12       1        2 0.7639644
5        1        2 0.7606436
18       1        2 0.7579145
56       1        2 0.7566307
3        1        2 0.7537894
24       1        2 0.7531180
50       1        2 0.7517817
48       1        2 0.7501998
25       1        2 0.7499655
59       1        2 0.7472022
19       1        2 0.7445038
65       1        2 0.7398395
28       1        2 0.7377377
38       1        2 0.7370935
7        1        2 0.7335940
40       1        2 0.7310012
14       1        2 0.7294895
62       1        2 0.7254478
70       1        2 0.7163214
4        1        2 0.7157257
21       1        2 0.7148663
64       1        2 0.7108496
2        1        2 0.7062831
15       1        2 0.7015120
52       1        2 0.6978313
37       1        2 0.6954023
31       1        2 0.6932905
33       1        2 0.6888478
10       1        2 0.6805028
20       1        2 0.6766854
43       1        2 0.6761461
8        1        2 0.6749706
27       1        2 0.6671817
35       1        2 0.6632888
68       1        2 0.6587599
30       1        2 0.6554989
36       1        2 0.6228481
53       1        2 0.6203313
57       1        2 0.6191666
42       1        2 0.6142020
47       1        2 0.6024151
1        1        2 0.5814464
69       1        2 0.5091186
46       1        2 0.4961302
44       1        2 0.4849961
29       1        2 0.4569316
51       1        2 0.4230181
81       2        1 0.7965942
71       2        1 0.7961971
85       2        1 0.7919593
74       2        1 0.7869047
82       2        1 0.7795304
78       2        1 0.7788873
79       2        1 0.7729041
72       2        1 0.7492980
88       2        1 0.7447973
87       2        1 0.7404399
76       2        1 0.7352351
77       2        1 0.7216838
86       2        1 0.7165677
84       2        1 0.6952406
73       2        1 0.6942882
83       2        1 0.6621568
80       2        1 0.6368446
90       2        1 0.5743228
75       2        1 0.5597232
89       2        1 0.4482549

4005 dissimilarities, summarized:
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.1865 11.5850 20.0580 27.8150 45.5780 85.2320 
Metric: euclidean
Number of objects: 90

Available components:
 [1] "sample"     "medoids"    "i.med"      "clustering" "objective" 
 [6] "clusinfo"   "diss"       "call"       "silinfo"    "data"      
>           pam0 <- pam  (x[iSml,], k = 2)
> stopifnot(identical(clara0$clustering, pam0$clustering)
+         , isEq(clara0$objective, unname(pam0$objective[2]))
+           )
> 
> summary(clara2 <- clara(x, 2))
Object of class 'clara' from call:
clara(x = x, k = 2)
Medoids:
          [,1]      [,2]
[1,]  2.012828 -1.896095
[2,] 51.494628 10.274769
Objective function:	10.23445
Numerical information per cluster:
     size max_diss  av_diss isolation
[1,]  700 36.84408 10.49814 0.7230478
[2,]  800 30.89896 10.00373 0.6063775
Average silhouette width per cluster:
[1] 0.7562366 0.7203254
Average silhouette width of best sample: 0.733384

 Best sample: 
 [1]   21   23   50   97  142  168  191  192  197  224  325  328  433  458  471
[16]  651  712  714  722  797  805  837  909  919  926  999 1006 1018 1019 1049
[31] 1081 1084 1132 1144 1150 1201 1207 1250 1291 1307 1330 1374 1426 1428
Clustering vector: 
   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
  [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
  [75] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [112] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [149] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [186] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [223] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [260] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [297] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [334] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [371] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [408] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [445] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [482] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [519] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [556] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [593] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [630] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [667] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2
 [704] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [741] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [778] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [815] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [852] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [889] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [926] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [963] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[1000] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[1037] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[1074] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[1111] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[1148] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[1185] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[1222] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[1259] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[1296] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[1333] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[1370] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[1407] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[1444] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[1481] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2

 Silhouette plot information for best sample: 
     cluster neighbor sil_width
325        1        2 0.8261589
191        1        2 0.8206687
23         1        2 0.8149640
97         1        2 0.8048084
433        1        2 0.8017745
458        1        2 0.8008324
471        1        2 0.7958547
328        1        2 0.7689099
142        1        2 0.7619508
21         1        2 0.7607528
197        1        2 0.7606641
50         1        2 0.7509131
192        1        2 0.7098473
651        1        2 0.7035969
224        1        2 0.6843886
168        1        2 0.5337006
1084       2        1 0.8180447
1081       2        1 0.8171686
1201       2        1 0.8170847
1291       2        1 0.8167148
1307       2        1 0.8166841
1144       2        1 0.8159947
999        2        1 0.8135303
1426       2        1 0.8023538
1049       2        1 0.8022891
1250       2        1 0.8014300
712        2        1 0.7859324
837        2        1 0.7792784
1018       2        1 0.7764837
919        2        1 0.7651939
1374       2        1 0.7648534
1428       2        1 0.7516819
1330       2        1 0.7505861
1006       2        1 0.7368113
714        2        1 0.7237565
1150       2        1 0.7046060
1132       2        1 0.6940608
909        2        1 0.6859682
926        2        1 0.6725631
722        2        1 0.6572791
797        2        1 0.6395698
1019       2        1 0.6083662
805        2        1 0.2814164
1207       2        1 0.2694097

946 dissimilarities, summarized:
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.4846 12.3230 26.4990 32.2130 52.3910 77.1750 
Metric: euclidean
Number of objects: 44

Available components:
 [1] "sample"     "medoids"    "i.med"      "clustering" "objective" 
 [6] "clusinfo"   "diss"       "call"       "silinfo"    "data"      
> 
> clInd <- c("objective", "i.med", "medoids", "clusinfo")
> clInS <- c(clInd, "sample")
> ## clara() {as original code} always draws the *same* random samples !!!!
> clara(x, 2, samples = 50)[clInd]
$objective
[1] 10.06735

$i.med
[1]  177 1115

$medoids
           [,1]      [,2]
[1,] -0.2538744 -1.209148
[2,] 50.0372683  9.501125

$clusinfo
     size max_diss   av_diss isolation
[1,]  700 34.67208 10.193945 0.6743054
[2,]  800 29.51964  9.956571 0.5741003

> for(i in 1:20)
+     print(clara(x[sample(nrow(x)),], 2, samples = 50)[clInd])
$objective
[1] 10.05704

$i.med
[1] 1294 1496

$medoids
           [,1]       [,2]
[1,] 50.5455985  9.3904972
[2,] -0.3292826 -0.2398794

$clusinfo
     size max_diss   av_diss isolation
[1,]  800 29.66384  9.964205 0.5729004
[2,]  700 33.98451 10.163128 0.6563459

$objective
[1] 10.06296

$i.med
[1]  681 1365

$medoids
           [,1]      [,2]
[1,] 50.5809098  9.741839
[2,]  0.1201723 -1.000241

$clusinfo
     size max_diss   av_diss isolation
[1,]  800 29.98892  9.949013 0.5812769
[2,]  700 34.81873 10.193194 0.6748933

$objective
[1] 10.05499

$i.med
[1] 286 999

$medoids
           [,1]       [,2]
[1,] 50.0372683  9.5011249
[2,] -0.2092816 -0.5916053

$clusinfo
     size max_diss   av_diss isolation
[1,]  800 29.51964  9.956571 0.5759911
[2,]  700 34.30301 10.167473 0.6693249

$objective
[1] 10.07504

$i.med
[1]  75 218

$medoids
           [,1]       [,2]
[1,] 51.4076040 10.1122947
[2,] -0.2092816 -0.5916053

$clusinfo
     size max_diss   av_diss isolation
[1,]  800 30.71470  9.994162 0.5826553
[2,]  700 34.30301 10.167473 0.6507252

$objective
[1] 10.05727

$i.med
[1]  502 1226

$medoids
            [,1]         [,2]
[1,] 50.03726827  9.501124850
[2,] -0.03900399 -0.009078886

$clusinfo
     size max_diss   av_diss isolation
[1,]  800 29.51964  9.956571 0.5791419
[2,]  700 34.06055 10.172348 0.6682295

$objective
[1] 10.05296

$i.med
[1] 1236  558

$medoids
           [,1]       [,2]
[1,] -0.3292826 -0.2398794
[2,] 50.0372683  9.5011249

$clusinfo
     size max_diss   av_diss isolation
[1,]  700 33.98451 10.163128 0.6624677
[2,]  800 29.51964  9.956571 0.5754330

$objective
[1] 10.06632

$i.med
[1] 741 159

$medoids
            [,1]         [,2]
[1,] -0.03900399 -0.009078886
[2,] 50.89177702 10.763432917

$clusinfo
     size max_diss   av_diss isolation
[1,]  700 34.06055 10.172348 0.6542861
[2,]  800 31.03547  9.973539 0.5961758

$objective
[1] 10.05697

$i.med
[1]  79 322

$medoids
           [,1]       [,2]
[1,] 50.5809098 9.74183863
[2,] -0.9691441 0.03342515

$clusinfo
     size max_diss   av_diss isolation
[1,]  800 29.98892  9.949013 0.5716937
[2,]  700 33.31923 10.180359 0.6351809

$objective
[1] 10.04893

$i.med
[1]  380 1085

$medoids
           [,1]       [,2]
[1,] -0.3292826 -0.2398794
[2,] 50.5809098  9.7418386

$clusinfo
     size max_diss   av_diss isolation
[1,]  700 33.98451 10.163128 0.6550663
[2,]  800 29.98892  9.949013 0.5780496

$objective
[1] 10.06331

$i.med
[1]  168 1393

$medoids
           [,1]      [,2]
[1,] -0.2538744 -1.209148
[2,] 50.5809098  9.741839

$clusinfo
     size max_diss   av_diss isolation
[1,]  700 34.67208 10.193945 0.6667585
[2,]  800 29.98892  9.949013 0.5766995

$objective
[1] 10.05682

$i.med
[1]  859 1293

$medoids
           [,1]       [,2]
[1,] 50.1066826  9.3551442
[2,] -0.3292826 -0.2398794

$clusinfo
     size max_diss   av_diss isolation
[1,]  800 29.42336  9.963794 0.5731018
[2,]  700 33.98451 10.163128 0.6619430

$objective
[1] 10.09353

$i.med
[1]  382 1319

$medoids
         [,1]      [,2]
[1,] -1.09932 -1.464852
[2,] 50.89178 10.763433

$clusinfo
     size max_diss   av_diss isolation
[1,]  700 34.21170 10.230667 0.6405511
[2,]  800 31.03547  9.973539 0.5810821

$objective
[1] 10.08217

$i.med
[1] 1303  171

$medoids
           [,1]       [,2]
[1,] 50.6104437 11.0901911
[2,] -0.9493373  0.3552542

$clusinfo
     size max_diss   av_diss isolation
[1,]  800 31.19316  9.986061 0.5922888
[2,]  700 33.12704 10.191999 0.6290089

$objective
[1] 10.06055

$i.med
[1]  845 1050

$medoids
           [,1]       [,2]
[1,] 50.9444060  9.6723175
[2,] -0.2092816 -0.5916053

$clusinfo
     size max_diss   av_diss isolation
[1,]  800 30.10388  9.966988 0.5769984
[2,]  700 34.30301 10.167473 0.6574827

$objective
[1] 10.05534

$i.med
[1] 1105 1242

$medoids
           [,1]       [,2]
[1,] 50.0627056  9.4782253
[2,] -0.2092816 -0.5916053

$clusinfo
     size max_diss   av_diss isolation
[1,]  800 29.51131  9.957225 0.5755991
[2,]  700 34.30301 10.167473 0.6690581

$objective
[1] 10.06848

$i.med
[1] 1226 1367

$medoids
           [,1]       [,2]
[1,] 49.6196789 10.1718683
[2,] -0.9493373  0.3552542

$clusinfo
     size max_diss av_diss isolation
[1,]  800 29.92497  9.9604 0.5809206
[2,]  700 33.12704 10.1920 0.6430809

$objective
[1] 10.08045

$i.med
[1] 1307 1105

$medoids
         [,1]      [,2]
[1,] 50.58091  9.741839
[2,] -1.09932 -1.464852

$clusinfo
     size max_diss   av_diss isolation
[1,]  800 29.98892  9.949013 0.5670984
[2,]  700 34.21170 10.230667 0.6469522

$objective
[1] 10.06305

$i.med
[1] 931 562

$medoids
           [,1]        [,2]
[1,] 49.6196789 10.17186827
[2,] -0.9691441  0.03342515

$clusinfo
     size max_diss  av_diss isolation
[1,]  800 29.92497  9.96040 0.5800005
[2,]  700 33.31923 10.18036 0.6457873

$objective
[1] 10.05116

$i.med
[1] 730 703

$medoids
           [,1]       [,2]
[1,] -0.3292826 -0.2398794
[2,] 50.1502433 10.6035822

$clusinfo
     size max_diss   av_diss isolation
[1,]  700 33.98451 10.163128 0.6582187
[2,]  800 30.54975  9.953191 0.5916935

$objective
[1] 10.06305

$i.med
[1] 321 194

$medoids
           [,1]        [,2]
[1,] -0.9691441  0.03342515
[2,] 49.6196789 10.17186827

$clusinfo
     size max_diss  av_diss isolation
[1,]  700 33.31923 10.18036 0.6457873
[2,]  800 29.92497  9.96040 0.5800005

> 
> clara(x, 2, samples = 101)[clInd]
$objective
[1] 10.05727

$i.med
[1]  286 1115

$medoids
            [,1]         [,2]
[1,] -0.03900399 -0.009078886
[2,] 50.03726827  9.501124850

$clusinfo
     size max_diss   av_diss isolation
[1,]  700 34.06055 10.172348 0.6682295
[2,]  800 29.51964  9.956571 0.5791419

> clara(x, 2, samples = 149)[clInd]
$objective
[1] 10.05319

$i.med
[1]  238 1272

$medoids
           [,1]       [,2]
[1,] -0.2092816 -0.5916053
[2,] 50.1502433 10.6035822

$clusinfo
     size max_diss   av_diss isolation
[1,]  700 34.30301 10.167473 0.6649301
[2,]  800 30.54975  9.953191 0.5921768

> clara(x, 2, samples = 200)[clInd]
$objective
[1] 10.05319

$i.med
[1]  238 1272

$medoids
           [,1]       [,2]
[1,] -0.2092816 -0.5916053
[2,] 50.1502433 10.6035822

$clusinfo
     size max_diss   av_diss isolation
[1,]  700 34.30301 10.167473 0.6649301
[2,]  800 30.54975  9.953191 0.5921768

> ## Note that this last one is practically identical to the slower  pam() one
> 
> (ii <- sample(length(x), 20))
 [1] 1114  669 1007 1291  708 2801   26  650 2897 1255 2060  217  750 2853  690
[16] 2625  422 1328 1960 2435
> ## This was bogous (and lead to seg.faults); now properly gives error.
> ## but for these, now see  ./clara-NAs.R
> if(FALSE) { ##		   ~~~~~~~~~~~~~
+     x[ii] <- NA
+     try( clara(x, 2, samples = 50) )
+ }
> 
> ###-- Larger example: 2000 objects, divided into 5 clusters.
> x5 <- rbind(cbind(rnorm(400, 0,4), rnorm(400, 0,4)),
+             cbind(rnorm(400,10,8), rnorm(400,40,6)),
+             cbind(rnorm(400,30,4), rnorm(400, 0,4)),
+             cbind(rnorm(400,40,4), rnorm(400,20,2)),
+             cbind(rnorm(400,50,4), rnorm(400,50,4)))
> ## plus 1 random dimension
> x5 <- cbind(x5, rnorm(nrow(x5)))
> 
> clara(x5, 5)
Call: clara(x = x5, k = 5)
Medoids:
           [,1]       [,2]        [,3]
[1,] -0.3404642 -1.1855819  0.74659047
[2,] 12.3979999 38.4828844 -0.10581146
[3,] 51.0559865 51.8182639  0.21155514
[4,] 30.5691403  0.2934101  0.02189124
[5,] 38.7199458 18.9659963 -0.61481492
Objective function:	5.945033
Clustering vector:	 integer [1:2000] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ...
Cluster sizes:	    	400395402398405
Best sample:
 [1]   23  178  202  267  297  338  357  376  387  439  441  525  638  662  719
[16]  723  802  874  994 1038 1056 1063 1097 1215 1225 1268 1282 1346 1442 1446
[31] 1474 1496 1515 1520 1534 1585 1590 1605 1641 1680 1687 1692 1696 1742 1761
[46] 1857 1909 1951 1956 1984

Available components:
 [1] "sample"     "medoids"    "i.med"      "clustering" "objective" 
 [6] "clusinfo"   "diss"       "call"       "silinfo"    "data"      
> summary(clara(x5, 5, samples = 50))
Object of class 'clara' from call:
clara(x = x5, k = 5, samples = 50)
Medoids:
            [,1]       [,2]        [,3]
[1,]  0.07089501 -0.4094846 -0.16312191
[2,] 11.10310231 39.3849985  0.09222734
[3,] 49.11022305 50.2079863 -0.10025405
[4,] 39.68389951 18.7221728  0.56941426
[5,] 30.56914026  0.2934101  0.02189124
Objective function:	5.814432
Numerical information per cluster:
     size max_diss  av_diss isolation
[1,]  401 19.88453 5.217242 0.6518043
[2,]  395 23.99453 9.014241 0.6802909
[3,]  402 15.87621 5.269557 0.4829499
[4,]  404 18.36958 4.376828 0.8931616
[5,]  398 14.38641 5.250060 0.6994929
Average silhouette width per cluster:
[1] 0.8462156 0.6854620 0.8414587 0.6066278 0.7198008
Average silhouette width of best sample: 0.7346661

 Best sample: 
 [1]   17   83   90  198  246  338  405  439  456  475  476  494  497  696  708
[16]  778  791  889  943  996 1040 1054 1063 1126 1160 1170 1185 1186 1193 1226
[31] 1269 1342 1362 1429 1525 1549 1558 1571 1602 1609 1643 1660 1693 1730 1732
[46] 1848 1859 1890 1948 1965
Clustering vector: 
   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
  [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
  [75] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [112] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [149] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [186] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [223] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [260] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [297] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [334] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [371] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2
 [408] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [445] 2 2 2 2 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [482] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [519] 2 2 2 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [556] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [593] 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [630] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [667] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 2 2 2 2 2 2 2
 [704] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [741] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 2 2 2 2 2 2 2 2
 [778] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 5 5 5 5 5 5 5 5 5 5 5 5 5 5
 [815] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5
 [852] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5
 [889] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5
 [926] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5
 [963] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5
[1000] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5
[1037] 5 5 5 5 5 5 5 5 5 5 5 5 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5
[1074] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5
[1111] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5
[1148] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5
[1185] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4
[1222] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4
[1259] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4
[1296] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4
[1333] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4
[1370] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4
[1407] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4
[1444] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4
[1481] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4
[1518] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4
[1555] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4
[1592] 4 4 4 4 4 4 4 4 4 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
[1629] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
[1666] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
[1703] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
[1740] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
[1777] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
[1814] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
[1851] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
[1888] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
[1925] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
[1962] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
[1999] 3 3

 Silhouette plot information for best sample: 
     cluster neighbor sil_width
90         1        5 0.8868688
338        1        5 0.8856766
246        1        5 0.8769071
198        1        5 0.8587271
17         1        5 0.8273449
83         1        5 0.7417693
476        2        4 0.7424445
494        2        4 0.7413275
439        2        4 0.7299051
497        2        4 0.7163729
708        2        4 0.7065046
475        2        3 0.6574197
791        2        4 0.6443582
405        2        1 0.6441644
778        2        4 0.6392022
456        2        1 0.6329213
1730       3        4 0.8856594
1965       3        4 0.8796035
1848       3        4 0.8766979
1643       3        4 0.8740086
1890       3        4 0.8649109
1859       3        4 0.8637480
1732       3        4 0.8617796
1948       3        4 0.8358813
1609       3        4 0.8286415
1693       3        4 0.8169688
1660       3        4 0.7916877
1602       3        4 0.7179173
1525       4        5 0.7270583
1342       4        5 0.7216627
1362       4        5 0.7199706
1549       4        5 0.7120701
1429       4        5 0.6444261
1226       4        5 0.6351895
1558       4        5 0.6339144
1571       4        5 0.6021667
1269       4        5 0.4565242
696        4        2 0.2132952
1160       5        4 0.8151830
1185       5        4 0.8083377
1063       5        4 0.8078136
1193       5        4 0.8032059
1170       5        4 0.7912898
1186       5        4 0.7677289
1054       5        4 0.7366224
1126       5        4 0.7052596
889        5        4 0.6945376
996        5        4 0.6129073
1040       5        4 0.5683265
943        5        4 0.5263973

1225 dissimilarities, summarized:
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.4089 22.1910 37.2950 35.6410 48.8170 85.0370 
Metric: euclidean
Number of objects: 50

Available components:
 [1] "sample"     "medoids"    "i.med"      "clustering" "objective" 
 [6] "clusinfo"   "diss"       "call"       "silinfo"    "data"      
> ## 3 "half" samples:
> clara(x5, 5, samples = 999)
Call: clara(x = x5, k = 5, samples = 999)
Medoids:
            [,1]       [,2]        [,3]
[1,]  0.07089501 -0.4094846 -0.16312191
[2,] 10.70441738 39.7994519 -0.29690559
[3,] 50.44921017 49.8412987 -0.63698557
[4,] 39.61745083 20.1122513 -0.26181120
[5,] 29.99100549  0.3723449 -0.03282614
Objective function:	5.748217
Clustering vector:	 integer [1:2000] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ...
Cluster sizes:	    	401395402404398
Best sample:
 [1]   75   90  152  206  215  219  250  294  364  367  381  418  437  627  691
[16]  713  758  761  776  845  931  946  959  975 1080 1128 1186 1214 1236 1263
[31] 1296 1421 1426 1472 1484 1587 1598 1634 1649 1679 1732 1734 1751 1772 1778
[46] 1838 1848 1886 1942 1974

Available components:
 [1] "sample"     "medoids"    "i.med"      "clustering" "objective" 
 [6] "clusinfo"   "diss"       "call"       "silinfo"    "data"      
> clara(x5, 5, samples = 1000)
Call: clara(x = x5, k = 5, samples = 1000)
Medoids:
            [,1]       [,2]        [,3]
[1,]  0.07089501 -0.4094846 -0.16312191
[2,] 10.70441738 39.7994519 -0.29690559
[3,] 50.44921017 49.8412987 -0.63698557
[4,] 39.61745083 20.1122513 -0.26181120
[5,] 29.99100549  0.3723449 -0.03282614
Objective function:	5.748217
Clustering vector:	 integer [1:2000] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ...
Cluster sizes:	    	401395402404398
Best sample:
 [1]   75   90  152  206  215  219  250  294  364  367  381  418  437  627  691
[16]  713  758  761  776  845  931  946  959  975 1080 1128 1186 1214 1236 1263
[31] 1296 1421 1426 1472 1484 1587 1598 1634 1649 1679 1732 1734 1751 1772 1778
[46] 1838 1848 1886 1942 1974

Available components:
 [1] "sample"     "medoids"    "i.med"      "clustering" "objective" 
 [6] "clusinfo"   "diss"       "call"       "silinfo"    "data"      
> clara(x5, 5, samples = 1001)
Call: clara(x = x5, k = 5, samples = 1001)
Medoids:
            [,1]       [,2]        [,3]
[1,]  0.07089501 -0.4094846 -0.16312191
[2,] 10.70441738 39.7994519 -0.29690559
[3,] 50.44921017 49.8412987 -0.63698557
[4,] 39.61745083 20.1122513 -0.26181120
[5,] 29.99100549  0.3723449 -0.03282614
Objective function:	5.748217
Clustering vector:	 integer [1:2000] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ...
Cluster sizes:	    	401395402404398
Best sample:
 [1]   75   90  152  206  215  219  250  294  364  367  381  418  437  627  691
[16]  713  758  761  776  845  931  946  959  975 1080 1128 1186 1214 1236 1263
[31] 1296 1421 1426 1472 1484 1587 1598 1634 1649 1679 1732 1734 1751 1772 1778
[46] 1838 1848 1886 1942 1974

Available components:
 [1] "sample"     "medoids"    "i.med"      "clustering" "objective" 
 [6] "clusinfo"   "diss"       "call"       "silinfo"    "data"      
> 
> clara(x5, 5, samples = 2000)#full sample
Call: clara(x = x5, k = 5, samples = 2000)
Medoids:
            [,1]       [,2]       [,3]
[1,]  0.07089501 -0.4094846 -0.1631219
[2,] 10.70441738 39.7994519 -0.2969056
[3,] 50.08052648 50.2393488  0.2599335
[4,] 29.31069922 -0.2998859 -0.1097580
[5,] 39.61745083 20.1122513 -0.2618112
Objective function:	5.737184
Clustering vector:	 integer [1:2000] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ...
Cluster sizes:	    	400395402399404
Best sample:
 [1]   90   99  110  112  137  188  213  253  389  503  525  552  581  585  618
[16]  653  687  726  776  818  865  876  887  966  983 1002 1044 1067 1076 1090
[31] 1129 1160 1214 1220 1235 1259 1297 1472 1475 1670 1697 1723 1757 1773 1805
[46] 1848 1932 1957 1964 1971

Available components:
 [1] "sample"     "medoids"    "i.med"      "clustering" "objective" 
 [6] "clusinfo"   "diss"       "call"       "silinfo"    "data"      
> 
> ###--- Start a version of  example(clara) -------
> 
> ## xclara : artificial data with 3 clusters of 1000 bivariate objects each.
> data(xclara)
> (clx3 <- clara(xclara, 3))
Call: clara(x = xclara, k = 3)
Medoids:
            V1        V2
[1,]  5.553391 13.306260
[2,] 43.198760 60.360720
[3,] 74.591890 -6.969018
Objective function:	13.225
Clustering vector:	 integer [1:3000] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ...
Cluster sizes:	    	9001148952
Best sample:
 [1]   20   30   46   91   92  169  179  187  209  223  382  450  555  971 1004
[16] 1025 1058 1277 1281 1302 1319 1361 1362 1513 1591 1623 1628 1729 1752 1791
[31] 1907 1917 1946 2064 2089 2498 2527 2537 2545 2591 2672 2722 2729 2790 2797
[46] 2852

Available components:
 [1] "sample"     "medoids"    "i.med"      "clustering" "objective" 
 [6] "clusinfo"   "diss"       "call"       "silinfo"    "data"      
> ## Plot similar to Figure 5 in Struyf et al (1996)
> plot(clx3)
> 
> ## The  rngR = TRUE case is currently in the non-strict tests
> ## ./clara-ex.R
> ## ~~~~~~~~~~~~
> 
> ###--- End version of example(clara) -------
> 
> ##  small example(s):
> data(ruspini)
> 
> clara(ruspini,4)
Call: clara(x = ruspini, k = 4)
Medoids:
    x   y
10 19  65
32 44 149
52 99 119
67 66  18
Objective function:	11.51066
Clustering vector:	 Named integer [1:75] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ...
 - attr(*, "names")= character [1:75] "1" "2" "3" "4" "5" "6" "7" ...
Cluster sizes:	    	20231715
Best sample:
 [1] 2  3  4  5  6  7  8  9  10 16 18 19 20 21 22 23 25 29 30 32 34 35 36 37 41
[26] 42 43 44 46 47 49 50 52 53 54 58 59 60 61 63 65 66 67 69 71 72 73 75

Available components:
 [1] "sample"     "medoids"    "i.med"      "clustering" "objective" 
 [6] "clusinfo"   "diss"       "call"       "silinfo"    "data"      
> 
> rus <- data.matrix(ruspini); storage.mode(rus) <- "double"
> ru2 <- rus[c(1:7,21:28, 45:51, 61:69),]
> ru3 <- rus[c(1:4,21:25, 45:48, 61:63),]
> ru4 <- rus[c(1:2,21:22, 45:47),]
> ru5 <- rus[c(1:2,21,    45),]
> daisy(ru5, "manhattan")
Dissimilarities:
     1   2  21
2   11        
21 118 107    
45 143 132  89

Metric: manhattan
Number of objects: 4
> ## Dissimilarities :  11 118 143 107 132  89
> 
> ## no problem anymore, since 2002-12-28:
> ## sampsize >= k+1 is now enforced:
> ## clara(ru5, k=3, met="manhattan", sampsize=3,trace=2)[clInS]
> clara(ru5, k=3, met="manhattan", sampsize=4,trace=1)[clInS]
C clara(): (nsam,nran,n) = (4,5,4); 'full_sample',
C clara(): sample 1 C clara(): best sample _found_  --> dysta2(nbest), resul(), end
$objective
[1] 2.75

$i.med
[1] 2 3 4

$medoids
    x   y
2   5  63
21 28 147
45 85 115

$clusinfo
     size max_diss av_diss isolation
[1,]    2       11     5.5 0.1028037
[2,]    1        0     0.0 0.0000000
[3,]    1        0     0.0 0.0000000

$sample
[1] "1"  "2"  "21" "45"

> 
> daisy(ru4, "manhattan")
Dissimilarities:
     1   2  21  22  45  46
2   11                    
21 118 107                
22 124 113   6            
45 143 132  89  87        
46 124 113 108 106  19    
47 115 104 103 101  28   9

Metric: manhattan
Number of objects: 7
> ## this one (k=3) gave problems, from ss = 6 on ___ still after 2002-12-28 ___ :
> for(ss in 4:nrow(ru4)){
+     cat("---\n\nsample size = ",ss,"\n")
+     print(clara(ru4,k=3,met="manhattan",sampsize=ss)[clInS])
+ }
---

sample size =  4 
$objective
[1] 7.714286

$i.med
[1] 1 4 7

$medoids
    x   y
1   4  53
22 32 149
47 78  94

$clusinfo
     size max_diss  av_diss  isolation
[1,]    2       11  5.50000 0.09565217
[2,]    2        6  3.00000 0.05940594
[3,]    3       28 12.33333 0.27722772

$sample
[1] "1"  "22" "45" "47"

---

sample size =  5 
$objective
[1] 7.714286

$i.med
[1] 2 3 7

$medoids
    x   y
2   5  63
21 28 147
47 78  94

$clusinfo
     size max_diss  av_diss  isolation
[1,]    2       11  5.50000 0.10576923
[2,]    2        6  3.00000 0.05825243
[3,]    3       28 12.33333 0.27184466

$sample
[1] "2"  "21" "22" "45" "47"

---

sample size =  6 
$objective
[1] 6.428571

$i.med
[1] 2 4 6

$medoids
    x   y
2   5  63
22 32 149
46 85  96

$clusinfo
     size max_diss  av_diss  isolation
[1,]    2       11 5.500000 0.09734513
[2,]    2        6 3.000000 0.05660377
[3,]    3       19 9.333333 0.17924528

$sample
[1] "2"  "21" "22" "45" "46" "47"

---

sample size =  7 
$objective
[1] 6.428571

$i.med
[1] 2 4 6

$medoids
    x   y
2   5  63
22 32 149
46 85  96

$clusinfo
     size max_diss  av_diss  isolation
[1,]    2       11 5.500000 0.09734513
[2,]    2        6 3.000000 0.05660377
[3,]    3       19 9.333333 0.17924528

$sample
[1] "1"  "2"  "21" "22" "45" "46" "47"

> for(ss in 5:nrow(ru3)){
+     cat("---\n\nsample size = ",ss,"\n")
+     print(clara(ru3,k=4,met="manhattan",sampsize=ss)[clInS])
+ }
---

sample size =  5 
$objective
[1] 13.625

$i.med
[1]  4  5 10 15

$medoids
    x   y
4   9  77
21 28 147
45 85 115
62 77  12

$clusinfo
     size max_diss av_diss isolation
[1,]    4       29   16.50 0.3258427
[2,]    5       14    9.00 0.1573034
[3,]    4       30   19.25 0.3370787
[4,]    3       15   10.00 0.1351351

$sample
[1] "3"  "4"  "21" "45" "62"

---

sample size =  6 
$objective
[1] 9.0625

$i.med
[1]  3  7 13 15

$medoids
    x   y
3  10  59
23 35 153
48 74  96
62 77  12

$clusinfo
     size max_diss av_diss isolation
[1,]    4       19   10.00 0.1881188
[2,]    5       13    5.60 0.1354167
[3,]    4       30   11.75 0.3448276
[4,]    3       15   10.00 0.1724138

$sample
[1] "3"  "21" "23" "45" "48" "62"

---

sample size =  7 
$objective
[1] 9.0625

$i.med
[1]  3  7 13 15

$medoids
    x   y
3  10  59
23 35 153
48 74  96
62 77  12

$clusinfo
     size max_diss av_diss isolation
[1,]    4       19   10.00 0.1881188
[2,]    5       13    5.60 0.1354167
[3,]    4       30   11.75 0.3448276
[4,]    3       15   10.00 0.1724138

$sample
[1] "2"  "3"  "21" "23" "45" "48" "62"

---

sample size =  8 
$objective
[1] 8.8125

$i.med
[1]  3  7 12 15

$medoids
    x   y
3  10  59
23 35 153
47 78  94
62 77  12

$clusinfo
     size max_diss av_diss isolation
[1,]    4       19   10.00 0.1844660
[2,]    5       13    5.60 0.1274510
[3,]    4       28   10.75 0.3373494
[4,]    3       15   10.00 0.1807229

$sample
[1] "3"  "21" "23" "46" "47" "48" "61" "62"

---

sample size =  9 
$objective
[1] 9.3125

$i.med
[1]  2  6 11 16

$medoids
    x   y
2   5  63
22 32 149
46 85  96
63 83  21

$clusinfo
     size max_diss av_diss isolation
[1,]    4       18    9.50 0.1592920
[2,]    5        8    5.40 0.0754717
[3,]    4       19    9.75 0.2467532
[4,]    3       30   15.00 0.3896104

$sample
[1] "2"  "21" "22" "23" "45" "46" "47" "61" "63"

---

sample size =  10 
$objective
[1] 8.5625

$i.med
[1]  3  7 11 15

$medoids
    x   y
3  10  59
23 35 153
46 85  96
62 77  12

$clusinfo
     size max_diss av_diss isolation
[1,]    4       19   10.00 0.1696429
[2,]    5       13    5.60 0.1214953
[3,]    4       19    9.75 0.2065217
[4,]    3       15   10.00 0.1630435

$sample
 [1] "2"  "3"  "22" "23" "45" "46" "47" "61" "62" "63"

---

sample size =  11 
$objective
[1] 8.6875

$i.med
[1]  2  7 12 15

$medoids
    x   y
2   5  63
23 35 153
47 78  94
62 77  12

$clusinfo
     size max_diss av_diss isolation
[1,]    4       18    9.50 0.1730769
[2,]    5       13    5.60 0.1274510
[3,]    4       28   10.75 0.3373494
[4,]    3       15   10.00 0.1807229

$sample
 [1] "1"  "2"  "3"  "4"  "23" "24" "25" "45" "47" "48" "62"

---

sample size =  12 
$objective
[1] 8.8125

$i.med
[1]  3  7 12 15

$medoids
    x   y
3  10  59
23 35 153
47 78  94
62 77  12

$clusinfo
     size max_diss av_diss isolation
[1,]    4       19   10.00 0.1844660
[2,]    5       13    5.60 0.1274510
[3,]    4       28   10.75 0.3373494
[4,]    3       15   10.00 0.1807229

$sample
 [1] "2"  "3"  "22" "23" "24" "25" "46" "47" "48" "61" "62" "63"

---

sample size =  13 
$objective
[1] 8.4375

$i.med
[1]  2  7 11 15

$medoids
    x   y
2   5  63
23 35 153
46 85  96
62 77  12

$clusinfo
     size max_diss av_diss isolation
[1,]    4       18    9.50 0.1592920
[2,]    5       13    5.60 0.1214953
[3,]    4       19    9.75 0.2065217
[4,]    3       15   10.00 0.1630435

$sample
 [1] "1"  "2"  "4"  "22" "23" "24" "25" "45" "46" "47" "61" "62" "63"

---

sample size =  14 
$objective
[1] 8.4375

$i.med
[1]  2  7 11 15

$medoids
    x   y
2   5  63
23 35 153
46 85  96
62 77  12

$clusinfo
     size max_diss av_diss isolation
[1,]    4       18    9.50 0.1592920
[2,]    5       13    5.60 0.1214953
[3,]    4       19    9.75 0.2065217
[4,]    3       15   10.00 0.1630435

$sample
 [1] "2"  "3"  "4"  "22" "23" "24" "25" "45" "46" "47" "48" "61" "62" "63"

---

sample size =  15 
$objective
[1] 8.375

$i.med
[1]  2  6 11 15

$medoids
    x   y
2   5  63
22 32 149
46 85  96
62 77  12

$clusinfo
     size max_diss av_diss isolation
[1,]    4       18    9.50 0.1592920
[2,]    5        8    5.40 0.0754717
[3,]    4       19    9.75 0.2065217
[4,]    3       15   10.00 0.1630435

$sample
 [1] "2"  "3"  "4"  "21" "22" "23" "24" "25" "45" "46" "47" "48" "61" "62" "63"

---

sample size =  16 
$objective
[1] 8.375

$i.med
[1]  2  6 11 15

$medoids
    x   y
2   5  63
22 32 149
46 85  96
62 77  12

$clusinfo
     size max_diss av_diss isolation
[1,]    4       18    9.50 0.1592920
[2,]    5        8    5.40 0.0754717
[3,]    4       19    9.75 0.2065217
[4,]    3       15   10.00 0.1630435

$sample
 [1] "1"  "2"  "3"  "4"  "21" "22" "23" "24" "25" "45" "46" "47" "48" "61" "62"
[16] "63"

> 
> ## Last Line:
> cat('Time elapsed: ', proc.time() - .proctime00,'\n')
Time elapsed:  1.881 0.011 1.894 0 0 
> ## Lynne (P IV, 1.6 GHz): 18.81; then (no NA; R 1.9.0-alpha): 15.07
> ## nb-mm (P III,700 MHz): 27.97
> 
> proc.time()
   user  system elapsed 
  1.998   0.023   2.015 
