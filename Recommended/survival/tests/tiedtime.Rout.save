
Ivory Under development (unstable) (2019-04-04 r1101) -- "Internationalized Version of R"
Copyright (C) 2013-2019 Lukasz Daniel (lukasz.daniel@gmail.com)
See README-IVORY file for details.

R Under development (unstable) (2019-04-04 r76312) -- "Unsuffered Consequences"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

Ivory is not part of the R project, so please do not report bugs
via r-bugs or the R website - instead refer to the author.

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(survival)
> 
> #
> # The survival code was failing for certain data sets when called as
> #    survfit(Surv(time2-time1, status) ~ ......
> # The issue was how tied floating point numbers are handled, and the
> #    fact that unique(x), factor(x) and tapply(x) are not guarranteed to
> #    all be the same.  
> # This test fails in survival 2.36-5, fixed in 2.36-6.  Data sets that
> #    can cause it are few and far between.
> #
> 
> load('ties.rda')
> x <- time2 -time1
> 
> #  Here is the heart of the old problem
> #       length(unique(x))== length(table(x))
> #  And the prior fix which worked ALMOST always
> #       x <- round(x, 15)
> #       length(unique(round(x,15)))== length(table(round(x,15)))
> 
> fit1 <- survfit(Surv(x) ~1)
> length(fit1$time) == length(fit1$surv)
[1] TRUE
> 
> 
> # a second test, once "rounding.R"
> 
> tdata <- data.frame(time=c(1,2, sqrt(2)^2, 2, sqrt(2)^2),
+                     status=rep(1,5), 
+                     group=c(1,1,1,2,2))
> fit <- survfit(Surv(time, status) ~ group, data=tdata)
> 
> all.equal(sum(fit$strata), length(fit$time))
[1] TRUE
> 
> proc.time()
   user  system elapsed 
  0.781   0.027   0.803 
